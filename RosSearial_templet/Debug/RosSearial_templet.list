
RosSearial_templet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000756c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  0800767c  0800767c  0001767c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007930  08007930  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  08007930  08007930  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007930  08007930  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007930  08007930  00017930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007938  08007938  00017938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800793c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024ec  200000b8  080079f4  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200025a4  080079f4  000225a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e203  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003dc7  00000000  00000000  0003e2e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001660  00000000  00000000  000420b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014e0  00000000  00000000  00043710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005724  00000000  00000000  00044bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001273e  00000000  00000000  0004a314  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099779  00000000  00000000  0005ca52  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f61cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006128  00000000  00000000  000f6248  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b8 	.word	0x200000b8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007664 	.word	0x08007664

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000bc 	.word	0x200000bc
 800014c:	08007664 	.word	0x08007664

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f002 f9c6 	bl	80024f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f820 	bl	80001ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f8e4 	bl	8000338 <MX_GPIO_Init>
  MX_DMA_Init();
 8000170:	f000 f8b4 	bl	80002dc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000174:	f000 f856 	bl	8000224 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000178:	f000 f87e 	bl	8000278 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  xl480_int(&huart3);
 800017c:	4807      	ldr	r0, [pc, #28]	; (800019c <main+0x3c>)
 800017e:	f002 f95b 	bl	8002438 <xl480_int>
  //HAL_HalfDuplex_EnableReceiver(&huart3);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000182:	f004 fc4f 	bl	8004a24 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000186:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <main+0x40>)
 8000188:	2100      	movs	r1, #0
 800018a:	4806      	ldr	r0, [pc, #24]	; (80001a4 <main+0x44>)
 800018c:	f004 fcb0 	bl	8004af0 <osThreadNew>
 8000190:	4602      	mov	r2, r0
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <main+0x48>)
 8000194:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000196:	f004 fc77 	bl	8004a88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800019a:	e7fe      	b.n	800019a <main+0x3a>
 800019c:	2000238c 	.word	0x2000238c
 80001a0:	08007820 	.word	0x08007820
 80001a4:	080003e9 	.word	0x080003e9
 80001a8:	20002344 	.word	0x20002344

080001ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b090      	sub	sp, #64	; 0x40
 80001b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	2228      	movs	r2, #40	; 0x28
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f007 f917 	bl	80073ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]
 80001cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d2:	2301      	movs	r3, #1
 80001d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d6:	2310      	movs	r3, #16
 80001d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001da:	2300      	movs	r3, #0
 80001dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001de:	f107 0318 	add.w	r3, r7, #24
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 fec2 	bl	8002f6c <HAL_RCC_OscConfig>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001ee:	f000 f923 	bl	8000438 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f2:	230f      	movs	r3, #15
 80001f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f003 f92e 	bl	800346c <HAL_RCC_ClockConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000216:	f000 f90f 	bl	8000438 <Error_Handler>
  }
}
 800021a:	bf00      	nop
 800021c:	3740      	adds	r7, #64	; 0x40
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000228:	4b11      	ldr	r3, [pc, #68]	; (8000270 <MX_USART1_UART_Init+0x4c>)
 800022a:	4a12      	ldr	r2, [pc, #72]	; (8000274 <MX_USART1_UART_Init+0x50>)
 800022c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800022e:	4b10      	ldr	r3, [pc, #64]	; (8000270 <MX_USART1_UART_Init+0x4c>)
 8000230:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000236:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <MX_USART1_UART_Init+0x4c>)
 8000238:	2200      	movs	r2, #0
 800023a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800023c:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <MX_USART1_UART_Init+0x4c>)
 800023e:	2200      	movs	r2, #0
 8000240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000242:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <MX_USART1_UART_Init+0x4c>)
 8000244:	2200      	movs	r2, #0
 8000246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000248:	4b09      	ldr	r3, [pc, #36]	; (8000270 <MX_USART1_UART_Init+0x4c>)
 800024a:	220c      	movs	r2, #12
 800024c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800024e:	4b08      	ldr	r3, [pc, #32]	; (8000270 <MX_USART1_UART_Init+0x4c>)
 8000250:	2200      	movs	r2, #0
 8000252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000254:	4b06      	ldr	r3, [pc, #24]	; (8000270 <MX_USART1_UART_Init+0x4c>)
 8000256:	2200      	movs	r2, #0
 8000258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800025a:	4805      	ldr	r0, [pc, #20]	; (8000270 <MX_USART1_UART_Init+0x4c>)
 800025c:	f003 fd1c 	bl	8003c98 <HAL_UART_Init>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000266:	f000 f8e7 	bl	8000438 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	200024d4 	.word	0x200024d4
 8000274:	40013800 	.word	0x40013800

08000278 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800027c:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <MX_USART3_UART_Init+0x5c>)
 800027e:	4a16      	ldr	r2, [pc, #88]	; (80002d8 <MX_USART3_UART_Init+0x60>)
 8000280:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57200;
 8000282:	4b14      	ldr	r3, [pc, #80]	; (80002d4 <MX_USART3_UART_Init+0x5c>)
 8000284:	f64d 7270 	movw	r2, #57200	; 0xdf70
 8000288:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800028a:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <MX_USART3_UART_Init+0x5c>)
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000290:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <MX_USART3_UART_Init+0x5c>)
 8000292:	2200      	movs	r2, #0
 8000294:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000296:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <MX_USART3_UART_Init+0x5c>)
 8000298:	2200      	movs	r2, #0
 800029a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800029c:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <MX_USART3_UART_Init+0x5c>)
 800029e:	220c      	movs	r2, #12
 80002a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002a2:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <MX_USART3_UART_Init+0x5c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80002a8:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <MX_USART3_UART_Init+0x5c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 80002ae:	4809      	ldr	r0, [pc, #36]	; (80002d4 <MX_USART3_UART_Init+0x5c>)
 80002b0:	f003 fd3f 	bl	8003d32 <HAL_HalfDuplex_Init>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80002ba:	f000 f8bd 	bl	8000438 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 80002be:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <MX_USART3_UART_Init+0x5c>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	68da      	ldr	r2, [r3, #12]
 80002c4:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <MX_USART3_UART_Init+0x5c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f042 0210 	orr.w	r2, r2, #16
 80002cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART3_Init 2 */

}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	2000238c 	.word	0x2000238c
 80002d8:	40004800 	.word	0x40004800

080002dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002e2:	4b14      	ldr	r3, [pc, #80]	; (8000334 <MX_DMA_Init+0x58>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	4a13      	ldr	r2, [pc, #76]	; (8000334 <MX_DMA_Init+0x58>)
 80002e8:	f043 0301 	orr.w	r3, r3, #1
 80002ec:	6153      	str	r3, [r2, #20]
 80002ee:	4b11      	ldr	r3, [pc, #68]	; (8000334 <MX_DMA_Init+0x58>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f003 0301 	and.w	r3, r3, #1
 80002f6:	607b      	str	r3, [r7, #4]
 80002f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2105      	movs	r1, #5
 80002fe:	200d      	movs	r0, #13
 8000300:	f002 f9df 	bl	80026c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000304:	200d      	movs	r0, #13
 8000306:	f002 f9f8 	bl	80026fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800030a:	2200      	movs	r2, #0
 800030c:	2105      	movs	r1, #5
 800030e:	200e      	movs	r0, #14
 8000310:	f002 f9d7 	bl	80026c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000314:	200e      	movs	r0, #14
 8000316:	f002 f9f0 	bl	80026fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800031a:	2200      	movs	r2, #0
 800031c:	2105      	movs	r1, #5
 800031e:	200f      	movs	r0, #15
 8000320:	f002 f9cf 	bl	80026c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000324:	200f      	movs	r0, #15
 8000326:	f002 f9e8 	bl	80026fa <HAL_NVIC_EnableIRQ>

}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40021000 	.word	0x40021000

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034c:	4b24      	ldr	r3, [pc, #144]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a23      	ldr	r2, [pc, #140]	; (80003e0 <MX_GPIO_Init+0xa8>)
 8000352:	f043 0310 	orr.w	r3, r3, #16
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b21      	ldr	r3, [pc, #132]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0310 	and.w	r3, r3, #16
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000364:	4b1e      	ldr	r3, [pc, #120]	; (80003e0 <MX_GPIO_Init+0xa8>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a1d      	ldr	r2, [pc, #116]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800036a:	f043 0320 	orr.w	r3, r3, #32
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b1b      	ldr	r3, [pc, #108]	; (80003e0 <MX_GPIO_Init+0xa8>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0320 	and.w	r3, r3, #32
 8000378:	60bb      	str	r3, [r7, #8]
 800037a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800037c:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a17      	ldr	r2, [pc, #92]	; (80003e0 <MX_GPIO_Init+0xa8>)
 8000382:	f043 0308 	orr.w	r3, r3, #8
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0308 	and.w	r3, r3, #8
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000394:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <MX_GPIO_Init+0xa8>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a11      	ldr	r2, [pc, #68]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800039a:	f043 0304 	orr.w	r3, r3, #4
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_GPIO_Init+0xa8>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0304 	and.w	r3, r3, #4
 80003a8:	603b      	str	r3, [r7, #0]
 80003aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b2:	480c      	ldr	r0, [pc, #48]	; (80003e4 <MX_GPIO_Init+0xac>)
 80003b4:	f002 fda8 	bl	8002f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003be:	2301      	movs	r3, #1
 80003c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c6:	2302      	movs	r3, #2
 80003c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	4619      	mov	r1, r3
 80003d0:	4804      	ldr	r0, [pc, #16]	; (80003e4 <MX_GPIO_Init+0xac>)
 80003d2:	f002 fc3f 	bl	8002c54 <HAL_GPIO_Init>

}
 80003d6:	bf00      	nop
 80003d8:	3720      	adds	r7, #32
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40011000 	.word	0x40011000

080003e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80003f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f4:	4805      	ldr	r0, [pc, #20]	; (800040c <StartDefaultTask+0x24>)
 80003f6:	f002 fd9f 	bl	8002f38 <HAL_GPIO_TogglePin>

	 // HAL_HalfDuplex_EnableTransmitter(&huart3);
	 // HAL_UART_Transmit(&huart3, tx_buffer, 10, 100);
	 // HAL_HalfDuplex_EnableReceiver(&huart3);
	  xl480_writebuffer(tx_buffer);
 80003fa:	4805      	ldr	r0, [pc, #20]	; (8000410 <StartDefaultTask+0x28>)
 80003fc:	f002 f83e 	bl	800247c <xl480_writebuffer>

	  //loop();

    osDelay(500);
 8000400:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000404:	f004 fc1e 	bl	8004c44 <osDelay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000408:	e7f2      	b.n	80003f0 <StartDefaultTask+0x8>
 800040a:	bf00      	nop
 800040c:	40011000 	.word	0x40011000
 8000410:	20000000 	.word	0x20000000

08000414 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a04      	ldr	r2, [pc, #16]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d101      	bne.n	800042a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000426:	f002 f87b 	bl	8002520 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40012c00 	.word	0x40012c00

08000438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800043c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800043e:	e7fe      	b.n	800043e <Error_Handler+0x6>

08000440 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	2200      	movs	r2, #0
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4618      	mov	r0, r3
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	4a04      	ldr	r2, [pc, #16]	; (800047c <_ZN3ros3MsgC1Ev+0x1c>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4618      	mov	r0, r3
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	08007908 	.word	0x08007908

08000480 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
      data()
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ffe8 	bl	8000460 <_ZN3ros3MsgC1Ev>
 8000490:	4a06      	ldr	r2, [pc, #24]	; (80004ac <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	3304      	adds	r3, #4
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff ffd0 	bl	8000440 <_ZN3ros4TimeC1Ev>
    {
    }
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4618      	mov	r0, r3
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	080078f0 	.word	0x080078f0

080004b0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	6859      	ldr	r1, [r3, #4]
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	683a      	ldr	r2, [r7, #0]
 80004c6:	4413      	add	r3, r2
 80004c8:	b2ca      	uxtb	r2, r1
 80004ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	0a19      	lsrs	r1, r3, #8
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	3301      	adds	r3, #1
 80004d6:	683a      	ldr	r2, [r7, #0]
 80004d8:	4413      	add	r3, r2
 80004da:	b2ca      	uxtb	r2, r1
 80004dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	0c19      	lsrs	r1, r3, #16
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	3302      	adds	r3, #2
 80004e8:	683a      	ldr	r2, [r7, #0]
 80004ea:	4413      	add	r3, r2
 80004ec:	b2ca      	uxtb	r2, r1
 80004ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	0e19      	lsrs	r1, r3, #24
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	3303      	adds	r3, #3
 80004fa:	683a      	ldr	r2, [r7, #0]
 80004fc:	4413      	add	r3, r2
 80004fe:	b2ca      	uxtb	r2, r1
 8000500:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	3304      	adds	r3, #4
 8000506:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6899      	ldr	r1, [r3, #8]
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	683a      	ldr	r2, [r7, #0]
 8000510:	4413      	add	r3, r2
 8000512:	b2ca      	uxtb	r2, r1
 8000514:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	0a19      	lsrs	r1, r3, #8
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	3301      	adds	r3, #1
 8000520:	683a      	ldr	r2, [r7, #0]
 8000522:	4413      	add	r3, r2
 8000524:	b2ca      	uxtb	r2, r1
 8000526:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	0c19      	lsrs	r1, r3, #16
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	3302      	adds	r3, #2
 8000532:	683a      	ldr	r2, [r7, #0]
 8000534:	4413      	add	r3, r2
 8000536:	b2ca      	uxtb	r2, r1
 8000538:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	0e19      	lsrs	r1, r3, #24
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3303      	adds	r3, #3
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	4413      	add	r3, r2
 8000548:	b2ca      	uxtb	r2, r1
 800054a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	3304      	adds	r3, #4
 8000550:	60fb      	str	r3, [r7, #12]
      return offset;
 8000552:	68fb      	ldr	r3, [r7, #12]
    }
 8000554:	4618      	mov	r0, r3
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800055e:	b480      	push	{r7}
 8000560:	b085      	sub	sp, #20
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	4413      	add	r3, r2
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	685a      	ldr	r2, [r3, #4]
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	3301      	adds	r3, #1
 8000582:	6839      	ldr	r1, [r7, #0]
 8000584:	440b      	add	r3, r1
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	021b      	lsls	r3, r3, #8
 800058a:	431a      	orrs	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	685a      	ldr	r2, [r3, #4]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	3302      	adds	r3, #2
 8000598:	6839      	ldr	r1, [r7, #0]
 800059a:	440b      	add	r3, r1
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	041b      	lsls	r3, r3, #16
 80005a0:	431a      	orrs	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	685a      	ldr	r2, [r3, #4]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	3303      	adds	r3, #3
 80005ae:	6839      	ldr	r1, [r7, #0]
 80005b0:	440b      	add	r3, r1
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	061b      	lsls	r3, r3, #24
 80005b6:	431a      	orrs	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	3304      	adds	r3, #4
 80005c0:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	689a      	ldr	r2, [r3, #8]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	3301      	adds	r3, #1
 80005d8:	6839      	ldr	r1, [r7, #0]
 80005da:	440b      	add	r3, r1
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	021b      	lsls	r3, r3, #8
 80005e0:	431a      	orrs	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	689a      	ldr	r2, [r3, #8]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	3302      	adds	r3, #2
 80005ee:	6839      	ldr	r1, [r7, #0]
 80005f0:	440b      	add	r3, r1
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	431a      	orrs	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	689a      	ldr	r2, [r3, #8]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	3303      	adds	r3, #3
 8000604:	6839      	ldr	r1, [r7, #0]
 8000606:	440b      	add	r3, r1
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	061b      	lsls	r3, r3, #24
 800060c:	431a      	orrs	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	3304      	adds	r3, #4
 8000616:	60fb      	str	r3, [r7, #12]
     return offset;
 8000618:	68fb      	ldr	r3, [r7, #12]
    }
 800061a:	4618      	mov	r0, r3
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	4b02      	ldr	r3, [pc, #8]	; (8000638 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	08007688 	.word	0x08007688

0800063c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	4b02      	ldr	r3, [pc, #8]	; (8000650 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	08007698 	.word	0x08007698

08000654 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff fefe 	bl	8000460 <_ZN3ros3MsgC1Ev>
 8000664:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2200      	movs	r2, #0
 800066e:	809a      	strh	r2, [r3, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a09      	ldr	r2, [pc, #36]	; (8000698 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a06      	ldr	r2, [pc, #24]	; (8000698 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000680:	611a      	str	r2, [r3, #16]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
    {
    }
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4618      	mov	r0, r3
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	080078d8 	.word	0x080078d8
 8000698:	080076bc 	.word	0x080076bc

0800069c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	8899      	ldrh	r1, [r3, #4]
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	683a      	ldr	r2, [r7, #0]
 80006b2:	4413      	add	r3, r2
 80006b4:	b2ca      	uxtb	r2, r1
 80006b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	889b      	ldrh	r3, [r3, #4]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	b299      	uxth	r1, r3
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	3301      	adds	r3, #1
 80006c4:	683a      	ldr	r2, [r7, #0]
 80006c6:	4413      	add	r3, r2
 80006c8:	b2ca      	uxtb	r2, r1
 80006ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	3302      	adds	r3, #2
 80006d0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fd3a 	bl	8000150 <strlen>
 80006dc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	683a      	ldr	r2, [r7, #0]
 80006e2:	4413      	add	r3, r2
 80006e4:	69b9      	ldr	r1, [r7, #24]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fed8 	bl	800149c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	3304      	adds	r3, #4
 80006f0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	683a      	ldr	r2, [r7, #0]
 80006f6:	18d0      	adds	r0, r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	69ba      	ldr	r2, [r7, #24]
 80006fe:	4619      	mov	r1, r3
 8000700:	f006 fe6a 	bl	80073d8 <memcpy>
      offset += length_topic_name;
 8000704:	69fa      	ldr	r2, [r7, #28]
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	4413      	add	r3, r2
 800070a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fd1d 	bl	8000150 <strlen>
 8000716:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	4413      	add	r3, r2
 800071e:	6979      	ldr	r1, [r7, #20]
 8000720:	4618      	mov	r0, r3
 8000722:	f000 febb 	bl	800149c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3304      	adds	r3, #4
 800072a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	18d0      	adds	r0, r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	697a      	ldr	r2, [r7, #20]
 8000738:	4619      	mov	r1, r3
 800073a:	f006 fe4d 	bl	80073d8 <memcpy>
      offset += length_message_type;
 800073e:	69fa      	ldr	r2, [r7, #28]
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	4413      	add	r3, r2
 8000744:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	691b      	ldr	r3, [r3, #16]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff fd00 	bl	8000150 <strlen>
 8000750:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	4413      	add	r3, r2
 8000758:	6939      	ldr	r1, [r7, #16]
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fe9e 	bl	800149c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	3304      	adds	r3, #4
 8000764:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	18d0      	adds	r0, r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	691b      	ldr	r3, [r3, #16]
 8000770:	693a      	ldr	r2, [r7, #16]
 8000772:	4619      	mov	r1, r3
 8000774:	f006 fe30 	bl	80073d8 <memcpy>
      offset += length_md5sum;
 8000778:	69fa      	ldr	r2, [r7, #28]
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	4413      	add	r3, r2
 800077e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000786:	68f9      	ldr	r1, [r7, #12]
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	683a      	ldr	r2, [r7, #0]
 800078c:	4413      	add	r3, r2
 800078e:	b2ca      	uxtb	r2, r1
 8000790:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	0a19      	lsrs	r1, r3, #8
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3301      	adds	r3, #1
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	4413      	add	r3, r2
 800079e:	b2ca      	uxtb	r2, r1
 80007a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	0c19      	lsrs	r1, r3, #16
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3302      	adds	r3, #2
 80007aa:	683a      	ldr	r2, [r7, #0]
 80007ac:	4413      	add	r3, r2
 80007ae:	b2ca      	uxtb	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	0e19      	lsrs	r1, r3, #24
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3303      	adds	r3, #3
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	4413      	add	r3, r2
 80007be:	b2ca      	uxtb	r2, r1
 80007c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	61fb      	str	r3, [r7, #28]
      return offset;
 80007c8:	69fb      	ldr	r3, [r7, #28]
    }
 80007ca:	4618      	mov	r0, r3
 80007cc:	3720      	adds	r7, #32
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b08a      	sub	sp, #40	; 0x28
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
 80007da:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	889b      	ldrh	r3, [r3, #4]
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	3301      	adds	r3, #1
 80007f8:	6839      	ldr	r1, [r7, #0]
 80007fa:	440b      	add	r3, r1
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	b21b      	sxth	r3, r3
 8000802:	4313      	orrs	r3, r2
 8000804:	b21b      	sxth	r3, r3
 8000806:	b29a      	uxth	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	3302      	adds	r3, #2
 8000810:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	683a      	ldr	r2, [r7, #0]
 8000816:	441a      	add	r2, r3
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4611      	mov	r1, r2
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fe59 	bl	80014d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	3304      	adds	r3, #4
 8000828:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
 800082e:	69ba      	ldr	r2, [r7, #24]
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	4413      	add	r3, r2
 8000834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000836:	429a      	cmp	r2, r3
 8000838:	d20c      	bcs.n	8000854 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800083a:	683a      	ldr	r2, [r7, #0]
 800083c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083e:	441a      	add	r2, r3
 8000840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000842:	3b01      	subs	r3, #1
 8000844:	6839      	ldr	r1, [r7, #0]
 8000846:	440b      	add	r3, r1
 8000848:	7812      	ldrb	r2, [r2, #0]
 800084a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	3301      	adds	r3, #1
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
 8000852:	e7ec      	b.n	800082e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	4413      	add	r3, r2
 800085a:	3b01      	subs	r3, #1
 800085c:	683a      	ldr	r2, [r7, #0]
 800085e:	4413      	add	r3, r2
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	3b01      	subs	r3, #1
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	441a      	add	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	4413      	add	r3, r2
 8000876:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	441a      	add	r2, r3
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f000 fe26 	bl	80014d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	3304      	adds	r3, #4
 800088e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	623b      	str	r3, [r7, #32]
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	4413      	add	r3, r2
 800089a:	6a3a      	ldr	r2, [r7, #32]
 800089c:	429a      	cmp	r2, r3
 800089e:	d20c      	bcs.n	80008ba <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80008a0:	683a      	ldr	r2, [r7, #0]
 80008a2:	6a3b      	ldr	r3, [r7, #32]
 80008a4:	441a      	add	r2, r3
 80008a6:	6a3b      	ldr	r3, [r7, #32]
 80008a8:	3b01      	subs	r3, #1
 80008aa:	6839      	ldr	r1, [r7, #0]
 80008ac:	440b      	add	r3, r1
 80008ae:	7812      	ldrb	r2, [r2, #0]
 80008b0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80008b2:	6a3b      	ldr	r3, [r7, #32]
 80008b4:	3301      	adds	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
 80008b8:	e7ec      	b.n	8000894 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	4413      	add	r3, r2
 80008c0:	3b01      	subs	r3, #1
 80008c2:	683a      	ldr	r2, [r7, #0]
 80008c4:	4413      	add	r3, r2
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	441a      	add	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	4413      	add	r3, r2
 80008dc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	683a      	ldr	r2, [r7, #0]
 80008e2:	441a      	add	r2, r3
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4611      	mov	r1, r2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 fdf3 	bl	80014d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	3304      	adds	r3, #4
 80008f4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	61fb      	str	r3, [r7, #28]
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	4413      	add	r3, r2
 8000900:	69fa      	ldr	r2, [r7, #28]
 8000902:	429a      	cmp	r2, r3
 8000904:	d20c      	bcs.n	8000920 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000906:	683a      	ldr	r2, [r7, #0]
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	441a      	add	r2, r3
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	3b01      	subs	r3, #1
 8000910:	6839      	ldr	r1, [r7, #0]
 8000912:	440b      	add	r3, r1
 8000914:	7812      	ldrb	r2, [r2, #0]
 8000916:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	3301      	adds	r3, #1
 800091c:	61fb      	str	r3, [r7, #28]
 800091e:	e7ec      	b.n	80008fa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	4413      	add	r3, r2
 8000926:	3b01      	subs	r3, #1
 8000928:	683a      	ldr	r2, [r7, #0]
 800092a:	4413      	add	r3, r2
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	3b01      	subs	r3, #1
 8000934:	683a      	ldr	r2, [r7, #0]
 8000936:	441a      	add	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	4413      	add	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	6839      	ldr	r1, [r7, #0]
 800094e:	440a      	add	r2, r1
 8000950:	7812      	ldrb	r2, [r2, #0]
 8000952:	4313      	orrs	r3, r2
 8000954:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	3301      	adds	r3, #1
 800095c:	6839      	ldr	r1, [r7, #0]
 800095e:	440b      	add	r3, r1
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	021b      	lsls	r3, r3, #8
 8000964:	4313      	orrs	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000968:	68ba      	ldr	r2, [r7, #8]
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	3302      	adds	r3, #2
 800096e:	6839      	ldr	r1, [r7, #0]
 8000970:	440b      	add	r3, r1
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	041b      	lsls	r3, r3, #16
 8000976:	4313      	orrs	r3, r2
 8000978:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	3303      	adds	r3, #3
 8000980:	6839      	ldr	r1, [r7, #0]
 8000982:	440b      	add	r3, r1
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	061b      	lsls	r3, r3, #24
 8000988:	4313      	orrs	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	3304      	adds	r3, #4
 8000996:	61bb      	str	r3, [r7, #24]
     return offset;
 8000998:	69bb      	ldr	r3, [r7, #24]
    }
 800099a:	4618      	mov	r0, r3
 800099c:	3728      	adds	r7, #40	; 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	4b02      	ldr	r3, [pc, #8]	; (80009b8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 80009ae:	4618      	mov	r0, r3
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	080076c0 	.word	0x080076c0

080009bc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	080076dc 	.word	0x080076dc

080009d4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fd3e 	bl	8000460 <_ZN3ros3MsgC1Ev>
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	711a      	strb	r2, [r3, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80009f4:	609a      	str	r2, [r3, #8]
    {
    }
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	080078c0 	.word	0x080078c0
 8000a04:	080076bc 	.word	0x080076bc

08000a08 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	7912      	ldrb	r2, [r2, #4]
 8000a20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	3301      	adds	r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fb8f 	bl	8000150 <strlen>
 8000a32:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	683a      	ldr	r2, [r7, #0]
 8000a38:	4413      	add	r3, r2
 8000a3a:	68b9      	ldr	r1, [r7, #8]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 fd2d 	bl	800149c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	3304      	adds	r3, #4
 8000a46:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	18d0      	adds	r0, r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4619      	mov	r1, r3
 8000a56:	f006 fcbf 	bl	80073d8 <memcpy>
      offset += length_msg;
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	4413      	add	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
      return offset;
 8000a62:	68fb      	ldr	r3, [r7, #12]
    }
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	781a      	ldrb	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	683a      	ldr	r2, [r7, #0]
 8000a90:	441a      	add	r2, r3
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4611      	mov	r1, r2
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 fd1c 	bl	80014d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4413      	add	r3, r2
 8000aae:	697a      	ldr	r2, [r7, #20]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d20c      	bcs.n	8000ace <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000ab4:	683a      	ldr	r2, [r7, #0]
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	441a      	add	r2, r3
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	6839      	ldr	r1, [r7, #0]
 8000ac0:	440b      	add	r3, r1
 8000ac2:	7812      	ldrb	r2, [r2, #0]
 8000ac4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	e7ec      	b.n	8000aa8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	4413      	add	r3, r2
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	683a      	ldr	r2, [r7, #0]
 8000ae4:	441a      	add	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4413      	add	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
     return offset;
 8000af2:	693b      	ldr	r3, [r7, #16]
    }
 8000af4:	4618      	mov	r0, r3
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	08007700 	.word	0x08007700

08000b14 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	4b02      	ldr	r3, [pc, #8]	; (8000b28 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	08007714 	.word	0x08007714

08000b2c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fc92 	bl	8000460 <_ZN3ros3MsgC1Ev>
 8000b3c:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	61da      	str	r2, [r3, #28]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	080078a8 	.word	0x080078a8

08000b74 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6859      	ldr	r1, [r3, #4]
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	b2ca      	uxtb	r2, r1
 8000b8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	0a19      	lsrs	r1, r3, #8
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	3301      	adds	r3, #1
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	b2ca      	uxtb	r2, r1
 8000ba0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	0c19      	lsrs	r1, r3, #16
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	3302      	adds	r3, #2
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	b2ca      	uxtb	r2, r1
 8000bb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	0e19      	lsrs	r1, r3, #24
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbc:	3303      	adds	r3, #3
 8000bbe:	683a      	ldr	r2, [r7, #0]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	b2ca      	uxtb	r2, r1
 8000bc4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc8:	3304      	adds	r3, #4
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	6a3a      	ldr	r2, [r7, #32]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d22b      	bcs.n	8000c32 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	68da      	ldr	r2, [r3, #12]
 8000bde:	6a3b      	ldr	r3, [r7, #32]
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	4413      	add	r3, r2
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000be8:	6939      	ldr	r1, [r7, #16]
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	b2ca      	uxtb	r2, r1
 8000bf2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	0a19      	lsrs	r1, r3, #8
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	b2ca      	uxtb	r2, r1
 8000c02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	0c19      	lsrs	r1, r3, #16
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	b2ca      	uxtb	r2, r1
 8000c12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	0e19      	lsrs	r1, r3, #24
 8000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1a:	3303      	adds	r3, #3
 8000c1c:	683a      	ldr	r2, [r7, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	b2ca      	uxtb	r2, r1
 8000c22:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c26:	3304      	adds	r3, #4
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000c2a:	6a3b      	ldr	r3, [r7, #32]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	623b      	str	r3, [r7, #32]
 8000c30:	e7ce      	b.n	8000bd0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6919      	ldr	r1, [r3, #16]
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	b2ca      	uxtb	r2, r1
 8000c3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	0a19      	lsrs	r1, r3, #8
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	3301      	adds	r3, #1
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	b2ca      	uxtb	r2, r1
 8000c50:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	0c19      	lsrs	r1, r3, #16
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	3302      	adds	r3, #2
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	b2ca      	uxtb	r2, r1
 8000c62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	0e19      	lsrs	r1, r3, #24
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6c:	3303      	adds	r3, #3
 8000c6e:	683a      	ldr	r2, [r7, #0]
 8000c70:	4413      	add	r3, r2
 8000c72:	b2ca      	uxtb	r2, r1
 8000c74:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	3304      	adds	r3, #4
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	69fa      	ldr	r2, [r7, #28]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d22b      	bcs.n	8000ce2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	699a      	ldr	r2, [r3, #24]
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000c98:	68f9      	ldr	r1, [r7, #12]
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	b2ca      	uxtb	r2, r1
 8000ca2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	0a19      	lsrs	r1, r3, #8
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	3301      	adds	r3, #1
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	b2ca      	uxtb	r2, r1
 8000cb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	0c19      	lsrs	r1, r3, #16
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cba:	3302      	adds	r3, #2
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	b2ca      	uxtb	r2, r1
 8000cc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	0e19      	lsrs	r1, r3, #24
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cca:	3303      	adds	r3, #3
 8000ccc:	683a      	ldr	r2, [r7, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	b2ca      	uxtb	r2, r1
 8000cd2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	61fb      	str	r3, [r7, #28]
 8000ce0:	e7ce      	b.n	8000c80 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	69d9      	ldr	r1, [r3, #28]
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	b2ca      	uxtb	r2, r1
 8000cee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	69db      	ldr	r3, [r3, #28]
 8000cf4:	0a19      	lsrs	r1, r3, #8
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	b2ca      	uxtb	r2, r1
 8000d00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	0c19      	lsrs	r1, r3, #16
 8000d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0a:	3302      	adds	r3, #2
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	b2ca      	uxtb	r2, r1
 8000d12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69db      	ldr	r3, [r3, #28]
 8000d18:	0e19      	lsrs	r1, r3, #24
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	3303      	adds	r3, #3
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	4413      	add	r3, r2
 8000d22:	b2ca      	uxtb	r2, r1
 8000d24:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	3304      	adds	r3, #4
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d228      	bcs.n	8000d8c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fa02 	bl	8000150 <strlen>
 8000d4c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	683a      	ldr	r2, [r7, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	6979      	ldr	r1, [r7, #20]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 fba0 	bl	800149c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5e:	3304      	adds	r3, #4
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	18d0      	adds	r0, r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	4619      	mov	r1, r3
 8000d78:	f006 fb2e 	bl	80073d8 <memcpy>
      offset += length_stringsi;
 8000d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	4413      	add	r3, r2
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	3301      	adds	r3, #1
 8000d88:	61bb      	str	r3, [r7, #24]
 8000d8a:	e7d1      	b.n	8000d30 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b08e      	sub	sp, #56	; 0x38
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	4413      	add	r3, r2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db0:	3301      	adds	r3, #1
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	4413      	add	r3, r2
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	021b      	lsls	r3, r3, #8
 8000dba:	6a3a      	ldr	r2, [r7, #32]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	041b      	lsls	r3, r3, #16
 8000dcc:	6a3a      	ldr	r2, [r7, #32]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd4:	3303      	adds	r3, #3
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	4413      	add	r3, r2
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	061b      	lsls	r3, r3, #24
 8000dde:	6a3a      	ldr	r2, [r7, #32]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de6:	3304      	adds	r3, #4
 8000de8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	6a3a      	ldr	r2, [r7, #32]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d90a      	bls.n	8000e0a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4610      	mov	r0, r2
 8000e00:	f006 fafe 	bl	8007400 <realloc>
 8000e04:	4602      	mov	r2, r0
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a3a      	ldr	r2, [r7, #32]
 8000e0e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000e10:	2300      	movs	r3, #0
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d236      	bcs.n	8000e8c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e26:	6839      	ldr	r1, [r7, #0]
 8000e28:	440a      	add	r2, r1
 8000e2a:	7812      	ldrb	r2, [r2, #0]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e30:	697a      	ldr	r2, [r7, #20]
 8000e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e34:	3301      	adds	r3, #1
 8000e36:	6839      	ldr	r1, [r7, #0]
 8000e38:	440b      	add	r3, r1
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e46:	3302      	adds	r3, #2
 8000e48:	6839      	ldr	r1, [r7, #0]
 8000e4a:	440b      	add	r3, r1
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	041b      	lsls	r3, r3, #16
 8000e50:	4313      	orrs	r3, r2
 8000e52:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e58:	3303      	adds	r3, #3
 8000e5a:	6839      	ldr	r1, [r7, #0]
 8000e5c:	440b      	add	r3, r1
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	061b      	lsls	r3, r3, #24
 8000e62:	4313      	orrs	r3, r2
 8000e64:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e6e:	3304      	adds	r3, #4
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68da      	ldr	r2, [r3, #12]
 8000e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	6812      	ldr	r2, [r2, #0]
 8000e82:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e86:	3301      	adds	r3, #1
 8000e88:	633b      	str	r3, [r7, #48]	; 0x30
 8000e8a:	e7c3      	b.n	8000e14 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	4413      	add	r3, r2
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e98:	3301      	adds	r3, #1
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	021b      	lsls	r3, r3, #8
 8000ea2:	69fa      	ldr	r2, [r7, #28]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eaa:	3302      	adds	r3, #2
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	041b      	lsls	r3, r3, #16
 8000eb4:	69fa      	ldr	r2, [r7, #28]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ebc:	3303      	adds	r3, #3
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	061b      	lsls	r3, r3, #24
 8000ec6:	69fa      	ldr	r2, [r7, #28]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ece:	3304      	adds	r3, #4
 8000ed0:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	69fa      	ldr	r2, [r7, #28]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d90a      	bls.n	8000ef2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	699a      	ldr	r2, [r3, #24]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	f006 fa8a 	bl	8007400 <realloc>
 8000eec:	4602      	mov	r2, r0
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69fa      	ldr	r2, [r7, #28]
 8000ef6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d236      	bcs.n	8000f74 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f0e:	6839      	ldr	r1, [r7, #0]
 8000f10:	440a      	add	r2, r1
 8000f12:	7812      	ldrb	r2, [r2, #0]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	6839      	ldr	r1, [r7, #0]
 8000f20:	440b      	add	r3, r1
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2e:	3302      	adds	r3, #2
 8000f30:	6839      	ldr	r1, [r7, #0]
 8000f32:	440b      	add	r3, r1
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	041b      	lsls	r3, r3, #16
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f40:	3303      	adds	r3, #3
 8000f42:	6839      	ldr	r1, [r7, #0]
 8000f44:	440b      	add	r3, r1
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	061b      	lsls	r3, r3, #24
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8000f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f56:	3304      	adds	r3, #4
 8000f58:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	699a      	ldr	r2, [r3, #24]
 8000f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	3214      	adds	r2, #20
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8000f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6e:	3301      	adds	r3, #1
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f72:	e7c3      	b.n	8000efc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f80:	3301      	adds	r3, #1
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	4413      	add	r3, r2
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f92:	3302      	adds	r3, #2
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fa4:	3303      	adds	r3, #3
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	061b      	lsls	r3, r3, #24
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8000fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb6:	3304      	adds	r3, #4
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d90a      	bls.n	8000fda <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4610      	mov	r0, r2
 8000fd0:	f006 fa16 	bl	8007400 <realloc>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69db      	ldr	r3, [r3, #28]
 8000fe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d23f      	bcs.n	800106e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8000fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	441a      	add	r2, r3
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fa6b 	bl	80014d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001002:	3304      	adds	r3, #4
 8001004:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
 800100a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001012:	429a      	cmp	r2, r3
 8001014:	d20c      	bcs.n	8001030 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	441a      	add	r2, r3
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	3b01      	subs	r3, #1
 8001020:	6839      	ldr	r1, [r7, #0]
 8001022:	440b      	add	r3, r1
 8001024:	7812      	ldrb	r2, [r2, #0]
 8001026:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	3301      	adds	r3, #1
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
 800102e:	e7ec      	b.n	800100a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	3b01      	subs	r3, #1
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	4413      	add	r3, r2
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001042:	3b01      	subs	r3, #1
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	441a      	add	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800104c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4413      	add	r3, r2
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	3220      	adds	r2, #32
 8001062:	6812      	ldr	r2, [r2, #0]
 8001064:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001068:	3301      	adds	r3, #1
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
 800106c:	e7ba      	b.n	8000fe4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001070:	4618      	mov	r0, r3
 8001072:	3738      	adds	r7, #56	; 0x38
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	4b02      	ldr	r3, [pc, #8]	; (800108c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	08007844 	.word	0x08007844

08001090 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	08007738 	.word	0x08007738

080010a8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	611a      	str	r2, [r3, #16]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4618      	mov	r0, r3
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	691b      	ldr	r3, [r3, #16]
  }
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr

080010ea <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	425b      	negs	r3, r3
 80010fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <_ZN13STM32HardwareC1Ev+0x34>)
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200024d4 	.word	0x200024d4

08001144 <_ZN13STM32Hardware10reset_rbufEv>:
  
    void init(){
      reset_rbuf();
    }

    void reset_rbuf(void){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
     if( HAL_UART_Receive_DMA(huart, rbuf, rbuflen) != HAL_OK)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3304      	adds	r3, #4
 8001154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001158:	4619      	mov	r1, r3
 800115a:	f002 ff3d 	bl	8003fd8 <HAL_UART_Receive_DMA>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
    		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    		 HAL_Delay(100);
    		 }*/

     }
    }
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <_ZN13STM32Hardware4readEv>:

    int read(){
 800116a:	b590      	push	{r4, r7, lr}
 800116c:	b085      	sub	sp, #20
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffb3 	bl	80010ea <_ZN13STM32Hardware10getRdmaIndEv>
 8001184:	4603      	mov	r3, r0
 8001186:	429c      	cmp	r4, r3
 8001188:	bf14      	ite	ne
 800118a:	2301      	movne	r3, #1
 800118c:	2300      	moveq	r3, #0
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d012      	beq.n	80011ba <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800119a:	1c59      	adds	r1, r3, #1
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	791b      	ldrb	r3, [r3, #4]
 80011a8:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80011ba:	68fb      	ldr	r3, [r7, #12]
    }
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd90      	pop	{r4, r7, pc}

080011c4 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b20      	cmp	r3, #32
 80011d8:	d108      	bne.n	80011ec <_ZN13STM32Hardware5flushEv+0x28>
 80011da:	4b28      	ldr	r3, [pc, #160]	; (800127c <_ZN13STM32Hardware5flushEv+0xb8>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	f083 0301 	eor.w	r3, r3, #1
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <_ZN13STM32Hardware5flushEv+0x28>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <_ZN13STM32Hardware5flushEv+0x2a>
 80011ec:	2300      	movs	r3, #0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d03f      	beq.n	8001272 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <_ZN13STM32Hardware5flushEv+0xb8>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001204:	429a      	cmp	r2, r3
 8001206:	d031      	beq.n	800126c <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001214:	429a      	cmp	r2, r3
 8001216:	d20a      	bcs.n	800122e <_ZN13STM32Hardware5flushEv+0x6a>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800121e:	b29a      	uxth	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001226:	b29b      	uxth	r3, r3
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	b29b      	uxth	r3, r3
 800122c:	e006      	b.n	800123c <_ZN13STM32Hardware5flushEv+0x78>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001234:	b29b      	uxth	r3, r3
 8001236:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800123a:	b29b      	uxth	r3, r3
 800123c:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001248:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	4413      	add	r3, r2
 8001250:	89fa      	ldrh	r2, [r7, #14]
 8001252:	4619      	mov	r1, r3
 8001254:	f002 fe54 	bl	8003f00 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800125e:	89fb      	ldrh	r3, [r7, #14]
 8001260:	4413      	add	r3, r2
 8001262:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <_ZN13STM32Hardware5flushEv+0xb8>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
      }
    }
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200000d4 	.word	0x200000d4

08001280 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
      int n = length;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001296:	bfa8      	it	ge
 8001298:	f44f 7300 	movge.w	r3, #512	; 0x200
 800129c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80012a4:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	4293      	cmp	r3, r2
 80012ac:	bf28      	it	cs
 80012ae:	4613      	movcs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80012b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68b9      	ldr	r1, [r7, #8]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f006 f887 	bl	80073d8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	4413      	add	r3, r2
 80012d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d00b      	beq.n	80012fe <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	18d1      	adds	r1, r2, r3
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	461a      	mov	r2, r3
 80012fa:	f006 f86d 	bl	80073d8 <memcpy>
      }

      flush();
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f7ff ff60 	bl	80011c4 <_ZN13STM32Hardware5flushEv>
    }
 8001304:	bf00      	nop
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	f001 f916 	bl	8002544 <HAL_GetTick>
 8001318:	4603      	mov	r3, r0
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
      data("")
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f896 	bl	8000460 <_ZN3ros3MsgC1Ev>
 8001334:	4a05      	ldr	r2, [pc, #20]	; (800134c <_ZN8std_msgs6StringC1Ev+0x28>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <_ZN8std_msgs6StringC1Ev+0x2c>)
 800133e:	605a      	str	r2, [r3, #4]
    {
    }
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	0800787c 	.word	0x0800787c
 8001350:	080076bc 	.word	0x080076bc

08001354 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4618      	mov	r0, r3
 8001368:	f7fe fef2 	bl	8000150 <strlen>
 800136c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	4413      	add	r3, r2
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f890 	bl	800149c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3304      	adds	r3, #4
 8001380:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	18d0      	adds	r0, r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	4619      	mov	r1, r3
 8001390:	f006 f822 	bl	80073d8 <memcpy>
      offset += length_data;
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	4413      	add	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]
      return offset;
 800139c:	68fb      	ldr	r3, [r7, #12]
    }
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	441a      	add	r2, r3
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 f888 	bl	80014d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	3304      	adds	r3, #4
 80013ca:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d20c      	bcs.n	80013f6 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	441a      	add	r2, r3
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	6839      	ldr	r1, [r7, #0]
 80013e8:	440b      	add	r3, r1
 80013ea:	7812      	ldrb	r2, [r2, #0]
 80013ec:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	e7ec      	b.n	80013d0 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	3b01      	subs	r3, #1
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	4413      	add	r3, r2
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	3b01      	subs	r3, #1
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	441a      	add	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4413      	add	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
     return offset;
 800141a:	693b      	ldr	r3, [r7, #16]
    }
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	4b02      	ldr	r3, [pc, #8]	; (8001438 <_ZN8std_msgs6String7getTypeEv+0x14>)
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	0800775c 	.word	0x0800775c

0800143c <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	4b02      	ldr	r3, [pc, #8]	; (8001450 <_ZN8std_msgs6String6getMD5Ev+0x14>)
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	0800776c 	.word	0x0800776c

08001454 <HAL_UART_TxCpltCallback>:

std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello world!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 800145c:	4805      	ldr	r0, [pc, #20]	; (8001474 <HAL_UART_TxCpltCallback+0x20>)
 800145e:	f000 f8ef 	bl	8001640 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001462:	4603      	mov	r3, r0
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fead 	bl	80011c4 <_ZN13STM32Hardware5flushEv>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200000d8 	.word	0x200000d8

08001478 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <HAL_UART_RxCpltCallback+0x20>)
 8001482:	f000 f8dd 	bl	8001640 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001486:	4603      	mov	r3, r0
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fe5b 	bl	8001144 <_ZN13STM32Hardware10reset_rbufEv>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200000d8 	.word	0x200000d8

0800149c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d80d      	bhi.n	80014cc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	fa22 f103 	lsr.w	r1, r2, r3
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	b2ca      	uxtb	r2, r1
 80014c2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3301      	adds	r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	e7ee      	b.n	80014aa <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d811      	bhi.n	8001514 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6839      	ldr	r1, [r7, #0]
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	440a      	add	r2, r1
 80014fa:	7812      	ldrb	r2, [r2, #0]
 80014fc:	4611      	mov	r1, r2
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	00d2      	lsls	r2, r2, #3
 8001502:	fa01 f202 	lsl.w	r2, r1, r2
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3301      	adds	r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	e7ea      	b.n	80014ea <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
	...

08001520 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	08007894 	.word	0x08007894

08001540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ffe8 	bl	8001520 <_ZN3ros15NodeHandleBase_C1Ev>
 8001550:	4a3a      	ldr	r2, [pc, #232]	; (800163c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3304      	adds	r3, #4
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fdd6 	bl	800110c <_ZN13STM32HardwareC1Ev>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fadc 	bl	8000b2c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2b18      	cmp	r3, #24
 800157c:	d80b      	bhi.n	8001596 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	2200      	movs	r2, #0
 800158c:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	e7f0      	b.n	8001578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	2b18      	cmp	r3, #24
 800159e:	d80a      	bhi.n	80015b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80015a8:	2100      	movs	r1, #0
 80015aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	3301      	adds	r3, #1
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	e7f1      	b.n	800159a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015c0:	d20a      	bcs.n	80015d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4413      	add	r3, r2
 80015c8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3301      	adds	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	e7f0      	b.n	80015ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e2:	d20a      	bcs.n	80015fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	4413      	add	r3, r2
 80015ea:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	3301      	adds	r3, #1
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	e7f0      	b.n	80015dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	08007868 	.word	0x08007868

08001640 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3304      	adds	r3, #4
  }
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
    return SPIN_OK;
  }


  /* Are we connected to the PC? */
  virtual bool connected()
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  {
    return configured_;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800166e:	b580      	push	{r7, lr}
 8001670:	b084      	sub	sp, #16
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3304      	adds	r3, #4
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fe46 	bl	800130c <_ZN13STM32Hardware4timeEv>
 8001680:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001690:	4293      	cmp	r3, r2
 8001692:	d903      	bls.n	800169c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d009      	beq.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d903      	bls.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d014      	beq.n	80016ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3304      	adds	r3, #4
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fe1f 	bl	800130c <_ZN13STM32Hardware4timeEv>
 80016ce:	4602      	mov	r2, r0
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	1ad2      	subs	r2, r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80016da:	429a      	cmp	r2, r3
 80016dc:	bf8c      	ite	hi
 80016de:	2301      	movhi	r3, #1
 80016e0:	2300      	movls	r3, #0
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80016e8:	f06f 0301 	mvn.w	r3, #1
 80016ec:	e197      	b.n	8001a1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3304      	adds	r3, #4
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fd39 	bl	800116a <_ZN13STM32Hardware4readEv>
 80016f8:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f2c0 8177 	blt.w	80019f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	441a      	add	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001718:	2b07      	cmp	r3, #7
 800171a:	d11e      	bne.n	800175a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001722:	1c59      	adds	r1, r3, #1
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	b2d1      	uxtb	r1, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	460a      	mov	r2, r1
 8001734:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800173e:	1e5a      	subs	r2, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1b4      	bne.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2208      	movs	r2, #8
 8001754:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001758:	e7af      	b.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001760:	2b00      	cmp	r3, #0
 8001762:	d128      	bne.n	80017b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2bff      	cmp	r3, #255	; 0xff
 8001768:	d10d      	bne.n	8001786 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f103 0214 	add.w	r2, r3, #20
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001784:	e799      	b.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3304      	adds	r3, #4
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fdbe 	bl	800130c <_ZN13STM32Hardware4timeEv>
 8001790:	4602      	mov	r2, r0
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f241 3288 	movw	r2, #5000	; 0x1388
 800179a:	4293      	cmp	r3, r2
 800179c:	bf8c      	ite	hi
 800179e:	2301      	movhi	r3, #1
 80017a0:	2300      	movls	r3, #0
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d088      	beq.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80017b0:	f06f 0301 	mvn.w	r3, #1
 80017b4:	e133      	b.n	8001a1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d11b      	bne.n	80017f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2bfe      	cmp	r3, #254	; 0xfe
 80017c4:	d107      	bne.n	80017d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80017d4:	e771      	b.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80017e4:	f083 0301 	eor.w	r3, r3, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f43f af65 	beq.w	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f918 	bl	8001a26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80017f6:	e760      	b.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d113      	bne.n	800182a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001828:	e747      	b.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001830:	2b03      	cmp	r3, #3
 8001832:	d110      	bne.n	8001856 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	441a      	add	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001854:	e731      	b.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800185c:	2b04      	cmp	r3, #4
 800185e:	d116      	bne.n	800188e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001866:	425a      	negs	r2, r3
 8001868:	b2db      	uxtb	r3, r3
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	bf58      	it	pl
 800186e:	4253      	negpl	r3, r2
 8001870:	2bff      	cmp	r3, #255	; 0xff
 8001872:	d107      	bne.n	8001884 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001882:	e71a      	b.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800188c:	e715      	b.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001894:	2b05      	cmp	r3, #5
 8001896:	d10f      	bne.n	80018b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80018b6:	e700      	b.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d117      	bne.n	80018f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	441a      	add	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2207      	movs	r2, #7
 80018d8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f47f aee9 	bne.w	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2208      	movs	r2, #8
 80018ec:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80018f0:	e6e3      	b.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	f47f aede 	bne.w	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800190c:	425a      	negs	r2, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	bf58      	it	pl
 8001914:	4253      	negpl	r3, r2
 8001916:	2bff      	cmp	r3, #255	; 0xff
 8001918:	f47f aecf 	bne.w	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001922:	2b00      	cmp	r3, #0
 8001924:	d110      	bne.n	8001948 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f87d 	bl	8001a26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f898 	bl	8001a62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	e06a      	b.n	8001a1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800194e:	2b0a      	cmp	r3, #10
 8001950:	d107      	bne.n	8001962 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001958:	4619      	mov	r1, r3
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f960 	bl	8001c20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001960:	e6ab      	b.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001968:	2b06      	cmp	r3, #6
 800196a:	d10e      	bne.n	800198a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001978:	4619      	mov	r1, r3
 800197a:	4610      	mov	r0, r2
 800197c:	f7ff fa0b 	bl	8000d96 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001988:	e697      	b.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001990:	2b0b      	cmp	r3, #11
 8001992:	d104      	bne.n	800199e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800199c:	e68d      	b.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80019a4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f202 2222 	addw	r2, r2, #546	; 0x222
 80019ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f43f ae81 	beq.w	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80019be:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80019c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80019d2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80019dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80019ea:	4611      	mov	r1, r2
 80019ec:	4798      	blx	r3
    while (true)
 80019ee:	e664      	b.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80019f0:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00f      	beq.n	8001a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d906      	bls.n	8001a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f809 	bl	8001a26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8001a1c:	2300      	movs	r3, #0
  }
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:

  /********************************************************************
   * Time functions
   */

  void requestSyncTime()
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  {
    std_msgs::Time t;
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd24 	bl	8000480 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f107 020c 	add.w	r2, r7, #12
 8001a42:	210a      	movs	r1, #10
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	4798      	blx	r3
    rt_time = hardware_.time();
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fc5d 	bl	800130c <_ZN13STM32Hardware4timeEv>
 8001a52:	4602      	mov	r2, r0
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8001a62:	b590      	push	{r4, r7, lr}
 8001a64:	b08b      	sub	sp, #44	; 0x2c
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fdf0 	bl	8000654 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	2b18      	cmp	r3, #24
 8001a7c:	dc63      	bgt.n	8001b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d056      	beq.n	8001b3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	6859      	ldr	r1, [r3, #4]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3308      	adds	r3, #8
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4608      	mov	r0, r1
 8001ade:	4798      	blx	r3
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	330c      	adds	r3, #12
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4608      	mov	r0, r1
 8001b0c:	4798      	blx	r3
 8001b0e:	4603      	mov	r3, r0
 8001b10:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b16:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681c      	ldr	r4, [r3, #0]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fad1 	bl	80010d4 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001b32:	4601      	mov	r1, r0
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	461a      	mov	r2, r3
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	3301      	adds	r3, #1
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
 8001b44:	e798      	b.n	8001a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	2b18      	cmp	r3, #24
 8001b4e:	dc5f      	bgt.n	8001c10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b54:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d053      	beq.n	8001c08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b64:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b76:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b86:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001b8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b92:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3308      	adds	r3, #8
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4608      	mov	r0, r1
 8001ba2:	4798      	blx	r3
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bac:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001bb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	330c      	adds	r3, #12
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4608      	mov	r0, r1
 8001bc8:	4798      	blx	r3
 8001bca:	4603      	mov	r3, r0
 8001bcc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001bce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd2:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681c      	ldr	r4, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bde:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001be2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bea:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	4798      	blx	r3
 8001bfc:	4601      	mov	r1, r0
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	461a      	mov	r2, r3
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0e:	e79c      	b.n	8001b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8001c18:	bf00      	nop
 8001c1a:	372c      	adds	r7, #44	; 0x2c
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd90      	pop	{r4, r7, pc}

08001c20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001c2a:	f107 0308 	add.w	r3, r7, #8
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc26 	bl	8000480 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3304      	adds	r3, #4
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fb67 	bl	800130c <_ZN13STM32Hardware4timeEv>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001c4a:	f107 0308 	add.w	r3, r7, #8
 8001c4e:	6839      	ldr	r1, [r7, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc84 	bl	800055e <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	4915      	ldr	r1, [pc, #84]	; (8001cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001c5c:	fba1 1303 	umull	r1, r3, r1, r3
 8001c60:	099b      	lsrs	r3, r3, #6
 8001c62:	4413      	add	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8001c66:	6939      	ldr	r1, [r7, #16]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001c6c:	fba3 0302 	umull	r0, r3, r3, r2
 8001c70:	099b      	lsrs	r3, r3, #6
 8001c72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c76:	fb00 f303 	mul.w	r3, r0, r3
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8001c7e:	fb02 f303 	mul.w	r3, r2, r3
 8001c82:	440b      	add	r3, r1
 8001c84:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8001c86:	f107 0308 	add.w	r3, r7, #8
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f8c0 	bl	8001e14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3304      	adds	r3, #4
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fb37 	bl	800130c <_ZN13STM32Hardware4timeEv>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8001ca6:	bf00      	nop
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	10624dd3 	.word	0x10624dd3
 8001cb4:	000f4240 	.word	0x000f4240

08001cb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  /********************************************************************
   * Logging
   */

private:
  void log(char byte, const char * msg)
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	72fb      	strb	r3, [r7, #11]
  {
    rosserial_msgs::Log l;
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fe82 	bl	80009d4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8001cd0:	7afb      	ldrb	r3, [r7, #11]
 8001cd2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f107 0214 	add.w	r2, r7, #20
 8001ce2:	2107      	movs	r1, #7
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	4798      	blx	r3
  }
 8001ce8:	bf00      	nop
 8001cea:	3720      	adds	r7, #32
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg)
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b63      	cmp	r3, #99	; 0x63
 8001d00:	dd09      	ble.n	8001d16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001d08:	f083 0301 	eor.w	r3, r3, #1
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e077      	b.n	8001e06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    int l = msg->serialize(message_out + 7);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8001d22:	3207      	adds	r2, #7
 8001d24:	4611      	mov	r1, r2
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	4798      	blx	r3
 8001d2a:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	22ff      	movs	r2, #255	; 0xff
 8001d30:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	22fe      	movs	r2, #254	; 0xfe
 8001d38:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	121b      	asrs	r3, r3, #8
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8001d60:	4413      	add	r3, r2
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	121b      	asrs	r3, r3, #8
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
    int chk = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3307      	adds	r3, #7
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	da0d      	bge.n	8001db4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	4413      	add	r3, r2
 8001daa:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	3301      	adds	r3, #1
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	e7ec      	b.n	8001d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3307      	adds	r3, #7
 8001db8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	425a      	negs	r2, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	bf58      	it	pl
 8001dc4:	4253      	negpl	r3, r2
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	1c59      	adds	r1, r3, #1
 8001dcc:	6179      	str	r1, [r7, #20]
 8001dce:	43d2      	mvns	r2, r2
 8001dd0:	b2d1      	uxtb	r1, r2
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	460a      	mov	r2, r1
 8001dd8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    if (l <= OUTPUT_SIZE)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001de2:	dc0a      	bgt.n	8001dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
      hardware_.write(message_out, l);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1d18      	adds	r0, r3, #4
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4619      	mov	r1, r3
 8001df2:	f7ff fa45 	bl	8001280 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	e005      	b.n	8001e06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
      logerror("Message from device dropped: message larger than buffer.");
 8001dfa:	4905      	ldr	r1, [pc, #20]	; (8001e10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 f849 	bl	8001e94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8001e06:	4618      	mov	r0, r3
 8001e08:	3720      	adds	r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	080077b0 	.word	0x080077b0

08001e14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3304      	adds	r3, #4
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fa72 	bl	800130c <_ZN13STM32Hardware4timeEv>
 8001e28:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4915      	ldr	r1, [pc, #84]	; (8001e88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8001e32:	fba1 1303 	umull	r1, r3, r1, r3
 8001e36:	099b      	lsrs	r3, r3, #6
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	1e5a      	subs	r2, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	6859      	ldr	r1, [r3, #4]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8001e4a:	fba3 0302 	umull	r0, r3, r3, r2
 8001e4e:	099b      	lsrs	r3, r3, #6
 8001e50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e54:	fb00 f303 	mul.w	r3, r0, r3
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8001e5c:	fb02 f303 	mul.w	r3, r2, r3
 8001e60:	1aca      	subs	r2, r1, r3
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8001e64:	4413      	add	r3, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	f000 fab0 	bl	80023e0 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	10624dd3 	.word	0x10624dd3
 8001e8c:	000f4240 	.word	0x000f4240
 8001e90:	3b9aca00 	.word	0x3b9aca00

08001e94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	2103      	movs	r1, #3
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ff08 	bl	8001cb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_Z41__static_initialization_and_destruction_0ii>:
  str_msg.data = hello;
  chatter.publish(&str_msg);
  nh.loginfo("[ID01] ping ..");
  nh.spinOnce();

}
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d110      	bne.n	8001ee2 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d10b      	bne.n	8001ee2 <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8001eca:	4808      	ldr	r0, [pc, #32]	; (8001eec <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001ecc:	f7ff fb38 	bl	8001540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8001ed0:	4807      	ldr	r0, [pc, #28]	; (8001ef0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001ed2:	f7ff fa27 	bl	8001324 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001eda:	4906      	ldr	r1, [pc, #24]	; (8001ef4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001edc:	4806      	ldr	r0, [pc, #24]	; (8001ef8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001ede:	f7ff f8e3 	bl	80010a8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	200000d8 	.word	0x200000d8
 8001ef0:	20000a14 	.word	0x20000a14
 8001ef4:	080077ec 	.word	0x080077ec
 8001ef8:	20000a1c 	.word	0x20000a1c

08001efc <_GLOBAL__sub_I_nh>:
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f04:	2001      	movs	r0, #1
 8001f06:	f7ff ffd3 	bl	8001eb0 <_Z41__static_initialization_and_destruction_0ii>
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_MspInit+0x68>)
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	4a17      	ldr	r2, [pc, #92]	; (8001f74 <HAL_MspInit+0x68>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6193      	str	r3, [r2, #24]
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <HAL_MspInit+0x68>)
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_MspInit+0x68>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	4a11      	ldr	r2, [pc, #68]	; (8001f74 <HAL_MspInit+0x68>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f34:	61d3      	str	r3, [r2, #28]
 8001f36:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <HAL_MspInit+0x68>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	210f      	movs	r1, #15
 8001f46:	f06f 0001 	mvn.w	r0, #1
 8001f4a:	f000 fbba 	bl	80026c2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_MspInit+0x6c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <HAL_MspInit+0x6c>)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40010000 	.word	0x40010000

08001f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	; 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0318 	add.w	r3, r7, #24
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a75      	ldr	r2, [pc, #468]	; (800216c <HAL_UART_MspInit+0x1f0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	f040 8089 	bne.w	80020b0 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f9e:	4b74      	ldr	r3, [pc, #464]	; (8002170 <HAL_UART_MspInit+0x1f4>)
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	4a73      	ldr	r2, [pc, #460]	; (8002170 <HAL_UART_MspInit+0x1f4>)
 8001fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa8:	6193      	str	r3, [r2, #24]
 8001faa:	4b71      	ldr	r3, [pc, #452]	; (8002170 <HAL_UART_MspInit+0x1f4>)
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	4b6e      	ldr	r3, [pc, #440]	; (8002170 <HAL_UART_MspInit+0x1f4>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	4a6d      	ldr	r2, [pc, #436]	; (8002170 <HAL_UART_MspInit+0x1f4>)
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	6193      	str	r3, [r2, #24]
 8001fc2:	4b6b      	ldr	r3, [pc, #428]	; (8002170 <HAL_UART_MspInit+0x1f4>)
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fdc:	f107 0318 	add.w	r3, r7, #24
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4864      	ldr	r0, [pc, #400]	; (8002174 <HAL_UART_MspInit+0x1f8>)
 8001fe4:	f000 fe36 	bl	8002c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff6:	f107 0318 	add.w	r3, r7, #24
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	485d      	ldr	r0, [pc, #372]	; (8002174 <HAL_UART_MspInit+0x1f8>)
 8001ffe:	f000 fe29 	bl	8002c54 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002002:	4b5d      	ldr	r3, [pc, #372]	; (8002178 <HAL_UART_MspInit+0x1fc>)
 8002004:	4a5d      	ldr	r2, [pc, #372]	; (800217c <HAL_UART_MspInit+0x200>)
 8002006:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002008:	4b5b      	ldr	r3, [pc, #364]	; (8002178 <HAL_UART_MspInit+0x1fc>)
 800200a:	2200      	movs	r2, #0
 800200c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800200e:	4b5a      	ldr	r3, [pc, #360]	; (8002178 <HAL_UART_MspInit+0x1fc>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002014:	4b58      	ldr	r3, [pc, #352]	; (8002178 <HAL_UART_MspInit+0x1fc>)
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800201a:	4b57      	ldr	r3, [pc, #348]	; (8002178 <HAL_UART_MspInit+0x1fc>)
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002020:	4b55      	ldr	r3, [pc, #340]	; (8002178 <HAL_UART_MspInit+0x1fc>)
 8002022:	2200      	movs	r2, #0
 8002024:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002026:	4b54      	ldr	r3, [pc, #336]	; (8002178 <HAL_UART_MspInit+0x1fc>)
 8002028:	2220      	movs	r2, #32
 800202a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800202c:	4b52      	ldr	r3, [pc, #328]	; (8002178 <HAL_UART_MspInit+0x1fc>)
 800202e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002032:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002034:	4850      	ldr	r0, [pc, #320]	; (8002178 <HAL_UART_MspInit+0x1fc>)
 8002036:	f000 fb6f 	bl	8002718 <HAL_DMA_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8002040:	f7fe f9fa 	bl	8000438 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a4c      	ldr	r2, [pc, #304]	; (8002178 <HAL_UART_MspInit+0x1fc>)
 8002048:	635a      	str	r2, [r3, #52]	; 0x34
 800204a:	4a4b      	ldr	r2, [pc, #300]	; (8002178 <HAL_UART_MspInit+0x1fc>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002050:	4b4b      	ldr	r3, [pc, #300]	; (8002180 <HAL_UART_MspInit+0x204>)
 8002052:	4a4c      	ldr	r2, [pc, #304]	; (8002184 <HAL_UART_MspInit+0x208>)
 8002054:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002056:	4b4a      	ldr	r3, [pc, #296]	; (8002180 <HAL_UART_MspInit+0x204>)
 8002058:	2210      	movs	r2, #16
 800205a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800205c:	4b48      	ldr	r3, [pc, #288]	; (8002180 <HAL_UART_MspInit+0x204>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002062:	4b47      	ldr	r3, [pc, #284]	; (8002180 <HAL_UART_MspInit+0x204>)
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002068:	4b45      	ldr	r3, [pc, #276]	; (8002180 <HAL_UART_MspInit+0x204>)
 800206a:	2200      	movs	r2, #0
 800206c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800206e:	4b44      	ldr	r3, [pc, #272]	; (8002180 <HAL_UART_MspInit+0x204>)
 8002070:	2200      	movs	r2, #0
 8002072:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002074:	4b42      	ldr	r3, [pc, #264]	; (8002180 <HAL_UART_MspInit+0x204>)
 8002076:	2200      	movs	r2, #0
 8002078:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800207a:	4b41      	ldr	r3, [pc, #260]	; (8002180 <HAL_UART_MspInit+0x204>)
 800207c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002080:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002082:	483f      	ldr	r0, [pc, #252]	; (8002180 <HAL_UART_MspInit+0x204>)
 8002084:	f000 fb48 	bl	8002718 <HAL_DMA_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800208e:	f7fe f9d3 	bl	8000438 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a3a      	ldr	r2, [pc, #232]	; (8002180 <HAL_UART_MspInit+0x204>)
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
 8002098:	4a39      	ldr	r2, [pc, #228]	; (8002180 <HAL_UART_MspInit+0x204>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2105      	movs	r1, #5
 80020a2:	2025      	movs	r0, #37	; 0x25
 80020a4:	f000 fb0d 	bl	80026c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020a8:	2025      	movs	r0, #37	; 0x25
 80020aa:	f000 fb26 	bl	80026fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020ae:	e058      	b.n	8002162 <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART3)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a34      	ldr	r2, [pc, #208]	; (8002188 <HAL_UART_MspInit+0x20c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d153      	bne.n	8002162 <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020ba:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <HAL_UART_MspInit+0x1f4>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4a2c      	ldr	r2, [pc, #176]	; (8002170 <HAL_UART_MspInit+0x1f4>)
 80020c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c4:	61d3      	str	r3, [r2, #28]
 80020c6:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <HAL_UART_MspInit+0x1f4>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d2:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_UART_MspInit+0x1f4>)
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	4a26      	ldr	r2, [pc, #152]	; (8002170 <HAL_UART_MspInit+0x1f4>)
 80020d8:	f043 0308 	orr.w	r3, r3, #8
 80020dc:	6193      	str	r3, [r2, #24]
 80020de:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_UART_MspInit+0x1f4>)
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020f0:	2312      	movs	r3, #18
 80020f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020f4:	2303      	movs	r3, #3
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	f107 0318 	add.w	r3, r7, #24
 80020fc:	4619      	mov	r1, r3
 80020fe:	4823      	ldr	r0, [pc, #140]	; (800218c <HAL_UART_MspInit+0x210>)
 8002100:	f000 fda8 	bl	8002c54 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <HAL_UART_MspInit+0x214>)
 8002106:	4a23      	ldr	r2, [pc, #140]	; (8002194 <HAL_UART_MspInit+0x218>)
 8002108:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800210a:	4b21      	ldr	r3, [pc, #132]	; (8002190 <HAL_UART_MspInit+0x214>)
 800210c:	2200      	movs	r2, #0
 800210e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002110:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <HAL_UART_MspInit+0x214>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <HAL_UART_MspInit+0x214>)
 8002118:	2280      	movs	r2, #128	; 0x80
 800211a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800211c:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <HAL_UART_MspInit+0x214>)
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002122:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <HAL_UART_MspInit+0x214>)
 8002124:	2200      	movs	r2, #0
 8002126:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_UART_MspInit+0x214>)
 800212a:	2220      	movs	r2, #32
 800212c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800212e:	4b18      	ldr	r3, [pc, #96]	; (8002190 <HAL_UART_MspInit+0x214>)
 8002130:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002134:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002136:	4816      	ldr	r0, [pc, #88]	; (8002190 <HAL_UART_MspInit+0x214>)
 8002138:	f000 faee 	bl	8002718 <HAL_DMA_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8002142:	f7fe f979 	bl	8000438 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a11      	ldr	r2, [pc, #68]	; (8002190 <HAL_UART_MspInit+0x214>)
 800214a:	635a      	str	r2, [r3, #52]	; 0x34
 800214c:	4a10      	ldr	r2, [pc, #64]	; (8002190 <HAL_UART_MspInit+0x214>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	2105      	movs	r1, #5
 8002156:	2027      	movs	r0, #39	; 0x27
 8002158:	f000 fab3 	bl	80026c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800215c:	2027      	movs	r0, #39	; 0x27
 800215e:	f000 facc 	bl	80026fa <HAL_NVIC_EnableIRQ>
}
 8002162:	bf00      	nop
 8002164:	3728      	adds	r7, #40	; 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40013800 	.word	0x40013800
 8002170:	40021000 	.word	0x40021000
 8002174:	40010800 	.word	0x40010800
 8002178:	20002490 	.word	0x20002490
 800217c:	40020058 	.word	0x40020058
 8002180:	2000244c 	.word	0x2000244c
 8002184:	40020044 	.word	0x40020044
 8002188:	40004800 	.word	0x40004800
 800218c:	40010c00 	.word	0x40010c00
 8002190:	20002348 	.word	0x20002348
 8002194:	40020030 	.word	0x40020030

08002198 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08c      	sub	sp, #48	; 0x30
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80021a8:	2200      	movs	r2, #0
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	2019      	movs	r0, #25
 80021ae:	f000 fa88 	bl	80026c2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80021b2:	2019      	movs	r0, #25
 80021b4:	f000 faa1 	bl	80026fa <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80021b8:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <HAL_InitTick+0x9c>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <HAL_InitTick+0x9c>)
 80021be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021c2:	6193      	str	r3, [r2, #24]
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <HAL_InitTick+0x9c>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021d0:	f107 0210 	add.w	r2, r7, #16
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4611      	mov	r1, r2
 80021da:	4618      	mov	r0, r3
 80021dc:	f001 fac4 	bl	8003768 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80021e0:	f001 faae 	bl	8003740 <HAL_RCC_GetPCLK2Freq>
 80021e4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e8:	4a13      	ldr	r2, [pc, #76]	; (8002238 <HAL_InitTick+0xa0>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	0c9b      	lsrs	r3, r3, #18
 80021f0:	3b01      	subs	r3, #1
 80021f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <HAL_InitTick+0xa4>)
 80021f6:	4a12      	ldr	r2, [pc, #72]	; (8002240 <HAL_InitTick+0xa8>)
 80021f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <HAL_InitTick+0xa4>)
 80021fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002200:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002202:	4a0e      	ldr	r2, [pc, #56]	; (800223c <HAL_InitTick+0xa4>)
 8002204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002206:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <HAL_InitTick+0xa4>)
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220e:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_InitTick+0xa4>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002214:	4809      	ldr	r0, [pc, #36]	; (800223c <HAL_InitTick+0xa4>)
 8002216:	f001 faf5 	bl	8003804 <HAL_TIM_Base_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d104      	bne.n	800222a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002220:	4806      	ldr	r0, [pc, #24]	; (800223c <HAL_InitTick+0xa4>)
 8002222:	f001 fb47 	bl	80038b4 <HAL_TIM_Base_Start_IT>
 8002226:	4603      	mov	r3, r0
 8002228:	e000      	b.n	800222c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	3730      	adds	r7, #48	; 0x30
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	431bde83 	.word	0x431bde83
 800223c:	20002514 	.word	0x20002514
 8002240:	40012c00 	.word	0x40012c00

08002244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <NMI_Handler+0x4>

0800224a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800224e:	e7fe      	b.n	800224e <HardFault_Handler+0x4>

08002250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002254:	e7fe      	b.n	8002254 <MemManage_Handler+0x4>

08002256 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800225a:	e7fe      	b.n	800225a <BusFault_Handler+0x4>

0800225c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002260:	e7fe      	b.n	8002260 <UsageFault_Handler+0x4>

08002262 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
	...

08002270 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */


  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002274:	4802      	ldr	r0, [pc, #8]	; (8002280 <DMA1_Channel3_IRQHandler+0x10>)
 8002276:	f000 fbb9 	bl	80029ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20002348 	.word	0x20002348

08002284 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <DMA1_Channel4_IRQHandler+0x10>)
 800228a:	f000 fbaf 	bl	80029ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000244c 	.word	0x2000244c

08002298 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <DMA1_Channel5_IRQHandler+0x10>)
 800229e:	f000 fba5 	bl	80029ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20002490 	.word	0x20002490

080022ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <TIM1_UP_IRQHandler+0x10>)
 80022b2:	f001 fb51 	bl	8003958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20002514 	.word	0x20002514

080022c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <USART1_IRQHandler+0x10>)
 80022c6:	f001 ff63 	bl	8004190 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200024d4 	.word	0x200024d4

080022d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET) {
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <USART3_IRQHandler+0x48>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	d012      	beq.n	800230e <USART3_IRQHandler+0x3a>
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 80022e8:	2300      	movs	r3, #0
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <USART3_IRQHandler+0x48>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <USART3_IRQHandler+0x48>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
		HAL_UART_DMAStop(&huart3) ;
 80022fe:	4807      	ldr	r0, [pc, #28]	; (800231c <USART3_IRQHandler+0x48>)
 8002300:	f001 feea 	bl	80040d8 <HAL_UART_DMAStop>
		HAL_UART_Receive_DMA(&huart3, rx_buffer, 64);
 8002304:	2240      	movs	r2, #64	; 0x40
 8002306:	4906      	ldr	r1, [pc, #24]	; (8002320 <USART3_IRQHandler+0x4c>)
 8002308:	4804      	ldr	r0, [pc, #16]	; (800231c <USART3_IRQHandler+0x48>)
 800230a:	f001 fe65 	bl	8003fd8 <HAL_UART_Receive_DMA>
	}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800230e:	4803      	ldr	r0, [pc, #12]	; (800231c <USART3_IRQHandler+0x48>)
 8002310:	f001 ff3e 	bl	8004190 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	2000238c 	.word	0x2000238c
 8002320:	2000240c 	.word	0x2000240c

08002324 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
	return 1;
 8002328:	2301      	movs	r3, #1
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <_kill>:

int _kill(int pid, int sig)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800233c:	f005 f822 	bl	8007384 <__errno>
 8002340:	4602      	mov	r2, r0
 8002342:	2316      	movs	r3, #22
 8002344:	6013      	str	r3, [r2, #0]
	return -1;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <_exit>:

void _exit (int status)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800235a:	f04f 31ff 	mov.w	r1, #4294967295
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff ffe7 	bl	8002332 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002364:	e7fe      	b.n	8002364 <_exit+0x12>
	...

08002368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002370:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <_sbrk+0x5c>)
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <_sbrk+0x60>)
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800237c:	4b13      	ldr	r3, [pc, #76]	; (80023cc <_sbrk+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <_sbrk+0x64>)
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <_sbrk+0x68>)
 8002388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <_sbrk+0x64>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	429a      	cmp	r2, r3
 8002396:	d207      	bcs.n	80023a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002398:	f004 fff4 	bl	8007384 <__errno>
 800239c:	4602      	mov	r2, r0
 800239e:	230c      	movs	r3, #12
 80023a0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	e009      	b.n	80023bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <_sbrk+0x64>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <_sbrk+0x64>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	4a05      	ldr	r2, [pc, #20]	; (80023cc <_sbrk+0x64>)
 80023b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ba:	68fb      	ldr	r3, [r7, #12]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20005000 	.word	0x20005000
 80023c8:	00000400 	.word	0x00000400
 80023cc:	20000a30 	.word	0x20000a30
 80023d0:	200025a8 	.word	0x200025a8

080023d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	0a5a      	lsrs	r2, r3, #9
 80023f0:	490f      	ldr	r1, [pc, #60]	; (8002430 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80023f2:	fba1 1202 	umull	r1, r2, r1, r2
 80023f6:	09d2      	lsrs	r2, r2, #7
 80023f8:	490e      	ldr	r1, [pc, #56]	; (8002434 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80023fa:	fb01 f202 	mul.w	r2, r1, r2
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	0a5b      	lsrs	r3, r3, #9
 8002408:	4a09      	ldr	r2, [pc, #36]	; (8002430 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	09db      	lsrs	r3, r3, #7
 8002410:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	441a      	add	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	601a      	str	r2, [r3, #0]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	00044b83 	.word	0x00044b83
 8002434:	3b9aca00 	.word	0x3b9aca00

08002438 <xl480_int>:

#include "xl480.h"


void xl480_int(UART_HandleTypeDef *huart)
{
 8002438:	b5b0      	push	{r4, r5, r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	_huart = *huart;
 8002440:	4a0c      	ldr	r2, [pc, #48]	; (8002474 <xl480_int+0x3c>)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4614      	mov	r4, r2
 8002446:	461d      	mov	r5, r3
 8002448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800244c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002454:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002458:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Receive_DMA(&_huart, rx_buffer, 64);
 800245c:	2240      	movs	r2, #64	; 0x40
 800245e:	4906      	ldr	r1, [pc, #24]	; (8002478 <xl480_int+0x40>)
 8002460:	4804      	ldr	r0, [pc, #16]	; (8002474 <xl480_int+0x3c>)
 8002462:	f001 fdb9 	bl	8003fd8 <HAL_UART_Receive_DMA>
	HAL_HalfDuplex_EnableReceiver(&_huart);
 8002466:	4803      	ldr	r0, [pc, #12]	; (8002474 <xl480_int+0x3c>)
 8002468:	f001 ffe0 	bl	800442c <HAL_HalfDuplex_EnableReceiver>
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bdb0      	pop	{r4, r5, r7, pc}
 8002474:	200023cc 	.word	0x200023cc
 8002478:	2000240c 	.word	0x2000240c

0800247c <xl480_writebuffer>:

void xl480_writebuffer(uint8_t * dataBuf)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	HAL_HalfDuplex_EnableTransmitter(&_huart);
 8002484:	4807      	ldr	r0, [pc, #28]	; (80024a4 <xl480_writebuffer+0x28>)
 8002486:	f001 ff9e 	bl	80043c6 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&_huart, dataBuf, 10, 100);
 800248a:	2364      	movs	r3, #100	; 0x64
 800248c:	220a      	movs	r2, #10
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4804      	ldr	r0, [pc, #16]	; (80024a4 <xl480_writebuffer+0x28>)
 8002492:	f001 fca3 	bl	8003ddc <HAL_UART_Transmit>
	HAL_HalfDuplex_EnableReceiver(&_huart);
 8002496:	4803      	ldr	r0, [pc, #12]	; (80024a4 <xl480_writebuffer+0x28>)
 8002498:	f001 ffc8 	bl	800442c <HAL_HalfDuplex_EnableReceiver>
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	200023cc 	.word	0x200023cc

080024a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80024a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80024aa:	e003      	b.n	80024b4 <LoopCopyDataInit>

080024ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80024ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80024b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80024b2:	3104      	adds	r1, #4

080024b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80024b4:	480a      	ldr	r0, [pc, #40]	; (80024e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80024b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80024ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80024bc:	d3f6      	bcc.n	80024ac <CopyDataInit>
  ldr r2, =_sbss
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80024c0:	e002      	b.n	80024c8 <LoopFillZerobss>

080024c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80024c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80024c4:	f842 3b04 	str.w	r3, [r2], #4

080024c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80024ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80024cc:	d3f9      	bcc.n	80024c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024ce:	f7ff ff81 	bl	80023d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024d2:	f004 ff5d 	bl	8007390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024d6:	f7fd fe43 	bl	8000160 <main>
  bx lr
 80024da:	4770      	bx	lr
  ldr r3, =_sidata
 80024dc:	0800793c 	.word	0x0800793c
  ldr r0, =_sdata
 80024e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80024e4:	200000b8 	.word	0x200000b8
  ldr r2, =_sbss
 80024e8:	200000b8 	.word	0x200000b8
  ldr r3, = _ebss
 80024ec:	200025a4 	.word	0x200025a4

080024f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024f0:	e7fe      	b.n	80024f0 <ADC1_2_IRQHandler>
	...

080024f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_Init+0x28>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a07      	ldr	r2, [pc, #28]	; (800251c <HAL_Init+0x28>)
 80024fe:	f043 0310 	orr.w	r3, r3, #16
 8002502:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002504:	2003      	movs	r0, #3
 8002506:	f000 f8d1 	bl	80026ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800250a:	2000      	movs	r0, #0
 800250c:	f7ff fe44 	bl	8002198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002510:	f7ff fcfc 	bl	8001f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40022000 	.word	0x40022000

08002520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <HAL_IncTick+0x1c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_IncTick+0x20>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4413      	add	r3, r2
 8002530:	4a03      	ldr	r2, [pc, #12]	; (8002540 <HAL_IncTick+0x20>)
 8002532:	6013      	str	r3, [r2, #0]
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	20000048 	.word	0x20000048
 8002540:	2000255c 	.word	0x2000255c

08002544 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return uwTick;
 8002548:	4b02      	ldr	r3, [pc, #8]	; (8002554 <HAL_GetTick+0x10>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	2000255c 	.word	0x2000255c

08002558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <__NVIC_SetPriorityGrouping+0x44>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002574:	4013      	ands	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258a:	4a04      	ldr	r2, [pc, #16]	; (800259c <__NVIC_SetPriorityGrouping+0x44>)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	60d3      	str	r3, [r2, #12]
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <__NVIC_GetPriorityGrouping+0x18>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	f003 0307 	and.w	r3, r3, #7
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	db0b      	blt.n	80025e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	f003 021f 	and.w	r2, r3, #31
 80025d4:	4906      	ldr	r1, [pc, #24]	; (80025f0 <__NVIC_EnableIRQ+0x34>)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	2001      	movs	r0, #1
 80025de:	fa00 f202 	lsl.w	r2, r0, r2
 80025e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	; (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	; (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ff4f 	bl	8002558 <__NVIC_SetPriorityGrouping>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d4:	f7ff ff64 	bl	80025a0 <__NVIC_GetPriorityGrouping>
 80026d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	6978      	ldr	r0, [r7, #20]
 80026e0:	f7ff ffb2 	bl	8002648 <NVIC_EncodePriority>
 80026e4:	4602      	mov	r2, r0
 80026e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff ff81 	bl	80025f4 <__NVIC_SetPriority>
}
 80026f2:	bf00      	nop
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4603      	mov	r3, r0
 8002702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff57 	bl	80025bc <__NVIC_EnableIRQ>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e043      	b.n	80027b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <HAL_DMA_Init+0xa8>)
 8002736:	4413      	add	r3, r2
 8002738:	4a22      	ldr	r2, [pc, #136]	; (80027c4 <HAL_DMA_Init+0xac>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	009a      	lsls	r2, r3, #2
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a1f      	ldr	r2, [pc, #124]	; (80027c8 <HAL_DMA_Init+0xb0>)
 800274a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002762:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002766:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002770:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002788:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	bffdfff8 	.word	0xbffdfff8
 80027c4:	cccccccd 	.word	0xcccccccd
 80027c8:	40020000 	.word	0x40020000

080027cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_DMA_Start_IT+0x20>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e04a      	b.n	8002882 <HAL_DMA_Start_IT+0xb6>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d13a      	bne.n	8002874 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2202      	movs	r2, #2
 8002802:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f9e8 	bl	8002bf8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 020e 	orr.w	r2, r2, #14
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e00f      	b.n	8002862 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0204 	bic.w	r2, r2, #4
 8002850:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 020a 	orr.w	r2, r2, #10
 8002860:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0201 	orr.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	e005      	b.n	8002880 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800287c:	2302      	movs	r3, #2
 800287e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002880:	7dfb      	ldrb	r3, [r7, #23]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800288a:	b480      	push	{r7}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800289c:	2b02      	cmp	r3, #2
 800289e:	d008      	beq.n	80028b2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2204      	movs	r2, #4
 80028a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e020      	b.n	80028f4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 020e 	bic.w	r2, r2, #14
 80028c0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0201 	bic.w	r2, r2, #1
 80028d0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028da:	2101      	movs	r1, #1
 80028dc:	fa01 f202 	lsl.w	r2, r1, r2
 80028e0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002912:	2b02      	cmp	r3, #2
 8002914:	d005      	beq.n	8002922 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2204      	movs	r2, #4
 800291a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
 8002920:	e051      	b.n	80029c6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 020e 	bic.w	r2, r2, #14
 8002930:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a22      	ldr	r2, [pc, #136]	; (80029d0 <HAL_DMA_Abort_IT+0xd0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d029      	beq.n	80029a0 <HAL_DMA_Abort_IT+0xa0>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a20      	ldr	r2, [pc, #128]	; (80029d4 <HAL_DMA_Abort_IT+0xd4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d022      	beq.n	800299c <HAL_DMA_Abort_IT+0x9c>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1f      	ldr	r2, [pc, #124]	; (80029d8 <HAL_DMA_Abort_IT+0xd8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d01a      	beq.n	8002996 <HAL_DMA_Abort_IT+0x96>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1d      	ldr	r2, [pc, #116]	; (80029dc <HAL_DMA_Abort_IT+0xdc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d012      	beq.n	8002990 <HAL_DMA_Abort_IT+0x90>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a1c      	ldr	r2, [pc, #112]	; (80029e0 <HAL_DMA_Abort_IT+0xe0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d00a      	beq.n	800298a <HAL_DMA_Abort_IT+0x8a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1a      	ldr	r2, [pc, #104]	; (80029e4 <HAL_DMA_Abort_IT+0xe4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d102      	bne.n	8002984 <HAL_DMA_Abort_IT+0x84>
 800297e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002982:	e00e      	b.n	80029a2 <HAL_DMA_Abort_IT+0xa2>
 8002984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002988:	e00b      	b.n	80029a2 <HAL_DMA_Abort_IT+0xa2>
 800298a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800298e:	e008      	b.n	80029a2 <HAL_DMA_Abort_IT+0xa2>
 8002990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002994:	e005      	b.n	80029a2 <HAL_DMA_Abort_IT+0xa2>
 8002996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800299a:	e002      	b.n	80029a2 <HAL_DMA_Abort_IT+0xa2>
 800299c:	2310      	movs	r3, #16
 800299e:	e000      	b.n	80029a2 <HAL_DMA_Abort_IT+0xa2>
 80029a0:	2301      	movs	r3, #1
 80029a2:	4a11      	ldr	r2, [pc, #68]	; (80029e8 <HAL_DMA_Abort_IT+0xe8>)
 80029a4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	4798      	blx	r3
    } 
  }
  return status;
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40020008 	.word	0x40020008
 80029d4:	4002001c 	.word	0x4002001c
 80029d8:	40020030 	.word	0x40020030
 80029dc:	40020044 	.word	0x40020044
 80029e0:	40020058 	.word	0x40020058
 80029e4:	4002006c 	.word	0x4002006c
 80029e8:	40020000 	.word	0x40020000

080029ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	2204      	movs	r2, #4
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d04f      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0xc8>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d04a      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d107      	bne.n	8002a3c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0204 	bic.w	r2, r2, #4
 8002a3a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a66      	ldr	r2, [pc, #408]	; (8002bdc <HAL_DMA_IRQHandler+0x1f0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d029      	beq.n	8002a9a <HAL_DMA_IRQHandler+0xae>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a65      	ldr	r2, [pc, #404]	; (8002be0 <HAL_DMA_IRQHandler+0x1f4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d022      	beq.n	8002a96 <HAL_DMA_IRQHandler+0xaa>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a63      	ldr	r2, [pc, #396]	; (8002be4 <HAL_DMA_IRQHandler+0x1f8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d01a      	beq.n	8002a90 <HAL_DMA_IRQHandler+0xa4>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a62      	ldr	r2, [pc, #392]	; (8002be8 <HAL_DMA_IRQHandler+0x1fc>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d012      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x9e>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a60      	ldr	r2, [pc, #384]	; (8002bec <HAL_DMA_IRQHandler+0x200>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00a      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x98>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a5f      	ldr	r2, [pc, #380]	; (8002bf0 <HAL_DMA_IRQHandler+0x204>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d102      	bne.n	8002a7e <HAL_DMA_IRQHandler+0x92>
 8002a78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a7c:	e00e      	b.n	8002a9c <HAL_DMA_IRQHandler+0xb0>
 8002a7e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a82:	e00b      	b.n	8002a9c <HAL_DMA_IRQHandler+0xb0>
 8002a84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a88:	e008      	b.n	8002a9c <HAL_DMA_IRQHandler+0xb0>
 8002a8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a8e:	e005      	b.n	8002a9c <HAL_DMA_IRQHandler+0xb0>
 8002a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a94:	e002      	b.n	8002a9c <HAL_DMA_IRQHandler+0xb0>
 8002a96:	2340      	movs	r3, #64	; 0x40
 8002a98:	e000      	b.n	8002a9c <HAL_DMA_IRQHandler+0xb0>
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	4a55      	ldr	r2, [pc, #340]	; (8002bf4 <HAL_DMA_IRQHandler+0x208>)
 8002a9e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8094 	beq.w	8002bd2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ab2:	e08e      	b.n	8002bd2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	2202      	movs	r2, #2
 8002aba:	409a      	lsls	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d056      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x186>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d051      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10b      	bne.n	8002af4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 020a 	bic.w	r2, r2, #10
 8002aea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a38      	ldr	r2, [pc, #224]	; (8002bdc <HAL_DMA_IRQHandler+0x1f0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d029      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x166>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a37      	ldr	r2, [pc, #220]	; (8002be0 <HAL_DMA_IRQHandler+0x1f4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d022      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x162>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a35      	ldr	r2, [pc, #212]	; (8002be4 <HAL_DMA_IRQHandler+0x1f8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01a      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x15c>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a34      	ldr	r2, [pc, #208]	; (8002be8 <HAL_DMA_IRQHandler+0x1fc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d012      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x156>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a32      	ldr	r2, [pc, #200]	; (8002bec <HAL_DMA_IRQHandler+0x200>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00a      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x150>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a31      	ldr	r2, [pc, #196]	; (8002bf0 <HAL_DMA_IRQHandler+0x204>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d102      	bne.n	8002b36 <HAL_DMA_IRQHandler+0x14a>
 8002b30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b34:	e00e      	b.n	8002b54 <HAL_DMA_IRQHandler+0x168>
 8002b36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b3a:	e00b      	b.n	8002b54 <HAL_DMA_IRQHandler+0x168>
 8002b3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b40:	e008      	b.n	8002b54 <HAL_DMA_IRQHandler+0x168>
 8002b42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b46:	e005      	b.n	8002b54 <HAL_DMA_IRQHandler+0x168>
 8002b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b4c:	e002      	b.n	8002b54 <HAL_DMA_IRQHandler+0x168>
 8002b4e:	2320      	movs	r3, #32
 8002b50:	e000      	b.n	8002b54 <HAL_DMA_IRQHandler+0x168>
 8002b52:	2302      	movs	r3, #2
 8002b54:	4a27      	ldr	r2, [pc, #156]	; (8002bf4 <HAL_DMA_IRQHandler+0x208>)
 8002b56:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d034      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b70:	e02f      	b.n	8002bd2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	2208      	movs	r2, #8
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d028      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x1e8>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d023      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 020e 	bic.w	r2, r2, #14
 8002b9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8002baa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d004      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	4798      	blx	r3
    }
  }
  return;
 8002bd2:	bf00      	nop
 8002bd4:	bf00      	nop
}
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40020008 	.word	0x40020008
 8002be0:	4002001c 	.word	0x4002001c
 8002be4:	40020030 	.word	0x40020030
 8002be8:	40020044 	.word	0x40020044
 8002bec:	40020058 	.word	0x40020058
 8002bf0:	4002006c 	.word	0x4002006c
 8002bf4:	40020000 	.word	0x40020000

08002bf8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0e:	2101      	movs	r1, #1
 8002c10:	fa01 f202 	lsl.w	r2, r1, r2
 8002c14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b10      	cmp	r3, #16
 8002c24:	d108      	bne.n	8002c38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c36:	e007      	b.n	8002c48 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	60da      	str	r2, [r3, #12]
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr
	...

08002c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b08b      	sub	sp, #44	; 0x2c
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c62:	2300      	movs	r3, #0
 8002c64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c66:	e127      	b.n	8002eb8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c68:	2201      	movs	r2, #1
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	f040 8116 	bne.w	8002eb2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b12      	cmp	r3, #18
 8002c8c:	d034      	beq.n	8002cf8 <HAL_GPIO_Init+0xa4>
 8002c8e:	2b12      	cmp	r3, #18
 8002c90:	d80d      	bhi.n	8002cae <HAL_GPIO_Init+0x5a>
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d02b      	beq.n	8002cee <HAL_GPIO_Init+0x9a>
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d804      	bhi.n	8002ca4 <HAL_GPIO_Init+0x50>
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d031      	beq.n	8002d02 <HAL_GPIO_Init+0xae>
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d01c      	beq.n	8002cdc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ca2:	e048      	b.n	8002d36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d043      	beq.n	8002d30 <HAL_GPIO_Init+0xdc>
 8002ca8:	2b11      	cmp	r3, #17
 8002caa:	d01b      	beq.n	8002ce4 <HAL_GPIO_Init+0x90>
          break;
 8002cac:	e043      	b.n	8002d36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002cae:	4a89      	ldr	r2, [pc, #548]	; (8002ed4 <HAL_GPIO_Init+0x280>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d026      	beq.n	8002d02 <HAL_GPIO_Init+0xae>
 8002cb4:	4a87      	ldr	r2, [pc, #540]	; (8002ed4 <HAL_GPIO_Init+0x280>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d806      	bhi.n	8002cc8 <HAL_GPIO_Init+0x74>
 8002cba:	4a87      	ldr	r2, [pc, #540]	; (8002ed8 <HAL_GPIO_Init+0x284>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d020      	beq.n	8002d02 <HAL_GPIO_Init+0xae>
 8002cc0:	4a86      	ldr	r2, [pc, #536]	; (8002edc <HAL_GPIO_Init+0x288>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01d      	beq.n	8002d02 <HAL_GPIO_Init+0xae>
          break;
 8002cc6:	e036      	b.n	8002d36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002cc8:	4a85      	ldr	r2, [pc, #532]	; (8002ee0 <HAL_GPIO_Init+0x28c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0xae>
 8002cce:	4a85      	ldr	r2, [pc, #532]	; (8002ee4 <HAL_GPIO_Init+0x290>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d016      	beq.n	8002d02 <HAL_GPIO_Init+0xae>
 8002cd4:	4a84      	ldr	r2, [pc, #528]	; (8002ee8 <HAL_GPIO_Init+0x294>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <HAL_GPIO_Init+0xae>
          break;
 8002cda:	e02c      	b.n	8002d36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	623b      	str	r3, [r7, #32]
          break;
 8002ce2:	e028      	b.n	8002d36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	623b      	str	r3, [r7, #32]
          break;
 8002cec:	e023      	b.n	8002d36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	3308      	adds	r3, #8
 8002cf4:	623b      	str	r3, [r7, #32]
          break;
 8002cf6:	e01e      	b.n	8002d36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	330c      	adds	r3, #12
 8002cfe:	623b      	str	r3, [r7, #32]
          break;
 8002d00:	e019      	b.n	8002d36 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d102      	bne.n	8002d10 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d0a:	2304      	movs	r3, #4
 8002d0c:	623b      	str	r3, [r7, #32]
          break;
 8002d0e:	e012      	b.n	8002d36 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d105      	bne.n	8002d24 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d18:	2308      	movs	r3, #8
 8002d1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69fa      	ldr	r2, [r7, #28]
 8002d20:	611a      	str	r2, [r3, #16]
          break;
 8002d22:	e008      	b.n	8002d36 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d24:	2308      	movs	r3, #8
 8002d26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	615a      	str	r2, [r3, #20]
          break;
 8002d2e:	e002      	b.n	8002d36 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d30:	2300      	movs	r3, #0
 8002d32:	623b      	str	r3, [r7, #32]
          break;
 8002d34:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2bff      	cmp	r3, #255	; 0xff
 8002d3a:	d801      	bhi.n	8002d40 <HAL_GPIO_Init+0xec>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	e001      	b.n	8002d44 <HAL_GPIO_Init+0xf0>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3304      	adds	r3, #4
 8002d44:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	2bff      	cmp	r3, #255	; 0xff
 8002d4a:	d802      	bhi.n	8002d52 <HAL_GPIO_Init+0xfe>
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	e002      	b.n	8002d58 <HAL_GPIO_Init+0x104>
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	3b08      	subs	r3, #8
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	210f      	movs	r1, #15
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	401a      	ands	r2, r3
 8002d6a:	6a39      	ldr	r1, [r7, #32]
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	431a      	orrs	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 8096 	beq.w	8002eb2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d86:	4b59      	ldr	r3, [pc, #356]	; (8002eec <HAL_GPIO_Init+0x298>)
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	4a58      	ldr	r2, [pc, #352]	; (8002eec <HAL_GPIO_Init+0x298>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6193      	str	r3, [r2, #24]
 8002d92:	4b56      	ldr	r3, [pc, #344]	; (8002eec <HAL_GPIO_Init+0x298>)
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d9e:	4a54      	ldr	r2, [pc, #336]	; (8002ef0 <HAL_GPIO_Init+0x29c>)
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	089b      	lsrs	r3, r3, #2
 8002da4:	3302      	adds	r3, #2
 8002da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002daa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	220f      	movs	r2, #15
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a4b      	ldr	r2, [pc, #300]	; (8002ef4 <HAL_GPIO_Init+0x2a0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d013      	beq.n	8002df2 <HAL_GPIO_Init+0x19e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a4a      	ldr	r2, [pc, #296]	; (8002ef8 <HAL_GPIO_Init+0x2a4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00d      	beq.n	8002dee <HAL_GPIO_Init+0x19a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a49      	ldr	r2, [pc, #292]	; (8002efc <HAL_GPIO_Init+0x2a8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d007      	beq.n	8002dea <HAL_GPIO_Init+0x196>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a48      	ldr	r2, [pc, #288]	; (8002f00 <HAL_GPIO_Init+0x2ac>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d101      	bne.n	8002de6 <HAL_GPIO_Init+0x192>
 8002de2:	2303      	movs	r3, #3
 8002de4:	e006      	b.n	8002df4 <HAL_GPIO_Init+0x1a0>
 8002de6:	2304      	movs	r3, #4
 8002de8:	e004      	b.n	8002df4 <HAL_GPIO_Init+0x1a0>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e002      	b.n	8002df4 <HAL_GPIO_Init+0x1a0>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_GPIO_Init+0x1a0>
 8002df2:	2300      	movs	r3, #0
 8002df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df6:	f002 0203 	and.w	r2, r2, #3
 8002dfa:	0092      	lsls	r2, r2, #2
 8002dfc:	4093      	lsls	r3, r2
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e04:	493a      	ldr	r1, [pc, #232]	; (8002ef0 <HAL_GPIO_Init+0x29c>)
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e1e:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	4938      	ldr	r1, [pc, #224]	; (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]
 8002e2a:	e006      	b.n	8002e3a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e2c:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	4933      	ldr	r1, [pc, #204]	; (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d006      	beq.n	8002e54 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e46:	4b2f      	ldr	r3, [pc, #188]	; (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	492e      	ldr	r1, [pc, #184]	; (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	604b      	str	r3, [r1, #4]
 8002e52:	e006      	b.n	8002e62 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e54:	4b2b      	ldr	r3, [pc, #172]	; (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	4929      	ldr	r1, [pc, #164]	; (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d006      	beq.n	8002e7c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e6e:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	4924      	ldr	r1, [pc, #144]	; (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
 8002e7a:	e006      	b.n	8002e8a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e7c:	4b21      	ldr	r3, [pc, #132]	; (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	43db      	mvns	r3, r3
 8002e84:	491f      	ldr	r1, [pc, #124]	; (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d006      	beq.n	8002ea4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e96:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	491a      	ldr	r1, [pc, #104]	; (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60cb      	str	r3, [r1, #12]
 8002ea2:	e006      	b.n	8002eb2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ea4:	4b17      	ldr	r3, [pc, #92]	; (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	4915      	ldr	r1, [pc, #84]	; (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f47f aed0 	bne.w	8002c68 <HAL_GPIO_Init+0x14>
  }
}
 8002ec8:	bf00      	nop
 8002eca:	372c      	adds	r7, #44	; 0x2c
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	10210000 	.word	0x10210000
 8002ed8:	10110000 	.word	0x10110000
 8002edc:	10120000 	.word	0x10120000
 8002ee0:	10310000 	.word	0x10310000
 8002ee4:	10320000 	.word	0x10320000
 8002ee8:	10220000 	.word	0x10220000
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40010000 	.word	0x40010000
 8002ef4:	40010800 	.word	0x40010800
 8002ef8:	40010c00 	.word	0x40010c00
 8002efc:	40011000 	.word	0x40011000
 8002f00:	40011400 	.word	0x40011400
 8002f04:	40010400 	.word	0x40010400

08002f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	807b      	strh	r3, [r7, #2]
 8002f14:	4613      	mov	r3, r2
 8002f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f18:	787b      	ldrb	r3, [r7, #1]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f1e:	887a      	ldrh	r2, [r7, #2]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f24:	e003      	b.n	8002f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f26:	887b      	ldrh	r3, [r7, #2]
 8002f28:	041a      	lsls	r2, r3, #16
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	611a      	str	r2, [r3, #16]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	041a      	lsls	r2, r3, #16
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	43d9      	mvns	r1, r3
 8002f56:	887b      	ldrh	r3, [r7, #2]
 8002f58:	400b      	ands	r3, r1
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	611a      	str	r2, [r3, #16]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e26c      	b.n	8003458 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 8087 	beq.w	800309a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f8c:	4b92      	ldr	r3, [pc, #584]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d00c      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f98:	4b8f      	ldr	r3, [pc, #572]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 030c 	and.w	r3, r3, #12
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d112      	bne.n	8002fca <HAL_RCC_OscConfig+0x5e>
 8002fa4:	4b8c      	ldr	r3, [pc, #560]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb0:	d10b      	bne.n	8002fca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb2:	4b89      	ldr	r3, [pc, #548]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d06c      	beq.n	8003098 <HAL_RCC_OscConfig+0x12c>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d168      	bne.n	8003098 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e246      	b.n	8003458 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd2:	d106      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x76>
 8002fd4:	4b80      	ldr	r3, [pc, #512]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a7f      	ldr	r2, [pc, #508]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 8002fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fde:	6013      	str	r3, [r2, #0]
 8002fe0:	e02e      	b.n	8003040 <HAL_RCC_OscConfig+0xd4>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10c      	bne.n	8003004 <HAL_RCC_OscConfig+0x98>
 8002fea:	4b7b      	ldr	r3, [pc, #492]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a7a      	ldr	r2, [pc, #488]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	4b78      	ldr	r3, [pc, #480]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a77      	ldr	r2, [pc, #476]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	e01d      	b.n	8003040 <HAL_RCC_OscConfig+0xd4>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800300c:	d10c      	bne.n	8003028 <HAL_RCC_OscConfig+0xbc>
 800300e:	4b72      	ldr	r3, [pc, #456]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a71      	ldr	r2, [pc, #452]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 8003014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	4b6f      	ldr	r3, [pc, #444]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a6e      	ldr	r2, [pc, #440]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 8003020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	e00b      	b.n	8003040 <HAL_RCC_OscConfig+0xd4>
 8003028:	4b6b      	ldr	r3, [pc, #428]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a6a      	ldr	r2, [pc, #424]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 800302e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	4b68      	ldr	r3, [pc, #416]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a67      	ldr	r2, [pc, #412]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 800303a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800303e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d013      	beq.n	8003070 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003048:	f7ff fa7c 	bl	8002544 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003050:	f7ff fa78 	bl	8002544 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	; 0x64
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e1fa      	b.n	8003458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	4b5d      	ldr	r3, [pc, #372]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0xe4>
 800306e:	e014      	b.n	800309a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7ff fa68 	bl	8002544 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003078:	f7ff fa64 	bl	8002544 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	; 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e1e6      	b.n	8003458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308a:	4b53      	ldr	r3, [pc, #332]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x10c>
 8003096:	e000      	b.n	800309a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d063      	beq.n	800316e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030a6:	4b4c      	ldr	r3, [pc, #304]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00b      	beq.n	80030ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030b2:	4b49      	ldr	r3, [pc, #292]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 030c 	and.w	r3, r3, #12
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d11c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x18c>
 80030be:	4b46      	ldr	r3, [pc, #280]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d116      	bne.n	80030f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ca:	4b43      	ldr	r3, [pc, #268]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d005      	beq.n	80030e2 <HAL_RCC_OscConfig+0x176>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d001      	beq.n	80030e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e1ba      	b.n	8003458 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e2:	4b3d      	ldr	r3, [pc, #244]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4939      	ldr	r1, [pc, #228]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f6:	e03a      	b.n	800316e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d020      	beq.n	8003142 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003100:	4b36      	ldr	r3, [pc, #216]	; (80031dc <HAL_RCC_OscConfig+0x270>)
 8003102:	2201      	movs	r2, #1
 8003104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003106:	f7ff fa1d 	bl	8002544 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310e:	f7ff fa19 	bl	8002544 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e19b      	b.n	8003458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003120:	4b2d      	ldr	r3, [pc, #180]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312c:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4927      	ldr	r1, [pc, #156]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 800313c:	4313      	orrs	r3, r2
 800313e:	600b      	str	r3, [r1, #0]
 8003140:	e015      	b.n	800316e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003142:	4b26      	ldr	r3, [pc, #152]	; (80031dc <HAL_RCC_OscConfig+0x270>)
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7ff f9fc 	bl	8002544 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003150:	f7ff f9f8 	bl	8002544 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e17a      	b.n	8003458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003162:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d03a      	beq.n	80031f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d019      	beq.n	80031b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003182:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <HAL_RCC_OscConfig+0x274>)
 8003184:	2201      	movs	r2, #1
 8003186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003188:	f7ff f9dc 	bl	8002544 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003190:	f7ff f9d8 	bl	8002544 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e15a      	b.n	8003458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a2:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031ae:	2001      	movs	r0, #1
 80031b0:	f000 fb0a 	bl	80037c8 <RCC_Delay>
 80031b4:	e01c      	b.n	80031f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b6:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <HAL_RCC_OscConfig+0x274>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031bc:	f7ff f9c2 	bl	8002544 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c2:	e00f      	b.n	80031e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c4:	f7ff f9be 	bl	8002544 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d908      	bls.n	80031e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e140      	b.n	8003458 <HAL_RCC_OscConfig+0x4ec>
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000
 80031dc:	42420000 	.word	0x42420000
 80031e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e4:	4b9e      	ldr	r3, [pc, #632]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1e9      	bne.n	80031c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80a6 	beq.w	800334a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031fe:	2300      	movs	r3, #0
 8003200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003202:	4b97      	ldr	r3, [pc, #604]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10d      	bne.n	800322a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	4b94      	ldr	r3, [pc, #592]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	4a93      	ldr	r2, [pc, #588]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 8003214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003218:	61d3      	str	r3, [r2, #28]
 800321a:	4b91      	ldr	r3, [pc, #580]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003222:	60bb      	str	r3, [r7, #8]
 8003224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003226:	2301      	movs	r3, #1
 8003228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322a:	4b8e      	ldr	r3, [pc, #568]	; (8003464 <HAL_RCC_OscConfig+0x4f8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003232:	2b00      	cmp	r3, #0
 8003234:	d118      	bne.n	8003268 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003236:	4b8b      	ldr	r3, [pc, #556]	; (8003464 <HAL_RCC_OscConfig+0x4f8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a8a      	ldr	r2, [pc, #552]	; (8003464 <HAL_RCC_OscConfig+0x4f8>)
 800323c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003242:	f7ff f97f 	bl	8002544 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324a:	f7ff f97b 	bl	8002544 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b64      	cmp	r3, #100	; 0x64
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e0fd      	b.n	8003458 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325c:	4b81      	ldr	r3, [pc, #516]	; (8003464 <HAL_RCC_OscConfig+0x4f8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d106      	bne.n	800327e <HAL_RCC_OscConfig+0x312>
 8003270:	4b7b      	ldr	r3, [pc, #492]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	4a7a      	ldr	r2, [pc, #488]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6213      	str	r3, [r2, #32]
 800327c:	e02d      	b.n	80032da <HAL_RCC_OscConfig+0x36e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x334>
 8003286:	4b76      	ldr	r3, [pc, #472]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	4a75      	ldr	r2, [pc, #468]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 800328c:	f023 0301 	bic.w	r3, r3, #1
 8003290:	6213      	str	r3, [r2, #32]
 8003292:	4b73      	ldr	r3, [pc, #460]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	4a72      	ldr	r2, [pc, #456]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 8003298:	f023 0304 	bic.w	r3, r3, #4
 800329c:	6213      	str	r3, [r2, #32]
 800329e:	e01c      	b.n	80032da <HAL_RCC_OscConfig+0x36e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b05      	cmp	r3, #5
 80032a6:	d10c      	bne.n	80032c2 <HAL_RCC_OscConfig+0x356>
 80032a8:	4b6d      	ldr	r3, [pc, #436]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	4a6c      	ldr	r2, [pc, #432]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 80032ae:	f043 0304 	orr.w	r3, r3, #4
 80032b2:	6213      	str	r3, [r2, #32]
 80032b4:	4b6a      	ldr	r3, [pc, #424]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	4a69      	ldr	r2, [pc, #420]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	6213      	str	r3, [r2, #32]
 80032c0:	e00b      	b.n	80032da <HAL_RCC_OscConfig+0x36e>
 80032c2:	4b67      	ldr	r3, [pc, #412]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	4a66      	ldr	r2, [pc, #408]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 80032c8:	f023 0301 	bic.w	r3, r3, #1
 80032cc:	6213      	str	r3, [r2, #32]
 80032ce:	4b64      	ldr	r3, [pc, #400]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	4a63      	ldr	r2, [pc, #396]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 80032d4:	f023 0304 	bic.w	r3, r3, #4
 80032d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d015      	beq.n	800330e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e2:	f7ff f92f 	bl	8002544 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e8:	e00a      	b.n	8003300 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ea:	f7ff f92b 	bl	8002544 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e0ab      	b.n	8003458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003300:	4b57      	ldr	r3, [pc, #348]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0ee      	beq.n	80032ea <HAL_RCC_OscConfig+0x37e>
 800330c:	e014      	b.n	8003338 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330e:	f7ff f919 	bl	8002544 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003314:	e00a      	b.n	800332c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7ff f915 	bl	8002544 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f241 3288 	movw	r2, #5000	; 0x1388
 8003324:	4293      	cmp	r3, r2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e095      	b.n	8003458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800332c:	4b4c      	ldr	r3, [pc, #304]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1ee      	bne.n	8003316 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003338:	7dfb      	ldrb	r3, [r7, #23]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d105      	bne.n	800334a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333e:	4b48      	ldr	r3, [pc, #288]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	4a47      	ldr	r2, [pc, #284]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 8003344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003348:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 8081 	beq.w	8003456 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003354:	4b42      	ldr	r3, [pc, #264]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b08      	cmp	r3, #8
 800335e:	d061      	beq.n	8003424 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d146      	bne.n	80033f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003368:	4b3f      	ldr	r3, [pc, #252]	; (8003468 <HAL_RCC_OscConfig+0x4fc>)
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336e:	f7ff f8e9 	bl	8002544 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003376:	f7ff f8e5 	bl	8002544 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e067      	b.n	8003458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003388:	4b35      	ldr	r3, [pc, #212]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f0      	bne.n	8003376 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339c:	d108      	bne.n	80033b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800339e:	4b30      	ldr	r3, [pc, #192]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	492d      	ldr	r1, [pc, #180]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033b0:	4b2b      	ldr	r3, [pc, #172]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a19      	ldr	r1, [r3, #32]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	430b      	orrs	r3, r1
 80033c2:	4927      	ldr	r1, [pc, #156]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c8:	4b27      	ldr	r3, [pc, #156]	; (8003468 <HAL_RCC_OscConfig+0x4fc>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7ff f8b9 	bl	8002544 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d6:	f7ff f8b5 	bl	8002544 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e037      	b.n	8003458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033e8:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x46a>
 80033f4:	e02f      	b.n	8003456 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f6:	4b1c      	ldr	r3, [pc, #112]	; (8003468 <HAL_RCC_OscConfig+0x4fc>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7ff f8a2 	bl	8002544 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003404:	f7ff f89e 	bl	8002544 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e020      	b.n	8003458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003416:	4b12      	ldr	r3, [pc, #72]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x498>
 8003422:	e018      	b.n	8003456 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e013      	b.n	8003458 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003430:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_RCC_OscConfig+0x4f4>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	429a      	cmp	r2, r3
 8003442:	d106      	bne.n	8003452 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d001      	beq.n	8003456 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40021000 	.word	0x40021000
 8003464:	40007000 	.word	0x40007000
 8003468:	42420060 	.word	0x42420060

0800346c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0d0      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003480:	4b6a      	ldr	r3, [pc, #424]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d910      	bls.n	80034b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b67      	ldr	r3, [pc, #412]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 0207 	bic.w	r2, r3, #7
 8003496:	4965      	ldr	r1, [pc, #404]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b63      	ldr	r3, [pc, #396]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0b8      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c8:	4b59      	ldr	r3, [pc, #356]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	4a58      	ldr	r2, [pc, #352]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e0:	4b53      	ldr	r3, [pc, #332]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4a52      	ldr	r2, [pc, #328]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ec:	4b50      	ldr	r3, [pc, #320]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	494d      	ldr	r1, [pc, #308]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d040      	beq.n	800358c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	4b47      	ldr	r3, [pc, #284]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d115      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e07f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352a:	4b41      	ldr	r3, [pc, #260]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e073      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353a:	4b3d      	ldr	r3, [pc, #244]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e06b      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800354a:	4b39      	ldr	r3, [pc, #228]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f023 0203 	bic.w	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4936      	ldr	r1, [pc, #216]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 8003558:	4313      	orrs	r3, r2
 800355a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800355c:	f7fe fff2 	bl	8002544 <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	e00a      	b.n	800357a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003564:	f7fe ffee 	bl	8002544 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e053      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	4b2d      	ldr	r3, [pc, #180]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f003 020c 	and.w	r2, r3, #12
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	429a      	cmp	r2, r3
 800358a:	d1eb      	bne.n	8003564 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800358c:	4b27      	ldr	r3, [pc, #156]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d210      	bcs.n	80035bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b24      	ldr	r3, [pc, #144]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 0207 	bic.w	r2, r3, #7
 80035a2:	4922      	ldr	r1, [pc, #136]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b20      	ldr	r3, [pc, #128]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e032      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c8:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4916      	ldr	r1, [pc, #88]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035e6:	4b12      	ldr	r3, [pc, #72]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	490e      	ldr	r1, [pc, #56]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035fa:	f000 f821 	bl	8003640 <HAL_RCC_GetSysClockFreq>
 80035fe:	4601      	mov	r1, r0
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <HAL_RCC_ClockConfig+0x1c8>)
 800360c:	5cd3      	ldrb	r3, [r2, r3]
 800360e:	fa21 f303 	lsr.w	r3, r1, r3
 8003612:	4a09      	ldr	r2, [pc, #36]	; (8003638 <HAL_RCC_ClockConfig+0x1cc>)
 8003614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <HAL_RCC_ClockConfig+0x1d0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe fdbc 	bl	8002198 <HAL_InitTick>

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40022000 	.word	0x40022000
 8003630:	40021000 	.word	0x40021000
 8003634:	08007918 	.word	0x08007918
 8003638:	20000040 	.word	0x20000040
 800363c:	20000044 	.word	0x20000044

08003640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003640:	b490      	push	{r4, r7}
 8003642:	b08a      	sub	sp, #40	; 0x28
 8003644:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003646:	4b2a      	ldr	r3, [pc, #168]	; (80036f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003648:	1d3c      	adds	r4, r7, #4
 800364a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800364c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003650:	4b28      	ldr	r3, [pc, #160]	; (80036f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003666:	2300      	movs	r3, #0
 8003668:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800366a:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b04      	cmp	r3, #4
 8003678:	d002      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x40>
 800367a:	2b08      	cmp	r3, #8
 800367c:	d003      	beq.n	8003686 <HAL_RCC_GetSysClockFreq+0x46>
 800367e:	e02d      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003680:	4b1e      	ldr	r3, [pc, #120]	; (80036fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003682:	623b      	str	r3, [r7, #32]
      break;
 8003684:	e02d      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	0c9b      	lsrs	r3, r3, #18
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003692:	4413      	add	r3, r2
 8003694:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003698:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d013      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036a4:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	0c5b      	lsrs	r3, r3, #17
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036b2:	4413      	add	r3, r2
 80036b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	4a0f      	ldr	r2, [pc, #60]	; (80036fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80036be:	fb02 f203 	mul.w	r2, r2, r3
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ca:	e004      	b.n	80036d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	4a0c      	ldr	r2, [pc, #48]	; (8003700 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036d0:	fb02 f303 	mul.w	r3, r2, r3
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	623b      	str	r3, [r7, #32]
      break;
 80036da:	e002      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036dc:	4b07      	ldr	r3, [pc, #28]	; (80036fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80036de:	623b      	str	r3, [r7, #32]
      break;
 80036e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e2:	6a3b      	ldr	r3, [r7, #32]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3728      	adds	r7, #40	; 0x28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc90      	pop	{r4, r7}
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	080077f4 	.word	0x080077f4
 80036f4:	08007804 	.word	0x08007804
 80036f8:	40021000 	.word	0x40021000
 80036fc:	007a1200 	.word	0x007a1200
 8003700:	003d0900 	.word	0x003d0900

08003704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003708:	4b02      	ldr	r3, [pc, #8]	; (8003714 <HAL_RCC_GetHCLKFreq+0x10>)
 800370a:	681b      	ldr	r3, [r3, #0]
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr
 8003714:	20000040 	.word	0x20000040

08003718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800371c:	f7ff fff2 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 8003720:	4601      	mov	r1, r0
 8003722:	4b05      	ldr	r3, [pc, #20]	; (8003738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	0a1b      	lsrs	r3, r3, #8
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	4a03      	ldr	r2, [pc, #12]	; (800373c <HAL_RCC_GetPCLK1Freq+0x24>)
 800372e:	5cd3      	ldrb	r3, [r2, r3]
 8003730:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003734:	4618      	mov	r0, r3
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40021000 	.word	0x40021000
 800373c:	08007928 	.word	0x08007928

08003740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003744:	f7ff ffde 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 8003748:	4601      	mov	r1, r0
 800374a:	4b05      	ldr	r3, [pc, #20]	; (8003760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	0adb      	lsrs	r3, r3, #11
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	4a03      	ldr	r2, [pc, #12]	; (8003764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003756:	5cd3      	ldrb	r3, [r2, r3]
 8003758:	fa21 f303 	lsr.w	r3, r1, r3
}
 800375c:	4618      	mov	r0, r3
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40021000 	.word	0x40021000
 8003764:	08007928 	.word	0x08007928

08003768 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	220f      	movs	r2, #15
 8003776:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_RCC_GetClockConfig+0x58>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0203 	and.w	r2, r3, #3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <HAL_RCC_GetClockConfig+0x58>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <HAL_RCC_GetClockConfig+0x58>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800379c:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <HAL_RCC_GetClockConfig+0x58>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	08db      	lsrs	r3, r3, #3
 80037a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <HAL_RCC_GetClockConfig+0x5c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0207 	and.w	r2, r3, #7
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40022000 	.word	0x40022000

080037c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037d0:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <RCC_Delay+0x34>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <RCC_Delay+0x38>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	0a5b      	lsrs	r3, r3, #9
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	fb02 f303 	mul.w	r3, r2, r3
 80037e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037e4:	bf00      	nop
  }
  while (Delay --);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1e5a      	subs	r2, r3, #1
 80037ea:	60fa      	str	r2, [r7, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f9      	bne.n	80037e4 <RCC_Delay+0x1c>
}
 80037f0:	bf00      	nop
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20000040 	.word	0x20000040
 8003800:	10624dd3 	.word	0x10624dd3

08003804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e041      	b.n	800389a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f839 	bl	80038a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3304      	adds	r3, #4
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f000 f9b4 	bl	8003bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d001      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e03a      	b.n	8003942 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a18      	ldr	r2, [pc, #96]	; (800394c <HAL_TIM_Base_Start_IT+0x98>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00e      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x58>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f6:	d009      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x58>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a14      	ldr	r2, [pc, #80]	; (8003950 <HAL_TIM_Base_Start_IT+0x9c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d004      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x58>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a13      	ldr	r2, [pc, #76]	; (8003954 <HAL_TIM_Base_Start_IT+0xa0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d111      	bne.n	8003930 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b06      	cmp	r3, #6
 800391c:	d010      	beq.n	8003940 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0201 	orr.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392e:	e007      	b.n	8003940 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	40012c00 	.word	0x40012c00
 8003950:	40000400 	.word	0x40000400
 8003954:	40000800 	.word	0x40000800

08003958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b02      	cmp	r3, #2
 800396c:	d122      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b02      	cmp	r3, #2
 800397a:	d11b      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0202 	mvn.w	r2, #2
 8003984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f8ed 	bl	8003b7a <HAL_TIM_IC_CaptureCallback>
 80039a0:	e005      	b.n	80039ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f8e0 	bl	8003b68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f8ef 	bl	8003b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d122      	bne.n	8003a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d11b      	bne.n	8003a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0204 	mvn.w	r2, #4
 80039d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2202      	movs	r2, #2
 80039de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f8c3 	bl	8003b7a <HAL_TIM_IC_CaptureCallback>
 80039f4:	e005      	b.n	8003a02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f8b6 	bl	8003b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f8c5 	bl	8003b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d122      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d11b      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0208 	mvn.w	r2, #8
 8003a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2204      	movs	r2, #4
 8003a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f899 	bl	8003b7a <HAL_TIM_IC_CaptureCallback>
 8003a48:	e005      	b.n	8003a56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f88c 	bl	8003b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f89b 	bl	8003b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d122      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d11b      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0210 	mvn.w	r2, #16
 8003a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2208      	movs	r2, #8
 8003a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f86f 	bl	8003b7a <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e005      	b.n	8003aaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f862 	bl	8003b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f871 	bl	8003b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d10e      	bne.n	8003adc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d107      	bne.n	8003adc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0201 	mvn.w	r2, #1
 8003ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fc fc9c 	bl	8000414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae6:	2b80      	cmp	r3, #128	; 0x80
 8003ae8:	d10e      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af4:	2b80      	cmp	r3, #128	; 0x80
 8003af6:	d107      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f8bf 	bl	8003c86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b40      	cmp	r3, #64	; 0x40
 8003b14:	d10e      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d107      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f835 	bl	8003b9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0320 	and.w	r3, r3, #32
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	d10e      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	d107      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0220 	mvn.w	r2, #32
 8003b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f88a 	bl	8003c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr

08003b7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr

08003b8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr

08003b9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr

08003bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a29      	ldr	r2, [pc, #164]	; (8003c68 <TIM_Base_SetConfig+0xb8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00b      	beq.n	8003be0 <TIM_Base_SetConfig+0x30>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bce:	d007      	beq.n	8003be0 <TIM_Base_SetConfig+0x30>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a26      	ldr	r2, [pc, #152]	; (8003c6c <TIM_Base_SetConfig+0xbc>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d003      	beq.n	8003be0 <TIM_Base_SetConfig+0x30>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a25      	ldr	r2, [pc, #148]	; (8003c70 <TIM_Base_SetConfig+0xc0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d108      	bne.n	8003bf2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a1c      	ldr	r2, [pc, #112]	; (8003c68 <TIM_Base_SetConfig+0xb8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00b      	beq.n	8003c12 <TIM_Base_SetConfig+0x62>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c00:	d007      	beq.n	8003c12 <TIM_Base_SetConfig+0x62>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a19      	ldr	r2, [pc, #100]	; (8003c6c <TIM_Base_SetConfig+0xbc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d003      	beq.n	8003c12 <TIM_Base_SetConfig+0x62>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a18      	ldr	r2, [pc, #96]	; (8003c70 <TIM_Base_SetConfig+0xc0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d108      	bne.n	8003c24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a07      	ldr	r2, [pc, #28]	; (8003c68 <TIM_Base_SetConfig+0xb8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d103      	bne.n	8003c58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	615a      	str	r2, [r3, #20]
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr
 8003c68:	40012c00 	.word	0x40012c00
 8003c6c:	40000400 	.word	0x40000400
 8003c70:	40000800 	.word	0x40000800

08003c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr

08003c86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr

08003c98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e03f      	b.n	8003d2a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fe f95c 	bl	8001f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2224      	movs	r2, #36	; 0x24
 8003cc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fe13 	bl	8004908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695a      	ldr	r2, [r3, #20]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e047      	b.n	8003dd4 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d106      	bne.n	8003d5e <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7fe f90f 	bl	8001f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2224      	movs	r2, #36	; 0x24
 8003d62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d74:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fdc6 	bl	8004908 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d8a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003d9a:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695a      	ldr	r2, [r3, #20]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0208 	orr.w	r2, r2, #8
 8003daa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	; 0x28
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	4613      	mov	r3, r2
 8003dea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b20      	cmp	r3, #32
 8003dfa:	d17c      	bne.n	8003ef6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_UART_Transmit+0x2c>
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e075      	b.n	8003ef8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_UART_Transmit+0x3e>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e06e      	b.n	8003ef8 <HAL_UART_Transmit+0x11c>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2221      	movs	r2, #33	; 0x21
 8003e2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003e30:	f7fe fb88 	bl	8002544 <HAL_GetTick>
 8003e34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	88fa      	ldrh	r2, [r7, #6]
 8003e3a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	88fa      	ldrh	r2, [r7, #6]
 8003e40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4a:	d108      	bne.n	8003e5e <HAL_UART_Transmit+0x82>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d104      	bne.n	8003e5e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	61bb      	str	r3, [r7, #24]
 8003e5c:	e003      	b.n	8003e66 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003e6e:	e02a      	b.n	8003ec6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2200      	movs	r2, #0
 8003e78:	2180      	movs	r1, #128	; 0x80
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 fbcc 	bl	8004618 <UART_WaitOnFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e036      	b.n	8003ef8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10b      	bne.n	8003ea8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e9e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	3302      	adds	r3, #2
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	e007      	b.n	8003eb8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	781a      	ldrb	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1cf      	bne.n	8003e70 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2140      	movs	r1, #64	; 0x40
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fb9c 	bl	8004618 <UART_WaitOnFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e006      	b.n	8003ef8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	e000      	b.n	8003ef8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ef6:	2302      	movs	r3, #2
  }
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3720      	adds	r7, #32
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d153      	bne.n	8003fc2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_UART_Transmit_DMA+0x26>
 8003f20:	88fb      	ldrh	r3, [r7, #6]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e04c      	b.n	8003fc4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_UART_Transmit_DMA+0x38>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e045      	b.n	8003fc4 <HAL_UART_Transmit_DMA+0xc4>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	88fa      	ldrh	r2, [r7, #6]
 8003f4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	88fa      	ldrh	r2, [r7, #6]
 8003f50:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2221      	movs	r2, #33	; 0x21
 8003f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	4a19      	ldr	r2, [pc, #100]	; (8003fcc <HAL_UART_Transmit_DMA+0xcc>)
 8003f66:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	4a18      	ldr	r2, [pc, #96]	; (8003fd0 <HAL_UART_Transmit_DMA+0xd0>)
 8003f6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	4a17      	ldr	r2, [pc, #92]	; (8003fd4 <HAL_UART_Transmit_DMA+0xd4>)
 8003f76:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8003f80:	f107 0308 	add.w	r3, r7, #8
 8003f84:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	6819      	ldr	r1, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3304      	adds	r3, #4
 8003f94:	461a      	mov	r2, r3
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	f7fe fc18 	bl	80027cc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fa4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fbc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e000      	b.n	8003fc4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
  }
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	08004493 	.word	0x08004493
 8003fd0:	080044e5 	.word	0x080044e5
 8003fd4:	08004585 	.word	0x08004585

08003fd8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d166      	bne.n	80040c0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <HAL_UART_Receive_DMA+0x26>
 8003ff8:	88fb      	ldrh	r3, [r7, #6]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e05f      	b.n	80040c2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_UART_Receive_DMA+0x38>
 800400c:	2302      	movs	r3, #2
 800400e:	e058      	b.n	80040c2 <HAL_UART_Receive_DMA+0xea>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	88fa      	ldrh	r2, [r7, #6]
 8004022:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2222      	movs	r2, #34	; 0x22
 800402e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004036:	4a25      	ldr	r2, [pc, #148]	; (80040cc <HAL_UART_Receive_DMA+0xf4>)
 8004038:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403e:	4a24      	ldr	r2, [pc, #144]	; (80040d0 <HAL_UART_Receive_DMA+0xf8>)
 8004040:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004046:	4a23      	ldr	r2, [pc, #140]	; (80040d4 <HAL_UART_Receive_DMA+0xfc>)
 8004048:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404e:	2200      	movs	r2, #0
 8004050:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8004052:	f107 0308 	add.w	r3, r7, #8
 8004056:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3304      	adds	r3, #4
 8004062:	4619      	mov	r1, r3
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	f7fe fbaf 	bl	80027cc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800406e:	2300      	movs	r3, #0
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800409a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695a      	ldr	r2, [r3, #20]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ba:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	e000      	b.n	80040c2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80040c0:	2302      	movs	r3, #2
  }
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	08004501 	.word	0x08004501
 80040d0:	08004569 	.word	0x08004569
 80040d4:	08004585 	.word	0x08004585

080040d8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bf14      	ite	ne
 80040f2:	2301      	movne	r3, #1
 80040f4:	2300      	moveq	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b21      	cmp	r3, #33	; 0x21
 8004104:	d116      	bne.n	8004134 <HAL_UART_DMAStop+0x5c>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d013      	beq.n	8004134 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800411a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004120:	2b00      	cmp	r3, #0
 8004122:	d004      	beq.n	800412e <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	4618      	mov	r0, r3
 800412a:	f7fe fbae 	bl	800288a <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fabc 	bl	80046ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	bf14      	ite	ne
 8004142:	2301      	movne	r3, #1
 8004144:	2300      	moveq	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b22      	cmp	r3, #34	; 0x22
 8004154:	d116      	bne.n	8004184 <HAL_UART_DMAStop+0xac>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d013      	beq.n	8004184 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800416a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004170:	2b00      	cmp	r3, #0
 8004172:	d004      	beq.n	800417e <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004178:	4618      	mov	r0, r3
 800417a:	f7fe fb86 	bl	800288a <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 faa9 	bl	80046d6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10d      	bne.n	80041e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_UART_IRQHandler+0x52>
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fb13 	bl	8004806 <UART_Receive_IT>
      return;
 80041e0:	e0d1      	b.n	8004386 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 80b0 	beq.w	800434a <HAL_UART_IRQHandler+0x1ba>
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d105      	bne.n	8004200 <HAL_UART_IRQHandler+0x70>
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 80a5 	beq.w	800434a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_UART_IRQHandler+0x90>
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004218:	f043 0201 	orr.w	r2, r3, #1
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <HAL_UART_IRQHandler+0xb0>
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004238:	f043 0202 	orr.w	r2, r3, #2
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_UART_IRQHandler+0xd0>
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004258:	f043 0204 	orr.w	r2, r3, #4
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00f      	beq.n	800428a <HAL_UART_IRQHandler+0xfa>
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	d104      	bne.n	800427e <HAL_UART_IRQHandler+0xee>
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d005      	beq.n	800428a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004282:	f043 0208 	orr.w	r2, r3, #8
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d078      	beq.n	8004384 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d007      	beq.n	80042ac <HAL_UART_IRQHandler+0x11c>
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	f003 0320 	and.w	r3, r3, #32
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 faad 	bl	8004806 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	bf14      	ite	ne
 80042ba:	2301      	movne	r3, #1
 80042bc:	2300      	moveq	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d102      	bne.n	80042d4 <HAL_UART_IRQHandler+0x144>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d031      	beq.n	8004338 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f9fe 	bl	80046d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d023      	beq.n	8004330 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695a      	ldr	r2, [r3, #20]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d013      	beq.n	8004328 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004304:	4a21      	ldr	r2, [pc, #132]	; (800438c <HAL_UART_IRQHandler+0x1fc>)
 8004306:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430c:	4618      	mov	r0, r3
 800430e:	f7fe faf7 	bl	8002900 <HAL_DMA_Abort_IT>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d016      	beq.n	8004346 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004322:	4610      	mov	r0, r2
 8004324:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004326:	e00e      	b.n	8004346 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f843 	bl	80043b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800432e:	e00a      	b.n	8004346 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f83f 	bl	80043b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004336:	e006      	b.n	8004346 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f83b 	bl	80043b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004344:	e01e      	b.n	8004384 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004346:	bf00      	nop
    return;
 8004348:	e01c      	b.n	8004384 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_UART_IRQHandler+0x1d6>
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f9ea 	bl	8004738 <UART_Transmit_IT>
    return;
 8004364:	e00f      	b.n	8004386 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <HAL_UART_IRQHandler+0x1f6>
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004376:	2b00      	cmp	r3, #0
 8004378:	d005      	beq.n	8004386 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fa2b 	bl	80047d6 <UART_EndTransmit_IT>
    return;
 8004380:	bf00      	nop
 8004382:	e000      	b.n	8004386 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004384:	bf00      	nop
  }
}
 8004386:	3720      	adds	r7, #32
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	08004711 	.word	0x08004711

08004390 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr

080043a2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr

080043b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b085      	sub	sp, #20
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 80043dc:	2302      	movs	r3, #2
 80043de:	e020      	b.n	8004422 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2224      	movs	r2, #36	; 0x24
 80043ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 030c 	bic.w	r3, r3, #12
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f043 0308 	orr.w	r3, r3, #8
 8004406:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8004442:	2302      	movs	r3, #2
 8004444:	e020      	b.n	8004488 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2224      	movs	r2, #36	; 0x24
 8004452:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f023 030c 	bic.w	r3, r3, #12
 8004464:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f043 0304 	orr.w	r3, r3, #4
 800446c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2220      	movs	r2, #32
 800447a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	bc80      	pop	{r7}
 8004490:	4770      	bx	lr

08004492 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d113      	bne.n	80044d6 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695a      	ldr	r2, [r3, #20]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044c2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044d2:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044d4:	e002      	b.n	80044dc <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f7fc ffbc 	bl	8001454 <HAL_UART_TxCpltCallback>
}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f7ff ff4c 	bl	8004390 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d11e      	bne.n	800455a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004530:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695a      	ldr	r2, [r3, #20]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0201 	bic.w	r2, r2, #1
 8004540:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695a      	ldr	r2, [r3, #20]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004550:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2220      	movs	r2, #32
 8004556:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f7fc ff8c 	bl	8001478 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004560:	bf00      	nop
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f7ff ff13 	bl	80043a2 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bf14      	ite	ne
 80045a4:	2301      	movne	r3, #1
 80045a6:	2300      	moveq	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b21      	cmp	r3, #33	; 0x21
 80045b6:	d108      	bne.n	80045ca <UART_DMAError+0x46>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2200      	movs	r2, #0
 80045c2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80045c4:	68b8      	ldr	r0, [r7, #8]
 80045c6:	f000 f871 	bl	80046ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b22      	cmp	r3, #34	; 0x22
 80045ea:	d108      	bne.n	80045fe <UART_DMAError+0x7a>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2200      	movs	r2, #0
 80045f6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80045f8:	68b8      	ldr	r0, [r7, #8]
 80045fa:	f000 f86c 	bl	80046d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004602:	f043 0210 	orr.w	r2, r3, #16
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800460a:	68b8      	ldr	r0, [r7, #8]
 800460c:	f7ff fed2 	bl	80043b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004610:	bf00      	nop
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004628:	e02c      	b.n	8004684 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d028      	beq.n	8004684 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <UART_WaitOnFlagUntilTimeout+0x30>
 8004638:	f7fd ff84 	bl	8002544 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	429a      	cmp	r2, r3
 8004646:	d21d      	bcs.n	8004684 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004656:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695a      	ldr	r2, [r3, #20]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0201 	bic.w	r2, r2, #1
 8004666:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e00f      	b.n	80046a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4013      	ands	r3, r2
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	429a      	cmp	r2, r3
 8004692:	bf0c      	ite	eq
 8004694:	2301      	moveq	r3, #1
 8004696:	2300      	movne	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	461a      	mov	r2, r3
 800469c:	79fb      	ldrb	r3, [r7, #7]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d0c3      	beq.n	800462a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80046c2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr

080046d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695a      	ldr	r2, [r3, #20]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0201 	bic.w	r2, r2, #1
 80046fc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr

08004710 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f7ff fe42 	bl	80043b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b21      	cmp	r3, #33	; 0x21
 800474a:	d13e      	bne.n	80047ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004754:	d114      	bne.n	8004780 <UART_Transmit_IT+0x48>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d110      	bne.n	8004780 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004772:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	1c9a      	adds	r2, r3, #2
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	621a      	str	r2, [r3, #32]
 800477e:	e008      	b.n	8004792 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	1c59      	adds	r1, r3, #1
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6211      	str	r1, [r2, #32]
 800478a:	781a      	ldrb	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29b      	uxth	r3, r3
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	4619      	mov	r1, r3
 80047a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10f      	bne.n	80047c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	e000      	b.n	80047cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047ca:	2302      	movs	r3, #2
  }
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr

080047d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fc fe2c 	bl	8001454 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b22      	cmp	r3, #34	; 0x22
 8004818:	d170      	bne.n	80048fc <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004822:	d117      	bne.n	8004854 <UART_Receive_IT+0x4e>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d113      	bne.n	8004854 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800482c:	2300      	movs	r3, #0
 800482e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004834:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	b29b      	uxth	r3, r3
 800483e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004842:	b29a      	uxth	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484c:	1c9a      	adds	r2, r3, #2
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	629a      	str	r2, [r3, #40]	; 0x28
 8004852:	e026      	b.n	80048a2 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004858:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800485a:	2300      	movs	r3, #0
 800485c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004866:	d007      	beq.n	8004878 <UART_Receive_IT+0x72>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10a      	bne.n	8004886 <UART_Receive_IT+0x80>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d106      	bne.n	8004886 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	b2da      	uxtb	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	701a      	strb	r2, [r3, #0]
 8004884:	e008      	b.n	8004898 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004892:	b2da      	uxtb	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	4619      	mov	r1, r3
 80048b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d120      	bne.n	80048f8 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0220 	bic.w	r2, r2, #32
 80048c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0201 	bic.w	r2, r2, #1
 80048e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fc fdc2 	bl	8001478 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	e002      	b.n	80048fe <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	e000      	b.n	80048fe <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80048fc:	2302      	movs	r3, #2
  }
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	4313      	orrs	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004942:	f023 030c 	bic.w	r3, r3, #12
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6812      	ldr	r2, [r2, #0]
 800494a:	68b9      	ldr	r1, [r7, #8]
 800494c:	430b      	orrs	r3, r1
 800494e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a2c      	ldr	r2, [pc, #176]	; (8004a1c <UART_SetConfig+0x114>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d103      	bne.n	8004978 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004970:	f7fe fee6 	bl	8003740 <HAL_RCC_GetPCLK2Freq>
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	e002      	b.n	800497e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004978:	f7fe fece 	bl	8003718 <HAL_RCC_GetPCLK1Freq>
 800497c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	009a      	lsls	r2, r3, #2
 8004988:	441a      	add	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	fbb2 f3f3 	udiv	r3, r2, r3
 8004994:	4a22      	ldr	r2, [pc, #136]	; (8004a20 <UART_SetConfig+0x118>)
 8004996:	fba2 2303 	umull	r2, r3, r2, r3
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	0119      	lsls	r1, r3, #4
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	009a      	lsls	r2, r3, #2
 80049a8:	441a      	add	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80049b4:	4b1a      	ldr	r3, [pc, #104]	; (8004a20 <UART_SetConfig+0x118>)
 80049b6:	fba3 0302 	umull	r0, r3, r3, r2
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	2064      	movs	r0, #100	; 0x64
 80049be:	fb00 f303 	mul.w	r3, r0, r3
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	3332      	adds	r3, #50	; 0x32
 80049c8:	4a15      	ldr	r2, [pc, #84]	; (8004a20 <UART_SetConfig+0x118>)
 80049ca:	fba2 2303 	umull	r2, r3, r2, r3
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049d4:	4419      	add	r1, r3
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	009a      	lsls	r2, r3, #2
 80049e0:	441a      	add	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <UART_SetConfig+0x118>)
 80049ee:	fba3 0302 	umull	r0, r3, r3, r2
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	2064      	movs	r0, #100	; 0x64
 80049f6:	fb00 f303 	mul.w	r3, r0, r3
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	3332      	adds	r3, #50	; 0x32
 8004a00:	4a07      	ldr	r2, [pc, #28]	; (8004a20 <UART_SetConfig+0x118>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	f003 020f 	and.w	r2, r3, #15
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	440a      	add	r2, r1
 8004a12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a14:	bf00      	nop
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40013800 	.word	0x40013800
 8004a20:	51eb851f 	.word	0x51eb851f

08004a24 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a2a:	f3ef 8305 	mrs	r3, IPSR
 8004a2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10f      	bne.n	8004a56 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a36:	f3ef 8310 	mrs	r3, PRIMASK
 8004a3a:	607b      	str	r3, [r7, #4]
  return(result);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <osKernelInitialize+0x32>
 8004a42:	4b10      	ldr	r3, [pc, #64]	; (8004a84 <osKernelInitialize+0x60>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d109      	bne.n	8004a5e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a4a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a4e:	603b      	str	r3, [r7, #0]
  return(result);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004a56:	f06f 0305 	mvn.w	r3, #5
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e00c      	b.n	8004a78 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a5e:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <osKernelInitialize+0x60>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d105      	bne.n	8004a72 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004a66:	4b07      	ldr	r3, [pc, #28]	; (8004a84 <osKernelInitialize+0x60>)
 8004a68:	2201      	movs	r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	e002      	b.n	8004a78 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004a72:	f04f 33ff 	mov.w	r3, #4294967295
 8004a76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004a78:	68fb      	ldr	r3, [r7, #12]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr
 8004a84:	20000a34 	.word	0x20000a34

08004a88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a8e:	f3ef 8305 	mrs	r3, IPSR
 8004a92:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10f      	bne.n	8004aba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a9e:	607b      	str	r3, [r7, #4]
  return(result);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d109      	bne.n	8004aba <osKernelStart+0x32>
 8004aa6:	4b11      	ldr	r3, [pc, #68]	; (8004aec <osKernelStart+0x64>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d109      	bne.n	8004ac2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004aae:	f3ef 8311 	mrs	r3, BASEPRI
 8004ab2:	603b      	str	r3, [r7, #0]
  return(result);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004aba:	f06f 0305 	mvn.w	r3, #5
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	e00e      	b.n	8004ae0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ac2:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <osKernelStart+0x64>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d107      	bne.n	8004ada <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004aca:	4b08      	ldr	r3, [pc, #32]	; (8004aec <osKernelStart+0x64>)
 8004acc:	2202      	movs	r2, #2
 8004ace:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004ad0:	f001 f864 	bl	8005b9c <vTaskStartScheduler>
      stat = osOK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	e002      	b.n	8004ae0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004ada:	f04f 33ff 	mov.w	r3, #4294967295
 8004ade:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20000a34 	.word	0x20000a34

08004af0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b092      	sub	sp, #72	; 0x48
 8004af4:	af04      	add	r7, sp, #16
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b00:	f3ef 8305 	mrs	r3, IPSR
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f040 8094 	bne.w	8004c36 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b12:	623b      	str	r3, [r7, #32]
  return(result);
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f040 808d 	bne.w	8004c36 <osThreadNew+0x146>
 8004b1c:	4b48      	ldr	r3, [pc, #288]	; (8004c40 <osThreadNew+0x150>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d106      	bne.n	8004b32 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b24:	f3ef 8311 	mrs	r3, BASEPRI
 8004b28:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f040 8082 	bne.w	8004c36 <osThreadNew+0x146>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d07e      	beq.n	8004c36 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004b38:	2380      	movs	r3, #128	; 0x80
 8004b3a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004b3c:	2318      	movs	r3, #24
 8004b3e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004b40:	2300      	movs	r3, #0
 8004b42:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004b44:	f107 031b 	add.w	r3, r7, #27
 8004b48:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d045      	beq.n	8004be2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <osThreadNew+0x74>
        name = attr->name;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <osThreadNew+0x9a>
 8004b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7a:	2b38      	cmp	r3, #56	; 0x38
 8004b7c:	d805      	bhi.n	8004b8a <osThreadNew+0x9a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <osThreadNew+0x9e>
        return (NULL);
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	e054      	b.n	8004c38 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	089b      	lsrs	r3, r3, #2
 8004b9c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00e      	beq.n	8004bc4 <osThreadNew+0xd4>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	2b5b      	cmp	r3, #91	; 0x5b
 8004bac:	d90a      	bls.n	8004bc4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d006      	beq.n	8004bc4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <osThreadNew+0xd4>
        mem = 1;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bc2:	e010      	b.n	8004be6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10c      	bne.n	8004be6 <osThreadNew+0xf6>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d108      	bne.n	8004be6 <osThreadNew+0xf6>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d104      	bne.n	8004be6 <osThreadNew+0xf6>
          mem = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8004be0:	e001      	b.n	8004be6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004be2:	2300      	movs	r3, #0
 8004be4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d110      	bne.n	8004c0e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bf4:	9202      	str	r2, [sp, #8]
 8004bf6:	9301      	str	r3, [sp, #4]
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fe02 	bl	800580c <xTaskCreateStatic>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	e013      	b.n	8004c36 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d110      	bne.n	8004c36 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	f107 0314 	add.w	r3, r7, #20
 8004c1c:	9301      	str	r3, [sp, #4]
 8004c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 fe49 	bl	80058be <xTaskCreate>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d001      	beq.n	8004c36 <osThreadNew+0x146>
          hTask = NULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c36:	697b      	ldr	r3, [r7, #20]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3738      	adds	r7, #56	; 0x38
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20000a34 	.word	0x20000a34

08004c44 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c4c:	f3ef 8305 	mrs	r3, IPSR
 8004c50:	613b      	str	r3, [r7, #16]
  return(result);
 8004c52:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10f      	bne.n	8004c78 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c58:	f3ef 8310 	mrs	r3, PRIMASK
 8004c5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d109      	bne.n	8004c78 <osDelay+0x34>
 8004c64:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <osDelay+0x58>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d109      	bne.n	8004c80 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c6c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c70:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <osDelay+0x3c>
    stat = osErrorISR;
 8004c78:	f06f 0305 	mvn.w	r3, #5
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	e007      	b.n	8004c90 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 ff52 	bl	8005b34 <vTaskDelay>
    }
  }

  return (stat);
 8004c90:	697b      	ldr	r3, [r7, #20]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000a34 	.word	0x20000a34

08004ca0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4a06      	ldr	r2, [pc, #24]	; (8004cc8 <vApplicationGetIdleTaskMemory+0x28>)
 8004cb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	4a05      	ldr	r2, [pc, #20]	; (8004ccc <vApplicationGetIdleTaskMemory+0x2c>)
 8004cb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2280      	movs	r2, #128	; 0x80
 8004cbc:	601a      	str	r2, [r3, #0]
}
 8004cbe:	bf00      	nop
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr
 8004cc8:	20000a38 	.word	0x20000a38
 8004ccc:	20000a94 	.word	0x20000a94

08004cd0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4a07      	ldr	r2, [pc, #28]	; (8004cfc <vApplicationGetTimerTaskMemory+0x2c>)
 8004ce0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	4a06      	ldr	r2, [pc, #24]	; (8004d00 <vApplicationGetTimerTaskMemory+0x30>)
 8004ce6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cee:	601a      	str	r2, [r3, #0]
}
 8004cf0:	bf00      	nop
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20000c94 	.word	0x20000c94
 8004d00:	20000cf0 	.word	0x20000cf0

08004d04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f103 0208 	add.w	r2, r3, #8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f103 0208 	add.w	r2, r3, #8
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f103 0208 	add.w	r2, r3, #8
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr

08004d42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr

08004d5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b085      	sub	sp, #20
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	601a      	str	r2, [r3, #0]
}
 8004d96:	bf00      	nop
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr

08004da0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db6:	d103      	bne.n	8004dc0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	e00c      	b.n	8004dda <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3308      	adds	r3, #8
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	e002      	b.n	8004dce <vListInsert+0x2e>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d2f6      	bcs.n	8004dc8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	601a      	str	r2, [r3, #0]
}
 8004e06:	bf00      	nop
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr

08004e10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6892      	ldr	r2, [r2, #8]
 8004e26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6852      	ldr	r2, [r2, #4]
 8004e30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d103      	bne.n	8004e44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	1e5a      	subs	r2, r3, #1
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc80      	pop	{r7}
 8004e60:	4770      	bx	lr
	...

08004e64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d109      	bne.n	8004e8c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	e7fe      	b.n	8004e8a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004e8c:	f001 ff94 	bl	8006db8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e98:	68f9      	ldr	r1, [r7, #12]
 8004e9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ea0:	441a      	add	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	68f9      	ldr	r1, [r7, #12]
 8004ec0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ec2:	fb01 f303 	mul.w	r3, r1, r3
 8004ec6:	441a      	add	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	22ff      	movs	r2, #255	; 0xff
 8004ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	22ff      	movs	r2, #255	; 0xff
 8004ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d114      	bne.n	8004f0c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d01a      	beq.n	8004f20 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3310      	adds	r3, #16
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f001 f8d8 	bl	80060a4 <xTaskRemoveFromEventList>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d012      	beq.n	8004f20 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004efa:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <xQueueGenericReset+0xcc>)
 8004efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	e009      	b.n	8004f20 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3310      	adds	r3, #16
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff fef7 	bl	8004d04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3324      	adds	r3, #36	; 0x24
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fef2 	bl	8004d04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f20:	f001 ff78 	bl	8006e14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f24:	2301      	movs	r3, #1
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	e000ed04 	.word	0xe000ed04

08004f34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08e      	sub	sp, #56	; 0x38
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
 8004f40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d109      	bne.n	8004f5c <xQueueGenericCreateStatic+0x28>
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f5a:	e7fe      	b.n	8004f5a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d109      	bne.n	8004f76 <xQueueGenericCreateStatic+0x42>
 8004f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
 8004f74:	e7fe      	b.n	8004f74 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <xQueueGenericCreateStatic+0x4e>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <xQueueGenericCreateStatic+0x52>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <xQueueGenericCreateStatic+0x54>
 8004f86:	2300      	movs	r3, #0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d109      	bne.n	8004fa0 <xQueueGenericCreateStatic+0x6c>
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	623b      	str	r3, [r7, #32]
 8004f9e:	e7fe      	b.n	8004f9e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d102      	bne.n	8004fac <xQueueGenericCreateStatic+0x78>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <xQueueGenericCreateStatic+0x7c>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <xQueueGenericCreateStatic+0x7e>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d109      	bne.n	8004fca <xQueueGenericCreateStatic+0x96>
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	61fb      	str	r3, [r7, #28]
 8004fc8:	e7fe      	b.n	8004fc8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004fca:	2350      	movs	r3, #80	; 0x50
 8004fcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b50      	cmp	r3, #80	; 0x50
 8004fd2:	d009      	beq.n	8004fe8 <xQueueGenericCreateStatic+0xb4>
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	61bb      	str	r3, [r7, #24]
 8004fe6:	e7fe      	b.n	8004fe6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00d      	beq.n	800500e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ffa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	4613      	mov	r3, r2
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	68b9      	ldr	r1, [r7, #8]
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 f805 	bl	8005018 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800500e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005010:	4618      	mov	r0, r3
 8005012:	3730      	adds	r7, #48	; 0x30
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d103      	bne.n	8005034 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	e002      	b.n	800503a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005046:	2101      	movs	r1, #1
 8005048:	69b8      	ldr	r0, [r7, #24]
 800504a:	f7ff ff0b 	bl	8004e64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	78fa      	ldrb	r2, [r7, #3]
 8005052:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005056:	bf00      	nop
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08e      	sub	sp, #56	; 0x38
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800506e:	2300      	movs	r3, #0
 8005070:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	2b00      	cmp	r3, #0
 800507a:	d109      	bne.n	8005090 <xQueueGenericSend+0x30>
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	62bb      	str	r3, [r7, #40]	; 0x28
 800508e:	e7fe      	b.n	800508e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d103      	bne.n	800509e <xQueueGenericSend+0x3e>
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <xQueueGenericSend+0x42>
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <xQueueGenericSend+0x44>
 80050a2:	2300      	movs	r3, #0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d109      	bne.n	80050bc <xQueueGenericSend+0x5c>
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ba:	e7fe      	b.n	80050ba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d103      	bne.n	80050ca <xQueueGenericSend+0x6a>
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <xQueueGenericSend+0x6e>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <xQueueGenericSend+0x70>
 80050ce:	2300      	movs	r3, #0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d109      	bne.n	80050e8 <xQueueGenericSend+0x88>
 80050d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	623b      	str	r3, [r7, #32]
 80050e6:	e7fe      	b.n	80050e6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050e8:	f001 f996 	bl	8006418 <xTaskGetSchedulerState>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d102      	bne.n	80050f8 <xQueueGenericSend+0x98>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <xQueueGenericSend+0x9c>
 80050f8:	2301      	movs	r3, #1
 80050fa:	e000      	b.n	80050fe <xQueueGenericSend+0x9e>
 80050fc:	2300      	movs	r3, #0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d109      	bne.n	8005116 <xQueueGenericSend+0xb6>
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	61fb      	str	r3, [r7, #28]
 8005114:	e7fe      	b.n	8005114 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005116:	f001 fe4f 	bl	8006db8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005122:	429a      	cmp	r2, r3
 8005124:	d302      	bcc.n	800512c <xQueueGenericSend+0xcc>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b02      	cmp	r3, #2
 800512a:	d129      	bne.n	8005180 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	68b9      	ldr	r1, [r7, #8]
 8005130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005132:	f000 f9ff 	bl	8005534 <prvCopyDataToQueue>
 8005136:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	2b00      	cmp	r3, #0
 800513e:	d010      	beq.n	8005162 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	3324      	adds	r3, #36	; 0x24
 8005144:	4618      	mov	r0, r3
 8005146:	f000 ffad 	bl	80060a4 <xTaskRemoveFromEventList>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d013      	beq.n	8005178 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005150:	4b3f      	ldr	r3, [pc, #252]	; (8005250 <xQueueGenericSend+0x1f0>)
 8005152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	e00a      	b.n	8005178 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005164:	2b00      	cmp	r3, #0
 8005166:	d007      	beq.n	8005178 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005168:	4b39      	ldr	r3, [pc, #228]	; (8005250 <xQueueGenericSend+0x1f0>)
 800516a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005178:	f001 fe4c 	bl	8006e14 <vPortExitCritical>
				return pdPASS;
 800517c:	2301      	movs	r3, #1
 800517e:	e063      	b.n	8005248 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d103      	bne.n	800518e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005186:	f001 fe45 	bl	8006e14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800518a:	2300      	movs	r3, #0
 800518c:	e05c      	b.n	8005248 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005190:	2b00      	cmp	r3, #0
 8005192:	d106      	bne.n	80051a2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005194:	f107 0314 	add.w	r3, r7, #20
 8005198:	4618      	mov	r0, r3
 800519a:	f000 ffe5 	bl	8006168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800519e:	2301      	movs	r3, #1
 80051a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051a2:	f001 fe37 	bl	8006e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051a6:	f000 fd5d 	bl	8005c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051aa:	f001 fe05 	bl	8006db8 <vPortEnterCritical>
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051b4:	b25b      	sxtb	r3, r3
 80051b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ba:	d103      	bne.n	80051c4 <xQueueGenericSend+0x164>
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051ca:	b25b      	sxtb	r3, r3
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d0:	d103      	bne.n	80051da <xQueueGenericSend+0x17a>
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051da:	f001 fe1b 	bl	8006e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051de:	1d3a      	adds	r2, r7, #4
 80051e0:	f107 0314 	add.w	r3, r7, #20
 80051e4:	4611      	mov	r1, r2
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 ffd4 	bl	8006194 <xTaskCheckForTimeOut>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d124      	bne.n	800523c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051f4:	f000 fa96 	bl	8005724 <prvIsQueueFull>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d018      	beq.n	8005230 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	3310      	adds	r3, #16
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	4611      	mov	r1, r2
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fefe 	bl	8006008 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800520c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800520e:	f000 fa21 	bl	8005654 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005212:	f000 fd35 	bl	8005c80 <xTaskResumeAll>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	f47f af7c 	bne.w	8005116 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800521e:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <xQueueGenericSend+0x1f0>)
 8005220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	e772      	b.n	8005116 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005232:	f000 fa0f 	bl	8005654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005236:	f000 fd23 	bl	8005c80 <xTaskResumeAll>
 800523a:	e76c      	b.n	8005116 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800523c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800523e:	f000 fa09 	bl	8005654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005242:	f000 fd1d 	bl	8005c80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005246:	2300      	movs	r3, #0
		}
	}
}
 8005248:	4618      	mov	r0, r3
 800524a:	3738      	adds	r7, #56	; 0x38
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	e000ed04 	.word	0xe000ed04

08005254 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08e      	sub	sp, #56	; 0x38
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	2b00      	cmp	r3, #0
 800526a:	d109      	bne.n	8005280 <xQueueGenericSendFromISR+0x2c>
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
 800527e:	e7fe      	b.n	800527e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d103      	bne.n	800528e <xQueueGenericSendFromISR+0x3a>
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <xQueueGenericSendFromISR+0x3e>
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <xQueueGenericSendFromISR+0x40>
 8005292:	2300      	movs	r3, #0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d109      	bne.n	80052ac <xQueueGenericSendFromISR+0x58>
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	623b      	str	r3, [r7, #32]
 80052aa:	e7fe      	b.n	80052aa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d103      	bne.n	80052ba <xQueueGenericSendFromISR+0x66>
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <xQueueGenericSendFromISR+0x6a>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <xQueueGenericSendFromISR+0x6c>
 80052be:	2300      	movs	r3, #0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d109      	bne.n	80052d8 <xQueueGenericSendFromISR+0x84>
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	61fb      	str	r3, [r7, #28]
 80052d6:	e7fe      	b.n	80052d6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052d8:	f001 fe28 	bl	8006f2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052dc:	f3ef 8211 	mrs	r2, BASEPRI
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	61ba      	str	r2, [r7, #24]
 80052f2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80052f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005300:	429a      	cmp	r2, r3
 8005302:	d302      	bcc.n	800530a <xQueueGenericSendFromISR+0xb6>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d12c      	bne.n	8005364 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800530a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	68b9      	ldr	r1, [r7, #8]
 8005318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800531a:	f000 f90b 	bl	8005534 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800531e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005326:	d112      	bne.n	800534e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	2b00      	cmp	r3, #0
 800532e:	d016      	beq.n	800535e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005332:	3324      	adds	r3, #36	; 0x24
 8005334:	4618      	mov	r0, r3
 8005336:	f000 feb5 	bl	80060a4 <xTaskRemoveFromEventList>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00e      	beq.n	800535e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00b      	beq.n	800535e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	e007      	b.n	800535e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800534e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005352:	3301      	adds	r3, #1
 8005354:	b2db      	uxtb	r3, r3
 8005356:	b25a      	sxtb	r2, r3
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800535e:	2301      	movs	r3, #1
 8005360:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005362:	e001      	b.n	8005368 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005364:	2300      	movs	r3, #0
 8005366:	637b      	str	r3, [r7, #52]	; 0x34
 8005368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005374:	4618      	mov	r0, r3
 8005376:	3738      	adds	r7, #56	; 0x38
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08c      	sub	sp, #48	; 0x30
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005388:	2300      	movs	r3, #0
 800538a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <xQueueReceive+0x2e>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	623b      	str	r3, [r7, #32]
 80053a8:	e7fe      	b.n	80053a8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d103      	bne.n	80053b8 <xQueueReceive+0x3c>
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <xQueueReceive+0x40>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <xQueueReceive+0x42>
 80053bc:	2300      	movs	r3, #0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <xQueueReceive+0x5a>
 80053c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	61fb      	str	r3, [r7, #28]
 80053d4:	e7fe      	b.n	80053d4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053d6:	f001 f81f 	bl	8006418 <xTaskGetSchedulerState>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d102      	bne.n	80053e6 <xQueueReceive+0x6a>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <xQueueReceive+0x6e>
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <xQueueReceive+0x70>
 80053ea:	2300      	movs	r3, #0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d109      	bne.n	8005404 <xQueueReceive+0x88>
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	61bb      	str	r3, [r7, #24]
 8005402:	e7fe      	b.n	8005402 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005404:	f001 fcd8 	bl	8006db8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01f      	beq.n	8005454 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005418:	f000 f8f6 	bl	8005608 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	1e5a      	subs	r2, r3, #1
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00f      	beq.n	800544c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	3310      	adds	r3, #16
 8005430:	4618      	mov	r0, r3
 8005432:	f000 fe37 	bl	80060a4 <xTaskRemoveFromEventList>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d007      	beq.n	800544c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800543c:	4b3c      	ldr	r3, [pc, #240]	; (8005530 <xQueueReceive+0x1b4>)
 800543e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800544c:	f001 fce2 	bl	8006e14 <vPortExitCritical>
				return pdPASS;
 8005450:	2301      	movs	r3, #1
 8005452:	e069      	b.n	8005528 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d103      	bne.n	8005462 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800545a:	f001 fcdb 	bl	8006e14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800545e:	2300      	movs	r3, #0
 8005460:	e062      	b.n	8005528 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d106      	bne.n	8005476 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005468:	f107 0310 	add.w	r3, r7, #16
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fe7b 	bl	8006168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005472:	2301      	movs	r3, #1
 8005474:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005476:	f001 fccd 	bl	8006e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800547a:	f000 fbf3 	bl	8005c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800547e:	f001 fc9b 	bl	8006db8 <vPortEnterCritical>
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005488:	b25b      	sxtb	r3, r3
 800548a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548e:	d103      	bne.n	8005498 <xQueueReceive+0x11c>
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800549e:	b25b      	sxtb	r3, r3
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a4:	d103      	bne.n	80054ae <xQueueReceive+0x132>
 80054a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054ae:	f001 fcb1 	bl	8006e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054b2:	1d3a      	adds	r2, r7, #4
 80054b4:	f107 0310 	add.w	r3, r7, #16
 80054b8:	4611      	mov	r1, r2
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fe6a 	bl	8006194 <xTaskCheckForTimeOut>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d123      	bne.n	800550e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054c8:	f000 f916 	bl	80056f8 <prvIsQueueEmpty>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d017      	beq.n	8005502 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	3324      	adds	r3, #36	; 0x24
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	4611      	mov	r1, r2
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fd94 	bl	8006008 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054e2:	f000 f8b7 	bl	8005654 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054e6:	f000 fbcb 	bl	8005c80 <xTaskResumeAll>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d189      	bne.n	8005404 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80054f0:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <xQueueReceive+0x1b4>)
 80054f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	e780      	b.n	8005404 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005504:	f000 f8a6 	bl	8005654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005508:	f000 fbba 	bl	8005c80 <xTaskResumeAll>
 800550c:	e77a      	b.n	8005404 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800550e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005510:	f000 f8a0 	bl	8005654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005514:	f000 fbb4 	bl	8005c80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800551a:	f000 f8ed 	bl	80056f8 <prvIsQueueEmpty>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	f43f af6f 	beq.w	8005404 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005526:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005528:	4618      	mov	r0, r3
 800552a:	3730      	adds	r7, #48	; 0x30
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	e000ed04 	.word	0xe000ed04

08005534 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005540:	2300      	movs	r3, #0
 8005542:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10d      	bne.n	800556e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d14d      	bne.n	80055f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	4618      	mov	r0, r3
 8005560:	f000 ff78 	bl	8006454 <xTaskPriorityDisinherit>
 8005564:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	605a      	str	r2, [r3, #4]
 800556c:	e043      	b.n	80055f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d119      	bne.n	80055a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6898      	ldr	r0, [r3, #8]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	461a      	mov	r2, r3
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	f001 ff2a 	bl	80073d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	441a      	add	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	429a      	cmp	r2, r3
 800559c:	d32b      	bcc.n	80055f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	609a      	str	r2, [r3, #8]
 80055a6:	e026      	b.n	80055f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	68d8      	ldr	r0, [r3, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	461a      	mov	r2, r3
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	f001 ff10 	bl	80073d8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	425b      	negs	r3, r3
 80055c2:	441a      	add	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d207      	bcs.n	80055e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055dc:	425b      	negs	r3, r3
 80055de:	441a      	add	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d105      	bne.n	80055f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80055fe:	697b      	ldr	r3, [r7, #20]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	d018      	beq.n	800564c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	441a      	add	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68da      	ldr	r2, [r3, #12]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	429a      	cmp	r2, r3
 8005632:	d303      	bcc.n	800563c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68d9      	ldr	r1, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	461a      	mov	r2, r3
 8005646:	6838      	ldr	r0, [r7, #0]
 8005648:	f001 fec6 	bl	80073d8 <memcpy>
	}
}
 800564c:	bf00      	nop
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800565c:	f001 fbac 	bl	8006db8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005666:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005668:	e011      	b.n	800568e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	2b00      	cmp	r3, #0
 8005670:	d012      	beq.n	8005698 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3324      	adds	r3, #36	; 0x24
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fd14 	bl	80060a4 <xTaskRemoveFromEventList>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005682:	f000 fde7 	bl	8006254 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	3b01      	subs	r3, #1
 800568a:	b2db      	uxtb	r3, r3
 800568c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800568e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005692:	2b00      	cmp	r3, #0
 8005694:	dce9      	bgt.n	800566a <prvUnlockQueue+0x16>
 8005696:	e000      	b.n	800569a <prvUnlockQueue+0x46>
					break;
 8005698:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	22ff      	movs	r2, #255	; 0xff
 800569e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80056a2:	f001 fbb7 	bl	8006e14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056a6:	f001 fb87 	bl	8006db8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056b2:	e011      	b.n	80056d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d012      	beq.n	80056e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3310      	adds	r3, #16
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fcef 	bl	80060a4 <xTaskRemoveFromEventList>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056cc:	f000 fdc2 	bl	8006254 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056d0:	7bbb      	ldrb	r3, [r7, #14]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	dce9      	bgt.n	80056b4 <prvUnlockQueue+0x60>
 80056e0:	e000      	b.n	80056e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	22ff      	movs	r2, #255	; 0xff
 80056e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80056ec:	f001 fb92 	bl	8006e14 <vPortExitCritical>
}
 80056f0:	bf00      	nop
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005700:	f001 fb5a 	bl	8006db8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	2b00      	cmp	r3, #0
 800570a:	d102      	bne.n	8005712 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800570c:	2301      	movs	r3, #1
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	e001      	b.n	8005716 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005716:	f001 fb7d 	bl	8006e14 <vPortExitCritical>

	return xReturn;
 800571a:	68fb      	ldr	r3, [r7, #12]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800572c:	f001 fb44 	bl	8006db8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005738:	429a      	cmp	r2, r3
 800573a:	d102      	bne.n	8005742 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800573c:	2301      	movs	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	e001      	b.n	8005746 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005746:	f001 fb65 	bl	8006e14 <vPortExitCritical>

	return xReturn;
 800574a:	68fb      	ldr	r3, [r7, #12]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	e014      	b.n	800578e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005764:	4a0e      	ldr	r2, [pc, #56]	; (80057a0 <vQueueAddToRegistry+0x4c>)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10b      	bne.n	8005788 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005770:	490b      	ldr	r1, [pc, #44]	; (80057a0 <vQueueAddToRegistry+0x4c>)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800577a:	4a09      	ldr	r2, [pc, #36]	; (80057a0 <vQueueAddToRegistry+0x4c>)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	4413      	add	r3, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005786:	e005      	b.n	8005794 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3301      	adds	r3, #1
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b07      	cmp	r3, #7
 8005792:	d9e7      	bls.n	8005764 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	20002560 	.word	0x20002560

080057a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80057b4:	f001 fb00 	bl	8006db8 <vPortEnterCritical>
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057be:	b25b      	sxtb	r3, r3
 80057c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c4:	d103      	bne.n	80057ce <vQueueWaitForMessageRestricted+0x2a>
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057d4:	b25b      	sxtb	r3, r3
 80057d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057da:	d103      	bne.n	80057e4 <vQueueWaitForMessageRestricted+0x40>
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057e4:	f001 fb16 	bl	8006e14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d106      	bne.n	80057fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	3324      	adds	r3, #36	; 0x24
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	68b9      	ldr	r1, [r7, #8]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 fc29 	bl	8006050 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80057fe:	6978      	ldr	r0, [r7, #20]
 8005800:	f7ff ff28 	bl	8005654 <prvUnlockQueue>
	}
 8005804:	bf00      	nop
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08e      	sub	sp, #56	; 0x38
 8005810:	af04      	add	r7, sp, #16
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800581a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581c:	2b00      	cmp	r3, #0
 800581e:	d109      	bne.n	8005834 <xTaskCreateStatic+0x28>
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	623b      	str	r3, [r7, #32]
 8005832:	e7fe      	b.n	8005832 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	2b00      	cmp	r3, #0
 8005838:	d109      	bne.n	800584e <xTaskCreateStatic+0x42>
 800583a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	61fb      	str	r3, [r7, #28]
 800584c:	e7fe      	b.n	800584c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800584e:	235c      	movs	r3, #92	; 0x5c
 8005850:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b5c      	cmp	r3, #92	; 0x5c
 8005856:	d009      	beq.n	800586c <xTaskCreateStatic+0x60>
 8005858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	61bb      	str	r3, [r7, #24]
 800586a:	e7fe      	b.n	800586a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800586c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586e:	2b00      	cmp	r3, #0
 8005870:	d01e      	beq.n	80058b0 <xTaskCreateStatic+0xa4>
 8005872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01b      	beq.n	80058b0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005880:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	2202      	movs	r2, #2
 8005886:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800588a:	2300      	movs	r3, #0
 800588c:	9303      	str	r3, [sp, #12]
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	9302      	str	r3, [sp, #8]
 8005892:	f107 0314 	add.w	r3, r7, #20
 8005896:	9301      	str	r3, [sp, #4]
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 f850 	bl	8005948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058aa:	f000 f8d3 	bl	8005a54 <prvAddNewTaskToReadyList>
 80058ae:	e001      	b.n	80058b4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80058b0:	2300      	movs	r3, #0
 80058b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058b4:	697b      	ldr	r3, [r7, #20]
	}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3728      	adds	r7, #40	; 0x28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b08c      	sub	sp, #48	; 0x30
 80058c2:	af04      	add	r7, sp, #16
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	603b      	str	r3, [r7, #0]
 80058ca:	4613      	mov	r3, r2
 80058cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058ce:	88fb      	ldrh	r3, [r7, #6]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4618      	mov	r0, r3
 80058d4:	f001 fb66 	bl	8006fa4 <pvPortMalloc>
 80058d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00e      	beq.n	80058fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80058e0:	205c      	movs	r0, #92	; 0x5c
 80058e2:	f001 fb5f 	bl	8006fa4 <pvPortMalloc>
 80058e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30
 80058f4:	e005      	b.n	8005902 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058f6:	6978      	ldr	r0, [r7, #20]
 80058f8:	f001 fc16 	bl	8007128 <vPortFree>
 80058fc:	e001      	b.n	8005902 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d017      	beq.n	8005938 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005910:	88fa      	ldrh	r2, [r7, #6]
 8005912:	2300      	movs	r3, #0
 8005914:	9303      	str	r3, [sp, #12]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	9302      	str	r3, [sp, #8]
 800591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 f80e 	bl	8005948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800592c:	69f8      	ldr	r0, [r7, #28]
 800592e:	f000 f891 	bl	8005a54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005932:	2301      	movs	r3, #1
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	e002      	b.n	800593e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005938:	f04f 33ff 	mov.w	r3, #4294967295
 800593c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800593e:	69bb      	ldr	r3, [r7, #24]
	}
 8005940:	4618      	mov	r0, r3
 8005942:	3720      	adds	r7, #32
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	461a      	mov	r2, r3
 8005960:	21a5      	movs	r1, #165	; 0xa5
 8005962:	f001 fd44 	bl	80073ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005970:	3b01      	subs	r3, #1
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	f023 0307 	bic.w	r3, r3, #7
 800597e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	2b00      	cmp	r3, #0
 8005988:	d009      	beq.n	800599e <prvInitialiseNewTask+0x56>
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	e7fe      	b.n	800599c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
 80059a2:	e012      	b.n	80059ca <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	4413      	add	r3, r2
 80059aa:	7819      	ldrb	r1, [r3, #0]
 80059ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	4413      	add	r3, r2
 80059b2:	3334      	adds	r3, #52	; 0x34
 80059b4:	460a      	mov	r2, r1
 80059b6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	4413      	add	r3, r2
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d006      	beq.n	80059d2 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	3301      	adds	r3, #1
 80059c8:	61fb      	str	r3, [r7, #28]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	2b0f      	cmp	r3, #15
 80059ce:	d9e9      	bls.n	80059a4 <prvInitialiseNewTask+0x5c>
 80059d0:	e000      	b.n	80059d4 <prvInitialiseNewTask+0x8c>
		{
			break;
 80059d2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059de:	2b37      	cmp	r3, #55	; 0x37
 80059e0:	d901      	bls.n	80059e6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059e2:	2337      	movs	r3, #55	; 0x37
 80059e4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059f0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	2200      	movs	r2, #0
 80059f6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	3304      	adds	r3, #4
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7ff f9a0 	bl	8004d42 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	3318      	adds	r3, #24
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff f99b 	bl	8004d42 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a20:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	2200      	movs	r2, #0
 8005a26:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	68f9      	ldr	r1, [r7, #12]
 8005a34:	69b8      	ldr	r0, [r7, #24]
 8005a36:	f001 f8d7 	bl	8006be8 <pxPortInitialiseStack>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a4c:	bf00      	nop
 8005a4e:	3720      	adds	r7, #32
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a5c:	f001 f9ac 	bl	8006db8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a60:	4b2d      	ldr	r3, [pc, #180]	; (8005b18 <prvAddNewTaskToReadyList+0xc4>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3301      	adds	r3, #1
 8005a66:	4a2c      	ldr	r2, [pc, #176]	; (8005b18 <prvAddNewTaskToReadyList+0xc4>)
 8005a68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a6a:	4b2c      	ldr	r3, [pc, #176]	; (8005b1c <prvAddNewTaskToReadyList+0xc8>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d109      	bne.n	8005a86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a72:	4a2a      	ldr	r2, [pc, #168]	; (8005b1c <prvAddNewTaskToReadyList+0xc8>)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a78:	4b27      	ldr	r3, [pc, #156]	; (8005b18 <prvAddNewTaskToReadyList+0xc4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d110      	bne.n	8005aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a80:	f000 fc0c 	bl	800629c <prvInitialiseTaskLists>
 8005a84:	e00d      	b.n	8005aa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a86:	4b26      	ldr	r3, [pc, #152]	; (8005b20 <prvAddNewTaskToReadyList+0xcc>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d109      	bne.n	8005aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a8e:	4b23      	ldr	r3, [pc, #140]	; (8005b1c <prvAddNewTaskToReadyList+0xc8>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d802      	bhi.n	8005aa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a9c:	4a1f      	ldr	r2, [pc, #124]	; (8005b1c <prvAddNewTaskToReadyList+0xc8>)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005aa2:	4b20      	ldr	r3, [pc, #128]	; (8005b24 <prvAddNewTaskToReadyList+0xd0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	4a1e      	ldr	r2, [pc, #120]	; (8005b24 <prvAddNewTaskToReadyList+0xd0>)
 8005aaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005aac:	4b1d      	ldr	r3, [pc, #116]	; (8005b24 <prvAddNewTaskToReadyList+0xd0>)
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab8:	4b1b      	ldr	r3, [pc, #108]	; (8005b28 <prvAddNewTaskToReadyList+0xd4>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d903      	bls.n	8005ac8 <prvAddNewTaskToReadyList+0x74>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac4:	4a18      	ldr	r2, [pc, #96]	; (8005b28 <prvAddNewTaskToReadyList+0xd4>)
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4a15      	ldr	r2, [pc, #84]	; (8005b2c <prvAddNewTaskToReadyList+0xd8>)
 8005ad6:	441a      	add	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3304      	adds	r3, #4
 8005adc:	4619      	mov	r1, r3
 8005ade:	4610      	mov	r0, r2
 8005ae0:	f7ff f93b 	bl	8004d5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ae4:	f001 f996 	bl	8006e14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ae8:	4b0d      	ldr	r3, [pc, #52]	; (8005b20 <prvAddNewTaskToReadyList+0xcc>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00e      	beq.n	8005b0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005af0:	4b0a      	ldr	r3, [pc, #40]	; (8005b1c <prvAddNewTaskToReadyList+0xc8>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d207      	bcs.n	8005b0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005afe:	4b0c      	ldr	r3, [pc, #48]	; (8005b30 <prvAddNewTaskToReadyList+0xdc>)
 8005b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b0e:	bf00      	nop
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	200015c4 	.word	0x200015c4
 8005b1c:	200010f0 	.word	0x200010f0
 8005b20:	200015d0 	.word	0x200015d0
 8005b24:	200015e0 	.word	0x200015e0
 8005b28:	200015cc 	.word	0x200015cc
 8005b2c:	200010f4 	.word	0x200010f4
 8005b30:	e000ed04 	.word	0xe000ed04

08005b34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d016      	beq.n	8005b74 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b46:	4b13      	ldr	r3, [pc, #76]	; (8005b94 <vTaskDelay+0x60>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <vTaskDelay+0x2e>
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	60bb      	str	r3, [r7, #8]
 8005b60:	e7fe      	b.n	8005b60 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005b62:	f000 f87f 	bl	8005c64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b66:	2100      	movs	r1, #0
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fcdf 	bl	800652c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b6e:	f000 f887 	bl	8005c80 <xTaskResumeAll>
 8005b72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d107      	bne.n	8005b8a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005b7a:	4b07      	ldr	r3, [pc, #28]	; (8005b98 <vTaskDelay+0x64>)
 8005b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b8a:	bf00      	nop
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	200015ec 	.word	0x200015ec
 8005b98:	e000ed04 	.word	0xe000ed04

08005b9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08a      	sub	sp, #40	; 0x28
 8005ba0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005baa:	463a      	mov	r2, r7
 8005bac:	1d39      	adds	r1, r7, #4
 8005bae:	f107 0308 	add.w	r3, r7, #8
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7ff f874 	bl	8004ca0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	9202      	str	r2, [sp, #8]
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	460a      	mov	r2, r1
 8005bca:	4920      	ldr	r1, [pc, #128]	; (8005c4c <vTaskStartScheduler+0xb0>)
 8005bcc:	4820      	ldr	r0, [pc, #128]	; (8005c50 <vTaskStartScheduler+0xb4>)
 8005bce:	f7ff fe1d 	bl	800580c <xTaskCreateStatic>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	4b1f      	ldr	r3, [pc, #124]	; (8005c54 <vTaskStartScheduler+0xb8>)
 8005bd6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005bd8:	4b1e      	ldr	r3, [pc, #120]	; (8005c54 <vTaskStartScheduler+0xb8>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005be0:	2301      	movs	r3, #1
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	e001      	b.n	8005bea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d102      	bne.n	8005bf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005bf0:	f000 fcf0 	bl	80065d4 <xTimerCreateTimerTask>
 8005bf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d115      	bne.n	8005c28 <vTaskStartScheduler+0x8c>
 8005bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c0e:	4b12      	ldr	r3, [pc, #72]	; (8005c58 <vTaskStartScheduler+0xbc>)
 8005c10:	f04f 32ff 	mov.w	r2, #4294967295
 8005c14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c16:	4b11      	ldr	r3, [pc, #68]	; (8005c5c <vTaskStartScheduler+0xc0>)
 8005c18:	2201      	movs	r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005c1c:	4b10      	ldr	r3, [pc, #64]	; (8005c60 <vTaskStartScheduler+0xc4>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c22:	f001 f859 	bl	8006cd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c26:	e00d      	b.n	8005c44 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2e:	d109      	bne.n	8005c44 <vTaskStartScheduler+0xa8>
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	e7fe      	b.n	8005c42 <vTaskStartScheduler+0xa6>
}
 8005c44:	bf00      	nop
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	08007808 	.word	0x08007808
 8005c50:	0800626d 	.word	0x0800626d
 8005c54:	200015e8 	.word	0x200015e8
 8005c58:	200015e4 	.word	0x200015e4
 8005c5c:	200015d0 	.word	0x200015d0
 8005c60:	200015c8 	.word	0x200015c8

08005c64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005c68:	4b04      	ldr	r3, [pc, #16]	; (8005c7c <vTaskSuspendAll+0x18>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	4a03      	ldr	r2, [pc, #12]	; (8005c7c <vTaskSuspendAll+0x18>)
 8005c70:	6013      	str	r3, [r2, #0]
}
 8005c72:	bf00      	nop
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bc80      	pop	{r7}
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	200015ec 	.word	0x200015ec

08005c80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c8e:	4b41      	ldr	r3, [pc, #260]	; (8005d94 <xTaskResumeAll+0x114>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d109      	bne.n	8005caa <xTaskResumeAll+0x2a>
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	603b      	str	r3, [r7, #0]
 8005ca8:	e7fe      	b.n	8005ca8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005caa:	f001 f885 	bl	8006db8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005cae:	4b39      	ldr	r3, [pc, #228]	; (8005d94 <xTaskResumeAll+0x114>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	4a37      	ldr	r2, [pc, #220]	; (8005d94 <xTaskResumeAll+0x114>)
 8005cb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb8:	4b36      	ldr	r3, [pc, #216]	; (8005d94 <xTaskResumeAll+0x114>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d162      	bne.n	8005d86 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cc0:	4b35      	ldr	r3, [pc, #212]	; (8005d98 <xTaskResumeAll+0x118>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d05e      	beq.n	8005d86 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cc8:	e02f      	b.n	8005d2a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005cca:	4b34      	ldr	r3, [pc, #208]	; (8005d9c <xTaskResumeAll+0x11c>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3318      	adds	r3, #24
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7ff f89a 	bl	8004e10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff f895 	bl	8004e10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cea:	4b2d      	ldr	r3, [pc, #180]	; (8005da0 <xTaskResumeAll+0x120>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d903      	bls.n	8005cfa <xTaskResumeAll+0x7a>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf6:	4a2a      	ldr	r2, [pc, #168]	; (8005da0 <xTaskResumeAll+0x120>)
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4a27      	ldr	r2, [pc, #156]	; (8005da4 <xTaskResumeAll+0x124>)
 8005d08:	441a      	add	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4610      	mov	r0, r2
 8005d12:	f7ff f822 	bl	8004d5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1a:	4b23      	ldr	r3, [pc, #140]	; (8005da8 <xTaskResumeAll+0x128>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d302      	bcc.n	8005d2a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005d24:	4b21      	ldr	r3, [pc, #132]	; (8005dac <xTaskResumeAll+0x12c>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d2a:	4b1c      	ldr	r3, [pc, #112]	; (8005d9c <xTaskResumeAll+0x11c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1cb      	bne.n	8005cca <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d38:	f000 fb4a 	bl	80063d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005d3c:	4b1c      	ldr	r3, [pc, #112]	; (8005db0 <xTaskResumeAll+0x130>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d010      	beq.n	8005d6a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d48:	f000 f844 	bl	8005dd4 <xTaskIncrementTick>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005d52:	4b16      	ldr	r3, [pc, #88]	; (8005dac <xTaskResumeAll+0x12c>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1f1      	bne.n	8005d48 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005d64:	4b12      	ldr	r3, [pc, #72]	; (8005db0 <xTaskResumeAll+0x130>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d6a:	4b10      	ldr	r3, [pc, #64]	; (8005dac <xTaskResumeAll+0x12c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d009      	beq.n	8005d86 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d72:	2301      	movs	r3, #1
 8005d74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d76:	4b0f      	ldr	r3, [pc, #60]	; (8005db4 <xTaskResumeAll+0x134>)
 8005d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d86:	f001 f845 	bl	8006e14 <vPortExitCritical>

	return xAlreadyYielded;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	200015ec 	.word	0x200015ec
 8005d98:	200015c4 	.word	0x200015c4
 8005d9c:	20001584 	.word	0x20001584
 8005da0:	200015cc 	.word	0x200015cc
 8005da4:	200010f4 	.word	0x200010f4
 8005da8:	200010f0 	.word	0x200010f0
 8005dac:	200015d8 	.word	0x200015d8
 8005db0:	200015d4 	.word	0x200015d4
 8005db4:	e000ed04 	.word	0xe000ed04

08005db8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005dbe:	4b04      	ldr	r3, [pc, #16]	; (8005dd0 <xTaskGetTickCount+0x18>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005dc4:	687b      	ldr	r3, [r7, #4]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bc80      	pop	{r7}
 8005dce:	4770      	bx	lr
 8005dd0:	200015c8 	.word	0x200015c8

08005dd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dde:	4b51      	ldr	r3, [pc, #324]	; (8005f24 <xTaskIncrementTick+0x150>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f040 808d 	bne.w	8005f02 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005de8:	4b4f      	ldr	r3, [pc, #316]	; (8005f28 <xTaskIncrementTick+0x154>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3301      	adds	r3, #1
 8005dee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005df0:	4a4d      	ldr	r2, [pc, #308]	; (8005f28 <xTaskIncrementTick+0x154>)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d11f      	bne.n	8005e3c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005dfc:	4b4b      	ldr	r3, [pc, #300]	; (8005f2c <xTaskIncrementTick+0x158>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d009      	beq.n	8005e1a <xTaskIncrementTick+0x46>
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	603b      	str	r3, [r7, #0]
 8005e18:	e7fe      	b.n	8005e18 <xTaskIncrementTick+0x44>
 8005e1a:	4b44      	ldr	r3, [pc, #272]	; (8005f2c <xTaskIncrementTick+0x158>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	4b43      	ldr	r3, [pc, #268]	; (8005f30 <xTaskIncrementTick+0x15c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a41      	ldr	r2, [pc, #260]	; (8005f2c <xTaskIncrementTick+0x158>)
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	4a41      	ldr	r2, [pc, #260]	; (8005f30 <xTaskIncrementTick+0x15c>)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	4b41      	ldr	r3, [pc, #260]	; (8005f34 <xTaskIncrementTick+0x160>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3301      	adds	r3, #1
 8005e34:	4a3f      	ldr	r2, [pc, #252]	; (8005f34 <xTaskIncrementTick+0x160>)
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	f000 faca 	bl	80063d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e3c:	4b3e      	ldr	r3, [pc, #248]	; (8005f38 <xTaskIncrementTick+0x164>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d34e      	bcc.n	8005ee4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e46:	4b39      	ldr	r3, [pc, #228]	; (8005f2c <xTaskIncrementTick+0x158>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <xTaskIncrementTick+0x80>
 8005e50:	2301      	movs	r3, #1
 8005e52:	e000      	b.n	8005e56 <xTaskIncrementTick+0x82>
 8005e54:	2300      	movs	r3, #0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d004      	beq.n	8005e64 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e5a:	4b37      	ldr	r3, [pc, #220]	; (8005f38 <xTaskIncrementTick+0x164>)
 8005e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e60:	601a      	str	r2, [r3, #0]
					break;
 8005e62:	e03f      	b.n	8005ee4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e64:	4b31      	ldr	r3, [pc, #196]	; (8005f2c <xTaskIncrementTick+0x158>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d203      	bcs.n	8005e84 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e7c:	4a2e      	ldr	r2, [pc, #184]	; (8005f38 <xTaskIncrementTick+0x164>)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6013      	str	r3, [r2, #0]
						break;
 8005e82:	e02f      	b.n	8005ee4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	3304      	adds	r3, #4
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fe ffc1 	bl	8004e10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d004      	beq.n	8005ea0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	3318      	adds	r3, #24
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe ffb8 	bl	8004e10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea4:	4b25      	ldr	r3, [pc, #148]	; (8005f3c <xTaskIncrementTick+0x168>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d903      	bls.n	8005eb4 <xTaskIncrementTick+0xe0>
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb0:	4a22      	ldr	r2, [pc, #136]	; (8005f3c <xTaskIncrementTick+0x168>)
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb8:	4613      	mov	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4a1f      	ldr	r2, [pc, #124]	; (8005f40 <xTaskIncrementTick+0x16c>)
 8005ec2:	441a      	add	r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4610      	mov	r0, r2
 8005ecc:	f7fe ff45 	bl	8004d5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed4:	4b1b      	ldr	r3, [pc, #108]	; (8005f44 <xTaskIncrementTick+0x170>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d3b3      	bcc.n	8005e46 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ee2:	e7b0      	b.n	8005e46 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ee4:	4b17      	ldr	r3, [pc, #92]	; (8005f44 <xTaskIncrementTick+0x170>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eea:	4915      	ldr	r1, [pc, #84]	; (8005f40 <xTaskIncrementTick+0x16c>)
 8005eec:	4613      	mov	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d907      	bls.n	8005f0c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005efc:	2301      	movs	r3, #1
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	e004      	b.n	8005f0c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005f02:	4b11      	ldr	r3, [pc, #68]	; (8005f48 <xTaskIncrementTick+0x174>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3301      	adds	r3, #1
 8005f08:	4a0f      	ldr	r2, [pc, #60]	; (8005f48 <xTaskIncrementTick+0x174>)
 8005f0a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005f0c:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <xTaskIncrementTick+0x178>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005f14:	2301      	movs	r3, #1
 8005f16:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005f18:	697b      	ldr	r3, [r7, #20]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	200015ec 	.word	0x200015ec
 8005f28:	200015c8 	.word	0x200015c8
 8005f2c:	2000157c 	.word	0x2000157c
 8005f30:	20001580 	.word	0x20001580
 8005f34:	200015dc 	.word	0x200015dc
 8005f38:	200015e4 	.word	0x200015e4
 8005f3c:	200015cc 	.word	0x200015cc
 8005f40:	200010f4 	.word	0x200010f4
 8005f44:	200010f0 	.word	0x200010f0
 8005f48:	200015d4 	.word	0x200015d4
 8005f4c:	200015d8 	.word	0x200015d8

08005f50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f56:	4b27      	ldr	r3, [pc, #156]	; (8005ff4 <vTaskSwitchContext+0xa4>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f5e:	4b26      	ldr	r3, [pc, #152]	; (8005ff8 <vTaskSwitchContext+0xa8>)
 8005f60:	2201      	movs	r2, #1
 8005f62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f64:	e040      	b.n	8005fe8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005f66:	4b24      	ldr	r3, [pc, #144]	; (8005ff8 <vTaskSwitchContext+0xa8>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005f6c:	4b23      	ldr	r3, [pc, #140]	; (8005ffc <vTaskSwitchContext+0xac>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	60fb      	str	r3, [r7, #12]
 8005f72:	e00f      	b.n	8005f94 <vTaskSwitchContext+0x44>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d109      	bne.n	8005f8e <vTaskSwitchContext+0x3e>
 8005f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	607b      	str	r3, [r7, #4]
 8005f8c:	e7fe      	b.n	8005f8c <vTaskSwitchContext+0x3c>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3b01      	subs	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	491a      	ldr	r1, [pc, #104]	; (8006000 <vTaskSwitchContext+0xb0>)
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0e5      	beq.n	8005f74 <vTaskSwitchContext+0x24>
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4613      	mov	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4a13      	ldr	r2, [pc, #76]	; (8006000 <vTaskSwitchContext+0xb0>)
 8005fb4:	4413      	add	r3, r2
 8005fb6:	60bb      	str	r3, [r7, #8]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	605a      	str	r2, [r3, #4]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	3308      	adds	r3, #8
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d104      	bne.n	8005fd8 <vTaskSwitchContext+0x88>
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	605a      	str	r2, [r3, #4]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	4a09      	ldr	r2, [pc, #36]	; (8006004 <vTaskSwitchContext+0xb4>)
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	4a06      	ldr	r2, [pc, #24]	; (8005ffc <vTaskSwitchContext+0xac>)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6013      	str	r3, [r2, #0]
}
 8005fe8:	bf00      	nop
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	200015ec 	.word	0x200015ec
 8005ff8:	200015d8 	.word	0x200015d8
 8005ffc:	200015cc 	.word	0x200015cc
 8006000:	200010f4 	.word	0x200010f4
 8006004:	200010f0 	.word	0x200010f0

08006008 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d109      	bne.n	800602c <vTaskPlaceOnEventList+0x24>
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	e7fe      	b.n	800602a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800602c:	4b07      	ldr	r3, [pc, #28]	; (800604c <vTaskPlaceOnEventList+0x44>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3318      	adds	r3, #24
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7fe feb3 	bl	8004da0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800603a:	2101      	movs	r1, #1
 800603c:	6838      	ldr	r0, [r7, #0]
 800603e:	f000 fa75 	bl	800652c <prvAddCurrentTaskToDelayedList>
}
 8006042:	bf00      	nop
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	200010f0 	.word	0x200010f0

08006050 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d109      	bne.n	8006076 <vTaskPlaceOnEventListRestricted+0x26>
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	e7fe      	b.n	8006074 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006076:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <vTaskPlaceOnEventListRestricted+0x50>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3318      	adds	r3, #24
 800607c:	4619      	mov	r1, r3
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f7fe fe6b 	bl	8004d5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800608a:	f04f 33ff 	mov.w	r3, #4294967295
 800608e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	68b8      	ldr	r0, [r7, #8]
 8006094:	f000 fa4a 	bl	800652c <prvAddCurrentTaskToDelayedList>
	}
 8006098:	bf00      	nop
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	200010f0 	.word	0x200010f0

080060a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d109      	bne.n	80060ce <xTaskRemoveFromEventList+0x2a>
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	e7fe      	b.n	80060cc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	3318      	adds	r3, #24
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fe fe9c 	bl	8004e10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060d8:	4b1d      	ldr	r3, [pc, #116]	; (8006150 <xTaskRemoveFromEventList+0xac>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d11d      	bne.n	800611c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	3304      	adds	r3, #4
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fe fe93 	bl	8004e10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ee:	4b19      	ldr	r3, [pc, #100]	; (8006154 <xTaskRemoveFromEventList+0xb0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d903      	bls.n	80060fe <xTaskRemoveFromEventList+0x5a>
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	4a16      	ldr	r2, [pc, #88]	; (8006154 <xTaskRemoveFromEventList+0xb0>)
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4a13      	ldr	r2, [pc, #76]	; (8006158 <xTaskRemoveFromEventList+0xb4>)
 800610c:	441a      	add	r2, r3
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	3304      	adds	r3, #4
 8006112:	4619      	mov	r1, r3
 8006114:	4610      	mov	r0, r2
 8006116:	f7fe fe20 	bl	8004d5a <vListInsertEnd>
 800611a:	e005      	b.n	8006128 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	3318      	adds	r3, #24
 8006120:	4619      	mov	r1, r3
 8006122:	480e      	ldr	r0, [pc, #56]	; (800615c <xTaskRemoveFromEventList+0xb8>)
 8006124:	f7fe fe19 	bl	8004d5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612c:	4b0c      	ldr	r3, [pc, #48]	; (8006160 <xTaskRemoveFromEventList+0xbc>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006132:	429a      	cmp	r2, r3
 8006134:	d905      	bls.n	8006142 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006136:	2301      	movs	r3, #1
 8006138:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800613a:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <xTaskRemoveFromEventList+0xc0>)
 800613c:	2201      	movs	r2, #1
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	e001      	b.n	8006146 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006142:	2300      	movs	r3, #0
 8006144:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006146:	697b      	ldr	r3, [r7, #20]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	200015ec 	.word	0x200015ec
 8006154:	200015cc 	.word	0x200015cc
 8006158:	200010f4 	.word	0x200010f4
 800615c:	20001584 	.word	0x20001584
 8006160:	200010f0 	.word	0x200010f0
 8006164:	200015d8 	.word	0x200015d8

08006168 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006170:	4b06      	ldr	r3, [pc, #24]	; (800618c <vTaskInternalSetTimeOutState+0x24>)
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006178:	4b05      	ldr	r3, [pc, #20]	; (8006190 <vTaskInternalSetTimeOutState+0x28>)
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	605a      	str	r2, [r3, #4]
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	bc80      	pop	{r7}
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	200015dc 	.word	0x200015dc
 8006190:	200015c8 	.word	0x200015c8

08006194 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d109      	bne.n	80061b8 <xTaskCheckForTimeOut+0x24>
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	e7fe      	b.n	80061b6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d109      	bne.n	80061d2 <xTaskCheckForTimeOut+0x3e>
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	e7fe      	b.n	80061d0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80061d2:	f000 fdf1 	bl	8006db8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061d6:	4b1d      	ldr	r3, [pc, #116]	; (800624c <xTaskCheckForTimeOut+0xb8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ee:	d102      	bne.n	80061f6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061f0:	2300      	movs	r3, #0
 80061f2:	61fb      	str	r3, [r7, #28]
 80061f4:	e023      	b.n	800623e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	4b15      	ldr	r3, [pc, #84]	; (8006250 <xTaskCheckForTimeOut+0xbc>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d007      	beq.n	8006212 <xTaskCheckForTimeOut+0x7e>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	429a      	cmp	r2, r3
 800620a:	d302      	bcc.n	8006212 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800620c:	2301      	movs	r3, #1
 800620e:	61fb      	str	r3, [r7, #28]
 8006210:	e015      	b.n	800623e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	429a      	cmp	r2, r3
 800621a:	d20b      	bcs.n	8006234 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	1ad2      	subs	r2, r2, r3
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff ff9d 	bl	8006168 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800622e:	2300      	movs	r3, #0
 8006230:	61fb      	str	r3, [r7, #28]
 8006232:	e004      	b.n	800623e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800623a:	2301      	movs	r3, #1
 800623c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800623e:	f000 fde9 	bl	8006e14 <vPortExitCritical>

	return xReturn;
 8006242:	69fb      	ldr	r3, [r7, #28]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3720      	adds	r7, #32
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	200015c8 	.word	0x200015c8
 8006250:	200015dc 	.word	0x200015dc

08006254 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006258:	4b03      	ldr	r3, [pc, #12]	; (8006268 <vTaskMissedYield+0x14>)
 800625a:	2201      	movs	r2, #1
 800625c:	601a      	str	r2, [r3, #0]
}
 800625e:	bf00      	nop
 8006260:	46bd      	mov	sp, r7
 8006262:	bc80      	pop	{r7}
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	200015d8 	.word	0x200015d8

0800626c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006274:	f000 f852 	bl	800631c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006278:	4b06      	ldr	r3, [pc, #24]	; (8006294 <prvIdleTask+0x28>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d9f9      	bls.n	8006274 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006280:	4b05      	ldr	r3, [pc, #20]	; (8006298 <prvIdleTask+0x2c>)
 8006282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006290:	e7f0      	b.n	8006274 <prvIdleTask+0x8>
 8006292:	bf00      	nop
 8006294:	200010f4 	.word	0x200010f4
 8006298:	e000ed04 	.word	0xe000ed04

0800629c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062a2:	2300      	movs	r3, #0
 80062a4:	607b      	str	r3, [r7, #4]
 80062a6:	e00c      	b.n	80062c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	4613      	mov	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4a12      	ldr	r2, [pc, #72]	; (80062fc <prvInitialiseTaskLists+0x60>)
 80062b4:	4413      	add	r3, r2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fe fd24 	bl	8004d04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3301      	adds	r3, #1
 80062c0:	607b      	str	r3, [r7, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b37      	cmp	r3, #55	; 0x37
 80062c6:	d9ef      	bls.n	80062a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062c8:	480d      	ldr	r0, [pc, #52]	; (8006300 <prvInitialiseTaskLists+0x64>)
 80062ca:	f7fe fd1b 	bl	8004d04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062ce:	480d      	ldr	r0, [pc, #52]	; (8006304 <prvInitialiseTaskLists+0x68>)
 80062d0:	f7fe fd18 	bl	8004d04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062d4:	480c      	ldr	r0, [pc, #48]	; (8006308 <prvInitialiseTaskLists+0x6c>)
 80062d6:	f7fe fd15 	bl	8004d04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062da:	480c      	ldr	r0, [pc, #48]	; (800630c <prvInitialiseTaskLists+0x70>)
 80062dc:	f7fe fd12 	bl	8004d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062e0:	480b      	ldr	r0, [pc, #44]	; (8006310 <prvInitialiseTaskLists+0x74>)
 80062e2:	f7fe fd0f 	bl	8004d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062e6:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <prvInitialiseTaskLists+0x78>)
 80062e8:	4a05      	ldr	r2, [pc, #20]	; (8006300 <prvInitialiseTaskLists+0x64>)
 80062ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062ec:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <prvInitialiseTaskLists+0x7c>)
 80062ee:	4a05      	ldr	r2, [pc, #20]	; (8006304 <prvInitialiseTaskLists+0x68>)
 80062f0:	601a      	str	r2, [r3, #0]
}
 80062f2:	bf00      	nop
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	200010f4 	.word	0x200010f4
 8006300:	20001554 	.word	0x20001554
 8006304:	20001568 	.word	0x20001568
 8006308:	20001584 	.word	0x20001584
 800630c:	20001598 	.word	0x20001598
 8006310:	200015b0 	.word	0x200015b0
 8006314:	2000157c 	.word	0x2000157c
 8006318:	20001580 	.word	0x20001580

0800631c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006322:	e019      	b.n	8006358 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006324:	f000 fd48 	bl	8006db8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006328:	4b0f      	ldr	r3, [pc, #60]	; (8006368 <prvCheckTasksWaitingTermination+0x4c>)
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3304      	adds	r3, #4
 8006334:	4618      	mov	r0, r3
 8006336:	f7fe fd6b 	bl	8004e10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800633a:	4b0c      	ldr	r3, [pc, #48]	; (800636c <prvCheckTasksWaitingTermination+0x50>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3b01      	subs	r3, #1
 8006340:	4a0a      	ldr	r2, [pc, #40]	; (800636c <prvCheckTasksWaitingTermination+0x50>)
 8006342:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006344:	4b0a      	ldr	r3, [pc, #40]	; (8006370 <prvCheckTasksWaitingTermination+0x54>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3b01      	subs	r3, #1
 800634a:	4a09      	ldr	r2, [pc, #36]	; (8006370 <prvCheckTasksWaitingTermination+0x54>)
 800634c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800634e:	f000 fd61 	bl	8006e14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f80e 	bl	8006374 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006358:	4b05      	ldr	r3, [pc, #20]	; (8006370 <prvCheckTasksWaitingTermination+0x54>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1e1      	bne.n	8006324 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006360:	bf00      	nop
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	20001598 	.word	0x20001598
 800636c:	200015c4 	.word	0x200015c4
 8006370:	200015ac 	.word	0x200015ac

08006374 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006382:	2b00      	cmp	r3, #0
 8006384:	d108      	bne.n	8006398 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638a:	4618      	mov	r0, r3
 800638c:	f000 fecc 	bl	8007128 <vPortFree>
				vPortFree( pxTCB );
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fec9 	bl	8007128 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006396:	e017      	b.n	80063c8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d103      	bne.n	80063aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fec0 	bl	8007128 <vPortFree>
	}
 80063a8:	e00e      	b.n	80063c8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d009      	beq.n	80063c8 <prvDeleteTCB+0x54>
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	e7fe      	b.n	80063c6 <prvDeleteTCB+0x52>
	}
 80063c8:	bf00      	nop
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063d6:	4b0e      	ldr	r3, [pc, #56]	; (8006410 <prvResetNextTaskUnblockTime+0x40>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <prvResetNextTaskUnblockTime+0x14>
 80063e0:	2301      	movs	r3, #1
 80063e2:	e000      	b.n	80063e6 <prvResetNextTaskUnblockTime+0x16>
 80063e4:	2300      	movs	r3, #0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d004      	beq.n	80063f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063ea:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <prvResetNextTaskUnblockTime+0x44>)
 80063ec:	f04f 32ff 	mov.w	r2, #4294967295
 80063f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063f2:	e008      	b.n	8006406 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063f4:	4b06      	ldr	r3, [pc, #24]	; (8006410 <prvResetNextTaskUnblockTime+0x40>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	4a04      	ldr	r2, [pc, #16]	; (8006414 <prvResetNextTaskUnblockTime+0x44>)
 8006404:	6013      	str	r3, [r2, #0]
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	bc80      	pop	{r7}
 800640e:	4770      	bx	lr
 8006410:	2000157c 	.word	0x2000157c
 8006414:	200015e4 	.word	0x200015e4

08006418 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800641e:	4b0b      	ldr	r3, [pc, #44]	; (800644c <xTaskGetSchedulerState+0x34>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d102      	bne.n	800642c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006426:	2301      	movs	r3, #1
 8006428:	607b      	str	r3, [r7, #4]
 800642a:	e008      	b.n	800643e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800642c:	4b08      	ldr	r3, [pc, #32]	; (8006450 <xTaskGetSchedulerState+0x38>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d102      	bne.n	800643a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006434:	2302      	movs	r3, #2
 8006436:	607b      	str	r3, [r7, #4]
 8006438:	e001      	b.n	800643e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800643a:	2300      	movs	r3, #0
 800643c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800643e:	687b      	ldr	r3, [r7, #4]
	}
 8006440:	4618      	mov	r0, r3
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	bc80      	pop	{r7}
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	200015d0 	.word	0x200015d0
 8006450:	200015ec 	.word	0x200015ec

08006454 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006460:	2300      	movs	r3, #0
 8006462:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d054      	beq.n	8006514 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800646a:	4b2d      	ldr	r3, [pc, #180]	; (8006520 <xTaskPriorityDisinherit+0xcc>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	429a      	cmp	r2, r3
 8006472:	d009      	beq.n	8006488 <xTaskPriorityDisinherit+0x34>
 8006474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	60fb      	str	r3, [r7, #12]
 8006486:	e7fe      	b.n	8006486 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800648c:	2b00      	cmp	r3, #0
 800648e:	d109      	bne.n	80064a4 <xTaskPriorityDisinherit+0x50>
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	60bb      	str	r3, [r7, #8]
 80064a2:	e7fe      	b.n	80064a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a8:	1e5a      	subs	r2, r3, #1
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d02c      	beq.n	8006514 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d128      	bne.n	8006514 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	3304      	adds	r3, #4
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fca2 	bl	8004e10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e4:	4b0f      	ldr	r3, [pc, #60]	; (8006524 <xTaskPriorityDisinherit+0xd0>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d903      	bls.n	80064f4 <xTaskPriorityDisinherit+0xa0>
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	4a0c      	ldr	r2, [pc, #48]	; (8006524 <xTaskPriorityDisinherit+0xd0>)
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f8:	4613      	mov	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4a09      	ldr	r2, [pc, #36]	; (8006528 <xTaskPriorityDisinherit+0xd4>)
 8006502:	441a      	add	r2, r3
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	3304      	adds	r3, #4
 8006508:	4619      	mov	r1, r3
 800650a:	4610      	mov	r0, r2
 800650c:	f7fe fc25 	bl	8004d5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006510:	2301      	movs	r3, #1
 8006512:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006514:	697b      	ldr	r3, [r7, #20]
	}
 8006516:	4618      	mov	r0, r3
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	200010f0 	.word	0x200010f0
 8006524:	200015cc 	.word	0x200015cc
 8006528:	200010f4 	.word	0x200010f4

0800652c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006536:	4b21      	ldr	r3, [pc, #132]	; (80065bc <prvAddCurrentTaskToDelayedList+0x90>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800653c:	4b20      	ldr	r3, [pc, #128]	; (80065c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3304      	adds	r3, #4
 8006542:	4618      	mov	r0, r3
 8006544:	f7fe fc64 	bl	8004e10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654e:	d10a      	bne.n	8006566 <prvAddCurrentTaskToDelayedList+0x3a>
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d007      	beq.n	8006566 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006556:	4b1a      	ldr	r3, [pc, #104]	; (80065c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3304      	adds	r3, #4
 800655c:	4619      	mov	r1, r3
 800655e:	4819      	ldr	r0, [pc, #100]	; (80065c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006560:	f7fe fbfb 	bl	8004d5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006564:	e026      	b.n	80065b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4413      	add	r3, r2
 800656c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800656e:	4b14      	ldr	r3, [pc, #80]	; (80065c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	429a      	cmp	r2, r3
 800657c:	d209      	bcs.n	8006592 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800657e:	4b12      	ldr	r3, [pc, #72]	; (80065c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	4b0f      	ldr	r3, [pc, #60]	; (80065c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3304      	adds	r3, #4
 8006588:	4619      	mov	r1, r3
 800658a:	4610      	mov	r0, r2
 800658c:	f7fe fc08 	bl	8004da0 <vListInsert>
}
 8006590:	e010      	b.n	80065b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006592:	4b0e      	ldr	r3, [pc, #56]	; (80065cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	4b0a      	ldr	r3, [pc, #40]	; (80065c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	3304      	adds	r3, #4
 800659c:	4619      	mov	r1, r3
 800659e:	4610      	mov	r0, r2
 80065a0:	f7fe fbfe 	bl	8004da0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065a4:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d202      	bcs.n	80065b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80065ae:	4a08      	ldr	r2, [pc, #32]	; (80065d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	6013      	str	r3, [r2, #0]
}
 80065b4:	bf00      	nop
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	200015c8 	.word	0x200015c8
 80065c0:	200010f0 	.word	0x200010f0
 80065c4:	200015b0 	.word	0x200015b0
 80065c8:	20001580 	.word	0x20001580
 80065cc:	2000157c 	.word	0x2000157c
 80065d0:	200015e4 	.word	0x200015e4

080065d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b08a      	sub	sp, #40	; 0x28
 80065d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065da:	2300      	movs	r3, #0
 80065dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065de:	f000 fac3 	bl	8006b68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065e2:	4b1c      	ldr	r3, [pc, #112]	; (8006654 <xTimerCreateTimerTask+0x80>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d021      	beq.n	800662e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065f2:	1d3a      	adds	r2, r7, #4
 80065f4:	f107 0108 	add.w	r1, r7, #8
 80065f8:	f107 030c 	add.w	r3, r7, #12
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fe fb67 	bl	8004cd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	9202      	str	r2, [sp, #8]
 800660a:	9301      	str	r3, [sp, #4]
 800660c:	2302      	movs	r3, #2
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	2300      	movs	r3, #0
 8006612:	460a      	mov	r2, r1
 8006614:	4910      	ldr	r1, [pc, #64]	; (8006658 <xTimerCreateTimerTask+0x84>)
 8006616:	4811      	ldr	r0, [pc, #68]	; (800665c <xTimerCreateTimerTask+0x88>)
 8006618:	f7ff f8f8 	bl	800580c <xTaskCreateStatic>
 800661c:	4602      	mov	r2, r0
 800661e:	4b10      	ldr	r3, [pc, #64]	; (8006660 <xTimerCreateTimerTask+0x8c>)
 8006620:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006622:	4b0f      	ldr	r3, [pc, #60]	; (8006660 <xTimerCreateTimerTask+0x8c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800662a:	2301      	movs	r3, #1
 800662c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d109      	bne.n	8006648 <xTimerCreateTimerTask+0x74>
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	e7fe      	b.n	8006646 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006648:	697b      	ldr	r3, [r7, #20]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20001620 	.word	0x20001620
 8006658:	08007810 	.word	0x08007810
 800665c:	0800677d 	.word	0x0800677d
 8006660:	20001624 	.word	0x20001624

08006664 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08a      	sub	sp, #40	; 0x28
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006672:	2300      	movs	r3, #0
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d109      	bne.n	8006690 <xTimerGenericCommand+0x2c>
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	623b      	str	r3, [r7, #32]
 800668e:	e7fe      	b.n	800668e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006690:	4b19      	ldr	r3, [pc, #100]	; (80066f8 <xTimerGenericCommand+0x94>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d02a      	beq.n	80066ee <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b05      	cmp	r3, #5
 80066a8:	dc18      	bgt.n	80066dc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80066aa:	f7ff feb5 	bl	8006418 <xTaskGetSchedulerState>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d109      	bne.n	80066c8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80066b4:	4b10      	ldr	r3, [pc, #64]	; (80066f8 <xTimerGenericCommand+0x94>)
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	f107 0110 	add.w	r1, r7, #16
 80066bc:	2300      	movs	r3, #0
 80066be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c0:	f7fe fcce 	bl	8005060 <xQueueGenericSend>
 80066c4:	6278      	str	r0, [r7, #36]	; 0x24
 80066c6:	e012      	b.n	80066ee <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80066c8:	4b0b      	ldr	r3, [pc, #44]	; (80066f8 <xTimerGenericCommand+0x94>)
 80066ca:	6818      	ldr	r0, [r3, #0]
 80066cc:	f107 0110 	add.w	r1, r7, #16
 80066d0:	2300      	movs	r3, #0
 80066d2:	2200      	movs	r2, #0
 80066d4:	f7fe fcc4 	bl	8005060 <xQueueGenericSend>
 80066d8:	6278      	str	r0, [r7, #36]	; 0x24
 80066da:	e008      	b.n	80066ee <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066dc:	4b06      	ldr	r3, [pc, #24]	; (80066f8 <xTimerGenericCommand+0x94>)
 80066de:	6818      	ldr	r0, [r3, #0]
 80066e0:	f107 0110 	add.w	r1, r7, #16
 80066e4:	2300      	movs	r3, #0
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	f7fe fdb4 	bl	8005254 <xQueueGenericSendFromISR>
 80066ec:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3728      	adds	r7, #40	; 0x28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	20001620 	.word	0x20001620

080066fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af02      	add	r7, sp, #8
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006706:	4b1c      	ldr	r3, [pc, #112]	; (8006778 <prvProcessExpiredTimer+0x7c>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	3304      	adds	r3, #4
 8006714:	4618      	mov	r0, r3
 8006716:	f7fe fb7b 	bl	8004e10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d121      	bne.n	8006766 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	699a      	ldr	r2, [r3, #24]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	18d1      	adds	r1, r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	6978      	ldr	r0, [r7, #20]
 8006730:	f000 f8c8 	bl	80068c4 <prvInsertTimerInActiveList>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d015      	beq.n	8006766 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800673a:	2300      	movs	r3, #0
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	2300      	movs	r3, #0
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	2100      	movs	r1, #0
 8006744:	6978      	ldr	r0, [r7, #20]
 8006746:	f7ff ff8d 	bl	8006664 <xTimerGenericCommand>
 800674a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d109      	bne.n	8006766 <prvProcessExpiredTimer+0x6a>
 8006752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	e7fe      	b.n	8006764 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	6978      	ldr	r0, [r7, #20]
 800676c:	4798      	blx	r3
}
 800676e:	bf00      	nop
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20001618 	.word	0x20001618

0800677c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006784:	f107 0308 	add.w	r3, r7, #8
 8006788:	4618      	mov	r0, r3
 800678a:	f000 f857 	bl	800683c <prvGetNextExpireTime>
 800678e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	4619      	mov	r1, r3
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 f803 	bl	80067a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800679a:	f000 f8d5 	bl	8006948 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800679e:	e7f1      	b.n	8006784 <prvTimerTask+0x8>

080067a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80067aa:	f7ff fa5b 	bl	8005c64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067ae:	f107 0308 	add.w	r3, r7, #8
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 f866 	bl	8006884 <prvSampleTimeNow>
 80067b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d130      	bne.n	8006822 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10a      	bne.n	80067dc <prvProcessTimerOrBlockTask+0x3c>
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d806      	bhi.n	80067dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80067ce:	f7ff fa57 	bl	8005c80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80067d2:	68f9      	ldr	r1, [r7, #12]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff ff91 	bl	80066fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80067da:	e024      	b.n	8006826 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d008      	beq.n	80067f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80067e2:	4b13      	ldr	r3, [pc, #76]	; (8006830 <prvProcessTimerOrBlockTask+0x90>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	bf0c      	ite	eq
 80067ec:	2301      	moveq	r3, #1
 80067ee:	2300      	movne	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80067f4:	4b0f      	ldr	r3, [pc, #60]	; (8006834 <prvProcessTimerOrBlockTask+0x94>)
 80067f6:	6818      	ldr	r0, [r3, #0]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	4619      	mov	r1, r3
 8006802:	f7fe ffcf 	bl	80057a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006806:	f7ff fa3b 	bl	8005c80 <xTaskResumeAll>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006810:	4b09      	ldr	r3, [pc, #36]	; (8006838 <prvProcessTimerOrBlockTask+0x98>)
 8006812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	f3bf 8f6f 	isb	sy
}
 8006820:	e001      	b.n	8006826 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006822:	f7ff fa2d 	bl	8005c80 <xTaskResumeAll>
}
 8006826:	bf00      	nop
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	2000161c 	.word	0x2000161c
 8006834:	20001620 	.word	0x20001620
 8006838:	e000ed04 	.word	0xe000ed04

0800683c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006844:	4b0e      	ldr	r3, [pc, #56]	; (8006880 <prvGetNextExpireTime+0x44>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	bf0c      	ite	eq
 800684e:	2301      	moveq	r3, #1
 8006850:	2300      	movne	r3, #0
 8006852:	b2db      	uxtb	r3, r3
 8006854:	461a      	mov	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d105      	bne.n	800686e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006862:	4b07      	ldr	r3, [pc, #28]	; (8006880 <prvGetNextExpireTime+0x44>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	e001      	b.n	8006872 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006872:	68fb      	ldr	r3, [r7, #12]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	bc80      	pop	{r7}
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	20001618 	.word	0x20001618

08006884 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800688c:	f7ff fa94 	bl	8005db8 <xTaskGetTickCount>
 8006890:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006892:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <prvSampleTimeNow+0x3c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	429a      	cmp	r2, r3
 800689a:	d205      	bcs.n	80068a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800689c:	f000 f904 	bl	8006aa8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	e002      	b.n	80068ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80068ae:	4a04      	ldr	r2, [pc, #16]	; (80068c0 <prvSampleTimeNow+0x3c>)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80068b4:	68fb      	ldr	r3, [r7, #12]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20001628 	.word	0x20001628

080068c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
 80068d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80068d2:	2300      	movs	r3, #0
 80068d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d812      	bhi.n	8006910 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	1ad2      	subs	r2, r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d302      	bcc.n	80068fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80068f8:	2301      	movs	r3, #1
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	e01b      	b.n	8006936 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80068fe:	4b10      	ldr	r3, [pc, #64]	; (8006940 <prvInsertTimerInActiveList+0x7c>)
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3304      	adds	r3, #4
 8006906:	4619      	mov	r1, r3
 8006908:	4610      	mov	r0, r2
 800690a:	f7fe fa49 	bl	8004da0 <vListInsert>
 800690e:	e012      	b.n	8006936 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	429a      	cmp	r2, r3
 8006916:	d206      	bcs.n	8006926 <prvInsertTimerInActiveList+0x62>
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	429a      	cmp	r2, r3
 800691e:	d302      	bcc.n	8006926 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006920:	2301      	movs	r3, #1
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	e007      	b.n	8006936 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006926:	4b07      	ldr	r3, [pc, #28]	; (8006944 <prvInsertTimerInActiveList+0x80>)
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3304      	adds	r3, #4
 800692e:	4619      	mov	r1, r3
 8006930:	4610      	mov	r0, r2
 8006932:	f7fe fa35 	bl	8004da0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006936:	697b      	ldr	r3, [r7, #20]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3718      	adds	r7, #24
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	2000161c 	.word	0x2000161c
 8006944:	20001618 	.word	0x20001618

08006948 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08e      	sub	sp, #56	; 0x38
 800694c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800694e:	e099      	b.n	8006a84 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	da17      	bge.n	8006986 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006956:	1d3b      	adds	r3, r7, #4
 8006958:	3304      	adds	r3, #4
 800695a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <prvProcessReceivedCommands+0x2e>
 8006962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	61fb      	str	r3, [r7, #28]
 8006974:	e7fe      	b.n	8006974 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800697c:	6850      	ldr	r0, [r2, #4]
 800697e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006980:	6892      	ldr	r2, [r2, #8]
 8006982:	4611      	mov	r1, r2
 8006984:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	db7a      	blt.n	8006a82 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d004      	beq.n	80069a2 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699a:	3304      	adds	r3, #4
 800699c:	4618      	mov	r0, r3
 800699e:	f7fe fa37 	bl	8004e10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069a2:	463b      	mov	r3, r7
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7ff ff6d 	bl	8006884 <prvSampleTimeNow>
 80069aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b09      	cmp	r3, #9
 80069b0:	d868      	bhi.n	8006a84 <prvProcessReceivedCommands+0x13c>
 80069b2:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <prvProcessReceivedCommands+0x70>)
 80069b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b8:	080069e1 	.word	0x080069e1
 80069bc:	080069e1 	.word	0x080069e1
 80069c0:	080069e1 	.word	0x080069e1
 80069c4:	08006a85 	.word	0x08006a85
 80069c8:	08006a3b 	.word	0x08006a3b
 80069cc:	08006a71 	.word	0x08006a71
 80069d0:	080069e1 	.word	0x080069e1
 80069d4:	080069e1 	.word	0x080069e1
 80069d8:	08006a85 	.word	0x08006a85
 80069dc:	08006a3b 	.word	0x08006a3b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	18d1      	adds	r1, r2, r3
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ee:	f7ff ff69 	bl	80068c4 <prvInsertTimerInActiveList>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d045      	beq.n	8006a84 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069fe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d13d      	bne.n	8006a84 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	441a      	add	r2, r3
 8006a10:	2300      	movs	r3, #0
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	2300      	movs	r3, #0
 8006a16:	2100      	movs	r1, #0
 8006a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a1a:	f7ff fe23 	bl	8006664 <xTimerGenericCommand>
 8006a1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d12e      	bne.n	8006a84 <prvProcessReceivedCommands+0x13c>
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	61bb      	str	r3, [r7, #24]
 8006a38:	e7fe      	b.n	8006a38 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d109      	bne.n	8006a5c <prvProcessReceivedCommands+0x114>
 8006a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	e7fe      	b.n	8006a5a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5e:	699a      	ldr	r2, [r3, #24]
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	18d1      	adds	r1, r2, r3
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a6a:	f7ff ff2b 	bl	80068c4 <prvInsertTimerInActiveList>
					break;
 8006a6e:	e009      	b.n	8006a84 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d104      	bne.n	8006a84 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a7c:	f000 fb54 	bl	8007128 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a80:	e000      	b.n	8006a84 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006a82:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a84:	4b07      	ldr	r3, [pc, #28]	; (8006aa4 <prvProcessReceivedCommands+0x15c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	1d39      	adds	r1, r7, #4
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fe fc75 	bl	800537c <xQueueReceive>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f47f af5b 	bne.w	8006950 <prvProcessReceivedCommands+0x8>
	}
}
 8006a9a:	bf00      	nop
 8006a9c:	3730      	adds	r7, #48	; 0x30
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20001620 	.word	0x20001620

08006aa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006aae:	e044      	b.n	8006b3a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ab0:	4b2b      	ldr	r3, [pc, #172]	; (8006b60 <prvSwitchTimerLists+0xb8>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006aba:	4b29      	ldr	r3, [pc, #164]	; (8006b60 <prvSwitchTimerLists+0xb8>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe f9a1 	bl	8004e10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d12d      	bne.n	8006b3a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d90e      	bls.n	8006b0e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006afc:	4b18      	ldr	r3, [pc, #96]	; (8006b60 <prvSwitchTimerLists+0xb8>)
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	3304      	adds	r3, #4
 8006b04:	4619      	mov	r1, r3
 8006b06:	4610      	mov	r0, r2
 8006b08:	f7fe f94a 	bl	8004da0 <vListInsert>
 8006b0c:	e015      	b.n	8006b3a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b0e:	2300      	movs	r3, #0
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	2300      	movs	r3, #0
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	2100      	movs	r1, #0
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f7ff fda3 	bl	8006664 <xTimerGenericCommand>
 8006b1e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d109      	bne.n	8006b3a <prvSwitchTimerLists+0x92>
 8006b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	e7fe      	b.n	8006b38 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b3a:	4b09      	ldr	r3, [pc, #36]	; (8006b60 <prvSwitchTimerLists+0xb8>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1b5      	bne.n	8006ab0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b44:	4b06      	ldr	r3, [pc, #24]	; (8006b60 <prvSwitchTimerLists+0xb8>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b4a:	4b06      	ldr	r3, [pc, #24]	; (8006b64 <prvSwitchTimerLists+0xbc>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a04      	ldr	r2, [pc, #16]	; (8006b60 <prvSwitchTimerLists+0xb8>)
 8006b50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b52:	4a04      	ldr	r2, [pc, #16]	; (8006b64 <prvSwitchTimerLists+0xbc>)
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	6013      	str	r3, [r2, #0]
}
 8006b58:	bf00      	nop
 8006b5a:	3718      	adds	r7, #24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	20001618 	.word	0x20001618
 8006b64:	2000161c 	.word	0x2000161c

08006b68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b6e:	f000 f923 	bl	8006db8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b72:	4b15      	ldr	r3, [pc, #84]	; (8006bc8 <prvCheckForValidListAndQueue+0x60>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d120      	bne.n	8006bbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b7a:	4814      	ldr	r0, [pc, #80]	; (8006bcc <prvCheckForValidListAndQueue+0x64>)
 8006b7c:	f7fe f8c2 	bl	8004d04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b80:	4813      	ldr	r0, [pc, #76]	; (8006bd0 <prvCheckForValidListAndQueue+0x68>)
 8006b82:	f7fe f8bf 	bl	8004d04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b86:	4b13      	ldr	r3, [pc, #76]	; (8006bd4 <prvCheckForValidListAndQueue+0x6c>)
 8006b88:	4a10      	ldr	r2, [pc, #64]	; (8006bcc <prvCheckForValidListAndQueue+0x64>)
 8006b8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b8c:	4b12      	ldr	r3, [pc, #72]	; (8006bd8 <prvCheckForValidListAndQueue+0x70>)
 8006b8e:	4a10      	ldr	r2, [pc, #64]	; (8006bd0 <prvCheckForValidListAndQueue+0x68>)
 8006b90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b92:	2300      	movs	r3, #0
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	4b11      	ldr	r3, [pc, #68]	; (8006bdc <prvCheckForValidListAndQueue+0x74>)
 8006b98:	4a11      	ldr	r2, [pc, #68]	; (8006be0 <prvCheckForValidListAndQueue+0x78>)
 8006b9a:	2110      	movs	r1, #16
 8006b9c:	200a      	movs	r0, #10
 8006b9e:	f7fe f9c9 	bl	8004f34 <xQueueGenericCreateStatic>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	4b08      	ldr	r3, [pc, #32]	; (8006bc8 <prvCheckForValidListAndQueue+0x60>)
 8006ba6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ba8:	4b07      	ldr	r3, [pc, #28]	; (8006bc8 <prvCheckForValidListAndQueue+0x60>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006bb0:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <prvCheckForValidListAndQueue+0x60>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	490b      	ldr	r1, [pc, #44]	; (8006be4 <prvCheckForValidListAndQueue+0x7c>)
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fe fdcc 	bl	8005754 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bbc:	f000 f92a 	bl	8006e14 <vPortExitCritical>
}
 8006bc0:	bf00      	nop
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20001620 	.word	0x20001620
 8006bcc:	200015f0 	.word	0x200015f0
 8006bd0:	20001604 	.word	0x20001604
 8006bd4:	20001618 	.word	0x20001618
 8006bd8:	2000161c 	.word	0x2000161c
 8006bdc:	200016cc 	.word	0x200016cc
 8006be0:	2000162c 	.word	0x2000162c
 8006be4:	08007818 	.word	0x08007818

08006be8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3b04      	subs	r3, #4
 8006bf8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3b04      	subs	r3, #4
 8006c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f023 0201 	bic.w	r2, r3, #1
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3b04      	subs	r3, #4
 8006c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c18:	4a08      	ldr	r2, [pc, #32]	; (8006c3c <pxPortInitialiseStack+0x54>)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3b14      	subs	r3, #20
 8006c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3b20      	subs	r3, #32
 8006c2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c30:	68fb      	ldr	r3, [r7, #12]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bc80      	pop	{r7}
 8006c3a:	4770      	bx	lr
 8006c3c:	08006c41 	.word	0x08006c41

08006c40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c4a:	4b10      	ldr	r3, [pc, #64]	; (8006c8c <prvTaskExitError+0x4c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c52:	d009      	beq.n	8006c68 <prvTaskExitError+0x28>
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	e7fe      	b.n	8006c66 <prvTaskExitError+0x26>
 8006c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c7a:	bf00      	nop
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0fc      	beq.n	8006c7c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c82:	bf00      	nop
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bc80      	pop	{r7}
 8006c8a:	4770      	bx	lr
 8006c8c:	2000004c 	.word	0x2000004c

08006c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c90:	4b07      	ldr	r3, [pc, #28]	; (8006cb0 <pxCurrentTCBConst2>)
 8006c92:	6819      	ldr	r1, [r3, #0]
 8006c94:	6808      	ldr	r0, [r1, #0]
 8006c96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c9a:	f380 8809 	msr	PSP, r0
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f04f 0000 	mov.w	r0, #0
 8006ca6:	f380 8811 	msr	BASEPRI, r0
 8006caa:	f04e 0e0d 	orr.w	lr, lr, #13
 8006cae:	4770      	bx	lr

08006cb0 <pxCurrentTCBConst2>:
 8006cb0:	200010f0 	.word	0x200010f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop

08006cb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006cb8:	4806      	ldr	r0, [pc, #24]	; (8006cd4 <prvPortStartFirstTask+0x1c>)
 8006cba:	6800      	ldr	r0, [r0, #0]
 8006cbc:	6800      	ldr	r0, [r0, #0]
 8006cbe:	f380 8808 	msr	MSP, r0
 8006cc2:	b662      	cpsie	i
 8006cc4:	b661      	cpsie	f
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	df00      	svc	0
 8006cd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006cd2:	bf00      	nop
 8006cd4:	e000ed08 	.word	0xe000ed08

08006cd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cde:	4b31      	ldr	r3, [pc, #196]	; (8006da4 <xPortStartScheduler+0xcc>)
 8006ce0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	22ff      	movs	r2, #255	; 0xff
 8006cee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	4b29      	ldr	r3, [pc, #164]	; (8006da8 <xPortStartScheduler+0xd0>)
 8006d04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d06:	4b29      	ldr	r3, [pc, #164]	; (8006dac <xPortStartScheduler+0xd4>)
 8006d08:	2207      	movs	r2, #7
 8006d0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d0c:	e009      	b.n	8006d22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006d0e:	4b27      	ldr	r3, [pc, #156]	; (8006dac <xPortStartScheduler+0xd4>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	4a25      	ldr	r2, [pc, #148]	; (8006dac <xPortStartScheduler+0xd4>)
 8006d16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d18:	78fb      	ldrb	r3, [r7, #3]
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d22:	78fb      	ldrb	r3, [r7, #3]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2a:	2b80      	cmp	r3, #128	; 0x80
 8006d2c:	d0ef      	beq.n	8006d0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d2e:	4b1f      	ldr	r3, [pc, #124]	; (8006dac <xPortStartScheduler+0xd4>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f1c3 0307 	rsb	r3, r3, #7
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d009      	beq.n	8006d4e <xPortStartScheduler+0x76>
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	60bb      	str	r3, [r7, #8]
 8006d4c:	e7fe      	b.n	8006d4c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d4e:	4b17      	ldr	r3, [pc, #92]	; (8006dac <xPortStartScheduler+0xd4>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	4a15      	ldr	r2, [pc, #84]	; (8006dac <xPortStartScheduler+0xd4>)
 8006d56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d58:	4b14      	ldr	r3, [pc, #80]	; (8006dac <xPortStartScheduler+0xd4>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d60:	4a12      	ldr	r2, [pc, #72]	; (8006dac <xPortStartScheduler+0xd4>)
 8006d62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d6c:	4b10      	ldr	r3, [pc, #64]	; (8006db0 <xPortStartScheduler+0xd8>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a0f      	ldr	r2, [pc, #60]	; (8006db0 <xPortStartScheduler+0xd8>)
 8006d72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d78:	4b0d      	ldr	r3, [pc, #52]	; (8006db0 <xPortStartScheduler+0xd8>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a0c      	ldr	r2, [pc, #48]	; (8006db0 <xPortStartScheduler+0xd8>)
 8006d7e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d84:	f000 f8b0 	bl	8006ee8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d88:	4b0a      	ldr	r3, [pc, #40]	; (8006db4 <xPortStartScheduler+0xdc>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d8e:	f7ff ff93 	bl	8006cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d92:	f7ff f8dd 	bl	8005f50 <vTaskSwitchContext>
	prvTaskExitError();
 8006d96:	f7ff ff53 	bl	8006c40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	e000e400 	.word	0xe000e400
 8006da8:	2000171c 	.word	0x2000171c
 8006dac:	20001720 	.word	0x20001720
 8006db0:	e000ed20 	.word	0xe000ed20
 8006db4:	2000004c 	.word	0x2000004c

08006db8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006dd0:	4b0e      	ldr	r3, [pc, #56]	; (8006e0c <vPortEnterCritical+0x54>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	4a0d      	ldr	r2, [pc, #52]	; (8006e0c <vPortEnterCritical+0x54>)
 8006dd8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006dda:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <vPortEnterCritical+0x54>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d10e      	bne.n	8006e00 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006de2:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <vPortEnterCritical+0x58>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d009      	beq.n	8006e00 <vPortEnterCritical+0x48>
 8006dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	603b      	str	r3, [r7, #0]
 8006dfe:	e7fe      	b.n	8006dfe <vPortEnterCritical+0x46>
	}
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bc80      	pop	{r7}
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	2000004c 	.word	0x2000004c
 8006e10:	e000ed04 	.word	0xe000ed04

08006e14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e1a:	4b10      	ldr	r3, [pc, #64]	; (8006e5c <vPortExitCritical+0x48>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d109      	bne.n	8006e36 <vPortExitCritical+0x22>
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	607b      	str	r3, [r7, #4]
 8006e34:	e7fe      	b.n	8006e34 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006e36:	4b09      	ldr	r3, [pc, #36]	; (8006e5c <vPortExitCritical+0x48>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	4a07      	ldr	r2, [pc, #28]	; (8006e5c <vPortExitCritical+0x48>)
 8006e3e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e40:	4b06      	ldr	r3, [pc, #24]	; (8006e5c <vPortExitCritical+0x48>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d104      	bne.n	8006e52 <vPortExitCritical+0x3e>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr
 8006e5c:	2000004c 	.word	0x2000004c

08006e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e60:	f3ef 8009 	mrs	r0, PSP
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	4b0d      	ldr	r3, [pc, #52]	; (8006ea0 <pxCurrentTCBConst>)
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e70:	6010      	str	r0, [r2, #0]
 8006e72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006e76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e7a:	f380 8811 	msr	BASEPRI, r0
 8006e7e:	f7ff f867 	bl	8005f50 <vTaskSwitchContext>
 8006e82:	f04f 0000 	mov.w	r0, #0
 8006e86:	f380 8811 	msr	BASEPRI, r0
 8006e8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006e8e:	6819      	ldr	r1, [r3, #0]
 8006e90:	6808      	ldr	r0, [r1, #0]
 8006e92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e96:	f380 8809 	msr	PSP, r0
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	4770      	bx	lr

08006ea0 <pxCurrentTCBConst>:
 8006ea0:	200010f0 	.word	0x200010f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ea4:	bf00      	nop
 8006ea6:	bf00      	nop

08006ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ec0:	f7fe ff88 	bl	8005dd4 <xTaskIncrementTick>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006eca:	4b06      	ldr	r3, [pc, #24]	; (8006ee4 <SysTick_Handler+0x3c>)
 8006ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	e000ed04 	.word	0xe000ed04

08006ee8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ee8:	b480      	push	{r7}
 8006eea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006eec:	4b0a      	ldr	r3, [pc, #40]	; (8006f18 <vPortSetupTimerInterrupt+0x30>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ef2:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <vPortSetupTimerInterrupt+0x34>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ef8:	4b09      	ldr	r3, [pc, #36]	; (8006f20 <vPortSetupTimerInterrupt+0x38>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a09      	ldr	r2, [pc, #36]	; (8006f24 <vPortSetupTimerInterrupt+0x3c>)
 8006efe:	fba2 2303 	umull	r2, r3, r2, r3
 8006f02:	099b      	lsrs	r3, r3, #6
 8006f04:	4a08      	ldr	r2, [pc, #32]	; (8006f28 <vPortSetupTimerInterrupt+0x40>)
 8006f06:	3b01      	subs	r3, #1
 8006f08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f0a:	4b03      	ldr	r3, [pc, #12]	; (8006f18 <vPortSetupTimerInterrupt+0x30>)
 8006f0c:	2207      	movs	r2, #7
 8006f0e:	601a      	str	r2, [r3, #0]
}
 8006f10:	bf00      	nop
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bc80      	pop	{r7}
 8006f16:	4770      	bx	lr
 8006f18:	e000e010 	.word	0xe000e010
 8006f1c:	e000e018 	.word	0xe000e018
 8006f20:	20000040 	.word	0x20000040
 8006f24:	10624dd3 	.word	0x10624dd3
 8006f28:	e000e014 	.word	0xe000e014

08006f2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f32:	f3ef 8305 	mrs	r3, IPSR
 8006f36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b0f      	cmp	r3, #15
 8006f3c:	d913      	bls.n	8006f66 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f3e:	4a15      	ldr	r2, [pc, #84]	; (8006f94 <vPortValidateInterruptPriority+0x68>)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f48:	4b13      	ldr	r3, [pc, #76]	; (8006f98 <vPortValidateInterruptPriority+0x6c>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	7afa      	ldrb	r2, [r7, #11]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d209      	bcs.n	8006f66 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	607b      	str	r3, [r7, #4]
 8006f64:	e7fe      	b.n	8006f64 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f66:	4b0d      	ldr	r3, [pc, #52]	; (8006f9c <vPortValidateInterruptPriority+0x70>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <vPortValidateInterruptPriority+0x74>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d909      	bls.n	8006f8a <vPortValidateInterruptPriority+0x5e>
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	603b      	str	r3, [r7, #0]
 8006f88:	e7fe      	b.n	8006f88 <vPortValidateInterruptPriority+0x5c>
	}
 8006f8a:	bf00      	nop
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bc80      	pop	{r7}
 8006f92:	4770      	bx	lr
 8006f94:	e000e3f0 	.word	0xe000e3f0
 8006f98:	2000171c 	.word	0x2000171c
 8006f9c:	e000ed0c 	.word	0xe000ed0c
 8006fa0:	20001720 	.word	0x20001720

08006fa4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08a      	sub	sp, #40	; 0x28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fac:	2300      	movs	r3, #0
 8006fae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006fb0:	f7fe fe58 	bl	8005c64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fb4:	4b57      	ldr	r3, [pc, #348]	; (8007114 <pvPortMalloc+0x170>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fbc:	f000 f90c 	bl	80071d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fc0:	4b55      	ldr	r3, [pc, #340]	; (8007118 <pvPortMalloc+0x174>)
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f040 808c 	bne.w	80070e6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d01c      	beq.n	800700e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006fd4:	2208      	movs	r2, #8
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4413      	add	r3, r2
 8006fda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f003 0307 	and.w	r3, r3, #7
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d013      	beq.n	800700e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f023 0307 	bic.w	r3, r3, #7
 8006fec:	3308      	adds	r3, #8
 8006fee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f003 0307 	and.w	r3, r3, #7
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d009      	beq.n	800700e <pvPortMalloc+0x6a>
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	e7fe      	b.n	800700c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d068      	beq.n	80070e6 <pvPortMalloc+0x142>
 8007014:	4b41      	ldr	r3, [pc, #260]	; (800711c <pvPortMalloc+0x178>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	429a      	cmp	r2, r3
 800701c:	d863      	bhi.n	80070e6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800701e:	4b40      	ldr	r3, [pc, #256]	; (8007120 <pvPortMalloc+0x17c>)
 8007020:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007022:	4b3f      	ldr	r3, [pc, #252]	; (8007120 <pvPortMalloc+0x17c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007028:	e004      	b.n	8007034 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	429a      	cmp	r2, r3
 800703c:	d903      	bls.n	8007046 <pvPortMalloc+0xa2>
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1f1      	bne.n	800702a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007046:	4b33      	ldr	r3, [pc, #204]	; (8007114 <pvPortMalloc+0x170>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800704c:	429a      	cmp	r2, r3
 800704e:	d04a      	beq.n	80070e6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2208      	movs	r2, #8
 8007056:	4413      	add	r3, r2
 8007058:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	1ad2      	subs	r2, r2, r3
 800706a:	2308      	movs	r3, #8
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	429a      	cmp	r2, r3
 8007070:	d91e      	bls.n	80070b0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4413      	add	r3, r2
 8007078:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	2b00      	cmp	r3, #0
 8007082:	d009      	beq.n	8007098 <pvPortMalloc+0xf4>
 8007084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	613b      	str	r3, [r7, #16]
 8007096:	e7fe      	b.n	8007096 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	1ad2      	subs	r2, r2, r3
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070aa:	69b8      	ldr	r0, [r7, #24]
 80070ac:	f000 f8f6 	bl	800729c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070b0:	4b1a      	ldr	r3, [pc, #104]	; (800711c <pvPortMalloc+0x178>)
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	4a18      	ldr	r2, [pc, #96]	; (800711c <pvPortMalloc+0x178>)
 80070bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070be:	4b17      	ldr	r3, [pc, #92]	; (800711c <pvPortMalloc+0x178>)
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	4b18      	ldr	r3, [pc, #96]	; (8007124 <pvPortMalloc+0x180>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d203      	bcs.n	80070d2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070ca:	4b14      	ldr	r3, [pc, #80]	; (800711c <pvPortMalloc+0x178>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a15      	ldr	r2, [pc, #84]	; (8007124 <pvPortMalloc+0x180>)
 80070d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	4b10      	ldr	r3, [pc, #64]	; (8007118 <pvPortMalloc+0x174>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	431a      	orrs	r2, r3
 80070dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	2200      	movs	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070e6:	f7fe fdcb 	bl	8005c80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d009      	beq.n	8007108 <pvPortMalloc+0x164>
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	e7fe      	b.n	8007106 <pvPortMalloc+0x162>
	return pvReturn;
 8007108:	69fb      	ldr	r3, [r7, #28]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3728      	adds	r7, #40	; 0x28
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	2000232c 	.word	0x2000232c
 8007118:	20002338 	.word	0x20002338
 800711c:	20002330 	.word	0x20002330
 8007120:	20002324 	.word	0x20002324
 8007124:	20002334 	.word	0x20002334

08007128 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d046      	beq.n	80071c8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800713a:	2308      	movs	r3, #8
 800713c:	425b      	negs	r3, r3
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	4413      	add	r3, r2
 8007142:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	4b20      	ldr	r3, [pc, #128]	; (80071d0 <vPortFree+0xa8>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4013      	ands	r3, r2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d109      	bne.n	800716a <vPortFree+0x42>
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	e7fe      	b.n	8007168 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d009      	beq.n	8007186 <vPortFree+0x5e>
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	60bb      	str	r3, [r7, #8]
 8007184:	e7fe      	b.n	8007184 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	4b11      	ldr	r3, [pc, #68]	; (80071d0 <vPortFree+0xa8>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4013      	ands	r3, r2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d019      	beq.n	80071c8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d115      	bne.n	80071c8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <vPortFree+0xa8>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	43db      	mvns	r3, r3
 80071a6:	401a      	ands	r2, r3
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071ac:	f7fe fd5a 	bl	8005c64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	4b07      	ldr	r3, [pc, #28]	; (80071d4 <vPortFree+0xac>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4413      	add	r3, r2
 80071ba:	4a06      	ldr	r2, [pc, #24]	; (80071d4 <vPortFree+0xac>)
 80071bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071be:	6938      	ldr	r0, [r7, #16]
 80071c0:	f000 f86c 	bl	800729c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80071c4:	f7fe fd5c 	bl	8005c80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071c8:	bf00      	nop
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20002338 	.word	0x20002338
 80071d4:	20002330 	.word	0x20002330

080071d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80071e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071e4:	4b27      	ldr	r3, [pc, #156]	; (8007284 <prvHeapInit+0xac>)
 80071e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00c      	beq.n	800720c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	3307      	adds	r3, #7
 80071f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f023 0307 	bic.w	r3, r3, #7
 80071fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	4a1f      	ldr	r2, [pc, #124]	; (8007284 <prvHeapInit+0xac>)
 8007208:	4413      	add	r3, r2
 800720a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007210:	4a1d      	ldr	r2, [pc, #116]	; (8007288 <prvHeapInit+0xb0>)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007216:	4b1c      	ldr	r3, [pc, #112]	; (8007288 <prvHeapInit+0xb0>)
 8007218:	2200      	movs	r2, #0
 800721a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	4413      	add	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007224:	2208      	movs	r2, #8
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	1a9b      	subs	r3, r3, r2
 800722a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f023 0307 	bic.w	r3, r3, #7
 8007232:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4a15      	ldr	r2, [pc, #84]	; (800728c <prvHeapInit+0xb4>)
 8007238:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800723a:	4b14      	ldr	r3, [pc, #80]	; (800728c <prvHeapInit+0xb4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2200      	movs	r2, #0
 8007240:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007242:	4b12      	ldr	r3, [pc, #72]	; (800728c <prvHeapInit+0xb4>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	1ad2      	subs	r2, r2, r3
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007258:	4b0c      	ldr	r3, [pc, #48]	; (800728c <prvHeapInit+0xb4>)
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	4a0a      	ldr	r2, [pc, #40]	; (8007290 <prvHeapInit+0xb8>)
 8007266:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	4a09      	ldr	r2, [pc, #36]	; (8007294 <prvHeapInit+0xbc>)
 800726e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007270:	4b09      	ldr	r3, [pc, #36]	; (8007298 <prvHeapInit+0xc0>)
 8007272:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007276:	601a      	str	r2, [r3, #0]
}
 8007278:	bf00      	nop
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	bc80      	pop	{r7}
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20001724 	.word	0x20001724
 8007288:	20002324 	.word	0x20002324
 800728c:	2000232c 	.word	0x2000232c
 8007290:	20002334 	.word	0x20002334
 8007294:	20002330 	.word	0x20002330
 8007298:	20002338 	.word	0x20002338

0800729c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072a4:	4b27      	ldr	r3, [pc, #156]	; (8007344 <prvInsertBlockIntoFreeList+0xa8>)
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	e002      	b.n	80072b0 <prvInsertBlockIntoFreeList+0x14>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d8f7      	bhi.n	80072aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	4413      	add	r3, r2
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d108      	bne.n	80072de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	441a      	add	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	441a      	add	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d118      	bne.n	8007324 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	4b14      	ldr	r3, [pc, #80]	; (8007348 <prvInsertBlockIntoFreeList+0xac>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d00d      	beq.n	800731a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	441a      	add	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	e008      	b.n	800732c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800731a:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <prvInsertBlockIntoFreeList+0xac>)
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	e003      	b.n	800732c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	429a      	cmp	r2, r3
 8007332:	d002      	beq.n	800733a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800733a:	bf00      	nop
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	bc80      	pop	{r7}
 8007342:	4770      	bx	lr
 8007344:	20002324 	.word	0x20002324
 8007348:	2000232c 	.word	0x2000232c

0800734c <__cxa_pure_virtual>:
 800734c:	b508      	push	{r3, lr}
 800734e:	f000 f80d 	bl	800736c <_ZSt9terminatev>

08007352 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007352:	b508      	push	{r3, lr}
 8007354:	4780      	blx	r0
 8007356:	f000 f80e 	bl	8007376 <abort>
	...

0800735c <_ZSt13get_terminatev>:
 800735c:	4b02      	ldr	r3, [pc, #8]	; (8007368 <_ZSt13get_terminatev+0xc>)
 800735e:	6818      	ldr	r0, [r3, #0]
 8007360:	f3bf 8f5b 	dmb	ish
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	20000050 	.word	0x20000050

0800736c <_ZSt9terminatev>:
 800736c:	b508      	push	{r3, lr}
 800736e:	f7ff fff5 	bl	800735c <_ZSt13get_terminatev>
 8007372:	f7ff ffee 	bl	8007352 <_ZN10__cxxabiv111__terminateEPFvvE>

08007376 <abort>:
 8007376:	b508      	push	{r3, lr}
 8007378:	2006      	movs	r0, #6
 800737a:	f000 f871 	bl	8007460 <raise>
 800737e:	2001      	movs	r0, #1
 8007380:	f7fa ffe7 	bl	8002352 <_exit>

08007384 <__errno>:
 8007384:	4b01      	ldr	r3, [pc, #4]	; (800738c <__errno+0x8>)
 8007386:	6818      	ldr	r0, [r3, #0]
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	20000054 	.word	0x20000054

08007390 <__libc_init_array>:
 8007390:	b570      	push	{r4, r5, r6, lr}
 8007392:	2500      	movs	r5, #0
 8007394:	4e0c      	ldr	r6, [pc, #48]	; (80073c8 <__libc_init_array+0x38>)
 8007396:	4c0d      	ldr	r4, [pc, #52]	; (80073cc <__libc_init_array+0x3c>)
 8007398:	1ba4      	subs	r4, r4, r6
 800739a:	10a4      	asrs	r4, r4, #2
 800739c:	42a5      	cmp	r5, r4
 800739e:	d109      	bne.n	80073b4 <__libc_init_array+0x24>
 80073a0:	f000 f960 	bl	8007664 <_init>
 80073a4:	2500      	movs	r5, #0
 80073a6:	4e0a      	ldr	r6, [pc, #40]	; (80073d0 <__libc_init_array+0x40>)
 80073a8:	4c0a      	ldr	r4, [pc, #40]	; (80073d4 <__libc_init_array+0x44>)
 80073aa:	1ba4      	subs	r4, r4, r6
 80073ac:	10a4      	asrs	r4, r4, #2
 80073ae:	42a5      	cmp	r5, r4
 80073b0:	d105      	bne.n	80073be <__libc_init_array+0x2e>
 80073b2:	bd70      	pop	{r4, r5, r6, pc}
 80073b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073b8:	4798      	blx	r3
 80073ba:	3501      	adds	r5, #1
 80073bc:	e7ee      	b.n	800739c <__libc_init_array+0xc>
 80073be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073c2:	4798      	blx	r3
 80073c4:	3501      	adds	r5, #1
 80073c6:	e7f2      	b.n	80073ae <__libc_init_array+0x1e>
 80073c8:	08007930 	.word	0x08007930
 80073cc:	08007930 	.word	0x08007930
 80073d0:	08007930 	.word	0x08007930
 80073d4:	08007938 	.word	0x08007938

080073d8 <memcpy>:
 80073d8:	b510      	push	{r4, lr}
 80073da:	1e43      	subs	r3, r0, #1
 80073dc:	440a      	add	r2, r1
 80073de:	4291      	cmp	r1, r2
 80073e0:	d100      	bne.n	80073e4 <memcpy+0xc>
 80073e2:	bd10      	pop	{r4, pc}
 80073e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073ec:	e7f7      	b.n	80073de <memcpy+0x6>

080073ee <memset>:
 80073ee:	4603      	mov	r3, r0
 80073f0:	4402      	add	r2, r0
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d100      	bne.n	80073f8 <memset+0xa>
 80073f6:	4770      	bx	lr
 80073f8:	f803 1b01 	strb.w	r1, [r3], #1
 80073fc:	e7f9      	b.n	80073f2 <memset+0x4>
	...

08007400 <realloc>:
 8007400:	4b02      	ldr	r3, [pc, #8]	; (800740c <realloc+0xc>)
 8007402:	460a      	mov	r2, r1
 8007404:	4601      	mov	r1, r0
 8007406:	6818      	ldr	r0, [r3, #0]
 8007408:	f000 b8a0 	b.w	800754c <_realloc_r>
 800740c:	20000054 	.word	0x20000054

08007410 <_raise_r>:
 8007410:	291f      	cmp	r1, #31
 8007412:	b538      	push	{r3, r4, r5, lr}
 8007414:	4604      	mov	r4, r0
 8007416:	460d      	mov	r5, r1
 8007418:	d904      	bls.n	8007424 <_raise_r+0x14>
 800741a:	2316      	movs	r3, #22
 800741c:	6003      	str	r3, [r0, #0]
 800741e:	f04f 30ff 	mov.w	r0, #4294967295
 8007422:	bd38      	pop	{r3, r4, r5, pc}
 8007424:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007426:	b112      	cbz	r2, 800742e <_raise_r+0x1e>
 8007428:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800742c:	b94b      	cbnz	r3, 8007442 <_raise_r+0x32>
 800742e:	4620      	mov	r0, r4
 8007430:	f000 f830 	bl	8007494 <_getpid_r>
 8007434:	462a      	mov	r2, r5
 8007436:	4601      	mov	r1, r0
 8007438:	4620      	mov	r0, r4
 800743a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800743e:	f000 b817 	b.w	8007470 <_kill_r>
 8007442:	2b01      	cmp	r3, #1
 8007444:	d00a      	beq.n	800745c <_raise_r+0x4c>
 8007446:	1c59      	adds	r1, r3, #1
 8007448:	d103      	bne.n	8007452 <_raise_r+0x42>
 800744a:	2316      	movs	r3, #22
 800744c:	6003      	str	r3, [r0, #0]
 800744e:	2001      	movs	r0, #1
 8007450:	e7e7      	b.n	8007422 <_raise_r+0x12>
 8007452:	2400      	movs	r4, #0
 8007454:	4628      	mov	r0, r5
 8007456:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800745a:	4798      	blx	r3
 800745c:	2000      	movs	r0, #0
 800745e:	e7e0      	b.n	8007422 <_raise_r+0x12>

08007460 <raise>:
 8007460:	4b02      	ldr	r3, [pc, #8]	; (800746c <raise+0xc>)
 8007462:	4601      	mov	r1, r0
 8007464:	6818      	ldr	r0, [r3, #0]
 8007466:	f7ff bfd3 	b.w	8007410 <_raise_r>
 800746a:	bf00      	nop
 800746c:	20000054 	.word	0x20000054

08007470 <_kill_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	2300      	movs	r3, #0
 8007474:	4c06      	ldr	r4, [pc, #24]	; (8007490 <_kill_r+0x20>)
 8007476:	4605      	mov	r5, r0
 8007478:	4608      	mov	r0, r1
 800747a:	4611      	mov	r1, r2
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	f7fa ff58 	bl	8002332 <_kill>
 8007482:	1c43      	adds	r3, r0, #1
 8007484:	d102      	bne.n	800748c <_kill_r+0x1c>
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	b103      	cbz	r3, 800748c <_kill_r+0x1c>
 800748a:	602b      	str	r3, [r5, #0]
 800748c:	bd38      	pop	{r3, r4, r5, pc}
 800748e:	bf00      	nop
 8007490:	200025a0 	.word	0x200025a0

08007494 <_getpid_r>:
 8007494:	f7fa bf46 	b.w	8002324 <_getpid>

08007498 <_malloc_r>:
 8007498:	b570      	push	{r4, r5, r6, lr}
 800749a:	1ccd      	adds	r5, r1, #3
 800749c:	f025 0503 	bic.w	r5, r5, #3
 80074a0:	3508      	adds	r5, #8
 80074a2:	2d0c      	cmp	r5, #12
 80074a4:	bf38      	it	cc
 80074a6:	250c      	movcc	r5, #12
 80074a8:	2d00      	cmp	r5, #0
 80074aa:	4606      	mov	r6, r0
 80074ac:	db01      	blt.n	80074b2 <_malloc_r+0x1a>
 80074ae:	42a9      	cmp	r1, r5
 80074b0:	d903      	bls.n	80074ba <_malloc_r+0x22>
 80074b2:	230c      	movs	r3, #12
 80074b4:	6033      	str	r3, [r6, #0]
 80074b6:	2000      	movs	r0, #0
 80074b8:	bd70      	pop	{r4, r5, r6, pc}
 80074ba:	f000 f87d 	bl	80075b8 <__malloc_lock>
 80074be:	4a21      	ldr	r2, [pc, #132]	; (8007544 <_malloc_r+0xac>)
 80074c0:	6814      	ldr	r4, [r2, #0]
 80074c2:	4621      	mov	r1, r4
 80074c4:	b991      	cbnz	r1, 80074ec <_malloc_r+0x54>
 80074c6:	4c20      	ldr	r4, [pc, #128]	; (8007548 <_malloc_r+0xb0>)
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	b91b      	cbnz	r3, 80074d4 <_malloc_r+0x3c>
 80074cc:	4630      	mov	r0, r6
 80074ce:	f000 f863 	bl	8007598 <_sbrk_r>
 80074d2:	6020      	str	r0, [r4, #0]
 80074d4:	4629      	mov	r1, r5
 80074d6:	4630      	mov	r0, r6
 80074d8:	f000 f85e 	bl	8007598 <_sbrk_r>
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	d124      	bne.n	800752a <_malloc_r+0x92>
 80074e0:	230c      	movs	r3, #12
 80074e2:	4630      	mov	r0, r6
 80074e4:	6033      	str	r3, [r6, #0]
 80074e6:	f000 f868 	bl	80075ba <__malloc_unlock>
 80074ea:	e7e4      	b.n	80074b6 <_malloc_r+0x1e>
 80074ec:	680b      	ldr	r3, [r1, #0]
 80074ee:	1b5b      	subs	r3, r3, r5
 80074f0:	d418      	bmi.n	8007524 <_malloc_r+0x8c>
 80074f2:	2b0b      	cmp	r3, #11
 80074f4:	d90f      	bls.n	8007516 <_malloc_r+0x7e>
 80074f6:	600b      	str	r3, [r1, #0]
 80074f8:	18cc      	adds	r4, r1, r3
 80074fa:	50cd      	str	r5, [r1, r3]
 80074fc:	4630      	mov	r0, r6
 80074fe:	f000 f85c 	bl	80075ba <__malloc_unlock>
 8007502:	f104 000b 	add.w	r0, r4, #11
 8007506:	1d23      	adds	r3, r4, #4
 8007508:	f020 0007 	bic.w	r0, r0, #7
 800750c:	1ac3      	subs	r3, r0, r3
 800750e:	d0d3      	beq.n	80074b8 <_malloc_r+0x20>
 8007510:	425a      	negs	r2, r3
 8007512:	50e2      	str	r2, [r4, r3]
 8007514:	e7d0      	b.n	80074b8 <_malloc_r+0x20>
 8007516:	684b      	ldr	r3, [r1, #4]
 8007518:	428c      	cmp	r4, r1
 800751a:	bf16      	itet	ne
 800751c:	6063      	strne	r3, [r4, #4]
 800751e:	6013      	streq	r3, [r2, #0]
 8007520:	460c      	movne	r4, r1
 8007522:	e7eb      	b.n	80074fc <_malloc_r+0x64>
 8007524:	460c      	mov	r4, r1
 8007526:	6849      	ldr	r1, [r1, #4]
 8007528:	e7cc      	b.n	80074c4 <_malloc_r+0x2c>
 800752a:	1cc4      	adds	r4, r0, #3
 800752c:	f024 0403 	bic.w	r4, r4, #3
 8007530:	42a0      	cmp	r0, r4
 8007532:	d005      	beq.n	8007540 <_malloc_r+0xa8>
 8007534:	1a21      	subs	r1, r4, r0
 8007536:	4630      	mov	r0, r6
 8007538:	f000 f82e 	bl	8007598 <_sbrk_r>
 800753c:	3001      	adds	r0, #1
 800753e:	d0cf      	beq.n	80074e0 <_malloc_r+0x48>
 8007540:	6025      	str	r5, [r4, #0]
 8007542:	e7db      	b.n	80074fc <_malloc_r+0x64>
 8007544:	2000233c 	.word	0x2000233c
 8007548:	20002340 	.word	0x20002340

0800754c <_realloc_r>:
 800754c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754e:	4607      	mov	r7, r0
 8007550:	4614      	mov	r4, r2
 8007552:	460e      	mov	r6, r1
 8007554:	b921      	cbnz	r1, 8007560 <_realloc_r+0x14>
 8007556:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800755a:	4611      	mov	r1, r2
 800755c:	f7ff bf9c 	b.w	8007498 <_malloc_r>
 8007560:	b922      	cbnz	r2, 800756c <_realloc_r+0x20>
 8007562:	f000 f82b 	bl	80075bc <_free_r>
 8007566:	4625      	mov	r5, r4
 8007568:	4628      	mov	r0, r5
 800756a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800756c:	f000 f872 	bl	8007654 <_malloc_usable_size_r>
 8007570:	42a0      	cmp	r0, r4
 8007572:	d20f      	bcs.n	8007594 <_realloc_r+0x48>
 8007574:	4621      	mov	r1, r4
 8007576:	4638      	mov	r0, r7
 8007578:	f7ff ff8e 	bl	8007498 <_malloc_r>
 800757c:	4605      	mov	r5, r0
 800757e:	2800      	cmp	r0, #0
 8007580:	d0f2      	beq.n	8007568 <_realloc_r+0x1c>
 8007582:	4631      	mov	r1, r6
 8007584:	4622      	mov	r2, r4
 8007586:	f7ff ff27 	bl	80073d8 <memcpy>
 800758a:	4631      	mov	r1, r6
 800758c:	4638      	mov	r0, r7
 800758e:	f000 f815 	bl	80075bc <_free_r>
 8007592:	e7e9      	b.n	8007568 <_realloc_r+0x1c>
 8007594:	4635      	mov	r5, r6
 8007596:	e7e7      	b.n	8007568 <_realloc_r+0x1c>

08007598 <_sbrk_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	2300      	movs	r3, #0
 800759c:	4c05      	ldr	r4, [pc, #20]	; (80075b4 <_sbrk_r+0x1c>)
 800759e:	4605      	mov	r5, r0
 80075a0:	4608      	mov	r0, r1
 80075a2:	6023      	str	r3, [r4, #0]
 80075a4:	f7fa fee0 	bl	8002368 <_sbrk>
 80075a8:	1c43      	adds	r3, r0, #1
 80075aa:	d102      	bne.n	80075b2 <_sbrk_r+0x1a>
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	b103      	cbz	r3, 80075b2 <_sbrk_r+0x1a>
 80075b0:	602b      	str	r3, [r5, #0]
 80075b2:	bd38      	pop	{r3, r4, r5, pc}
 80075b4:	200025a0 	.word	0x200025a0

080075b8 <__malloc_lock>:
 80075b8:	4770      	bx	lr

080075ba <__malloc_unlock>:
 80075ba:	4770      	bx	lr

080075bc <_free_r>:
 80075bc:	b538      	push	{r3, r4, r5, lr}
 80075be:	4605      	mov	r5, r0
 80075c0:	2900      	cmp	r1, #0
 80075c2:	d043      	beq.n	800764c <_free_r+0x90>
 80075c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075c8:	1f0c      	subs	r4, r1, #4
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	bfb8      	it	lt
 80075ce:	18e4      	addlt	r4, r4, r3
 80075d0:	f7ff fff2 	bl	80075b8 <__malloc_lock>
 80075d4:	4a1e      	ldr	r2, [pc, #120]	; (8007650 <_free_r+0x94>)
 80075d6:	6813      	ldr	r3, [r2, #0]
 80075d8:	4610      	mov	r0, r2
 80075da:	b933      	cbnz	r3, 80075ea <_free_r+0x2e>
 80075dc:	6063      	str	r3, [r4, #4]
 80075de:	6014      	str	r4, [r2, #0]
 80075e0:	4628      	mov	r0, r5
 80075e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075e6:	f7ff bfe8 	b.w	80075ba <__malloc_unlock>
 80075ea:	42a3      	cmp	r3, r4
 80075ec:	d90b      	bls.n	8007606 <_free_r+0x4a>
 80075ee:	6821      	ldr	r1, [r4, #0]
 80075f0:	1862      	adds	r2, r4, r1
 80075f2:	4293      	cmp	r3, r2
 80075f4:	bf01      	itttt	eq
 80075f6:	681a      	ldreq	r2, [r3, #0]
 80075f8:	685b      	ldreq	r3, [r3, #4]
 80075fa:	1852      	addeq	r2, r2, r1
 80075fc:	6022      	streq	r2, [r4, #0]
 80075fe:	6063      	str	r3, [r4, #4]
 8007600:	6004      	str	r4, [r0, #0]
 8007602:	e7ed      	b.n	80075e0 <_free_r+0x24>
 8007604:	4613      	mov	r3, r2
 8007606:	685a      	ldr	r2, [r3, #4]
 8007608:	b10a      	cbz	r2, 800760e <_free_r+0x52>
 800760a:	42a2      	cmp	r2, r4
 800760c:	d9fa      	bls.n	8007604 <_free_r+0x48>
 800760e:	6819      	ldr	r1, [r3, #0]
 8007610:	1858      	adds	r0, r3, r1
 8007612:	42a0      	cmp	r0, r4
 8007614:	d10b      	bne.n	800762e <_free_r+0x72>
 8007616:	6820      	ldr	r0, [r4, #0]
 8007618:	4401      	add	r1, r0
 800761a:	1858      	adds	r0, r3, r1
 800761c:	4282      	cmp	r2, r0
 800761e:	6019      	str	r1, [r3, #0]
 8007620:	d1de      	bne.n	80075e0 <_free_r+0x24>
 8007622:	6810      	ldr	r0, [r2, #0]
 8007624:	6852      	ldr	r2, [r2, #4]
 8007626:	4401      	add	r1, r0
 8007628:	6019      	str	r1, [r3, #0]
 800762a:	605a      	str	r2, [r3, #4]
 800762c:	e7d8      	b.n	80075e0 <_free_r+0x24>
 800762e:	d902      	bls.n	8007636 <_free_r+0x7a>
 8007630:	230c      	movs	r3, #12
 8007632:	602b      	str	r3, [r5, #0]
 8007634:	e7d4      	b.n	80075e0 <_free_r+0x24>
 8007636:	6820      	ldr	r0, [r4, #0]
 8007638:	1821      	adds	r1, r4, r0
 800763a:	428a      	cmp	r2, r1
 800763c:	bf01      	itttt	eq
 800763e:	6811      	ldreq	r1, [r2, #0]
 8007640:	6852      	ldreq	r2, [r2, #4]
 8007642:	1809      	addeq	r1, r1, r0
 8007644:	6021      	streq	r1, [r4, #0]
 8007646:	6062      	str	r2, [r4, #4]
 8007648:	605c      	str	r4, [r3, #4]
 800764a:	e7c9      	b.n	80075e0 <_free_r+0x24>
 800764c:	bd38      	pop	{r3, r4, r5, pc}
 800764e:	bf00      	nop
 8007650:	2000233c 	.word	0x2000233c

08007654 <_malloc_usable_size_r>:
 8007654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007658:	1f18      	subs	r0, r3, #4
 800765a:	2b00      	cmp	r3, #0
 800765c:	bfbc      	itt	lt
 800765e:	580b      	ldrlt	r3, [r1, r0]
 8007660:	18c0      	addlt	r0, r0, r3
 8007662:	4770      	bx	lr

08007664 <_init>:
 8007664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007666:	bf00      	nop
 8007668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800766a:	bc08      	pop	{r3}
 800766c:	469e      	mov	lr, r3
 800766e:	4770      	bx	lr

08007670 <_fini>:
 8007670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007672:	bf00      	nop
 8007674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007676:	bc08      	pop	{r3}
 8007678:	469e      	mov	lr, r3
 800767a:	4770      	bx	lr
