
RosSearial_templet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000989c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  080099ac  080099ac  000199ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a074  0800a074  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800a074  0800a074  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a074  0800a074  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a074  0800a074  0001a074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a07c  0800a07c  0001a07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002634  20000090  0800a110  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200026c4  0800a110  000226c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002158e  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004008  00000000  00000000  00041647  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001768  00000000  00000000  00045650  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015e8  00000000  00000000  00046db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006014  00000000  00000000  000483a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013108  00000000  00000000  0004e3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a57e  00000000  00000000  000614bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fba3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067f4  00000000  00000000  000fbab8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08009994 	.word	0x08009994

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08009994 	.word	0x08009994

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <__aeabi_d2f>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000954:	bf24      	itt	cs
 8000956:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800095a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800095e:	d90d      	bls.n	800097c <__aeabi_d2f+0x30>
 8000960:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000964:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000968:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800096c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000970:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000974:	bf08      	it	eq
 8000976:	f020 0001 	biceq.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000980:	d121      	bne.n	80009c6 <__aeabi_d2f+0x7a>
 8000982:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000986:	bfbc      	itt	lt
 8000988:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800098c:	4770      	bxlt	lr
 800098e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000992:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000996:	f1c2 0218 	rsb	r2, r2, #24
 800099a:	f1c2 0c20 	rsb	ip, r2, #32
 800099e:	fa10 f30c 	lsls.w	r3, r0, ip
 80009a2:	fa20 f002 	lsr.w	r0, r0, r2
 80009a6:	bf18      	it	ne
 80009a8:	f040 0001 	orrne.w	r0, r0, #1
 80009ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b8:	ea40 000c 	orr.w	r0, r0, ip
 80009bc:	fa23 f302 	lsr.w	r3, r3, r2
 80009c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009c4:	e7cc      	b.n	8000960 <__aeabi_d2f+0x14>
 80009c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ca:	d107      	bne.n	80009dc <__aeabi_d2f+0x90>
 80009cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009d0:	bf1e      	ittt	ne
 80009d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009da:	4770      	bxne	lr
 80009dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_frsub>:
 80009ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009f0:	e002      	b.n	80009f8 <__addsf3>
 80009f2:	bf00      	nop

080009f4 <__aeabi_fsub>:
 80009f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009f8 <__addsf3>:
 80009f8:	0042      	lsls	r2, r0, #1
 80009fa:	bf1f      	itttt	ne
 80009fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a00:	ea92 0f03 	teqne	r2, r3
 8000a04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a0c:	d06a      	beq.n	8000ae4 <__addsf3+0xec>
 8000a0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a16:	bfc1      	itttt	gt
 8000a18:	18d2      	addgt	r2, r2, r3
 8000a1a:	4041      	eorgt	r1, r0
 8000a1c:	4048      	eorgt	r0, r1
 8000a1e:	4041      	eorgt	r1, r0
 8000a20:	bfb8      	it	lt
 8000a22:	425b      	neglt	r3, r3
 8000a24:	2b19      	cmp	r3, #25
 8000a26:	bf88      	it	hi
 8000a28:	4770      	bxhi	lr
 8000a2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4249      	negne	r1, r1
 8000a4a:	ea92 0f03 	teq	r2, r3
 8000a4e:	d03f      	beq.n	8000ad0 <__addsf3+0xd8>
 8000a50:	f1a2 0201 	sub.w	r2, r2, #1
 8000a54:	fa41 fc03 	asr.w	ip, r1, r3
 8000a58:	eb10 000c 	adds.w	r0, r0, ip
 8000a5c:	f1c3 0320 	rsb	r3, r3, #32
 8000a60:	fa01 f103 	lsl.w	r1, r1, r3
 8000a64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a68:	d502      	bpl.n	8000a70 <__addsf3+0x78>
 8000a6a:	4249      	negs	r1, r1
 8000a6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a74:	d313      	bcc.n	8000a9e <__addsf3+0xa6>
 8000a76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a7a:	d306      	bcc.n	8000a8a <__addsf3+0x92>
 8000a7c:	0840      	lsrs	r0, r0, #1
 8000a7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a82:	f102 0201 	add.w	r2, r2, #1
 8000a86:	2afe      	cmp	r2, #254	; 0xfe
 8000a88:	d251      	bcs.n	8000b2e <__addsf3+0x136>
 8000a8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a92:	bf08      	it	eq
 8000a94:	f020 0001 	biceq.w	r0, r0, #1
 8000a98:	ea40 0003 	orr.w	r0, r0, r3
 8000a9c:	4770      	bx	lr
 8000a9e:	0049      	lsls	r1, r1, #1
 8000aa0:	eb40 0000 	adc.w	r0, r0, r0
 8000aa4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000aa8:	f1a2 0201 	sub.w	r2, r2, #1
 8000aac:	d1ed      	bne.n	8000a8a <__addsf3+0x92>
 8000aae:	fab0 fc80 	clz	ip, r0
 8000ab2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ab6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000abe:	bfaa      	itet	ge
 8000ac0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ac4:	4252      	neglt	r2, r2
 8000ac6:	4318      	orrge	r0, r3
 8000ac8:	bfbc      	itt	lt
 8000aca:	40d0      	lsrlt	r0, r2
 8000acc:	4318      	orrlt	r0, r3
 8000ace:	4770      	bx	lr
 8000ad0:	f092 0f00 	teq	r2, #0
 8000ad4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ad8:	bf06      	itte	eq
 8000ada:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ade:	3201      	addeq	r2, #1
 8000ae0:	3b01      	subne	r3, #1
 8000ae2:	e7b5      	b.n	8000a50 <__addsf3+0x58>
 8000ae4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ae8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aec:	bf18      	it	ne
 8000aee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af2:	d021      	beq.n	8000b38 <__addsf3+0x140>
 8000af4:	ea92 0f03 	teq	r2, r3
 8000af8:	d004      	beq.n	8000b04 <__addsf3+0x10c>
 8000afa:	f092 0f00 	teq	r2, #0
 8000afe:	bf08      	it	eq
 8000b00:	4608      	moveq	r0, r1
 8000b02:	4770      	bx	lr
 8000b04:	ea90 0f01 	teq	r0, r1
 8000b08:	bf1c      	itt	ne
 8000b0a:	2000      	movne	r0, #0
 8000b0c:	4770      	bxne	lr
 8000b0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b12:	d104      	bne.n	8000b1e <__addsf3+0x126>
 8000b14:	0040      	lsls	r0, r0, #1
 8000b16:	bf28      	it	cs
 8000b18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	4770      	bx	lr
 8000b1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b22:	bf3c      	itt	cc
 8000b24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bxcc	lr
 8000b2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b36:	4770      	bx	lr
 8000b38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b3c:	bf16      	itet	ne
 8000b3e:	4608      	movne	r0, r1
 8000b40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b44:	4601      	movne	r1, r0
 8000b46:	0242      	lsls	r2, r0, #9
 8000b48:	bf06      	itte	eq
 8000b4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b4e:	ea90 0f01 	teqeq	r0, r1
 8000b52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_ui2f>:
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	e004      	b.n	8000b68 <__aeabi_i2f+0x8>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_i2f>:
 8000b60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b64:	bf48      	it	mi
 8000b66:	4240      	negmi	r0, r0
 8000b68:	ea5f 0c00 	movs.w	ip, r0
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b74:	4601      	mov	r1, r0
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	e01c      	b.n	8000bb6 <__aeabi_l2f+0x2a>

08000b7c <__aeabi_ul2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e00a      	b.n	8000ba0 <__aeabi_l2f+0x14>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_l2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b98:	d502      	bpl.n	8000ba0 <__aeabi_l2f+0x14>
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	ea5f 0c01 	movs.w	ip, r1
 8000ba4:	bf02      	ittt	eq
 8000ba6:	4684      	moveq	ip, r0
 8000ba8:	4601      	moveq	r1, r0
 8000baa:	2000      	moveq	r0, #0
 8000bac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bba:	fabc f28c 	clz	r2, ip
 8000bbe:	3a08      	subs	r2, #8
 8000bc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bc4:	db10      	blt.n	8000be8 <__aeabi_l2f+0x5c>
 8000bc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bca:	4463      	add	r3, ip
 8000bcc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f102 0220 	add.w	r2, r2, #32
 8000bec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf0:	f1c2 0220 	rsb	r2, r2, #32
 8000bf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bfc:	eb43 0002 	adc.w	r0, r3, r2
 8000c00:	bf08      	it	eq
 8000c02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_fmul>:
 8000c08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c10:	bf1e      	ittt	ne
 8000c12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c16:	ea92 0f0c 	teqne	r2, ip
 8000c1a:	ea93 0f0c 	teqne	r3, ip
 8000c1e:	d06f      	beq.n	8000d00 <__aeabi_fmul+0xf8>
 8000c20:	441a      	add	r2, r3
 8000c22:	ea80 0c01 	eor.w	ip, r0, r1
 8000c26:	0240      	lsls	r0, r0, #9
 8000c28:	bf18      	it	ne
 8000c2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c2e:	d01e      	beq.n	8000c6e <__aeabi_fmul+0x66>
 8000c30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c48:	bf3e      	ittt	cc
 8000c4a:	0049      	lslcc	r1, r1, #1
 8000c4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c50:	005b      	lslcc	r3, r3, #1
 8000c52:	ea40 0001 	orr.w	r0, r0, r1
 8000c56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c5a:	2afd      	cmp	r2, #253	; 0xfd
 8000c5c:	d81d      	bhi.n	8000c9a <__aeabi_fmul+0x92>
 8000c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c66:	bf08      	it	eq
 8000c68:	f020 0001 	biceq.w	r0, r0, #1
 8000c6c:	4770      	bx	lr
 8000c6e:	f090 0f00 	teq	r0, #0
 8000c72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c76:	bf08      	it	eq
 8000c78:	0249      	lsleq	r1, r1, #9
 8000c7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c82:	3a7f      	subs	r2, #127	; 0x7f
 8000c84:	bfc2      	ittt	gt
 8000c86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c8e:	4770      	bxgt	lr
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	dc5d      	bgt.n	8000d58 <__aeabi_fmul+0x150>
 8000c9c:	f112 0f19 	cmn.w	r2, #25
 8000ca0:	bfdc      	itt	le
 8000ca2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ca6:	4770      	bxle	lr
 8000ca8:	f1c2 0200 	rsb	r2, r2, #0
 8000cac:	0041      	lsls	r1, r0, #1
 8000cae:	fa21 f102 	lsr.w	r1, r1, r2
 8000cb2:	f1c2 0220 	rsb	r2, r2, #32
 8000cb6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cbe:	f140 0000 	adc.w	r0, r0, #0
 8000cc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cc6:	bf08      	it	eq
 8000cc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ccc:	4770      	bx	lr
 8000cce:	f092 0f00 	teq	r2, #0
 8000cd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cd6:	bf02      	ittt	eq
 8000cd8:	0040      	lsleq	r0, r0, #1
 8000cda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cde:	3a01      	subeq	r2, #1
 8000ce0:	d0f9      	beq.n	8000cd6 <__aeabi_fmul+0xce>
 8000ce2:	ea40 000c 	orr.w	r0, r0, ip
 8000ce6:	f093 0f00 	teq	r3, #0
 8000cea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cee:	bf02      	ittt	eq
 8000cf0:	0049      	lsleq	r1, r1, #1
 8000cf2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cf6:	3b01      	subeq	r3, #1
 8000cf8:	d0f9      	beq.n	8000cee <__aeabi_fmul+0xe6>
 8000cfa:	ea41 010c 	orr.w	r1, r1, ip
 8000cfe:	e78f      	b.n	8000c20 <__aeabi_fmul+0x18>
 8000d00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d04:	ea92 0f0c 	teq	r2, ip
 8000d08:	bf18      	it	ne
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d00a      	beq.n	8000d26 <__aeabi_fmul+0x11e>
 8000d10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d14:	bf18      	it	ne
 8000d16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d1a:	d1d8      	bne.n	8000cce <__aeabi_fmul+0xc6>
 8000d1c:	ea80 0001 	eor.w	r0, r0, r1
 8000d20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f090 0f00 	teq	r0, #0
 8000d2a:	bf17      	itett	ne
 8000d2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d30:	4608      	moveq	r0, r1
 8000d32:	f091 0f00 	teqne	r1, #0
 8000d36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d3a:	d014      	beq.n	8000d66 <__aeabi_fmul+0x15e>
 8000d3c:	ea92 0f0c 	teq	r2, ip
 8000d40:	d101      	bne.n	8000d46 <__aeabi_fmul+0x13e>
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	d10f      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d46:	ea93 0f0c 	teq	r3, ip
 8000d4a:	d103      	bne.n	8000d54 <__aeabi_fmul+0x14c>
 8000d4c:	024b      	lsls	r3, r1, #9
 8000d4e:	bf18      	it	ne
 8000d50:	4608      	movne	r0, r1
 8000d52:	d108      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d54:	ea80 0001 	eor.w	r0, r0, r1
 8000d58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d6e:	4770      	bx	lr

08000d70 <__aeabi_fdiv>:
 8000d70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d78:	bf1e      	ittt	ne
 8000d7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7e:	ea92 0f0c 	teqne	r2, ip
 8000d82:	ea93 0f0c 	teqne	r3, ip
 8000d86:	d069      	beq.n	8000e5c <__aeabi_fdiv+0xec>
 8000d88:	eba2 0203 	sub.w	r2, r2, r3
 8000d8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d96:	d037      	beq.n	8000e08 <__aeabi_fdiv+0x98>
 8000d98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000da0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	428b      	cmp	r3, r1
 8000daa:	bf38      	it	cc
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000db2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000db6:	428b      	cmp	r3, r1
 8000db8:	bf24      	itt	cs
 8000dba:	1a5b      	subcs	r3, r3, r1
 8000dbc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dc0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dc4:	bf24      	itt	cs
 8000dc6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dd2:	bf24      	itt	cs
 8000dd4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ddc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000de0:	bf24      	itt	cs
 8000de2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000de6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	bf18      	it	ne
 8000dee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000df2:	d1e0      	bne.n	8000db6 <__aeabi_fdiv+0x46>
 8000df4:	2afd      	cmp	r2, #253	; 0xfd
 8000df6:	f63f af50 	bhi.w	8000c9a <__aeabi_fmul+0x92>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e00:	bf08      	it	eq
 8000e02:	f020 0001 	biceq.w	r0, r0, #1
 8000e06:	4770      	bx	lr
 8000e08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e10:	327f      	adds	r2, #127	; 0x7f
 8000e12:	bfc2      	ittt	gt
 8000e14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1c:	4770      	bxgt	lr
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	3a01      	subs	r2, #1
 8000e28:	e737      	b.n	8000c9a <__aeabi_fmul+0x92>
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fdiv+0xc2>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fdiv+0xda>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e795      	b.n	8000d88 <__aeabi_fdiv+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	d108      	bne.n	8000e78 <__aeabi_fdiv+0x108>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	f47f af7d 	bne.w	8000d66 <__aeabi_fmul+0x15e>
 8000e6c:	ea93 0f0c 	teq	r3, ip
 8000e70:	f47f af70 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e776      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e78:	ea93 0f0c 	teq	r3, ip
 8000e7c:	d104      	bne.n	8000e88 <__aeabi_fdiv+0x118>
 8000e7e:	024b      	lsls	r3, r1, #9
 8000e80:	f43f af4c 	beq.w	8000d1c <__aeabi_fmul+0x114>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e76e      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1ca      	bne.n	8000e2a <__aeabi_fdiv+0xba>
 8000e94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e98:	f47f af5c 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ea0:	f47f af3c 	bne.w	8000d1c <__aeabi_fmul+0x114>
 8000ea4:	e75f      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000ea6:	bf00      	nop

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eac:	f003 fc94 	bl	80047d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb0:	f000 f822 	bl	8000ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb4:	f000 f8f6 	bl	80010a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eb8:	f000 f8be 	bl	8001038 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000ebc:	f000 f858 	bl	8000f70 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000ec0:	f000 f880 	bl	8000fc4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  xl430_int(&huart3);
 8000ec4:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <main+0x40>)
 8000ec6:	f003 fa67 	bl	8004398 <xl430_int>
  setup();
 8000eca:	f001 ffc7 	bl	8002e5c <setup>
  //HAL_HalfDuplex_EnableReceiver(&huart3);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ece:	f005 ff3d 	bl	8006d4c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ed2:	4a06      	ldr	r2, [pc, #24]	; (8000eec <main+0x44>)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <main+0x48>)
 8000ed8:	f005 ff9e 	bl	8006e18 <osThreadNew>
 8000edc:	4602      	mov	r2, r0
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <main+0x4c>)
 8000ee0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ee2:	f005 ff65 	bl	8006db0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <main+0x3e>
 8000ee8:	20002484 	.word	0x20002484
 8000eec:	08009ee0 	.word	0x08009ee0
 8000ef0:	08002fc1 	.word	0x08002fc1
 8000ef4:	2000243c 	.word	0x2000243c

08000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b090      	sub	sp, #64	; 0x40
 8000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	f107 0318 	add.w	r3, r7, #24
 8000f02:	2228      	movs	r2, #40	; 0x28
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f008 fc09 	bl	800971e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f22:	2310      	movs	r3, #16
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2a:	f107 0318 	add.w	r3, r7, #24
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f004 f9b0 	bl	8005294 <HAL_RCC_OscConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f3a:	f000 f91d 	bl	8001178 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3e:	230f      	movs	r3, #15
 8000f40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f004 fc1c 	bl	8005794 <HAL_RCC_ClockConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f62:	f000 f909 	bl	8001178 <Error_Handler>
  }
}
 8000f66:	bf00      	nop
 8000f68:	3740      	adds	r7, #64	; 0x40
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_USART1_UART_Init+0x4c>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <MX_USART1_UART_Init+0x50>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_USART1_UART_Init+0x4c>)
 8000f7c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000f80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_USART1_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_USART1_UART_Init+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_USART1_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_USART1_UART_Init+0x4c>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_USART1_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_USART1_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_USART1_UART_Init+0x4c>)
 8000fa8:	f005 f80a 	bl	8005fc0 <HAL_UART_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fb2:	f000 f8e1 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20002590 	.word	0x20002590
 8000fc0:	40013800 	.word	0x40013800

08000fc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_USART3_UART_Init+0x6c>)
 8000fca:	4a1a      	ldr	r2, [pc, #104]	; (8001034 <MX_USART3_UART_Init+0x70>)
 8000fcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57200;
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_USART3_UART_Init+0x6c>)
 8000fd0:	f64d 7270 	movw	r2, #57200	; 0xdf70
 8000fd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_USART3_UART_Init+0x6c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_USART3_UART_Init+0x6c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <MX_USART3_UART_Init+0x6c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_USART3_UART_Init+0x6c>)
 8000fea:	220c      	movs	r2, #12
 8000fec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <MX_USART3_UART_Init+0x6c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <MX_USART3_UART_Init+0x6c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8000ffa:	480d      	ldr	r0, [pc, #52]	; (8001030 <MX_USART3_UART_Init+0x6c>)
 8000ffc:	f005 f82d 	bl	800605a <HAL_HalfDuplex_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001006:	f000 f8b7 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_USART3_UART_Init+0x6c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <MX_USART3_UART_Init+0x6c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f042 0210 	orr.w	r2, r2, #16
 8001018:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <MX_USART3_UART_Init+0x6c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <MX_USART3_UART_Init+0x6c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001028:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART3_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20002484 	.word	0x20002484
 8001034:	40004800 	.word	0x40004800

08001038 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_DMA_Init+0x68>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <MX_DMA_Init+0x68>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6153      	str	r3, [r2, #20]
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <MX_DMA_Init+0x68>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2105      	movs	r1, #5
 800105a:	200c      	movs	r0, #12
 800105c:	f003 fcc5 	bl	80049ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001060:	200c      	movs	r0, #12
 8001062:	f003 fcde 	bl	8004a22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2105      	movs	r1, #5
 800106a:	200d      	movs	r0, #13
 800106c:	f003 fcbd 	bl	80049ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001070:	200d      	movs	r0, #13
 8001072:	f003 fcd6 	bl	8004a22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2105      	movs	r1, #5
 800107a:	200e      	movs	r0, #14
 800107c:	f003 fcb5 	bl	80049ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001080:	200e      	movs	r0, #14
 8001082:	f003 fcce 	bl	8004a22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2105      	movs	r1, #5
 800108a:	200f      	movs	r0, #15
 800108c:	f003 fcad 	bl	80049ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001090:	200f      	movs	r0, #15
 8001092:	f003 fcc6 	bl	8004a22 <HAL_NVIC_EnableIRQ>

}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000

080010a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	f107 0310 	add.w	r3, r7, #16
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <MX_GPIO_Init+0xa8>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a23      	ldr	r2, [pc, #140]	; (800114c <MX_GPIO_Init+0xa8>)
 80010be:	f043 0310 	orr.w	r3, r3, #16
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b21      	ldr	r3, [pc, #132]	; (800114c <MX_GPIO_Init+0xa8>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0310 	and.w	r3, r3, #16
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <MX_GPIO_Init+0xa8>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a1d      	ldr	r2, [pc, #116]	; (800114c <MX_GPIO_Init+0xa8>)
 80010d6:	f043 0320 	orr.w	r3, r3, #32
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_GPIO_Init+0xa8>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0320 	and.w	r3, r3, #32
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_GPIO_Init+0xa8>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a17      	ldr	r2, [pc, #92]	; (800114c <MX_GPIO_Init+0xa8>)
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_GPIO_Init+0xa8>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_GPIO_Init+0xa8>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a11      	ldr	r2, [pc, #68]	; (800114c <MX_GPIO_Init+0xa8>)
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_GPIO_Init+0xa8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800111e:	480c      	ldr	r0, [pc, #48]	; (8001150 <MX_GPIO_Init+0xac>)
 8001120:	f004 f886 	bl	8005230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001124:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001128:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2302      	movs	r3, #2
 8001134:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	4619      	mov	r1, r3
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_GPIO_Init+0xac>)
 800113e:	f003 ff1d 	bl	8004f7c <HAL_GPIO_Init>

}
 8001142:	bf00      	nop
 8001144:	3720      	adds	r7, #32
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	40011000 	.word	0x40011000

08001154 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001166:	f003 fb4d 	bl	8004804 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40012c00 	.word	0x40012c00

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800117e:	e7fe      	b.n	800117e <Error_Handler+0x6>

08001180 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <_ZN3ros3MsgC1Ev+0x1c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	0800a048 	.word	0x0800a048

080011c0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
      data()
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ffe8 	bl	80011a0 <_ZN3ros3MsgC1Ev>
 80011d0:	4a06      	ldr	r2, [pc, #24]	; (80011ec <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3304      	adds	r3, #4
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ffd0 	bl	8001180 <_ZN3ros4TimeC1Ev>
    {
    }
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	0800a030 	.word	0x0800a030

080011f0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6859      	ldr	r1, [r3, #4]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	4413      	add	r3, r2
 8001208:	b2ca      	uxtb	r2, r1
 800120a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	0a19      	lsrs	r1, r3, #8
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3301      	adds	r3, #1
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	4413      	add	r3, r2
 800121a:	b2ca      	uxtb	r2, r1
 800121c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	0c19      	lsrs	r1, r3, #16
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	3302      	adds	r3, #2
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	4413      	add	r3, r2
 800122c:	b2ca      	uxtb	r2, r1
 800122e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	0e19      	lsrs	r1, r3, #24
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	3303      	adds	r3, #3
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	4413      	add	r3, r2
 800123e:	b2ca      	uxtb	r2, r1
 8001240:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	3304      	adds	r3, #4
 8001246:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6899      	ldr	r1, [r3, #8]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	4413      	add	r3, r2
 8001252:	b2ca      	uxtb	r2, r1
 8001254:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	0a19      	lsrs	r1, r3, #8
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	4413      	add	r3, r2
 8001264:	b2ca      	uxtb	r2, r1
 8001266:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	0c19      	lsrs	r1, r3, #16
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3302      	adds	r3, #2
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	4413      	add	r3, r2
 8001276:	b2ca      	uxtb	r2, r1
 8001278:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	0e19      	lsrs	r1, r3, #24
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	3303      	adds	r3, #3
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	4413      	add	r3, r2
 8001288:	b2ca      	uxtb	r2, r1
 800128a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3304      	adds	r3, #4
 8001290:	60fb      	str	r3, [r7, #12]
      return offset;
 8001292:	68fb      	ldr	r3, [r7, #12]
    }
 8001294:	4618      	mov	r0, r3
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800129e:	b480      	push	{r7}
 80012a0:	b085      	sub	sp, #20
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	4413      	add	r3, r2
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3301      	adds	r3, #1
 80012c2:	6839      	ldr	r1, [r7, #0]
 80012c4:	440b      	add	r3, r1
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3302      	adds	r3, #2
 80012d8:	6839      	ldr	r1, [r7, #0]
 80012da:	440b      	add	r3, r1
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	041b      	lsls	r3, r3, #16
 80012e0:	431a      	orrs	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3303      	adds	r3, #3
 80012ee:	6839      	ldr	r1, [r7, #0]
 80012f0:	440b      	add	r3, r1
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	061b      	lsls	r3, r3, #24
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3304      	adds	r3, #4
 8001300:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	4413      	add	r3, r2
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3301      	adds	r3, #1
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	440b      	add	r3, r1
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3302      	adds	r3, #2
 800132e:	6839      	ldr	r1, [r7, #0]
 8001330:	440b      	add	r3, r1
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	041b      	lsls	r3, r3, #16
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	3303      	adds	r3, #3
 8001344:	6839      	ldr	r1, [r7, #0]
 8001346:	440b      	add	r3, r1
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	061b      	lsls	r3, r3, #24
 800134c:	431a      	orrs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	3304      	adds	r3, #4
 8001356:	60fb      	str	r3, [r7, #12]
     return offset;
 8001358:	68fb      	ldr	r3, [r7, #12]
    }
 800135a:	4618      	mov	r0, r3
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	4b02      	ldr	r3, [pc, #8]	; (8001378 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	080099b8 	.word	0x080099b8

0800137c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	4b02      	ldr	r3, [pc, #8]	; (8001390 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	080099c8 	.word	0x080099c8

08001394 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fefe 	bl	80011a0 <_ZN3ros3MsgC1Ev>
 80013a4:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	809a      	strh	r2, [r3, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80013c0:	611a      	str	r2, [r3, #16]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
    {
    }
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	0800a018 	.word	0x0800a018
 80013d8:	080099ec 	.word	0x080099ec

080013dc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	8899      	ldrh	r1, [r3, #4]
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	b2ca      	uxtb	r2, r1
 80013f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	889b      	ldrh	r3, [r3, #4]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	b299      	uxth	r1, r3
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	3301      	adds	r3, #1
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	4413      	add	r3, r2
 8001408:	b2ca      	uxtb	r2, r1
 800140a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	3302      	adds	r3, #2
 8001410:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	4618      	mov	r0, r3
 8001418:	f7fe fe9a 	bl	8000150 <strlen>
 800141c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	4413      	add	r3, r2
 8001424:	69b9      	ldr	r1, [r7, #24]
 8001426:	4618      	mov	r0, r3
 8001428:	f001 fe02 	bl	8003030 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	3304      	adds	r3, #4
 8001430:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	18d0      	adds	r0, r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4619      	mov	r1, r3
 8001440:	f008 f962 	bl	8009708 <memcpy>
      offset += length_topic_name;
 8001444:	69fa      	ldr	r2, [r7, #28]
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4413      	add	r3, r2
 800144a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	4618      	mov	r0, r3
 8001452:	f7fe fe7d 	bl	8000150 <strlen>
 8001456:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	4413      	add	r3, r2
 800145e:	6979      	ldr	r1, [r7, #20]
 8001460:	4618      	mov	r0, r3
 8001462:	f001 fde5 	bl	8003030 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	18d0      	adds	r0, r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4619      	mov	r1, r3
 800147a:	f008 f945 	bl	8009708 <memcpy>
      offset += length_message_type;
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	4413      	add	r3, r2
 8001484:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe fe60 	bl	8000150 <strlen>
 8001490:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	4413      	add	r3, r2
 8001498:	6939      	ldr	r1, [r7, #16]
 800149a:	4618      	mov	r0, r3
 800149c:	f001 fdc8 	bl	8003030 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	3304      	adds	r3, #4
 80014a4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	18d0      	adds	r0, r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4619      	mov	r1, r3
 80014b4:	f008 f928 	bl	8009708 <memcpy>
      offset += length_md5sum;
 80014b8:	69fa      	ldr	r2, [r7, #28]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4413      	add	r3, r2
 80014be:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80014c6:	68f9      	ldr	r1, [r7, #12]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	4413      	add	r3, r2
 80014ce:	b2ca      	uxtb	r2, r1
 80014d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	0a19      	lsrs	r1, r3, #8
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3301      	adds	r3, #1
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	b2ca      	uxtb	r2, r1
 80014e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	0c19      	lsrs	r1, r3, #16
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3302      	adds	r3, #2
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	4413      	add	r3, r2
 80014ee:	b2ca      	uxtb	r2, r1
 80014f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	0e19      	lsrs	r1, r3, #24
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3303      	adds	r3, #3
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	b2ca      	uxtb	r2, r1
 8001500:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3304      	adds	r3, #4
 8001506:	61fb      	str	r3, [r7, #28]
      return offset;
 8001508:	69fb      	ldr	r3, [r7, #28]
    }
 800150a:	4618      	mov	r0, r3
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001512:	b580      	push	{r7, lr}
 8001514:	b08a      	sub	sp, #40	; 0x28
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	4413      	add	r3, r2
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b29a      	uxth	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	889b      	ldrh	r3, [r3, #4]
 8001532:	b21a      	sxth	r2, r3
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	3301      	adds	r3, #1
 8001538:	6839      	ldr	r1, [r7, #0]
 800153a:	440b      	add	r3, r1
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b21b      	sxth	r3, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	b21b      	sxth	r3, r3
 8001546:	b29a      	uxth	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	3302      	adds	r3, #2
 8001550:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	441a      	add	r2, r3
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f001 fd83 	bl	800306a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	3304      	adds	r3, #4
 8001568:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	4413      	add	r3, r2
 8001574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001576:	429a      	cmp	r2, r3
 8001578:	d20c      	bcs.n	8001594 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	441a      	add	r2, r3
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	3b01      	subs	r3, #1
 8001584:	6839      	ldr	r1, [r7, #0]
 8001586:	440b      	add	r3, r1
 8001588:	7812      	ldrb	r2, [r2, #0]
 800158a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	3301      	adds	r3, #1
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
 8001592:	e7ec      	b.n	800156e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	4413      	add	r3, r2
 800159a:	3b01      	subs	r3, #1
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	441a      	add	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	4413      	add	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	441a      	add	r2, r3
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f001 fd50 	bl	800306a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	3304      	adds	r3, #4
 80015ce:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	623b      	str	r3, [r7, #32]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4413      	add	r3, r2
 80015da:	6a3a      	ldr	r2, [r7, #32]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d20c      	bcs.n	80015fa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	441a      	add	r2, r3
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	440b      	add	r3, r1
 80015ee:	7812      	ldrb	r2, [r2, #0]
 80015f0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80015f2:	6a3b      	ldr	r3, [r7, #32]
 80015f4:	3301      	adds	r3, #1
 80015f6:	623b      	str	r3, [r7, #32]
 80015f8:	e7ec      	b.n	80015d4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4413      	add	r3, r2
 8001600:	3b01      	subs	r3, #1
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	4413      	add	r3, r2
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	3b01      	subs	r3, #1
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	441a      	add	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4413      	add	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	441a      	add	r2, r3
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f001 fd1d 	bl	800306a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	3304      	adds	r3, #4
 8001634:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	429a      	cmp	r2, r3
 8001644:	d20c      	bcs.n	8001660 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	441a      	add	r2, r3
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	3b01      	subs	r3, #1
 8001650:	6839      	ldr	r1, [r7, #0]
 8001652:	440b      	add	r3, r1
 8001654:	7812      	ldrb	r2, [r2, #0]
 8001656:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	3301      	adds	r3, #1
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	e7ec      	b.n	800163a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4413      	add	r3, r2
 8001666:	3b01      	subs	r3, #1
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	4413      	add	r3, r2
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	3b01      	subs	r3, #1
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	441a      	add	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4413      	add	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	6839      	ldr	r1, [r7, #0]
 800168e:	440a      	add	r2, r1
 8001690:	7812      	ldrb	r2, [r2, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	3301      	adds	r3, #1
 800169c:	6839      	ldr	r1, [r7, #0]
 800169e:	440b      	add	r3, r1
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	4313      	orrs	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	3302      	adds	r3, #2
 80016ae:	6839      	ldr	r1, [r7, #0]
 80016b0:	440b      	add	r3, r1
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	041b      	lsls	r3, r3, #16
 80016b6:	4313      	orrs	r3, r2
 80016b8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	3303      	adds	r3, #3
 80016c0:	6839      	ldr	r1, [r7, #0]
 80016c2:	440b      	add	r3, r1
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	061b      	lsls	r3, r3, #24
 80016c8:	4313      	orrs	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	3304      	adds	r3, #4
 80016d6:	61bb      	str	r3, [r7, #24]
     return offset;
 80016d8:	69bb      	ldr	r3, [r7, #24]
    }
 80016da:	4618      	mov	r0, r3
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	4b02      	ldr	r3, [pc, #8]	; (80016f8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	080099f0 	.word	0x080099f0

080016fc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	4b02      	ldr	r3, [pc, #8]	; (8001710 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	08009a0c 	.word	0x08009a0c

08001714 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fd3e 	bl	80011a0 <_ZN3ros3MsgC1Ev>
 8001724:	4a06      	ldr	r2, [pc, #24]	; (8001740 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	711a      	strb	r2, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a04      	ldr	r2, [pc, #16]	; (8001744 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001734:	609a      	str	r2, [r3, #8]
    {
    }
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	0800a000 	.word	0x0800a000
 8001744:	080099ec 	.word	0x080099ec

08001748 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	4413      	add	r3, r2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	7912      	ldrb	r2, [r2, #4]
 8001760:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3301      	adds	r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fcef 	bl	8000150 <strlen>
 8001772:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	4413      	add	r3, r2
 800177a:	68b9      	ldr	r1, [r7, #8]
 800177c:	4618      	mov	r0, r3
 800177e:	f001 fc57 	bl	8003030 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	3304      	adds	r3, #4
 8001786:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	18d0      	adds	r0, r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	4619      	mov	r1, r3
 8001796:	f007 ffb7 	bl	8009708 <memcpy>
      offset += length_msg;
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4413      	add	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
      return offset;
 80017a2:	68fb      	ldr	r3, [r7, #12]
    }
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	781a      	ldrb	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	3301      	adds	r3, #1
 80017ca:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	441a      	add	r2, r3
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f001 fc46 	bl	800306a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	3304      	adds	r3, #4
 80017e2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4413      	add	r3, r2
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d20c      	bcs.n	800180e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	441a      	add	r2, r3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	6839      	ldr	r1, [r7, #0]
 8001800:	440b      	add	r3, r1
 8001802:	7812      	ldrb	r2, [r2, #0]
 8001804:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	3301      	adds	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e7ec      	b.n	80017e8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	3b01      	subs	r3, #1
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	4413      	add	r3, r2
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	3b01      	subs	r3, #1
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	441a      	add	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4413      	add	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
     return offset;
 8001832:	693b      	ldr	r3, [r7, #16]
    }
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	4b02      	ldr	r3, [pc, #8]	; (8001850 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	08009a30 	.word	0x08009a30

08001854 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	4b02      	ldr	r3, [pc, #8]	; (8001868 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	08009a44 	.word	0x08009a44

0800186c <_ZN14rosserial_msgs19RequestParamRequestC1Ev>:
  {
    public:
      typedef const char* _name_type;
      _name_type name;

    RequestParamRequest():
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
      name("")
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fc92 	bl	80011a0 <_ZN3ros3MsgC1Ev>
 800187c:	4a05      	ldr	r2, [pc, #20]	; (8001894 <_ZN14rosserial_msgs19RequestParamRequestC1Ev+0x28>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <_ZN14rosserial_msgs19RequestParamRequestC1Ev+0x2c>)
 8001886:	605a      	str	r2, [r3, #4]
    {
    }
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	08009fe8 	.word	0x08009fe8
 8001898:	080099ec 	.word	0x080099ec

0800189c <_ZNK14rosserial_msgs19RequestParamRequest9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
      uint32_t length_name = strlen(this->name);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fc4e 	bl	8000150 <strlen>
 80018b4:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_name);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	4618      	mov	r0, r3
 80018c0:	f001 fbb6 	bl	8003030 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3304      	adds	r3, #4
 80018c8:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->name, length_name);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	18d0      	adds	r0, r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	4619      	mov	r1, r3
 80018d8:	f007 ff16 	bl	8009708 <memcpy>
      offset += length_name;
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	4413      	add	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
      return offset;
 80018e4:	68fb      	ldr	r3, [r7, #12]
    }
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_ZN14rosserial_msgs19RequestParamRequest11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	613b      	str	r3, [r7, #16]
      uint32_t length_name;
      arrToVar(length_name, (inbuffer + offset));
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	441a      	add	r2, r3
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f001 fbae 	bl	800306a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	3304      	adds	r3, #4
 8001912:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_name; ++k){
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4413      	add	r3, r2
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	429a      	cmp	r2, r3
 8001922:	d20c      	bcs.n	800193e <_ZN14rosserial_msgs19RequestParamRequest11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	441a      	add	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3b01      	subs	r3, #1
 800192e:	6839      	ldr	r1, [r7, #0]
 8001930:	440b      	add	r3, r1
 8001932:	7812      	ldrb	r2, [r2, #0]
 8001934:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_name; ++k){
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	e7ec      	b.n	8001918 <_ZN14rosserial_msgs19RequestParamRequest11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_name-1]=0;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	3b01      	subs	r3, #1
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	4413      	add	r3, r2
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
      this->name = (char *)(inbuffer + offset-1);
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	3b01      	subs	r3, #1
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	441a      	add	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	605a      	str	r2, [r3, #4]
      offset += length_name;
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4413      	add	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
     return offset;
 8001962:	693b      	ldr	r3, [r7, #16]
    }
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <_ZN14rosserial_msgs19RequestParamRequest7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	4b02      	ldr	r3, [pc, #8]	; (8001980 <_ZN14rosserial_msgs19RequestParamRequest7getTypeEv+0x14>)
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	08009f04 	.word	0x08009f04

08001984 <_ZN14rosserial_msgs19RequestParamRequest6getMD5Ev>:
    const char * getMD5(){ return "c1f3d28f1b044c871e6eff2e9fc3c667"; };
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	4b02      	ldr	r3, [pc, #8]	; (8001998 <_ZN14rosserial_msgs19RequestParamRequest6getMD5Ev+0x14>)
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	08009a68 	.word	0x08009a68

0800199c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fbfa 	bl	80011a0 <_ZN3ros3MsgC1Ev>
 80019ac:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	61da      	str	r2, [r3, #28]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	08009fd0 	.word	0x08009fd0

080019e4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6859      	ldr	r1, [r3, #4]
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	b2ca      	uxtb	r2, r1
 80019fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	0a19      	lsrs	r1, r3, #8
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	3301      	adds	r3, #1
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	b2ca      	uxtb	r2, r1
 8001a10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	0c19      	lsrs	r1, r3, #16
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	b2ca      	uxtb	r2, r1
 8001a22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	0e19      	lsrs	r1, r3, #24
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	3303      	adds	r3, #3
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	4413      	add	r3, r2
 8001a32:	b2ca      	uxtb	r2, r1
 8001a34:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	3304      	adds	r3, #4
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	6a3a      	ldr	r2, [r7, #32]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d22b      	bcs.n	8001aa2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001a58:	6939      	ldr	r1, [r7, #16]
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	b2ca      	uxtb	r2, r1
 8001a62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	0a19      	lsrs	r1, r3, #8
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	b2ca      	uxtb	r2, r1
 8001a72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	0c19      	lsrs	r1, r3, #16
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b2ca      	uxtb	r2, r1
 8001a82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	0e19      	lsrs	r1, r3, #24
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	3303      	adds	r3, #3
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	b2ca      	uxtb	r2, r1
 8001a92:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	3304      	adds	r3, #4
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	623b      	str	r3, [r7, #32]
 8001aa0:	e7ce      	b.n	8001a40 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6919      	ldr	r1, [r3, #16]
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	b2ca      	uxtb	r2, r1
 8001aae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	0a19      	lsrs	r1, r3, #8
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	3301      	adds	r3, #1
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	4413      	add	r3, r2
 8001abe:	b2ca      	uxtb	r2, r1
 8001ac0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	0c19      	lsrs	r1, r3, #16
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	3302      	adds	r3, #2
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	b2ca      	uxtb	r2, r1
 8001ad2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	0e19      	lsrs	r1, r3, #24
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	3303      	adds	r3, #3
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b2ca      	uxtb	r2, r1
 8001ae4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	3304      	adds	r3, #4
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	69fa      	ldr	r2, [r7, #28]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d22b      	bcs.n	8001b52 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699a      	ldr	r2, [r3, #24]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001b08:	68f9      	ldr	r1, [r7, #12]
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	b2ca      	uxtb	r2, r1
 8001b12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	0a19      	lsrs	r1, r3, #8
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	b2ca      	uxtb	r2, r1
 8001b22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	0c19      	lsrs	r1, r3, #16
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	b2ca      	uxtb	r2, r1
 8001b32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	0e19      	lsrs	r1, r3, #24
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	3303      	adds	r3, #3
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	b2ca      	uxtb	r2, r1
 8001b42:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	3304      	adds	r3, #4
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	61fb      	str	r3, [r7, #28]
 8001b50:	e7ce      	b.n	8001af0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69d9      	ldr	r1, [r3, #28]
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	b2ca      	uxtb	r2, r1
 8001b5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	0a19      	lsrs	r1, r3, #8
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	3301      	adds	r3, #1
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	b2ca      	uxtb	r2, r1
 8001b70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	0c19      	lsrs	r1, r3, #16
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	b2ca      	uxtb	r2, r1
 8001b82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	0e19      	lsrs	r1, r3, #24
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	3303      	adds	r3, #3
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	4413      	add	r3, r2
 8001b92:	b2ca      	uxtb	r2, r1
 8001b94:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	3304      	adds	r3, #4
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61bb      	str	r3, [r7, #24]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d228      	bcs.n	8001bfc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe faca 	bl	8000150 <strlen>
 8001bbc:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	6979      	ldr	r1, [r7, #20]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 fa32 	bl	8003030 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	3304      	adds	r3, #4
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	18d0      	adds	r0, r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	4619      	mov	r1, r3
 8001be8:	f007 fd8e 	bl	8009708 <memcpy>
      offset += length_stringsi;
 8001bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	e7d1      	b.n	8001ba0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3728      	adds	r7, #40	; 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b08e      	sub	sp, #56	; 0x38
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c20:	3301      	adds	r3, #1
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	4413      	add	r3, r2
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	6a3a      	ldr	r2, [r7, #32]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c32:	3302      	adds	r3, #2
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	041b      	lsls	r3, r3, #16
 8001c3c:	6a3a      	ldr	r2, [r7, #32]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c44:	3303      	adds	r3, #3
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	4413      	add	r3, r2
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	061b      	lsls	r3, r3, #24
 8001c4e:	6a3a      	ldr	r2, [r7, #32]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c56:	3304      	adds	r3, #4
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	6a3a      	ldr	r2, [r7, #32]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d90a      	bls.n	8001c7a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4610      	mov	r0, r2
 8001c70:	f007 fd5e 	bl	8009730 <realloc>
 8001c74:	4602      	mov	r2, r0
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a3a      	ldr	r2, [r7, #32]
 8001c7e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001c80:	2300      	movs	r3, #0
 8001c82:	633b      	str	r3, [r7, #48]	; 0x30
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d236      	bcs.n	8001cfc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c96:	6839      	ldr	r1, [r7, #0]
 8001c98:	440a      	add	r2, r1
 8001c9a:	7812      	ldrb	r2, [r2, #0]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	6839      	ldr	r1, [r7, #0]
 8001ca8:	440b      	add	r3, r1
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	6839      	ldr	r1, [r7, #0]
 8001cba:	440b      	add	r3, r1
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	041b      	lsls	r3, r3, #16
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc8:	3303      	adds	r3, #3
 8001cca:	6839      	ldr	r1, [r7, #0]
 8001ccc:	440b      	add	r3, r1
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	061b      	lsls	r3, r3, #24
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cde:	3304      	adds	r3, #4
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	3208      	adds	r2, #8
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
 8001cfa:	e7c3      	b.n	8001c84 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	4413      	add	r3, r2
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d08:	3301      	adds	r3, #1
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	041b      	lsls	r3, r3, #16
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2c:	3303      	adds	r3, #3
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	4413      	add	r3, r2
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	061b      	lsls	r3, r3, #24
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3e:	3304      	adds	r3, #4
 8001d40:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d90a      	bls.n	8001d62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4619      	mov	r1, r3
 8001d56:	4610      	mov	r0, r2
 8001d58:	f007 fcea 	bl	8009730 <realloc>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d236      	bcs.n	8001de4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d7e:	6839      	ldr	r1, [r7, #0]
 8001d80:	440a      	add	r2, r1
 8001d82:	7812      	ldrb	r2, [r2, #0]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	6839      	ldr	r1, [r7, #0]
 8001d90:	440b      	add	r3, r1
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9e:	3302      	adds	r3, #2
 8001da0:	6839      	ldr	r1, [r7, #0]
 8001da2:	440b      	add	r3, r1
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	041b      	lsls	r3, r3, #16
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db0:	3303      	adds	r3, #3
 8001db2:	6839      	ldr	r1, [r7, #0]
 8001db4:	440b      	add	r3, r1
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	061b      	lsls	r3, r3, #24
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699a      	ldr	r2, [r3, #24]
 8001dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	3214      	adds	r2, #20
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dde:	3301      	adds	r3, #1
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001de2:	e7c3      	b.n	8001d6c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	4413      	add	r3, r2
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df0:	3301      	adds	r3, #1
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e02:	3302      	adds	r3, #2
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	041b      	lsls	r3, r3, #16
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e14:	3303      	adds	r3, #3
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	4413      	add	r3, r2
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	061b      	lsls	r3, r3, #24
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e26:	3304      	adds	r3, #4
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d90a      	bls.n	8001e4a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4610      	mov	r0, r2
 8001e40:	f007 fc76 	bl	8009730 <realloc>
 8001e44:	4602      	mov	r2, r0
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001e50:	2300      	movs	r3, #0
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d23f      	bcs.n	8001ede <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	441a      	add	r2, r3
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f001 f8fd 	bl	800306a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e72:	3304      	adds	r3, #4
 8001e74:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d20c      	bcs.n	8001ea0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	441a      	add	r2, r3
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	6839      	ldr	r1, [r7, #0]
 8001e92:	440b      	add	r3, r1
 8001e94:	7812      	ldrb	r2, [r2, #0]
 8001e96:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9e:	e7ec      	b.n	8001e7a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	441a      	add	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001ebc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	3220      	adds	r2, #32
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed8:	3301      	adds	r3, #1
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
 8001edc:	e7ba      	b.n	8001e54 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3738      	adds	r7, #56	; 0x38
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	4b02      	ldr	r3, [pc, #8]	; (8001efc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	08009f04 	.word	0x08009f04

08001f00 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	4b02      	ldr	r3, [pc, #8]	; (8001f14 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	08009a8c 	.word	0x08009a8c

08001f18 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	611a      	str	r2, [r3, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68d8      	ldr	r0, [r3, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6891      	ldr	r1, [r2, #8]
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	4798      	blx	r3
 8001f62:	4603      	mov	r3, r0
  };
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
  }
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	425b      	negs	r3, r3
 8001f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <_ZN13STM32HardwareC1Ev+0x34>)
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20002590 	.word	0x20002590

08001fdc <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f804 	bl	8001ff2 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
     if( HAL_UART_Receive_DMA(huart, rbuf, rbuflen) != HAL_OK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002006:	4619      	mov	r1, r3
 8002008:	f004 f97a 	bl	8006300 <HAL_UART_Receive_DMA>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
    		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    		 HAL_Delay(100);
    		 }*/

     }
    }
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002020:	f04f 33ff 	mov.w	r3, #4294967295
 8002024:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ffa8 	bl	8001f82 <_ZN13STM32Hardware10getRdmaIndEv>
 8002032:	4603      	mov	r3, r0
 8002034:	429c      	cmp	r4, r3
 8002036:	bf14      	ite	ne
 8002038:	2301      	movne	r3, #1
 800203a:	2300      	moveq	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d012      	beq.n	8002068 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002048:	1c59      	adds	r1, r3, #1
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	791b      	ldrb	r3, [r3, #4]
 8002056:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800205e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002068:	68fb      	ldr	r3, [r7, #12]
    }
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	bd90      	pop	{r4, r7, pc}
	...

08002074 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b20      	cmp	r3, #32
 8002088:	d108      	bne.n	800209c <_ZN13STM32Hardware5flushEv+0x28>
 800208a:	4b28      	ldr	r3, [pc, #160]	; (800212c <_ZN13STM32Hardware5flushEv+0xb8>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	f083 0301 	eor.w	r3, r3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <_ZN13STM32Hardware5flushEv+0x28>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <_ZN13STM32Hardware5flushEv+0x2a>
 800209c:	2300      	movs	r3, #0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d03f      	beq.n	8002122 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80020a2:	4b22      	ldr	r3, [pc, #136]	; (800212c <_ZN13STM32Hardware5flushEv+0xb8>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d031      	beq.n	800211c <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d20a      	bcs.n	80020de <_ZN13STM32Hardware5flushEv+0x6a>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	b29b      	uxth	r3, r3
 80020dc:	e006      	b.n	80020ec <_ZN13STM32Hardware5flushEv+0x78>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80020f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	4413      	add	r3, r2
 8002100:	89fa      	ldrh	r2, [r7, #14]
 8002102:	4619      	mov	r1, r3
 8002104:	f004 f890 	bl	8006228 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800210e:	89fb      	ldrh	r3, [r7, #14]
 8002110:	4413      	add	r3, r2
 8002112:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <_ZN13STM32Hardware5flushEv+0xb8>)
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
      }
    }
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	2000016e 	.word	0x2000016e

08002130 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
      int n = length;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002146:	bfa8      	it	ge
 8002148:	f44f 7300 	movge.w	r3, #512	; 0x200
 800214c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002154:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	4293      	cmp	r3, r2
 800215c:	bf28      	it	cs
 800215e:	4613      	movcs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002168:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4413      	add	r3, r2
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	68b9      	ldr	r1, [r7, #8]
 8002174:	4618      	mov	r0, r3
 8002176:	f007 fac7 	bl	8009708 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	4413      	add	r3, r2
 8002184:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	429a      	cmp	r2, r3
 8002194:	d00b      	beq.n	80021ae <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f503 7002 	add.w	r0, r3, #520	; 0x208
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	18d1      	adds	r1, r2, r3
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	f007 faad 	bl	8009708 <memcpy>
      }

      flush();
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f7ff ff60 	bl	8002074 <_ZN13STM32Hardware5flushEv>
    }
 80021b4:	bf00      	nop
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	f002 fb30 	bl	8004828 <HAL_GetTick>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
      data("")
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe ffde 	bl	80011a0 <_ZN3ros3MsgC1Ev>
 80021e4:	4a05      	ldr	r2, [pc, #20]	; (80021fc <_ZN8std_msgs6StringC1Ev+0x28>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a04      	ldr	r2, [pc, #16]	; (8002200 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80021ee:	605a      	str	r2, [r3, #4]
    {
    }
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	08009f8c 	.word	0x08009f8c
 8002200:	080099ec 	.word	0x080099ec

08002204 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fd ff9a 	bl	8000150 <strlen>
 800221c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	4413      	add	r3, r2
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	4618      	mov	r0, r3
 8002228:	f000 ff02 	bl	8003030 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	3304      	adds	r3, #4
 8002230:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	18d0      	adds	r0, r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	4619      	mov	r1, r3
 8002240:	f007 fa62 	bl	8009708 <memcpy>
      offset += length_data;
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	4413      	add	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
      return offset;
 800224c:	68fb      	ldr	r3, [r7, #12]
    }
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002256:	b580      	push	{r7, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	441a      	add	r2, r3
 800226a:	f107 030c 	add.w	r3, r7, #12
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f000 fefa 	bl	800306a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	3304      	adds	r3, #4
 800227a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4413      	add	r3, r2
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	429a      	cmp	r2, r3
 800228a:	d20c      	bcs.n	80022a6 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	441a      	add	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	3b01      	subs	r3, #1
 8002296:	6839      	ldr	r1, [r7, #0]
 8002298:	440b      	add	r3, r1
 800229a:	7812      	ldrb	r2, [r2, #0]
 800229c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3301      	adds	r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	e7ec      	b.n	8002280 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	3b01      	subs	r3, #1
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	3b01      	subs	r3, #1
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	441a      	add	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4413      	add	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
     return offset;
 80022ca:	693b      	ldr	r3, [r7, #16]
    }
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	4b02      	ldr	r3, [pc, #8]	; (80022e8 <_ZN8std_msgs6String7getTypeEv+0x14>)
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	08009ab0 	.word	0x08009ab0

080022ec <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	4b02      	ldr	r3, [pc, #8]	; (8002300 <_ZN8std_msgs6String6getMD5Ev+0x14>)
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	08009ac0 	.word	0x08009ac0

08002304 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe ff46 	bl	80011a0 <_ZN3ros3MsgC1Ev>
 8002314:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	f04f 0400 	mov.w	r4, #0
 8002324:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	f04f 0400 	mov.w	r4, #0
 8002332:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	f04f 0400 	mov.w	r4, #0
 8002340:	e9c2 3406 	strd	r3, r4, [r2, #24]
    {
    }
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	bd90      	pop	{r4, r7, pc}
 800234e:	bf00      	nop
 8002350:	08009f74 	.word	0x08009f74

08002354 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002354:	b490      	push	{r4, r7}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f103 0408 	add.w	r4, r3, #8
 8002368:	e9d4 3400 	ldrd	r3, r4, [r4]
 800236c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002370:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002376:	6839      	ldr	r1, [r7, #0]
 8002378:	440a      	add	r2, r1
 800237a:	b2db      	uxtb	r3, r3
 800237c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800237e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	f04f 0400 	mov.w	r4, #0
 800238a:	0a0b      	lsrs	r3, r1, #8
 800238c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002390:	0a14      	lsrs	r4, r2, #8
 8002392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002394:	3201      	adds	r2, #1
 8002396:	6839      	ldr	r1, [r7, #0]
 8002398:	440a      	add	r2, r1
 800239a:	b2db      	uxtb	r3, r3
 800239c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800239e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	f04f 0400 	mov.w	r4, #0
 80023aa:	0c0b      	lsrs	r3, r1, #16
 80023ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80023b0:	0c14      	lsrs	r4, r2, #16
 80023b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b4:	3202      	adds	r2, #2
 80023b6:	6839      	ldr	r1, [r7, #0]
 80023b8:	440a      	add	r2, r1
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80023be:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	f04f 0400 	mov.w	r4, #0
 80023ca:	0e0b      	lsrs	r3, r1, #24
 80023cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80023d0:	0e14      	lsrs	r4, r2, #24
 80023d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d4:	3203      	adds	r2, #3
 80023d6:	6839      	ldr	r1, [r7, #0]
 80023d8:	440a      	add	r2, r1
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80023de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	f04f 0400 	mov.w	r4, #0
 80023ea:	0013      	movs	r3, r2
 80023ec:	2400      	movs	r4, #0
 80023ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f0:	3204      	adds	r2, #4
 80023f2:	6839      	ldr	r1, [r7, #0]
 80023f4:	440a      	add	r2, r1
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80023fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	f04f 0400 	mov.w	r4, #0
 8002406:	0a13      	lsrs	r3, r2, #8
 8002408:	2400      	movs	r4, #0
 800240a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240c:	3205      	adds	r2, #5
 800240e:	6839      	ldr	r1, [r7, #0]
 8002410:	440a      	add	r2, r1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002416:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	f04f 0400 	mov.w	r4, #0
 8002422:	0c13      	lsrs	r3, r2, #16
 8002424:	2400      	movs	r4, #0
 8002426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002428:	3206      	adds	r2, #6
 800242a:	6839      	ldr	r1, [r7, #0]
 800242c:	440a      	add	r2, r1
 800242e:	b2db      	uxtb	r3, r3
 8002430:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002432:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	f04f 0400 	mov.w	r4, #0
 800243e:	0e13      	lsrs	r3, r2, #24
 8002440:	2400      	movs	r4, #0
 8002442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002444:	3207      	adds	r2, #7
 8002446:	6839      	ldr	r1, [r7, #0]
 8002448:	440a      	add	r2, r1
 800244a:	b2db      	uxtb	r3, r3
 800244c:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	3308      	adds	r3, #8
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f103 0410 	add.w	r4, r3, #16
 800245a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800245e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002462:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002468:	6839      	ldr	r1, [r7, #0]
 800246a:	440a      	add	r2, r1
 800246c:	b2db      	uxtb	r3, r3
 800246e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002470:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	f04f 0400 	mov.w	r4, #0
 800247c:	0a0b      	lsrs	r3, r1, #8
 800247e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002482:	0a14      	lsrs	r4, r2, #8
 8002484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002486:	3201      	adds	r2, #1
 8002488:	6839      	ldr	r1, [r7, #0]
 800248a:	440a      	add	r2, r1
 800248c:	b2db      	uxtb	r3, r3
 800248e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002490:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	f04f 0400 	mov.w	r4, #0
 800249c:	0c0b      	lsrs	r3, r1, #16
 800249e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80024a2:	0c14      	lsrs	r4, r2, #16
 80024a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a6:	3202      	adds	r2, #2
 80024a8:	6839      	ldr	r1, [r7, #0]
 80024aa:	440a      	add	r2, r1
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80024b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	f04f 0400 	mov.w	r4, #0
 80024bc:	0e0b      	lsrs	r3, r1, #24
 80024be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80024c2:	0e14      	lsrs	r4, r2, #24
 80024c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c6:	3203      	adds	r2, #3
 80024c8:	6839      	ldr	r1, [r7, #0]
 80024ca:	440a      	add	r2, r1
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80024d0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	f04f 0400 	mov.w	r4, #0
 80024dc:	0013      	movs	r3, r2
 80024de:	2400      	movs	r4, #0
 80024e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e2:	3204      	adds	r2, #4
 80024e4:	6839      	ldr	r1, [r7, #0]
 80024e6:	440a      	add	r2, r1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80024ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	f04f 0400 	mov.w	r4, #0
 80024f8:	0a13      	lsrs	r3, r2, #8
 80024fa:	2400      	movs	r4, #0
 80024fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fe:	3205      	adds	r2, #5
 8002500:	6839      	ldr	r1, [r7, #0]
 8002502:	440a      	add	r2, r1
 8002504:	b2db      	uxtb	r3, r3
 8002506:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002508:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	f04f 0400 	mov.w	r4, #0
 8002514:	0c13      	lsrs	r3, r2, #16
 8002516:	2400      	movs	r4, #0
 8002518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251a:	3206      	adds	r2, #6
 800251c:	6839      	ldr	r1, [r7, #0]
 800251e:	440a      	add	r2, r1
 8002520:	b2db      	uxtb	r3, r3
 8002522:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002524:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	f04f 0400 	mov.w	r4, #0
 8002530:	0e13      	lsrs	r3, r2, #24
 8002532:	2400      	movs	r4, #0
 8002534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002536:	3207      	adds	r2, #7
 8002538:	6839      	ldr	r1, [r7, #0]
 800253a:	440a      	add	r2, r1
 800253c:	b2db      	uxtb	r3, r3
 800253e:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	3308      	adds	r3, #8
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f103 0418 	add.w	r4, r3, #24
 800254c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002550:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002554:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255a:	6839      	ldr	r1, [r7, #0]
 800255c:	440a      	add	r2, r1
 800255e:	b2db      	uxtb	r3, r3
 8002560:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002562:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	f04f 0400 	mov.w	r4, #0
 800256e:	0a0b      	lsrs	r3, r1, #8
 8002570:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002574:	0a14      	lsrs	r4, r2, #8
 8002576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002578:	3201      	adds	r2, #1
 800257a:	6839      	ldr	r1, [r7, #0]
 800257c:	440a      	add	r2, r1
 800257e:	b2db      	uxtb	r3, r3
 8002580:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002582:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	f04f 0400 	mov.w	r4, #0
 800258e:	0c0b      	lsrs	r3, r1, #16
 8002590:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002594:	0c14      	lsrs	r4, r2, #16
 8002596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002598:	3202      	adds	r2, #2
 800259a:	6839      	ldr	r1, [r7, #0]
 800259c:	440a      	add	r2, r1
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80025a2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	f04f 0400 	mov.w	r4, #0
 80025ae:	0e0b      	lsrs	r3, r1, #24
 80025b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80025b4:	0e14      	lsrs	r4, r2, #24
 80025b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b8:	3203      	adds	r2, #3
 80025ba:	6839      	ldr	r1, [r7, #0]
 80025bc:	440a      	add	r2, r1
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80025c2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	f04f 0400 	mov.w	r4, #0
 80025ce:	0013      	movs	r3, r2
 80025d0:	2400      	movs	r4, #0
 80025d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d4:	3204      	adds	r2, #4
 80025d6:	6839      	ldr	r1, [r7, #0]
 80025d8:	440a      	add	r2, r1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80025de:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	f04f 0400 	mov.w	r4, #0
 80025ea:	0a13      	lsrs	r3, r2, #8
 80025ec:	2400      	movs	r4, #0
 80025ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f0:	3205      	adds	r2, #5
 80025f2:	6839      	ldr	r1, [r7, #0]
 80025f4:	440a      	add	r2, r1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80025fa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	f04f 0400 	mov.w	r4, #0
 8002606:	0c13      	lsrs	r3, r2, #16
 8002608:	2400      	movs	r4, #0
 800260a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260c:	3206      	adds	r2, #6
 800260e:	6839      	ldr	r1, [r7, #0]
 8002610:	440a      	add	r2, r1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002616:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	f04f 0400 	mov.w	r4, #0
 8002622:	0e13      	lsrs	r3, r2, #24
 8002624:	2400      	movs	r4, #0
 8002626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002628:	3207      	adds	r2, #7
 800262a:	6839      	ldr	r1, [r7, #0]
 800262c:	440a      	add	r2, r1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	3308      	adds	r3, #8
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800263a:	4618      	mov	r0, r3
 800263c:	3728      	adds	r7, #40	; 0x28
 800263e:	46bd      	mov	sp, r7
 8002640:	bc90      	pop	{r4, r7}
 8002642:	4770      	bx	lr

08002644 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002644:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002648:	b08c      	sub	sp, #48	; 0x30
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	f04f 0400 	mov.w	r4, #0
 800265c:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002660:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	68b8      	ldr	r0, [r7, #8]
 8002668:	4403      	add	r3, r0
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	461c      	mov	r4, r3
 800266e:	b2e4      	uxtb	r4, r4
 8002670:	f04f 0500 	mov.w	r5, #0
 8002674:	4623      	mov	r3, r4
 8002676:	462c      	mov	r4, r5
 8002678:	ea43 0301 	orr.w	r3, r3, r1
 800267c:	ea44 0402 	orr.w	r4, r4, r2
 8002680:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002684:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002688:	461d      	mov	r5, r3
 800268a:	4626      	mov	r6, r4
 800268c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268e:	3301      	adds	r3, #1
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	4413      	add	r3, r2
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	b2d9      	uxtb	r1, r3
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	f04f 0400 	mov.w	r4, #0
 80026a4:	0214      	lsls	r4, r2, #8
 80026a6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80026aa:	020b      	lsls	r3, r1, #8
 80026ac:	4629      	mov	r1, r5
 80026ae:	4632      	mov	r2, r6
 80026b0:	ea41 0103 	orr.w	r1, r1, r3
 80026b4:	ea42 0204 	orr.w	r2, r2, r4
 80026b8:	460b      	mov	r3, r1
 80026ba:	4614      	mov	r4, r2
 80026bc:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80026c0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80026c4:	461d      	mov	r5, r3
 80026c6:	4626      	mov	r6, r4
 80026c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ca:	3302      	adds	r3, #2
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	4413      	add	r3, r2
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	b2d9      	uxtb	r1, r3
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	f04f 0400 	mov.w	r4, #0
 80026e0:	0414      	lsls	r4, r2, #16
 80026e2:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 80026e6:	040b      	lsls	r3, r1, #16
 80026e8:	4629      	mov	r1, r5
 80026ea:	4632      	mov	r2, r6
 80026ec:	ea41 0103 	orr.w	r1, r1, r3
 80026f0:	ea42 0204 	orr.w	r2, r2, r4
 80026f4:	460b      	mov	r3, r1
 80026f6:	4614      	mov	r4, r2
 80026f8:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80026fc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002702:	3303      	adds	r3, #3
 8002704:	68b8      	ldr	r0, [r7, #8]
 8002706:	4403      	add	r3, r0
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	f04f 0400 	mov.w	r4, #0
 8002710:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8002714:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8002718:	ea41 030a 	orr.w	r3, r1, sl
 800271c:	ea42 040b 	orr.w	r4, r2, fp
 8002720:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002724:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272a:	3304      	adds	r3, #4
 800272c:	68b8      	ldr	r0, [r7, #8]
 800272e:	4403      	add	r3, r0
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	fa5f fa83 	uxtb.w	sl, r3
 8002736:	f04f 0b00 	mov.w	fp, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	f04f 0400 	mov.w	r4, #0
 8002742:	4625      	mov	r5, r4
 8002744:	461c      	mov	r4, r3
 8002746:	4653      	mov	r3, sl
 8002748:	461d      	mov	r5, r3
 800274a:	2300      	movs	r3, #0
 800274c:	461c      	mov	r4, r3
 800274e:	4623      	mov	r3, r4
 8002750:	462c      	mov	r4, r5
 8002752:	ea43 0301 	orr.w	r3, r3, r1
 8002756:	ea44 0402 	orr.w	r4, r4, r2
 800275a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800275e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	3305      	adds	r3, #5
 8002766:	68b8      	ldr	r0, [r7, #8]
 8002768:	4403      	add	r3, r0
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	fa5f fa83 	uxtb.w	sl, r3
 8002770:	f04f 0b00 	mov.w	fp, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	f04f 0400 	mov.w	r4, #0
 800277c:	4625      	mov	r5, r4
 800277e:	461c      	mov	r4, r3
 8002780:	ea4f 230a 	mov.w	r3, sl, lsl #8
 8002784:	461d      	mov	r5, r3
 8002786:	2300      	movs	r3, #0
 8002788:	461c      	mov	r4, r3
 800278a:	4623      	mov	r3, r4
 800278c:	462c      	mov	r4, r5
 800278e:	ea43 0301 	orr.w	r3, r3, r1
 8002792:	ea44 0402 	orr.w	r4, r4, r2
 8002796:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800279a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a0:	3306      	adds	r3, #6
 80027a2:	68b8      	ldr	r0, [r7, #8]
 80027a4:	4403      	add	r3, r0
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	fa5f fa83 	uxtb.w	sl, r3
 80027ac:	f04f 0b00 	mov.w	fp, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	f04f 0400 	mov.w	r4, #0
 80027b8:	4625      	mov	r5, r4
 80027ba:	461c      	mov	r4, r3
 80027bc:	ea4f 430a 	mov.w	r3, sl, lsl #16
 80027c0:	461d      	mov	r5, r3
 80027c2:	2300      	movs	r3, #0
 80027c4:	461c      	mov	r4, r3
 80027c6:	4623      	mov	r3, r4
 80027c8:	462c      	mov	r4, r5
 80027ca:	ea43 0301 	orr.w	r3, r3, r1
 80027ce:	ea44 0402 	orr.w	r4, r4, r2
 80027d2:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80027d6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	3307      	adds	r3, #7
 80027de:	68b8      	ldr	r0, [r7, #8]
 80027e0:	4403      	add	r3, r0
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	fa5f fa83 	uxtb.w	sl, r3
 80027e8:	f04f 0b00 	mov.w	fp, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	f04f 0400 	mov.w	r4, #0
 80027f4:	4625      	mov	r5, r4
 80027f6:	461c      	mov	r4, r3
 80027f8:	ea4f 630a 	mov.w	r3, sl, lsl #24
 80027fc:	461d      	mov	r5, r3
 80027fe:	2300      	movs	r3, #0
 8002800:	461c      	mov	r4, r3
 8002802:	4623      	mov	r3, r4
 8002804:	462c      	mov	r4, r5
 8002806:	ea43 0301 	orr.w	r3, r3, r1
 800280a:	ea44 0402 	orr.w	r4, r4, r2
 800280e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->x = u_x.real;
 8002812:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->x);
 800281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281e:	3308      	adds	r3, #8
 8002820:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	f04f 0400 	mov.w	r4, #0
 800282a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800282e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002834:	68b8      	ldr	r0, [r7, #8]
 8002836:	4403      	add	r3, r0
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	fa5f fa83 	uxtb.w	sl, r3
 800283e:	f04f 0b00 	mov.w	fp, #0
 8002842:	ea4a 0301 	orr.w	r3, sl, r1
 8002846:	ea4b 0402 	orr.w	r4, fp, r2
 800284a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800284e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	3301      	adds	r3, #1
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	4413      	add	r3, r2
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	b2d9      	uxtb	r1, r3
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	f04f 0400 	mov.w	r4, #0
 800286a:	4625      	mov	r5, r4
 800286c:	461c      	mov	r4, r3
 800286e:	0213      	lsls	r3, r2, #8
 8002870:	461d      	mov	r5, r3
 8002872:	462b      	mov	r3, r5
 8002874:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8002878:	461d      	mov	r5, r3
 800287a:	020b      	lsls	r3, r1, #8
 800287c:	461c      	mov	r4, r3
 800287e:	4623      	mov	r3, r4
 8002880:	462c      	mov	r4, r5
 8002882:	ea43 030a 	orr.w	r3, r3, sl
 8002886:	ea44 040b 	orr.w	r4, r4, fp
 800288a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800288e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	3302      	adds	r3, #2
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	4413      	add	r3, r2
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	b2d9      	uxtb	r1, r3
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	f04f 0400 	mov.w	r4, #0
 80028aa:	4625      	mov	r5, r4
 80028ac:	461c      	mov	r4, r3
 80028ae:	0413      	lsls	r3, r2, #16
 80028b0:	461d      	mov	r5, r3
 80028b2:	462b      	mov	r3, r5
 80028b4:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80028b8:	461d      	mov	r5, r3
 80028ba:	040b      	lsls	r3, r1, #16
 80028bc:	461c      	mov	r4, r3
 80028be:	4623      	mov	r3, r4
 80028c0:	462c      	mov	r4, r5
 80028c2:	ea43 030a 	orr.w	r3, r3, sl
 80028c6:	ea44 040b 	orr.w	r4, r4, fp
 80028ca:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028ce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80028d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d4:	3303      	adds	r3, #3
 80028d6:	68b8      	ldr	r0, [r7, #8]
 80028d8:	4403      	add	r3, r0
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f04f 0400 	mov.w	r4, #0
 80028e2:	ea4f 2913 	mov.w	r9, r3, lsr #8
 80028e6:	ea4f 6803 	mov.w	r8, r3, lsl #24
 80028ea:	ea41 0308 	orr.w	r3, r1, r8
 80028ee:	ea42 0409 	orr.w	r4, r2, r9
 80028f2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80028f6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fc:	3304      	adds	r3, #4
 80028fe:	68b8      	ldr	r0, [r7, #8]
 8002900:	4403      	add	r3, r0
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	fa5f f883 	uxtb.w	r8, r3
 8002908:	f04f 0900 	mov.w	r9, #0
 800290c:	f04f 0a00 	mov.w	sl, #0
 8002910:	f04f 0b00 	mov.w	fp, #0
 8002914:	46c3      	mov	fp, r8
 8002916:	f04f 0a00 	mov.w	sl, #0
 800291a:	ea4a 0301 	orr.w	r3, sl, r1
 800291e:	ea4b 0402 	orr.w	r4, fp, r2
 8002922:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002926:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292c:	3305      	adds	r3, #5
 800292e:	68b8      	ldr	r0, [r7, #8]
 8002930:	4403      	add	r3, r0
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	fa5f f883 	uxtb.w	r8, r3
 8002938:	f04f 0900 	mov.w	r9, #0
 800293c:	f04f 0a00 	mov.w	sl, #0
 8002940:	f04f 0b00 	mov.w	fp, #0
 8002944:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 8002948:	f04f 0a00 	mov.w	sl, #0
 800294c:	ea4a 0301 	orr.w	r3, sl, r1
 8002950:	ea4b 0402 	orr.w	r4, fp, r2
 8002954:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002958:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	3306      	adds	r3, #6
 8002960:	68b8      	ldr	r0, [r7, #8]
 8002962:	4403      	add	r3, r0
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	fa5f f883 	uxtb.w	r8, r3
 800296a:	f04f 0900 	mov.w	r9, #0
 800296e:	f04f 0a00 	mov.w	sl, #0
 8002972:	f04f 0b00 	mov.w	fp, #0
 8002976:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 800297a:	f04f 0a00 	mov.w	sl, #0
 800297e:	ea4a 0301 	orr.w	r3, sl, r1
 8002982:	ea4b 0402 	orr.w	r4, fp, r2
 8002986:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800298a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002990:	3307      	adds	r3, #7
 8002992:	68b8      	ldr	r0, [r7, #8]
 8002994:	4403      	add	r3, r0
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	fa5f f883 	uxtb.w	r8, r3
 800299c:	f04f 0900 	mov.w	r9, #0
 80029a0:	f04f 0a00 	mov.w	sl, #0
 80029a4:	f04f 0b00 	mov.w	fp, #0
 80029a8:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 80029ac:	f04f 0a00 	mov.w	sl, #0
 80029b0:	ea4a 0301 	orr.w	r3, sl, r1
 80029b4:	ea4b 0402 	orr.w	r4, fp, r2
 80029b8:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->y = u_y.real;
 80029bc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->y);
 80029c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c8:	3308      	adds	r3, #8
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	f04f 0400 	mov.w	r4, #0
 80029d4:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029d8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	68b8      	ldr	r0, [r7, #8]
 80029e0:	4403      	add	r3, r0
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	fa5f f883 	uxtb.w	r8, r3
 80029e8:	f04f 0900 	mov.w	r9, #0
 80029ec:	ea48 0301 	orr.w	r3, r8, r1
 80029f0:	ea49 0402 	orr.w	r4, r9, r2
 80029f4:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029f8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80029fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fe:	3301      	adds	r3, #1
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	4413      	add	r3, r2
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	b2d9      	uxtb	r1, r3
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0a00 	mov.w	sl, #0
 8002a10:	f04f 0b00 	mov.w	fp, #0
 8002a14:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8002a18:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 8002a1c:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8002a20:	ea4a 0308 	orr.w	r3, sl, r8
 8002a24:	ea4b 0409 	orr.w	r4, fp, r9
 8002a28:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a2c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	3302      	adds	r3, #2
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	4413      	add	r3, r2
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	b2d9      	uxtb	r1, r3
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0a00 	mov.w	sl, #0
 8002a44:	f04f 0b00 	mov.w	fp, #0
 8002a48:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8002a4c:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8002a50:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8002a54:	ea4a 0308 	orr.w	r3, sl, r8
 8002a58:	ea4b 0409 	orr.w	r4, fp, r9
 8002a5c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a60:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	3303      	adds	r3, #3
 8002a68:	68b8      	ldr	r0, [r7, #8]
 8002a6a:	4403      	add	r3, r0
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f04f 0400 	mov.w	r4, #0
 8002a74:	0a18      	lsrs	r0, r3, #8
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002a80:	ea43 0301 	orr.w	r3, r3, r1
 8002a84:	ea44 0402 	orr.w	r4, r4, r2
 8002a88:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002a8c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a92:	3304      	adds	r3, #4
 8002a94:	68b8      	ldr	r0, [r7, #8]
 8002a96:	4403      	add	r3, r0
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	b2dd      	uxtb	r5, r3
 8002a9c:	f04f 0600 	mov.w	r6, #0
 8002aa0:	f04f 0800 	mov.w	r8, #0
 8002aa4:	f04f 0900 	mov.w	r9, #0
 8002aa8:	46a9      	mov	r9, r5
 8002aaa:	f04f 0800 	mov.w	r8, #0
 8002aae:	ea48 0301 	orr.w	r3, r8, r1
 8002ab2:	ea49 0402 	orr.w	r4, r9, r2
 8002ab6:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002aba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	3305      	adds	r3, #5
 8002ac2:	68b8      	ldr	r0, [r7, #8]
 8002ac4:	4403      	add	r3, r0
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	b2dd      	uxtb	r5, r3
 8002aca:	f04f 0600 	mov.w	r6, #0
 8002ace:	f04f 0800 	mov.w	r8, #0
 8002ad2:	f04f 0900 	mov.w	r9, #0
 8002ad6:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8002ada:	f04f 0800 	mov.w	r8, #0
 8002ade:	ea48 0301 	orr.w	r3, r8, r1
 8002ae2:	ea49 0402 	orr.w	r4, r9, r2
 8002ae6:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002aea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af0:	3306      	adds	r3, #6
 8002af2:	68b8      	ldr	r0, [r7, #8]
 8002af4:	4403      	add	r3, r0
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	b2dd      	uxtb	r5, r3
 8002afa:	f04f 0600 	mov.w	r6, #0
 8002afe:	f04f 0800 	mov.w	r8, #0
 8002b02:	f04f 0900 	mov.w	r9, #0
 8002b06:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8002b0a:	f04f 0800 	mov.w	r8, #0
 8002b0e:	ea48 0301 	orr.w	r3, r8, r1
 8002b12:	ea49 0402 	orr.w	r4, r9, r2
 8002b16:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002b1a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b20:	3307      	adds	r3, #7
 8002b22:	68b8      	ldr	r0, [r7, #8]
 8002b24:	4403      	add	r3, r0
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	b2dd      	uxtb	r5, r3
 8002b2a:	f04f 0600 	mov.w	r6, #0
 8002b2e:	f04f 0800 	mov.w	r8, #0
 8002b32:	f04f 0900 	mov.w	r9, #0
 8002b36:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8002b3a:	f04f 0800 	mov.w	r8, #0
 8002b3e:	ea48 0301 	orr.w	r3, r8, r1
 8002b42:	ea49 0402 	orr.w	r4, r9, r2
 8002b46:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->z = u_z.real;
 8002b4a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->z);
 8002b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b56:	3308      	adds	r3, #8
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
     return offset;
 8002b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3730      	adds	r7, #48	; 0x30
 8002b60:	46bd      	mov	sp, r7
 8002b62:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002b66:	4770      	bx	lr

08002b68 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	4b02      	ldr	r3, [pc, #8]	; (8002b7c <_ZN13geometry_msgs7Vector37getTypeEv+0x14>)
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	08009ae4 	.word	0x08009ae4

08002b80 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	4b02      	ldr	r3, [pc, #8]	; (8002b94 <_ZN13geometry_msgs7Vector36getMD5Ev+0x14>)
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	08009afc 	.word	0x08009afc

08002b98 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe fafc 	bl	80011a0 <_ZN3ros3MsgC1Ev>
 8002ba8:	4a08      	ldr	r2, [pc, #32]	; (8002bcc <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3308      	adds	r3, #8
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff fba6 	bl	8002304 <_ZN13geometry_msgs7Vector3C1Ev>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3328      	adds	r3, #40	; 0x28
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff fba1 	bl	8002304 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	08009f5c 	.word	0x08009f5c

08002bd0 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f103 0008 	add.w	r0, r3, #8
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	4413      	add	r3, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f7ff fbb2 	bl	8002354 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	4619      	mov	r1, r3
 8002c06:	f7ff fba5 	bl	8002354 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4413      	add	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c12:	68fb      	ldr	r3, [r7, #12]
    }
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f103 0008 	add.w	r0, r3, #8
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	4413      	add	r3, r2
 8002c36:	4619      	mov	r1, r3
 8002c38:	f7ff fd04 	bl	8002644 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4413      	add	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	4413      	add	r3, r2
 8002c50:	4619      	mov	r1, r3
 8002c52:	f7ff fcf7 	bl	8002644 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002c56:	4602      	mov	r2, r0
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
     return offset;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
    }
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	4b02      	ldr	r3, [pc, #8]	; (8002c7c <_ZN13geometry_msgs5Twist7getTypeEv+0x14>)
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	08009b20 	.word	0x08009b20

08002c80 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	4b02      	ldr	r3, [pc, #8]	; (8002c94 <_ZN13geometry_msgs5Twist6getMD5Ev+0x14>)
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	08009b34 	.word	0x08009b34

08002c98 <HAL_UART_TxCpltCallback>:
char hello[] = "Hello world!";
float _roverBase_width =0.1;
float _wheelRadius = 0.001;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a07      	ldr	r2, [pc, #28]	; (8002cc0 <HAL_UART_TxCpltCallback+0x28>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d106      	bne.n	8002cb6 <HAL_UART_TxCpltCallback+0x1e>
	{
  nh.getHardware()->flush();
 8002ca8:	4806      	ldr	r0, [pc, #24]	; (8002cc4 <HAL_UART_TxCpltCallback+0x2c>)
 8002caa:	f000 fac7 	bl	800323c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff f9df 	bl	8002074 <_ZN13STM32Hardware5flushEv>
	}
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20002590 	.word	0x20002590
 8002cc4:	20000170 	.word	0x20000170

08002cc8 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE>:

void cmd_velCallBack(const geometry_msgs::Twist &velInfo)
{
 8002cc8:	b5b0      	push	{r4, r5, r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 float lin_x = velInfo.linear.x;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f103 0410 	add.w	r4, r3, #16
 8002cd6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	4621      	mov	r1, r4
 8002cde:	f7fd fe35 	bl	800094c <__aeabi_d2f>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	61fb      	str	r3, [r7, #28]
 float ang_z = velInfo.angular.z;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8002cec:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	f7fd fe2a 	bl	800094c <__aeabi_d2f>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	61bb      	str	r3, [r7, #24]

 float leftWheelSpeed = lin_x - ((_roverBase_width/2)*ang_z); // linear vel
 8002cfc:	4b4a      	ldr	r3, [pc, #296]	; (8002e28 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x160>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe f833 	bl	8000d70 <__aeabi_fdiv>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	69b9      	ldr	r1, [r7, #24]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd ff7a 	bl	8000c08 <__aeabi_fmul>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4619      	mov	r1, r3
 8002d18:	69f8      	ldr	r0, [r7, #28]
 8002d1a:	f7fd fe6b 	bl	80009f4 <__aeabi_fsub>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	60fb      	str	r3, [r7, #12]
 float rightWheelSpeed = lin_x + ((_roverBase_width/2)*ang_z);// linear vel
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x160>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe f820 	bl	8000d70 <__aeabi_fdiv>
 8002d30:	4603      	mov	r3, r0
 8002d32:	69b9      	ldr	r1, [r7, #24]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd ff67 	bl	8000c08 <__aeabi_fmul>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	69f9      	ldr	r1, [r7, #28]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd fe5a 	bl	80009f8 <__addsf3>
 8002d44:	4603      	mov	r3, r0
 8002d46:	60bb      	str	r3, [r7, #8]

 int leftRpm_reg_val = ((leftWheelSpeed)/(0.10472*_wheelRadius))/0.23;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fb6c 	bl	8000428 <__aeabi_f2d>
 8002d50:	4604      	mov	r4, r0
 8002d52:	460d      	mov	r5, r1
 8002d54:	4b35      	ldr	r3, [pc, #212]	; (8002e2c <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x164>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fd fb65 	bl	8000428 <__aeabi_f2d>
 8002d5e:	a32e      	add	r3, pc, #184	; (adr r3, 8002e18 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x150>)
 8002d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d64:	f7fd fbb8 	bl	80004d8 <__aeabi_dmul>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	4629      	mov	r1, r5
 8002d70:	f7fd fcdc 	bl	800072c <__aeabi_ddiv>
 8002d74:	4603      	mov	r3, r0
 8002d76:	460c      	mov	r4, r1
 8002d78:	4618      	mov	r0, r3
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	a328      	add	r3, pc, #160	; (adr r3, 8002e20 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x158>)
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f7fd fcd3 	bl	800072c <__aeabi_ddiv>
 8002d86:	4603      	mov	r3, r0
 8002d88:	460c      	mov	r4, r1
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	f7fd fdb5 	bl	80008fc <__aeabi_d2iz>
 8002d92:	4603      	mov	r3, r0
 8002d94:	617b      	str	r3, [r7, #20]
 int righttRpm_reg_val = ((rightWheelSpeed)/(0.10472*_wheelRadius))/0.23;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd fb45 	bl	8000428 <__aeabi_f2d>
 8002d9e:	4604      	mov	r4, r0
 8002da0:	460d      	mov	r5, r1
 8002da2:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x164>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd fb3e 	bl	8000428 <__aeabi_f2d>
 8002dac:	a31a      	add	r3, pc, #104	; (adr r3, 8002e18 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x150>)
 8002dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db2:	f7fd fb91 	bl	80004d8 <__aeabi_dmul>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4620      	mov	r0, r4
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	f7fd fcb5 	bl	800072c <__aeabi_ddiv>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	460c      	mov	r4, r1
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	4621      	mov	r1, r4
 8002dca:	a315      	add	r3, pc, #84	; (adr r3, 8002e20 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x158>)
 8002dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd0:	f7fd fcac 	bl	800072c <__aeabi_ddiv>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	460c      	mov	r4, r1
 8002dd8:	4618      	mov	r0, r3
 8002dda:	4621      	mov	r1, r4
 8002ddc:	f7fd fd8e 	bl	80008fc <__aeabi_d2iz>
 8002de0:	4603      	mov	r3, r0
 8002de2:	613b      	str	r3, [r7, #16]

 xl430_writeToAddress(2, leftRpm_reg_val, &GOAL_VELOCITY, &REG_WR);
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x168>)
 8002de6:	4a13      	ldr	r2, [pc, #76]	; (8002e34 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x16c>)
 8002de8:	6979      	ldr	r1, [r7, #20]
 8002dea:	2002      	movs	r0, #2
 8002dec:	f001 fbfe 	bl	80045ec <xl430_writeToAddress>
 osDelay(5);
 8002df0:	2005      	movs	r0, #5
 8002df2:	f004 f8bb 	bl	8006f6c <osDelay>
 xl430_writeToAddress(1, righttRpm_reg_val, &GOAL_VELOCITY, &REG_WR);
 8002df6:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x168>)
 8002df8:	4a0e      	ldr	r2, [pc, #56]	; (8002e34 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x16c>)
 8002dfa:	6939      	ldr	r1, [r7, #16]
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	f001 fbf5 	bl	80045ec <xl430_writeToAddress>
 osDelay(5);
 8002e02:	2005      	movs	r0, #5
 8002e04:	f004 f8b2 	bl	8006f6c <osDelay>
 xl430_Action();
 8002e08:	f001 fc84 	bl	8004714 <xl430_Action>


}
 8002e0c:	bf00      	nop
 8002e0e:	3720      	adds	r7, #32
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bdb0      	pop	{r4, r5, r7, pc}
 8002e14:	f3af 8000 	nop.w
 8002e18:	0f3cb3e5 	.word	0x0f3cb3e5
 8002e1c:	3fbaceee 	.word	0x3fbaceee
 8002e20:	d70a3d71 	.word	0xd70a3d71
 8002e24:	3fcd70a3 	.word	0x3fcd70a3
 8002e28:	20000010 	.word	0x20000010
 8002e2c:	20000014 	.word	0x20000014
 8002e30:	08009f21 	.word	0x08009f21
 8002e34:	08009f24 	.word	0x08009f24

08002e38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002e40:	4805      	ldr	r0, [pc, #20]	; (8002e58 <HAL_UART_RxCpltCallback+0x20>)
 8002e42:	f000 f9fb 	bl	800323c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002e46:	4603      	mov	r3, r0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff f8d2 	bl	8001ff2 <_ZN13STM32Hardware10reset_rbufEv>
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000170 	.word	0x20000170

08002e5c <setup>:

void setup(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af02      	add	r7, sp, #8
	nh.initNode();
 8002e62:	4845      	ldr	r0, [pc, #276]	; (8002f78 <setup+0x11c>)
 8002e64:	f000 f9f5 	bl	8003252 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	while(!nh.connected())
 8002e68:	4843      	ldr	r0, [pc, #268]	; (8002f78 <setup+0x11c>)
 8002e6a:	f000 fa0f 	bl	800328c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f083 0301 	eor.w	r3, r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <setup+0x26>
	 {
	   nh.spinOnce();
 8002e7a:	483f      	ldr	r0, [pc, #252]	; (8002f78 <setup+0x11c>)
 8002e7c:	f000 fa12 	bl	80032a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	while(!nh.connected())
 8002e80:	e7f2      	b.n	8002e68 <setup+0xc>
	 }
	 nh.loginfo("stm32 Connected");
 8002e82:	493e      	ldr	r1, [pc, #248]	; (8002f7c <setup+0x120>)
 8002e84:	483c      	ldr	r0, [pc, #240]	; (8002f78 <setup+0x11c>)
 8002e86:	f000 fbe9 	bl	800365c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>

	 nh.loginfo("pinging ID 02..");
 8002e8a:	493d      	ldr	r1, [pc, #244]	; (8002f80 <setup+0x124>)
 8002e8c:	483a      	ldr	r0, [pc, #232]	; (8002f78 <setup+0x11c>)
 8002e8e:	f000 fbe5 	bl	800365c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
	 while(!xl430_ping(02))
 8002e92:	2002      	movs	r0, #2
 8002e94:	f001 fb6e 	bl	8004574 <xl430_ping>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f083 0301 	eor.w	r3, r3, #1
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d007      	beq.n	8002eb4 <setup+0x58>
	  {
	    nh.loginfo("[ID 02] ping Fails");
 8002ea4:	4937      	ldr	r1, [pc, #220]	; (8002f84 <setup+0x128>)
 8002ea6:	4834      	ldr	r0, [pc, #208]	; (8002f78 <setup+0x11c>)
 8002ea8:	f000 fbd8 	bl	800365c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
	    HAL_Delay(5);
 8002eac:	2005      	movs	r0, #5
 8002eae:	f001 fcc5 	bl	800483c <HAL_Delay>
	 while(!xl430_ping(02))
 8002eb2:	e7ee      	b.n	8002e92 <setup+0x36>
	  }
	 nh.loginfo("[ID 02] ping Success !");
 8002eb4:	4934      	ldr	r1, [pc, #208]	; (8002f88 <setup+0x12c>)
 8002eb6:	4830      	ldr	r0, [pc, #192]	; (8002f78 <setup+0x11c>)
 8002eb8:	f000 fbd0 	bl	800365c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
	   HAL_Delay(5);
 8002ebc:	2005      	movs	r0, #5
 8002ebe:	f001 fcbd 	bl	800483c <HAL_Delay>
	nh.loginfo("pinging ID 01..");
 8002ec2:	4932      	ldr	r1, [pc, #200]	; (8002f8c <setup+0x130>)
 8002ec4:	482c      	ldr	r0, [pc, #176]	; (8002f78 <setup+0x11c>)
 8002ec6:	f000 fbc9 	bl	800365c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
	 while(!xl430_ping(01))
 8002eca:	2001      	movs	r0, #1
 8002ecc:	f001 fb52 	bl	8004574 <xl430_ping>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f083 0301 	eor.w	r3, r3, #1
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <setup+0x90>
	  {
	   nh.loginfo("[ID 01] ping Fails");
 8002edc:	492c      	ldr	r1, [pc, #176]	; (8002f90 <setup+0x134>)
 8002ede:	4826      	ldr	r0, [pc, #152]	; (8002f78 <setup+0x11c>)
 8002ee0:	f000 fbbc 	bl	800365c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
	    HAL_Delay(5);
 8002ee4:	2005      	movs	r0, #5
 8002ee6:	f001 fca9 	bl	800483c <HAL_Delay>
	 while(!xl430_ping(01))
 8002eea:	e7ee      	b.n	8002eca <setup+0x6e>
	  }
	nh.loginfo("[ID 01] ping Success !");
 8002eec:	4929      	ldr	r1, [pc, #164]	; (8002f94 <setup+0x138>)
 8002eee:	4822      	ldr	r0, [pc, #136]	; (8002f78 <setup+0x11c>)
 8002ef0:	f000 fbb4 	bl	800365c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>

	 while(! nh.advertise(chatter))
 8002ef4:	4928      	ldr	r1, [pc, #160]	; (8002f98 <setup+0x13c>)
 8002ef6:	4820      	ldr	r0, [pc, #128]	; (8002f78 <setup+0x11c>)
 8002ef8:	f000 fbbe 	bl	8003678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f083 0301 	eor.w	r3, r3, #1
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <setup+0xb4>
	{
		nh.spinOnce();
 8002f08:	481b      	ldr	r0, [pc, #108]	; (8002f78 <setup+0x11c>)
 8002f0a:	f000 f9cb 	bl	80032a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	 while(! nh.advertise(chatter))
 8002f0e:	e7f1      	b.n	8002ef4 <setup+0x98>
	}

	 nh.subscribe(_sub);
 8002f10:	4922      	ldr	r1, [pc, #136]	; (8002f9c <setup+0x140>)
 8002f12:	4819      	ldr	r0, [pc, #100]	; (8002f78 <setup+0x11c>)
 8002f14:	f000 fbdf 	bl	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
	 nh.negotiateTopics();
 8002f18:	4817      	ldr	r0, [pc, #92]	; (8002f78 <setup+0x11c>)
 8002f1a:	f000 fc06 	bl	800372a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>


	 if(!nh.getParam("base_width", &_roverBase_width))
 8002f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	2301      	movs	r3, #1
 8002f26:	4a1e      	ldr	r2, [pc, #120]	; (8002fa0 <setup+0x144>)
 8002f28:	491e      	ldr	r1, [pc, #120]	; (8002fa4 <setup+0x148>)
 8002f2a:	4813      	ldr	r0, [pc, #76]	; (8002f78 <setup+0x11c>)
 8002f2c:	f000 fcdc 	bl	80038e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f083 0301 	eor.w	r3, r3, #1
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <setup+0xe6>
	 {
		 _roverBase_width=0.2;
 8002f3c:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <setup+0x144>)
 8002f3e:	4a1a      	ldr	r2, [pc, #104]	; (8002fa8 <setup+0x14c>)
 8002f40:	601a      	str	r2, [r3, #0]

	 }
	 if(!nh.getParam("wheel_radius",&_wheelRadius))
 8002f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	2301      	movs	r3, #1
 8002f4a:	4a18      	ldr	r2, [pc, #96]	; (8002fac <setup+0x150>)
 8002f4c:	4918      	ldr	r1, [pc, #96]	; (8002fb0 <setup+0x154>)
 8002f4e:	480a      	ldr	r0, [pc, #40]	; (8002f78 <setup+0x11c>)
 8002f50:	f000 fcca 	bl	80038e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f083 0301 	eor.w	r3, r3, #1
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <setup+0x10a>
	 {
		 _wheelRadius = 0.02;
 8002f60:	4b12      	ldr	r3, [pc, #72]	; (8002fac <setup+0x150>)
 8002f62:	4a14      	ldr	r2, [pc, #80]	; (8002fb4 <setup+0x158>)
 8002f64:	601a      	str	r2, [r3, #0]
	 }




	 xl430_writeToAddress(0xFE, 1, &TORQUE_ENABLE,&WRITE);
 8002f66:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <setup+0x15c>)
 8002f68:	4a14      	ldr	r2, [pc, #80]	; (8002fbc <setup+0x160>)
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	20fe      	movs	r0, #254	; 0xfe
 8002f6e:	f001 fb3d 	bl	80045ec <xl430_writeToAddress>


}
 8002f72:	bf00      	nop
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20000170 	.word	0x20000170
 8002f7c:	08009b58 	.word	0x08009b58
 8002f80:	08009b68 	.word	0x08009b68
 8002f84:	08009b78 	.word	0x08009b78
 8002f88:	08009b8c 	.word	0x08009b8c
 8002f8c:	08009ba4 	.word	0x08009ba4
 8002f90:	08009bb4 	.word	0x08009bb4
 8002f94:	08009bc8 	.word	0x08009bc8
 8002f98:	20000ab4 	.word	0x20000ab4
 8002f9c:	20000ac8 	.word	0x20000ac8
 8002fa0:	20000010 	.word	0x20000010
 8002fa4:	08009be0 	.word	0x08009be0
 8002fa8:	3e4ccccd 	.word	0x3e4ccccd
 8002fac:	20000014 	.word	0x20000014
 8002fb0:	08009bec 	.word	0x08009bec
 8002fb4:	3ca3d70a 	.word	0x3ca3d70a
 8002fb8:	08009f20 	.word	0x08009f20
 8002fbc:	08009f22 	.word	0x08009f22

08002fc0 <StartDefaultTask>:

void StartDefaultTask(void *argument)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	for(;;)
	 {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002fc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fcc:	4811      	ldr	r0, [pc, #68]	; (8003014 <StartDefaultTask+0x54>)
 8002fce:	f002 f947 	bl	8005260 <HAL_GPIO_TogglePin>
	  str_msg.data = hello;
 8002fd2:	4b11      	ldr	r3, [pc, #68]	; (8003018 <StartDefaultTask+0x58>)
 8002fd4:	4a11      	ldr	r2, [pc, #68]	; (800301c <StartDefaultTask+0x5c>)
 8002fd6:	605a      	str	r2, [r3, #4]
	  chatter.publish(&str_msg);
 8002fd8:	490f      	ldr	r1, [pc, #60]	; (8003018 <StartDefaultTask+0x58>)
 8002fda:	4811      	ldr	r0, [pc, #68]	; (8003020 <StartDefaultTask+0x60>)
 8002fdc:	f7fe ffb2 	bl	8001f44 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	  nh.spinOnce();
 8002fe0:	4810      	ldr	r0, [pc, #64]	; (8003024 <StartDefaultTask+0x64>)
 8002fe2:	f000 f95f 	bl	80032a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	  if(!nh.connected())
 8002fe6:	480f      	ldr	r0, [pc, #60]	; (8003024 <StartDefaultTask+0x64>)
 8002fe8:	f000 f950 	bl	800328c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f083 0301 	eor.w	r3, r3, #1
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <StartDefaultTask+0x4a>
	  {
		  osDelay(5);
 8002ff8:	2005      	movs	r0, #5
 8002ffa:	f003 ffb7 	bl	8006f6c <osDelay>
		  xl430_writeToAddress(0xFE, 0, &TORQUE_ENABLE,&WRITE);
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <StartDefaultTask+0x68>)
 8003000:	4a0a      	ldr	r2, [pc, #40]	; (800302c <StartDefaultTask+0x6c>)
 8003002:	2100      	movs	r1, #0
 8003004:	20fe      	movs	r0, #254	; 0xfe
 8003006:	f001 faf1 	bl	80045ec <xl430_writeToAddress>
	  }
	  osDelay(10);
 800300a:	200a      	movs	r0, #10
 800300c:	f003 ffae 	bl	8006f6c <osDelay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8003010:	e7da      	b.n	8002fc8 <StartDefaultTask+0x8>
 8003012:	bf00      	nop
 8003014:	40011000 	.word	0x40011000
 8003018:	20000aac 	.word	0x20000aac
 800301c:	20000000 	.word	0x20000000
 8003020:	20000ab4 	.word	0x20000ab4
 8003024:	20000170 	.word	0x20000170
 8003028:	08009f20 	.word	0x08009f20
 800302c:	08009f22 	.word	0x08009f22

08003030 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b03      	cmp	r3, #3
 8003042:	d80d      	bhi.n	8003060 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	fa22 f103 	lsr.w	r1, r2, r3
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4413      	add	r3, r2
 8003054:	b2ca      	uxtb	r2, r1
 8003056:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	3301      	adds	r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	e7ee      	b.n	800303e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800306a:	b480      	push	{r7}
 800306c:	b085      	sub	sp, #20
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d811      	bhi.n	80030a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6839      	ldr	r1, [r7, #0]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	440a      	add	r2, r1
 800308e:	7812      	ldrb	r2, [r2, #0]
 8003090:	4611      	mov	r1, r2
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	00d2      	lsls	r2, r2, #3
 8003096:	fa01 f202 	lsl.w	r2, r1, r2
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	3301      	adds	r3, #1
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	e7ea      	b.n	800307e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr
	...

080030b4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	08009fbc 	.word	0x08009fbc

080030d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff ffe8 	bl	80030b4 <_ZN3ros15NodeHandleBase_C1Ev>
 80030e4:	4a3a      	ldr	r2, [pc, #232]	; (80031d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3304      	adds	r3, #4
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe ff58 	bl	8001fa4 <_ZN13STM32HardwareC1Ev>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8003102:	4618      	mov	r0, r3
 8003104:	f7fe fc4a 	bl	800199c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2b18      	cmp	r3, #24
 8003110:	d80b      	bhi.n	800312a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	2200      	movs	r2, #0
 8003120:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	3301      	adds	r3, #1
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	e7f0      	b.n	800310c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	2b18      	cmp	r3, #24
 8003132:	d80a      	bhi.n	800314a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	f202 2222 	addw	r2, r2, #546	; 0x222
 800313c:	2100      	movs	r1, #0
 800313e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	3301      	adds	r3, #1
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	e7f1      	b.n	800312e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003154:	d20a      	bcs.n	800316c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3301      	adds	r3, #1
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	e7f0      	b.n	800314e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800316c:	2300      	movs	r3, #0
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003176:	d20a      	bcs.n	800318e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	4413      	add	r3, r2
 800317e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	3301      	adds	r3, #1
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	e7f0      	b.n	8003170 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	08009f48 	.word	0x08009f48

080031d4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	4a04      	ldr	r2, [pc, #16]	; (80031f0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	08009fa4 	.word	0x08009fa4

080031f4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ffe5 	bl	80031d4 <_ZN3ros11Subscriber_C1Ev>
 800320a:	4a0b      	ldr	r2, [pc, #44]	; (8003238 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	3310      	adds	r3, #16
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fcbf 	bl	8002b98 <_ZN13geometry_msgs5TwistC1Ev>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	659a      	str	r2, [r3, #88]	; 0x58
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	609a      	str	r2, [r3, #8]
  };
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	08009f30 	.word	0x08009f30

0800323c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3304      	adds	r3, #4
  }
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr

08003252 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3304      	adds	r3, #4
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe febc 	bl	8001fdc <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003284:	bf00      	nop
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
    return SPIN_OK;
  }


  /* Are we connected to the PC? */
  virtual bool connected()
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  {
    return configured_;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3304      	adds	r3, #4
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe ff83 	bl	80021bc <_ZN13STM32Hardware4timeEv>
 80032b6:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d903      	bls.n	80032d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d009      	beq.n	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d903      	bls.n	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d014      	beq.n	8003324 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe ff5c 	bl	80021bc <_ZN13STM32Hardware4timeEv>
 8003304:	4602      	mov	r2, r0
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1ad2      	subs	r2, r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003310:	429a      	cmp	r2, r3
 8003312:	bf8c      	ite	hi
 8003314:	2301      	movhi	r3, #1
 8003316:	2300      	movls	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800331e:	f06f 0301 	mvn.w	r3, #1
 8003322:	e197      	b.n	8003654 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3304      	adds	r3, #4
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe fe75 	bl	8002018 <_ZN13STM32Hardware4readEv>
 800332e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	f2c0 8177 	blt.w	8003626 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	441a      	add	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800334e:	2b07      	cmp	r3, #7
 8003350:	d11e      	bne.n	8003390 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003358:	1c59      	adds	r1, r3, #1
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	b2d1      	uxtb	r1, r2
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4413      	add	r3, r2
 8003368:	460a      	mov	r2, r1
 800336a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003374:	1e5a      	subs	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1b4      	bne.n	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2208      	movs	r2, #8
 800338a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800338e:	e7af      	b.n	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003396:	2b00      	cmp	r3, #0
 8003398:	d128      	bne.n	80033ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2bff      	cmp	r3, #255	; 0xff
 800339e:	d10d      	bne.n	80033bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f103 0214 	add.w	r2, r3, #20
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80033ba:	e799      	b.n	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3304      	adds	r3, #4
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe fefb 	bl	80021bc <_ZN13STM32Hardware4timeEv>
 80033c6:	4602      	mov	r2, r0
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	bf8c      	ite	hi
 80033d4:	2301      	movhi	r3, #1
 80033d6:	2300      	movls	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d088      	beq.n	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80033e6:	f06f 0301 	mvn.w	r3, #1
 80033ea:	e133      	b.n	8003654 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d11b      	bne.n	800342e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2bfe      	cmp	r3, #254	; 0xfe
 80033fa:	d107      	bne.n	800340c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800340a:	e771      	b.n	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800341a:	f083 0301 	eor.w	r3, r3, #1
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	f43f af65 	beq.w	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fa96 	bl	8003958 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800342c:	e760      	b.n	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003434:	2b02      	cmp	r3, #2
 8003436:	d113      	bne.n	8003460 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800345e:	e747      	b.n	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003466:	2b03      	cmp	r3, #3
 8003468:	d110      	bne.n	800348c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	441a      	add	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800348a:	e731      	b.n	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003492:	2b04      	cmp	r3, #4
 8003494:	d116      	bne.n	80034c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800349c:	425a      	negs	r2, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	bf58      	it	pl
 80034a4:	4253      	negpl	r3, r2
 80034a6:	2bff      	cmp	r3, #255	; 0xff
 80034a8:	d107      	bne.n	80034ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80034b8:	e71a      	b.n	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80034c2:	e715      	b.n	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034ca:	2b05      	cmp	r3, #5
 80034cc:	d10f      	bne.n	80034ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80034ec:	e700      	b.n	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034f4:	2b06      	cmp	r3, #6
 80034f6:	d117      	bne.n	8003528 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	441a      	add	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2207      	movs	r2, #7
 800350e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003518:	2b00      	cmp	r3, #0
 800351a:	f47f aee9 	bne.w	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2208      	movs	r2, #8
 8003522:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003526:	e6e3      	b.n	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800352e:	2b08      	cmp	r3, #8
 8003530:	f47f aede 	bne.w	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003542:	425a      	negs	r2, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	bf58      	it	pl
 800354a:	4253      	negpl	r3, r2
 800354c:	2bff      	cmp	r3, #255	; 0xff
 800354e:	f47f aecf 	bne.w	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d110      	bne.n	800357e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f9fb 	bl	8003958 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f8e1 	bl	800372a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003578:	f04f 33ff 	mov.w	r3, #4294967295
 800357c:	e06a      	b.n	8003654 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003584:	2b0a      	cmp	r3, #10
 8003586:	d107      	bne.n	8003598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800358e:	4619      	mov	r1, r3
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f9ff 	bl	8003994 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003596:	e6ab      	b.n	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d10e      	bne.n	80035c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80035ae:	4619      	mov	r1, r3
 80035b0:	4610      	mov	r0, r2
 80035b2:	f7fe fb28 	bl	8001c06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80035be:	e697      	b.n	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80035c6:	2b0b      	cmp	r3, #11
 80035c8:	d104      	bne.n	80035d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80035d2:	e68d      	b.n	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80035da:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80035e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f43f ae81 	beq.w	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80035f4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f202 2222 	addw	r2, r2, #546	; 0x222
 80035fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003608:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003620:	4611      	mov	r1, r2
 8003622:	4798      	blx	r3
    while (true)
 8003624:	e664      	b.n	80032f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003626:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00f      	beq.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003640:	4293      	cmp	r3, r2
 8003642:	d906      	bls.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f987 	bl	8003958 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003652:	2300      	movs	r3, #0
  }
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>:
public:
  void logdebug(const char* msg)
  {
    log(rosserial_msgs::Log::ROSDEBUG, msg);
  }
  void loginfo(const char * msg)
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::INFO, msg);
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	2101      	movs	r1, #1
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f9de 	bl	8003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003670:	bf00      	nop
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b18      	cmp	r3, #24
 800368a:	dc1e      	bgt.n	80036ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d111      	bne.n	80036c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	60da      	str	r2, [r3, #12]
        return true;
 80036be:	2301      	movs	r3, #1
 80036c0:	e004      	b.n	80036cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3301      	adds	r3, #1
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	e7dd      	b.n	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80036ca:	2300      	movs	r3, #0
  }
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2b18      	cmp	r3, #24
 80036e8:	dc19      	bgt.n	800371e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	f202 2222 	addw	r2, r2, #546	; 0x222
 80036f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10d      	bne.n	8003716 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80036fa:	6839      	ldr	r1, [r7, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	605a      	str	r2, [r3, #4]
        return true;
 8003712:	2301      	movs	r3, #1
 8003714:	e004      	b.n	8003720 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	3301      	adds	r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	e7e2      	b.n	80036e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
    return false;
 800371e:	2300      	movs	r3, #0
  }
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr

0800372a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 800372a:	b590      	push	{r4, r7, lr}
 800372c:	b08b      	sub	sp, #44	; 0x2c
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 8003732:	f107 030c 	add.w	r3, r7, #12
 8003736:	4618      	mov	r0, r3
 8003738:	f7fd fe2c 	bl	8001394 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800373c:	2300      	movs	r3, #0
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	2b18      	cmp	r3, #24
 8003744:	dc63      	bgt.n	800380e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
      if (publishers[i] != 0) // non-empty slot
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d056      	beq.n	8003806 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
        ti.topic_id = publishers[i]->id_;
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	b29b      	uxth	r3, r3
 800376a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	6859      	ldr	r1, [r3, #4]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3308      	adds	r3, #8
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4608      	mov	r0, r1
 80037a6:	4798      	blx	r3
 80037a8:	4603      	mov	r3, r0
 80037aa:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	330c      	adds	r3, #12
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4608      	mov	r0, r1
 80037d4:	4798      	blx	r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80037da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037de:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681c      	ldr	r4, [r3, #0]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fe fbb9 	bl	8001f6c <_ZN3ros9Publisher15getEndpointTypeEv>
 80037fa:	4601      	mov	r1, r0
 80037fc:	f107 030c 	add.w	r3, r7, #12
 8003800:	461a      	mov	r2, r3
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	3301      	adds	r3, #1
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
 800380c:	e798      	b.n	8003740 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800380e:	2300      	movs	r3, #0
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	2b18      	cmp	r3, #24
 8003816:	dc5f      	bgt.n	80038d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
      if (subscribers[i] != 0) // non-empty slot
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d053      	beq.n	80038d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
        ti.topic_id = subscribers[i]->id_;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	b29b      	uxth	r3, r3
 8003838:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003852:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800385e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3308      	adds	r3, #8
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4608      	mov	r0, r1
 800386a:	4798      	blx	r3
 800386c:	4603      	mov	r3, r0
 800386e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003874:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003878:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003880:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	330c      	adds	r3, #12
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4608      	mov	r0, r1
 8003890:	4798      	blx	r3
 8003892:	4603      	mov	r3, r0
 8003894:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800389a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681c      	ldr	r4, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80038aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80038b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3304      	adds	r3, #4
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4608      	mov	r0, r1
 80038c2:	4798      	blx	r3
 80038c4:	4601      	mov	r1, r0
 80038c6:	f107 030c 	add.w	r3, r7, #12
 80038ca:	461a      	mov	r2, r3
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	3301      	adds	r3, #1
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
 80038d6:	e79c      	b.n	8003812 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
    configured_ = true;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80038e0:	bf00      	nop
 80038e2:	372c      	adds	r7, #44	; 0x2c
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd90      	pop	{r4, r7, pc}

080038e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii>:
        logwarn("Failed to get param: length mismatch");
      }
    }
    return false;
  }
  bool getParam(const char* name, float* param, int length = 1, int timeout = 1000)
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
  {
    if (requestParam(name, timeout))
 80038f6:	6a3a      	ldr	r2, [r7, #32]
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f944 	bl	8003b88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d021      	beq.n	800394a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii+0x62>
    {
      if (length == req_param_resp.floats_length)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f8d3 2924 	ldr.w	r2, [r3, #2340]	; 0x924
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d117      	bne.n	8003942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii+0x5a>
      {
        //copy it over
        for (int i = 0; i < length; i++)
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	da0f      	bge.n	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii+0x56>
          param[i] = req_param_resp.floats[i];
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f8d3 292c 	ldr.w	r2, [r3, #2348]	; 0x92c
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	441a      	add	r2, r3
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	440b      	add	r3, r1
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < length; i++)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	3301      	adds	r3, #1
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	e7eb      	b.n	8003916 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii+0x2e>
        return true;
 800393e:	2301      	movs	r3, #1
 8003940:	e004      	b.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii+0x64>
      }
      else
      {
        logwarn("Failed to get param: length mismatch");
 8003942:	4904      	ldr	r1, [pc, #16]	; (8003954 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii+0x6c>)
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f967 	bl	8003c18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7logwarnEPKc>
      }
    }
    return false;
 800394a:	2300      	movs	r3, #0
  }
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	08009bfc 	.word	0x08009bfc

08003958 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003960:	f107 030c 	add.w	r3, r7, #12
 8003964:	4618      	mov	r0, r3
 8003966:	f7fd fc2b 	bl	80011c0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f107 020c 	add.w	r2, r7, #12
 8003974:	210a      	movs	r1, #10
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	4798      	blx	r3
    rt_time = hardware_.time();
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3304      	adds	r3, #4
 800397e:	4618      	mov	r0, r3
 8003980:	f7fe fc1c 	bl	80021bc <_ZN13STM32Hardware4timeEv>
 8003984:	4602      	mov	r2, r0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800398c:	bf00      	nop
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800399e:	f107 0308 	add.w	r3, r7, #8
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fd fc0c 	bl	80011c0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fe fc05 	bl	80021bc <_ZN13STM32Hardware4timeEv>
 80039b2:	4602      	mov	r2, r0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80039be:	f107 0308 	add.w	r3, r7, #8
 80039c2:	6839      	ldr	r1, [r7, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fd fc6a 	bl	800129e <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	4915      	ldr	r1, [pc, #84]	; (8003a24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80039d0:	fba1 1303 	umull	r1, r3, r1, r3
 80039d4:	099b      	lsrs	r3, r3, #6
 80039d6:	4413      	add	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80039da:	6939      	ldr	r1, [r7, #16]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80039e0:	fba3 0302 	umull	r0, r3, r3, r2
 80039e4:	099b      	lsrs	r3, r3, #6
 80039e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039ea:	fb00 f303 	mul.w	r3, r0, r3
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	4a0d      	ldr	r2, [pc, #52]	; (8003a28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80039f2:	fb02 f303 	mul.w	r3, r2, r3
 80039f6:	440b      	add	r3, r1
 80039f8:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80039fa:	f107 0308 	add.w	r3, r7, #8
 80039fe:	3304      	adds	r3, #4
 8003a00:	4619      	mov	r1, r3
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f916 	bl	8003c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fe fbd5 	bl	80021bc <_ZN13STM32Hardware4timeEv>
 8003a12:	4602      	mov	r2, r0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003a1a:	bf00      	nop
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	10624dd3 	.word	0x10624dd3
 8003a28:	000f4240 	.word	0x000f4240

08003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	460b      	mov	r3, r1
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003a3a:	f107 0314 	add.w	r3, r7, #20
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fd fe68 	bl	8001714 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003a44:	7afb      	ldrb	r3, [r7, #11]
 8003a46:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f107 0214 	add.w	r2, r7, #20
 8003a56:	2107      	movs	r1, #7
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	4798      	blx	r3
  }
 8003a5c:	bf00      	nop
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg)
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b63      	cmp	r3, #99	; 0x63
 8003a74:	dd09      	ble.n	8003a8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003a7c:	f083 0301 	eor.w	r3, r3, #1
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e077      	b.n	8003b7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    int l = msg->serialize(message_out + 7);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003a96:	3207      	adds	r2, #7
 8003a98:	4611      	mov	r1, r2
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	4798      	blx	r3
 8003a9e:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	22ff      	movs	r2, #255	; 0xff
 8003aa4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	22fe      	movs	r2, #254	; 0xfe
 8003aac:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	121b      	asrs	r3, r3, #8
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003ad4:	4413      	add	r3, r2
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	b21b      	sxth	r3, r3
 8003af0:	121b      	asrs	r3, r3, #8
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
    int chk = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003afe:	2305      	movs	r3, #5
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	3307      	adds	r3, #7
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	da0d      	bge.n	8003b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	4413      	add	r3, r2
 8003b12:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	3301      	adds	r3, #1
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	e7ec      	b.n	8003b02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	3307      	adds	r3, #7
 8003b2c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	425a      	negs	r2, r3
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	bf58      	it	pl
 8003b38:	4253      	negpl	r3, r2
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	1c59      	adds	r1, r3, #1
 8003b40:	6179      	str	r1, [r7, #20]
 8003b42:	43d2      	mvns	r2, r2
 8003b44:	b2d1      	uxtb	r1, r2
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4413      	add	r3, r2
 8003b4a:	460a      	mov	r2, r1
 8003b4c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    if (l <= OUTPUT_SIZE)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b56:	dc0a      	bgt.n	8003b6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
      hardware_.write(message_out, l);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	1d18      	adds	r0, r3, #4
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4619      	mov	r1, r3
 8003b66:	f7fe fae3 	bl	8002130 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	e005      	b.n	8003b7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
      logerror("Message from device dropped: message larger than buffer.");
 8003b6e:	4905      	ldr	r1, [pc, #20]	; (8003b84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f89f 	bl	8003cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003b76:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	08009c24 	.word	0x08009c24

08003b88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci>:
  bool requestParam(const char * name, int time_out =  1000)
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
    param_recieved = false;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
    rosserial_msgs::RequestParamRequest req;
 8003b9c:	f107 0314 	add.w	r3, r7, #20
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fd fe63 	bl	800186c <_ZN14rosserial_msgs19RequestParamRequestC1Ev>
    req.name  = (char*)name;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	61bb      	str	r3, [r7, #24]
    publish(TopicInfo::ID_PARAMETER_REQUEST, &req);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f107 0214 	add.w	r2, r7, #20
 8003bb4:	2106      	movs	r1, #6
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	4798      	blx	r3
    uint32_t end_time = hardware_.time() + time_out;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fe fafc 	bl	80021bc <_ZN13STM32Hardware4timeEv>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4413      	add	r3, r2
 8003bca:	61fb      	str	r3, [r7, #28]
    while (!param_recieved)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d119      	bne.n	8003c0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci+0x82>
      spinOnce();
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	4798      	blx	r3
      if (hardware_.time() > end_time)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3304      	adds	r3, #4
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe fae8 	bl	80021bc <_ZN13STM32Hardware4timeEv>
 8003bec:	4602      	mov	r2, r0
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	bf34      	ite	cc
 8003bf4:	2301      	movcc	r3, #1
 8003bf6:	2300      	movcs	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0e6      	beq.n	8003bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci+0x44>
        logwarn("Failed to get param: timeout expired");
 8003bfe:	4905      	ldr	r1, [pc, #20]	; (8003c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci+0x8c>)
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f809 	bl	8003c18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7logwarnEPKc>
        return false;
 8003c06:	2300      	movs	r3, #0
 8003c08:	e000      	b.n	8003c0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci+0x84>
    return true;
 8003c0a:	2301      	movs	r3, #1
  }
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3720      	adds	r7, #32
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	08009c60 	.word	0x08009c60

08003c18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7logwarnEPKc>:
  void logwarn(const char *msg)
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
    log(rosserial_msgs::Log::WARN, msg);
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	2102      	movs	r1, #2
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff ff00 	bl	8003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003c2c:	bf00      	nop
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3304      	adds	r3, #4
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fe faba 	bl	80021bc <_ZN13STM32Hardware4timeEv>
 8003c48:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4915      	ldr	r1, [pc, #84]	; (8003ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003c52:	fba1 1303 	umull	r1, r3, r1, r3
 8003c56:	099b      	lsrs	r3, r3, #6
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	1e5a      	subs	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	6859      	ldr	r1, [r3, #4]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003c6a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c6e:	099b      	lsrs	r3, r3, #6
 8003c70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c74:	fb00 f303 	mul.w	r3, r0, r3
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	4a0c      	ldr	r2, [pc, #48]	; (8003cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003c7c:	fb02 f303 	mul.w	r3, r2, r3
 8003c80:	1aca      	subs	r2, r1, r3
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003c84:	4413      	add	r3, r2
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	f000 fb50 	bl	8004340 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003ca0:	bf00      	nop
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	10624dd3 	.word	0x10624dd3
 8003cac:	000f4240 	.word	0x000f4240
 8003cb0:	3b9aca00 	.word	0x3b9aca00

08003cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  void logerror(const char*msg)
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
    log(rosserial_msgs::Log::ERROR, msg);
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	2103      	movs	r1, #3
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff feb2 	bl	8003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003cc8:	bf00      	nop
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <_Z41__static_initialization_and_destruction_0ii>:
{

	 xl430_writeToAddress(0xFE, 1, &TORQUE_ENABLE,&WRITE);


}
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d116      	bne.n	8003d0e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d111      	bne.n	8003d0e <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8003cea:	480b      	ldr	r0, [pc, #44]	; (8003d18 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003cec:	f7ff f9f2 	bl	80030d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8003cf0:	480a      	ldr	r0, [pc, #40]	; (8003d1c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003cf2:	f7fe fa6f 	bl	80021d4 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	4a08      	ldr	r2, [pc, #32]	; (8003d1c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003cfa:	4909      	ldr	r1, [pc, #36]	; (8003d20 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003cfc:	4809      	ldr	r0, [pc, #36]	; (8003d24 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003cfe:	f7fe f90b 	bl	8001f18 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> _sub("/cmd_vel", &cmd_velCallBack);
 8003d02:	2301      	movs	r3, #1
 8003d04:	4a08      	ldr	r2, [pc, #32]	; (8003d28 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003d06:	4909      	ldr	r1, [pc, #36]	; (8003d2c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003d08:	4809      	ldr	r0, [pc, #36]	; (8003d30 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003d0a:	f7ff fa73 	bl	80031f4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000170 	.word	0x20000170
 8003d1c:	20000aac 	.word	0x20000aac
 8003d20:	08009c88 	.word	0x08009c88
 8003d24:	20000ab4 	.word	0x20000ab4
 8003d28:	08002cc9 	.word	0x08002cc9
 8003d2c:	08009c90 	.word	0x08009c90
 8003d30:	20000ac8 	.word	0x20000ac8

08003d34 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3310      	adds	r3, #16
 8003d42:	6839      	ldr	r1, [r7, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fe ff69 	bl	8002c1c <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	3210      	adds	r2, #16
 8003d52:	4610      	mov	r0, r2
 8003d54:	4798      	blx	r3
  }
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3310      	adds	r3, #16
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fe ff71 	bl	8002c68 <_ZN13geometry_msgs5Twist7getTypeEv>
 8003d86:	4603      	mov	r3, r0
  }
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3310      	adds	r3, #16
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fe ff6f 	bl	8002c80 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003da2:	4603      	mov	r3, r0
  }
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <_GLOBAL__sub_I__huart>:
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003db4:	2001      	movs	r0, #1
 8003db6:	f7ff ff8b 	bl	8003cd0 <_Z41__static_initialization_and_destruction_0ii>
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003dc2:	4b18      	ldr	r3, [pc, #96]	; (8003e24 <HAL_MspInit+0x68>)
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	4a17      	ldr	r2, [pc, #92]	; (8003e24 <HAL_MspInit+0x68>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6193      	str	r3, [r2, #24]
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <HAL_MspInit+0x68>)
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dda:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_MspInit+0x68>)
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	4a11      	ldr	r2, [pc, #68]	; (8003e24 <HAL_MspInit+0x68>)
 8003de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de4:	61d3      	str	r3, [r2, #28]
 8003de6:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <HAL_MspInit+0x68>)
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dee:	607b      	str	r3, [r7, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003df2:	2200      	movs	r2, #0
 8003df4:	210f      	movs	r1, #15
 8003df6:	f06f 0001 	mvn.w	r0, #1
 8003dfa:	f000 fdf6 	bl	80049ea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <HAL_MspInit+0x6c>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <HAL_MspInit+0x6c>)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000
 8003e28:	40010000 	.word	0x40010000

08003e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	; 0x28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e34:	f107 0318 	add.w	r3, r7, #24
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a88      	ldr	r2, [pc, #544]	; (8004068 <HAL_UART_MspInit+0x23c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	f040 8089 	bne.w	8003f60 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e4e:	4b87      	ldr	r3, [pc, #540]	; (800406c <HAL_UART_MspInit+0x240>)
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	4a86      	ldr	r2, [pc, #536]	; (800406c <HAL_UART_MspInit+0x240>)
 8003e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e58:	6193      	str	r3, [r2, #24]
 8003e5a:	4b84      	ldr	r3, [pc, #528]	; (800406c <HAL_UART_MspInit+0x240>)
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e66:	4b81      	ldr	r3, [pc, #516]	; (800406c <HAL_UART_MspInit+0x240>)
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	4a80      	ldr	r2, [pc, #512]	; (800406c <HAL_UART_MspInit+0x240>)
 8003e6c:	f043 0304 	orr.w	r3, r3, #4
 8003e70:	6193      	str	r3, [r2, #24]
 8003e72:	4b7e      	ldr	r3, [pc, #504]	; (800406c <HAL_UART_MspInit+0x240>)
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e84:	2302      	movs	r3, #2
 8003e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e8c:	f107 0318 	add.w	r3, r7, #24
 8003e90:	4619      	mov	r1, r3
 8003e92:	4877      	ldr	r0, [pc, #476]	; (8004070 <HAL_UART_MspInit+0x244>)
 8003e94:	f001 f872 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ea6:	f107 0318 	add.w	r3, r7, #24
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4870      	ldr	r0, [pc, #448]	; (8004070 <HAL_UART_MspInit+0x244>)
 8003eae:	f001 f865 	bl	8004f7c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003eb2:	4b70      	ldr	r3, [pc, #448]	; (8004074 <HAL_UART_MspInit+0x248>)
 8003eb4:	4a70      	ldr	r2, [pc, #448]	; (8004078 <HAL_UART_MspInit+0x24c>)
 8003eb6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003eb8:	4b6e      	ldr	r3, [pc, #440]	; (8004074 <HAL_UART_MspInit+0x248>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ebe:	4b6d      	ldr	r3, [pc, #436]	; (8004074 <HAL_UART_MspInit+0x248>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ec4:	4b6b      	ldr	r3, [pc, #428]	; (8004074 <HAL_UART_MspInit+0x248>)
 8003ec6:	2280      	movs	r2, #128	; 0x80
 8003ec8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003eca:	4b6a      	ldr	r3, [pc, #424]	; (8004074 <HAL_UART_MspInit+0x248>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ed0:	4b68      	ldr	r3, [pc, #416]	; (8004074 <HAL_UART_MspInit+0x248>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003ed6:	4b67      	ldr	r3, [pc, #412]	; (8004074 <HAL_UART_MspInit+0x248>)
 8003ed8:	2220      	movs	r2, #32
 8003eda:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003edc:	4b65      	ldr	r3, [pc, #404]	; (8004074 <HAL_UART_MspInit+0x248>)
 8003ede:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ee2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003ee4:	4863      	ldr	r0, [pc, #396]	; (8004074 <HAL_UART_MspInit+0x248>)
 8003ee6:	f000 fdab 	bl	8004a40 <HAL_DMA_Init>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8003ef0:	f7fd f942 	bl	8001178 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a5f      	ldr	r2, [pc, #380]	; (8004074 <HAL_UART_MspInit+0x248>)
 8003ef8:	635a      	str	r2, [r3, #52]	; 0x34
 8003efa:	4a5e      	ldr	r2, [pc, #376]	; (8004074 <HAL_UART_MspInit+0x248>)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003f00:	4b5e      	ldr	r3, [pc, #376]	; (800407c <HAL_UART_MspInit+0x250>)
 8003f02:	4a5f      	ldr	r2, [pc, #380]	; (8004080 <HAL_UART_MspInit+0x254>)
 8003f04:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f06:	4b5d      	ldr	r3, [pc, #372]	; (800407c <HAL_UART_MspInit+0x250>)
 8003f08:	2210      	movs	r2, #16
 8003f0a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f0c:	4b5b      	ldr	r3, [pc, #364]	; (800407c <HAL_UART_MspInit+0x250>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f12:	4b5a      	ldr	r3, [pc, #360]	; (800407c <HAL_UART_MspInit+0x250>)
 8003f14:	2280      	movs	r2, #128	; 0x80
 8003f16:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f18:	4b58      	ldr	r3, [pc, #352]	; (800407c <HAL_UART_MspInit+0x250>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f1e:	4b57      	ldr	r3, [pc, #348]	; (800407c <HAL_UART_MspInit+0x250>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003f24:	4b55      	ldr	r3, [pc, #340]	; (800407c <HAL_UART_MspInit+0x250>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003f2a:	4b54      	ldr	r3, [pc, #336]	; (800407c <HAL_UART_MspInit+0x250>)
 8003f2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f30:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003f32:	4852      	ldr	r0, [pc, #328]	; (800407c <HAL_UART_MspInit+0x250>)
 8003f34:	f000 fd84 	bl	8004a40 <HAL_DMA_Init>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8003f3e:	f7fd f91b 	bl	8001178 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a4d      	ldr	r2, [pc, #308]	; (800407c <HAL_UART_MspInit+0x250>)
 8003f46:	631a      	str	r2, [r3, #48]	; 0x30
 8003f48:	4a4c      	ldr	r2, [pc, #304]	; (800407c <HAL_UART_MspInit+0x250>)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2105      	movs	r1, #5
 8003f52:	2025      	movs	r0, #37	; 0x25
 8003f54:	f000 fd49 	bl	80049ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003f58:	2025      	movs	r0, #37	; 0x25
 8003f5a:	f000 fd62 	bl	8004a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003f5e:	e07f      	b.n	8004060 <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART3)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a47      	ldr	r2, [pc, #284]	; (8004084 <HAL_UART_MspInit+0x258>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d17a      	bne.n	8004060 <HAL_UART_MspInit+0x234>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f6a:	4b40      	ldr	r3, [pc, #256]	; (800406c <HAL_UART_MspInit+0x240>)
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	4a3f      	ldr	r2, [pc, #252]	; (800406c <HAL_UART_MspInit+0x240>)
 8003f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f74:	61d3      	str	r3, [r2, #28]
 8003f76:	4b3d      	ldr	r3, [pc, #244]	; (800406c <HAL_UART_MspInit+0x240>)
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f82:	4b3a      	ldr	r3, [pc, #232]	; (800406c <HAL_UART_MspInit+0x240>)
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	4a39      	ldr	r2, [pc, #228]	; (800406c <HAL_UART_MspInit+0x240>)
 8003f88:	f043 0308 	orr.w	r3, r3, #8
 8003f8c:	6193      	str	r3, [r2, #24]
 8003f8e:	4b37      	ldr	r3, [pc, #220]	; (800406c <HAL_UART_MspInit+0x240>)
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fa0:	2312      	movs	r3, #18
 8003fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa8:	f107 0318 	add.w	r3, r7, #24
 8003fac:	4619      	mov	r1, r3
 8003fae:	4836      	ldr	r0, [pc, #216]	; (8004088 <HAL_UART_MspInit+0x25c>)
 8003fb0:	f000 ffe4 	bl	8004f7c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003fb4:	4b35      	ldr	r3, [pc, #212]	; (800408c <HAL_UART_MspInit+0x260>)
 8003fb6:	4a36      	ldr	r2, [pc, #216]	; (8004090 <HAL_UART_MspInit+0x264>)
 8003fb8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fba:	4b34      	ldr	r3, [pc, #208]	; (800408c <HAL_UART_MspInit+0x260>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fc0:	4b32      	ldr	r3, [pc, #200]	; (800408c <HAL_UART_MspInit+0x260>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fc6:	4b31      	ldr	r3, [pc, #196]	; (800408c <HAL_UART_MspInit+0x260>)
 8003fc8:	2280      	movs	r2, #128	; 0x80
 8003fca:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fcc:	4b2f      	ldr	r3, [pc, #188]	; (800408c <HAL_UART_MspInit+0x260>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fd2:	4b2e      	ldr	r3, [pc, #184]	; (800408c <HAL_UART_MspInit+0x260>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003fd8:	4b2c      	ldr	r3, [pc, #176]	; (800408c <HAL_UART_MspInit+0x260>)
 8003fda:	2220      	movs	r2, #32
 8003fdc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003fde:	4b2b      	ldr	r3, [pc, #172]	; (800408c <HAL_UART_MspInit+0x260>)
 8003fe0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fe4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003fe6:	4829      	ldr	r0, [pc, #164]	; (800408c <HAL_UART_MspInit+0x260>)
 8003fe8:	f000 fd2a 	bl	8004a40 <HAL_DMA_Init>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8003ff2:	f7fd f8c1 	bl	8001178 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a24      	ldr	r2, [pc, #144]	; (800408c <HAL_UART_MspInit+0x260>)
 8003ffa:	635a      	str	r2, [r3, #52]	; 0x34
 8003ffc:	4a23      	ldr	r2, [pc, #140]	; (800408c <HAL_UART_MspInit+0x260>)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8004002:	4b24      	ldr	r3, [pc, #144]	; (8004094 <HAL_UART_MspInit+0x268>)
 8004004:	4a24      	ldr	r2, [pc, #144]	; (8004098 <HAL_UART_MspInit+0x26c>)
 8004006:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004008:	4b22      	ldr	r3, [pc, #136]	; (8004094 <HAL_UART_MspInit+0x268>)
 800400a:	2210      	movs	r2, #16
 800400c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800400e:	4b21      	ldr	r3, [pc, #132]	; (8004094 <HAL_UART_MspInit+0x268>)
 8004010:	2200      	movs	r2, #0
 8004012:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004014:	4b1f      	ldr	r3, [pc, #124]	; (8004094 <HAL_UART_MspInit+0x268>)
 8004016:	2280      	movs	r2, #128	; 0x80
 8004018:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800401a:	4b1e      	ldr	r3, [pc, #120]	; (8004094 <HAL_UART_MspInit+0x268>)
 800401c:	2200      	movs	r2, #0
 800401e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004020:	4b1c      	ldr	r3, [pc, #112]	; (8004094 <HAL_UART_MspInit+0x268>)
 8004022:	2200      	movs	r2, #0
 8004024:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004026:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <HAL_UART_MspInit+0x268>)
 8004028:	2200      	movs	r2, #0
 800402a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800402c:	4b19      	ldr	r3, [pc, #100]	; (8004094 <HAL_UART_MspInit+0x268>)
 800402e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004032:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004034:	4817      	ldr	r0, [pc, #92]	; (8004094 <HAL_UART_MspInit+0x268>)
 8004036:	f000 fd03 	bl	8004a40 <HAL_DMA_Init>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8004040:	f7fd f89a 	bl	8001178 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a13      	ldr	r2, [pc, #76]	; (8004094 <HAL_UART_MspInit+0x268>)
 8004048:	631a      	str	r2, [r3, #48]	; 0x30
 800404a:	4a12      	ldr	r2, [pc, #72]	; (8004094 <HAL_UART_MspInit+0x268>)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004050:	2200      	movs	r2, #0
 8004052:	2105      	movs	r1, #5
 8004054:	2027      	movs	r0, #39	; 0x27
 8004056:	f000 fcc8 	bl	80049ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800405a:	2027      	movs	r0, #39	; 0x27
 800405c:	f000 fce1 	bl	8004a22 <HAL_NVIC_EnableIRQ>
}
 8004060:	bf00      	nop
 8004062:	3728      	adds	r7, #40	; 0x28
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40013800 	.word	0x40013800
 800406c:	40021000 	.word	0x40021000
 8004070:	40010800 	.word	0x40010800
 8004074:	2000254c 	.word	0x2000254c
 8004078:	40020058 	.word	0x40020058
 800407c:	20002508 	.word	0x20002508
 8004080:	40020044 	.word	0x40020044
 8004084:	40004800 	.word	0x40004800
 8004088:	40010c00 	.word	0x40010c00
 800408c:	20002440 	.word	0x20002440
 8004090:	40020030 	.word	0x40020030
 8004094:	200024c4 	.word	0x200024c4
 8004098:	4002001c 	.word	0x4002001c

0800409c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08c      	sub	sp, #48	; 0x30
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80040ac:	2200      	movs	r2, #0
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	2019      	movs	r0, #25
 80040b2:	f000 fc9a 	bl	80049ea <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80040b6:	2019      	movs	r0, #25
 80040b8:	f000 fcb3 	bl	8004a22 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80040bc:	4b1e      	ldr	r3, [pc, #120]	; (8004138 <HAL_InitTick+0x9c>)
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	4a1d      	ldr	r2, [pc, #116]	; (8004138 <HAL_InitTick+0x9c>)
 80040c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040c6:	6193      	str	r3, [r2, #24]
 80040c8:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <HAL_InitTick+0x9c>)
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80040d4:	f107 0210 	add.w	r2, r7, #16
 80040d8:	f107 0314 	add.w	r3, r7, #20
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f001 fcd6 	bl	8005a90 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80040e4:	f001 fcc0 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 80040e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80040ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ec:	4a13      	ldr	r2, [pc, #76]	; (800413c <HAL_InitTick+0xa0>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	0c9b      	lsrs	r3, r3, #18
 80040f4:	3b01      	subs	r3, #1
 80040f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <HAL_InitTick+0xa4>)
 80040fa:	4a12      	ldr	r2, [pc, #72]	; (8004144 <HAL_InitTick+0xa8>)
 80040fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <HAL_InitTick+0xa4>)
 8004100:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004104:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004106:	4a0e      	ldr	r2, [pc, #56]	; (8004140 <HAL_InitTick+0xa4>)
 8004108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800410c:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <HAL_InitTick+0xa4>)
 800410e:	2200      	movs	r2, #0
 8004110:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004112:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <HAL_InitTick+0xa4>)
 8004114:	2200      	movs	r2, #0
 8004116:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004118:	4809      	ldr	r0, [pc, #36]	; (8004140 <HAL_InitTick+0xa4>)
 800411a:	f001 fd07 	bl	8005b2c <HAL_TIM_Base_Init>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d104      	bne.n	800412e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004124:	4806      	ldr	r0, [pc, #24]	; (8004140 <HAL_InitTick+0xa4>)
 8004126:	f001 fd59 	bl	8005bdc <HAL_TIM_Base_Start_IT>
 800412a:	4603      	mov	r3, r0
 800412c:	e000      	b.n	8004130 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
}
 8004130:	4618      	mov	r0, r3
 8004132:	3730      	adds	r7, #48	; 0x30
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40021000 	.word	0x40021000
 800413c:	431bde83 	.word	0x431bde83
 8004140:	200025f0 	.word	0x200025f0
 8004144:	40012c00 	.word	0x40012c00

08004148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800414c:	e7fe      	b.n	800414c <NMI_Handler+0x4>

0800414e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800414e:	b480      	push	{r7}
 8004150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004152:	e7fe      	b.n	8004152 <HardFault_Handler+0x4>

08004154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004158:	e7fe      	b.n	8004158 <MemManage_Handler+0x4>

0800415a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800415a:	b480      	push	{r7}
 800415c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800415e:	e7fe      	b.n	800415e <BusFault_Handler+0x4>

08004160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004164:	e7fe      	b.n	8004164 <UsageFault_Handler+0x4>

08004166 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004166:	b480      	push	{r7}
 8004168:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800416a:	bf00      	nop
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr
	...

08004174 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004178:	4802      	ldr	r0, [pc, #8]	; (8004184 <DMA1_Channel2_IRQHandler+0x10>)
 800417a:	f000 fdcb 	bl	8004d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800417e:	bf00      	nop
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	200024c4 	.word	0x200024c4

08004188 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */


  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800418c:	4802      	ldr	r0, [pc, #8]	; (8004198 <DMA1_Channel3_IRQHandler+0x10>)
 800418e:	f000 fdc1 	bl	8004d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20002440 	.word	0x20002440

0800419c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80041a0:	4802      	ldr	r0, [pc, #8]	; (80041ac <DMA1_Channel4_IRQHandler+0x10>)
 80041a2:	f000 fdb7 	bl	8004d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80041a6:	bf00      	nop
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20002508 	.word	0x20002508

080041b0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80041b4:	4802      	ldr	r0, [pc, #8]	; (80041c0 <DMA1_Channel5_IRQHandler+0x10>)
 80041b6:	f000 fdad 	bl	8004d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80041ba:	bf00      	nop
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	2000254c 	.word	0x2000254c

080041c4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041c8:	4802      	ldr	r0, [pc, #8]	; (80041d4 <TIM1_UP_IRQHandler+0x10>)
 80041ca:	f001 fd59 	bl	8005c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80041ce:	bf00      	nop
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	200025f0 	.word	0x200025f0

080041d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80041dc:	4802      	ldr	r0, [pc, #8]	; (80041e8 <USART1_IRQHandler+0x10>)
 80041de:	f002 f96b 	bl	80064b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80041e2:	bf00      	nop
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20002590 	.word	0x20002590

080041ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80041f2:	481f      	ldr	r0, [pc, #124]	; (8004270 <USART3_IRQHandler+0x84>)
 80041f4:	f002 f960 	bl	80064b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
	if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET) {
 80041f8:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <USART3_IRQHandler+0x84>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b20      	cmp	r3, #32
 8004204:	d030      	beq.n	8004268 <USART3_IRQHandler+0x7c>
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8004206:	2300      	movs	r3, #0
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	4b19      	ldr	r3, [pc, #100]	; (8004270 <USART3_IRQHandler+0x84>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	607b      	str	r3, [r7, #4]
 8004212:	4b17      	ldr	r3, [pc, #92]	; (8004270 <USART3_IRQHandler+0x84>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
		HAL_UART_DMAStop(&huart3) ;
 800421c:	4814      	ldr	r0, [pc, #80]	; (8004270 <USART3_IRQHandler+0x84>)
 800421e:	f002 f8ef 	bl	8006400 <HAL_UART_DMAStop>
		_data.dataSize  = MAX_DATA_LENGTH - __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 8004222:	4b14      	ldr	r3, [pc, #80]	; (8004274 <USART3_IRQHandler+0x88>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	b29b      	uxth	r3, r3
 800422a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800422e:	b29a      	uxth	r2, r3
 8004230:	4b11      	ldr	r3, [pc, #68]	; (8004278 <USART3_IRQHandler+0x8c>)
 8004232:	801a      	strh	r2, [r3, #0]
		memcpy(_data.data,rx_buffer,_data.dataSize);
 8004234:	4b10      	ldr	r3, [pc, #64]	; (8004278 <USART3_IRQHandler+0x8c>)
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	4910      	ldr	r1, [pc, #64]	; (800427c <USART3_IRQHandler+0x90>)
 800423c:	4810      	ldr	r0, [pc, #64]	; (8004280 <USART3_IRQHandler+0x94>)
 800423e:	f005 fa63 	bl	8009708 <memcpy>
		xl430_setRxData(&_data);
 8004242:	480d      	ldr	r0, [pc, #52]	; (8004278 <USART3_IRQHandler+0x8c>)
 8004244:	f000 fa86 	bl	8004754 <xl430_setRxData>
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8004248:	2300      	movs	r3, #0
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <USART3_IRQHandler+0x84>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <USART3_IRQHandler+0x84>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
		HAL_UART_Receive_DMA(&huart3, rx_buffer, 64);
 800425e:	2240      	movs	r2, #64	; 0x40
 8004260:	4906      	ldr	r1, [pc, #24]	; (800427c <USART3_IRQHandler+0x90>)
 8004262:	4803      	ldr	r0, [pc, #12]	; (8004270 <USART3_IRQHandler+0x84>)
 8004264:	f002 f84c 	bl	8006300 <HAL_UART_Receive_DMA>
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20002484 	.word	0x20002484
 8004274:	20002440 	.word	0x20002440
 8004278:	20002638 	.word	0x20002638
 800427c:	200000ec 	.word	0x200000ec
 8004280:	2000263a 	.word	0x2000263a

08004284 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
	return 1;
 8004288:	2301      	movs	r3, #1
}
 800428a:	4618      	mov	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr

08004292 <_kill>:

int _kill(int pid, int sig)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800429c:	f005 fa0a 	bl	80096b4 <__errno>
 80042a0:	4602      	mov	r2, r0
 80042a2:	2316      	movs	r3, #22
 80042a4:	6013      	str	r3, [r2, #0]
	return -1;
 80042a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <_exit>:

void _exit (int status)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80042ba:	f04f 31ff 	mov.w	r1, #4294967295
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff ffe7 	bl	8004292 <_kill>
	while (1) {}		/* Make sure we hang here */
 80042c4:	e7fe      	b.n	80042c4 <_exit+0x12>
	...

080042c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042d0:	4a14      	ldr	r2, [pc, #80]	; (8004324 <_sbrk+0x5c>)
 80042d2:	4b15      	ldr	r3, [pc, #84]	; (8004328 <_sbrk+0x60>)
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042dc:	4b13      	ldr	r3, [pc, #76]	; (800432c <_sbrk+0x64>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042e4:	4b11      	ldr	r3, [pc, #68]	; (800432c <_sbrk+0x64>)
 80042e6:	4a12      	ldr	r2, [pc, #72]	; (8004330 <_sbrk+0x68>)
 80042e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042ea:	4b10      	ldr	r3, [pc, #64]	; (800432c <_sbrk+0x64>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4413      	add	r3, r2
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d207      	bcs.n	8004308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042f8:	f005 f9dc 	bl	80096b4 <__errno>
 80042fc:	4602      	mov	r2, r0
 80042fe:	230c      	movs	r3, #12
 8004300:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004302:	f04f 33ff 	mov.w	r3, #4294967295
 8004306:	e009      	b.n	800431c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004308:	4b08      	ldr	r3, [pc, #32]	; (800432c <_sbrk+0x64>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800430e:	4b07      	ldr	r3, [pc, #28]	; (800432c <_sbrk+0x64>)
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4413      	add	r3, r2
 8004316:	4a05      	ldr	r2, [pc, #20]	; (800432c <_sbrk+0x64>)
 8004318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800431a:	68fb      	ldr	r3, [r7, #12]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20005000 	.word	0x20005000
 8004328:	00000400 	.word	0x00000400
 800432c:	20000b28 	.word	0x20000b28
 8004330:	200026c8 	.word	0x200026c8

08004334 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr

08004340 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	0a5a      	lsrs	r2, r3, #9
 8004350:	490f      	ldr	r1, [pc, #60]	; (8004390 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004352:	fba1 1202 	umull	r1, r2, r1, r2
 8004356:	09d2      	lsrs	r2, r2, #7
 8004358:	490e      	ldr	r1, [pc, #56]	; (8004394 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800435a:	fb01 f202 	mul.w	r2, r1, r2
 800435e:	1a9b      	subs	r3, r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	0a5b      	lsrs	r3, r3, #9
 8004368:	4a09      	ldr	r2, [pc, #36]	; (8004390 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	09db      	lsrs	r3, r3, #7
 8004370:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	441a      	add	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	601a      	str	r2, [r3, #0]
}
 8004384:	bf00      	nop
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	00044b83 	.word	0x00044b83
 8004394:	3b9aca00 	.word	0x3b9aca00

08004398 <xl430_int>:
#include "xl430.h"
#include "xl430_address.h"


void xl430_int(UART_HandleTypeDef *huart)
{
 8004398:	b5b0      	push	{r4, r5, r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	_huart = *huart;
 80043a0:	4a0c      	ldr	r2, [pc, #48]	; (80043d4 <xl430_int+0x3c>)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4614      	mov	r4, r2
 80043a6:	461d      	mov	r5, r3
 80043a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80043b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Receive_DMA(&_huart, rx_buffer, 64);
 80043bc:	2240      	movs	r2, #64	; 0x40
 80043be:	4906      	ldr	r1, [pc, #24]	; (80043d8 <xl430_int+0x40>)
 80043c0:	4804      	ldr	r0, [pc, #16]	; (80043d4 <xl430_int+0x3c>)
 80043c2:	f001 ff9d 	bl	8006300 <HAL_UART_Receive_DMA>
	HAL_HalfDuplex_EnableReceiver(&_huart);
 80043c6:	4803      	ldr	r0, [pc, #12]	; (80043d4 <xl430_int+0x3c>)
 80043c8:	f002 f9c4 	bl	8006754 <HAL_HalfDuplex_EnableReceiver>
}
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bdb0      	pop	{r4, r5, r7, pc}
 80043d4:	200000ac 	.word	0x200000ac
 80043d8:	200000ec 	.word	0x200000ec

080043dc <xl430_writebuffer>:

void xl430_writebuffer(uint8_t * dataBuf,uint16_t data_length)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	807b      	strh	r3, [r7, #2]
	HAL_HalfDuplex_EnableTransmitter(&_huart);
 80043e8:	4807      	ldr	r0, [pc, #28]	; (8004408 <xl430_writebuffer+0x2c>)
 80043ea:	f002 f980 	bl	80066ee <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&_huart, dataBuf, data_length, 100);
 80043ee:	887a      	ldrh	r2, [r7, #2]
 80043f0:	2364      	movs	r3, #100	; 0x64
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4804      	ldr	r0, [pc, #16]	; (8004408 <xl430_writebuffer+0x2c>)
 80043f6:	f001 fe85 	bl	8006104 <HAL_UART_Transmit>
	HAL_HalfDuplex_EnableReceiver(&_huart);
 80043fa:	4803      	ldr	r0, [pc, #12]	; (8004408 <xl430_writebuffer+0x2c>)
 80043fc:	f002 f9aa 	bl	8006754 <HAL_HalfDuplex_EnableReceiver>

}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	200000ac 	.word	0x200000ac

0800440c <xl430_readbuffer>:

struct prsRxData xl430_readbuffer()
{
 800440c:	b590      	push	{r4, r7, lr}
 800440e:	b089      	sub	sp, #36	; 0x24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
	struct prsRxData _retData;
	_retData.id 		= _rxData.data[4];
 8004414:	4b2e      	ldr	r3, [pc, #184]	; (80044d0 <xl430_readbuffer+0xc4>)
 8004416:	799b      	ldrb	r3, [r3, #6]
 8004418:	733b      	strb	r3, [r7, #12]
	_retData.errorFlag 	= _rxData.data[8];
 800441a:	4b2d      	ldr	r3, [pc, #180]	; (80044d0 <xl430_readbuffer+0xc4>)
 800441c:	7a9b      	ldrb	r3, [r3, #10]
 800441e:	737b      	strb	r3, [r7, #13]
	_retData.crc_rx 	= _rxData.data[_rxData.dataSize-2] | (_rxData.data[_rxData.dataSize-1] <<8);
 8004420:	4b2b      	ldr	r3, [pc, #172]	; (80044d0 <xl430_readbuffer+0xc4>)
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	3b02      	subs	r3, #2
 8004426:	4a2a      	ldr	r2, [pc, #168]	; (80044d0 <xl430_readbuffer+0xc4>)
 8004428:	4413      	add	r3, r2
 800442a:	789b      	ldrb	r3, [r3, #2]
 800442c:	b21a      	sxth	r2, r3
 800442e:	4b28      	ldr	r3, [pc, #160]	; (80044d0 <xl430_readbuffer+0xc4>)
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	3b01      	subs	r3, #1
 8004434:	4926      	ldr	r1, [pc, #152]	; (80044d0 <xl430_readbuffer+0xc4>)
 8004436:	440b      	add	r3, r1
 8004438:	789b      	ldrb	r3, [r3, #2]
 800443a:	021b      	lsls	r3, r3, #8
 800443c:	b21b      	sxth	r3, r3
 800443e:	4313      	orrs	r3, r2
 8004440:	b21b      	sxth	r3, r3
 8004442:	b29b      	uxth	r3, r3
 8004444:	81fb      	strh	r3, [r7, #14]
	_retData.crc_cal 	= update_crc(0, _rxData.data, _rxData.dataSize-2);
 8004446:	4b22      	ldr	r3, [pc, #136]	; (80044d0 <xl430_readbuffer+0xc4>)
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	3b02      	subs	r3, #2
 800444c:	b29b      	uxth	r3, r3
 800444e:	461a      	mov	r2, r3
 8004450:	4920      	ldr	r1, [pc, #128]	; (80044d4 <xl430_readbuffer+0xc8>)
 8004452:	2000      	movs	r0, #0
 8004454:	f000 f840 	bl	80044d8 <update_crc>
 8004458:	4603      	mov	r3, r0
 800445a:	823b      	strh	r3, [r7, #16]
	_retData.dat_len 	= _rxData.data[5] | (_rxData.data[6] <<8);
 800445c:	4b1c      	ldr	r3, [pc, #112]	; (80044d0 <xl430_readbuffer+0xc4>)
 800445e:	79db      	ldrb	r3, [r3, #7]
 8004460:	b21a      	sxth	r2, r3
 8004462:	4b1b      	ldr	r3, [pc, #108]	; (80044d0 <xl430_readbuffer+0xc4>)
 8004464:	7a1b      	ldrb	r3, [r3, #8]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	b21b      	sxth	r3, r3
 800446a:	4313      	orrs	r3, r2
 800446c:	b21b      	sxth	r3, r3
 800446e:	b29b      	uxth	r3, r3
 8004470:	827b      	strh	r3, [r7, #18]
	_retData.data = 0;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
	if(_retData.crc_cal == _retData.crc_rx)
 8004476:	8a3a      	ldrh	r2, [r7, #16]
 8004478:	89fb      	ldrh	r3, [r7, #14]
 800447a:	429a      	cmp	r2, r3
 800447c:	d102      	bne.n	8004484 <xl430_readbuffer+0x78>
	{
		_retData.crc_check = true;
 800447e:	2301      	movs	r3, #1
 8004480:	763b      	strb	r3, [r7, #24]
 8004482:	e001      	b.n	8004488 <xl430_readbuffer+0x7c>
	}
	else
	{
		_retData.crc_check = false;
 8004484:	2300      	movs	r3, #0
 8004486:	763b      	strb	r3, [r7, #24]
	}

	for(uint16_t n =0; n<_retData.dat_len-4;n++)
 8004488:	2300      	movs	r3, #0
 800448a:	83fb      	strh	r3, [r7, #30]
 800448c:	e00f      	b.n	80044ae <xl430_readbuffer+0xa2>
	{
		_retData.data = _retData.data | (_rxData.data[9+n] <<8*n);
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	8bfb      	ldrh	r3, [r7, #30]
 8004492:	3309      	adds	r3, #9
 8004494:	490e      	ldr	r1, [pc, #56]	; (80044d0 <xl430_readbuffer+0xc4>)
 8004496:	440b      	add	r3, r1
 8004498:	789b      	ldrb	r3, [r3, #2]
 800449a:	4619      	mov	r1, r3
 800449c:	8bfb      	ldrh	r3, [r7, #30]
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	fa01 f303 	lsl.w	r3, r1, r3
 80044a4:	4313      	orrs	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]
	for(uint16_t n =0; n<_retData.dat_len-4;n++)
 80044a8:	8bfb      	ldrh	r3, [r7, #30]
 80044aa:	3301      	adds	r3, #1
 80044ac:	83fb      	strh	r3, [r7, #30]
 80044ae:	8bfa      	ldrh	r2, [r7, #30]
 80044b0:	8a7b      	ldrh	r3, [r7, #18]
 80044b2:	3b04      	subs	r3, #4
 80044b4:	429a      	cmp	r2, r3
 80044b6:	dbea      	blt.n	800448e <xl430_readbuffer+0x82>
	}

	return _retData;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	461c      	mov	r4, r3
 80044bc:	f107 030c 	add.w	r3, r7, #12
 80044c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	3724      	adds	r7, #36	; 0x24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd90      	pop	{r4, r7, pc}
 80044ce:	bf00      	nop
 80044d0:	2000012c 	.word	0x2000012c
 80044d4:	2000012e 	.word	0x2000012e

080044d8 <update_crc>:

uint16_t update_crc(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80044de:	af00      	add	r7, sp, #0
 80044e0:	463b      	mov	r3, r7
 80044e2:	6019      	str	r1, [r3, #0]
 80044e4:	4611      	mov	r1, r2
 80044e6:	1dbb      	adds	r3, r7, #6
 80044e8:	4602      	mov	r2, r0
 80044ea:	801a      	strh	r2, [r3, #0]
 80044ec:	1d3b      	adds	r3, r7, #4
 80044ee:	460a      	mov	r2, r1
 80044f0:	801a      	strh	r2, [r3, #0]
    uint16_t i, j;
    uint16_t crc_table[256] = {
 80044f2:	f107 030c 	add.w	r3, r7, #12
 80044f6:	4a1e      	ldr	r2, [pc, #120]	; (8004570 <update_crc+0x98>)
 80044f8:	4618      	mov	r0, r3
 80044fa:	4611      	mov	r1, r2
 80044fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004500:	461a      	mov	r2, r3
 8004502:	f005 f901 	bl	8009708 <memcpy>
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
    };

    for(j = 0; j < data_blk_size; j++)
 8004506:	2300      	movs	r3, #0
 8004508:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 800450c:	e023      	b.n	8004556 <update_crc+0x7e>
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 800450e:	1dbb      	adds	r3, r7, #6
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	b29a      	uxth	r2, r3
 8004516:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800451a:	4639      	mov	r1, r7
 800451c:	6809      	ldr	r1, [r1, #0]
 800451e:	440b      	add	r3, r1
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	b29b      	uxth	r3, r3
 8004524:	4053      	eors	r3, r2
 8004526:	b29b      	uxth	r3, r3
 8004528:	b2db      	uxtb	r3, r3
 800452a:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
        crc_accum = (crc_accum << 8) ^ crc_table[i];
 800452e:	1dbb      	adds	r3, r7, #6
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	b21a      	sxth	r2, r3
 8004536:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 800453a:	f107 030c 	add.w	r3, r7, #12
 800453e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8004542:	b21b      	sxth	r3, r3
 8004544:	4053      	eors	r3, r2
 8004546:	b21a      	sxth	r2, r3
 8004548:	1dbb      	adds	r3, r7, #6
 800454a:	801a      	strh	r2, [r3, #0]
    for(j = 0; j < data_blk_size; j++)
 800454c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004550:	3301      	adds	r3, #1
 8004552:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8004556:	1d3b      	adds	r3, r7, #4
 8004558:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d3d5      	bcc.n	800450e <update_crc+0x36>
    }

    return crc_accum;
 8004562:	1dbb      	adds	r3, r7, #6
 8004564:	881b      	ldrh	r3, [r3, #0]
}
 8004566:	4618      	mov	r0, r3
 8004568:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	08009c9c 	.word	0x08009c9c

08004574 <xl430_ping>:


/*---------api functions----------*/
bool xl430_ping(uint8_t ID)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08a      	sub	sp, #40	; 0x28
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	71fb      	strb	r3, [r7, #7]
	uint8_t __buffer[10] = {0xFF,0xFF,0xFD,0x00,0X00,0x03,0x00,0x01,0x00,0x00};
 800457e:	4a1a      	ldr	r2, [pc, #104]	; (80045e8 <xl430_ping+0x74>)
 8004580:	f107 031c 	add.w	r3, r7, #28
 8004584:	ca07      	ldmia	r2, {r0, r1, r2}
 8004586:	c303      	stmia	r3!, {r0, r1}
 8004588:	801a      	strh	r2, [r3, #0]
	__buffer[4] = ID;
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	f887 3020 	strb.w	r3, [r7, #32]
	uint16_t crc =update_crc(0,__buffer,8);
 8004590:	f107 031c 	add.w	r3, r7, #28
 8004594:	2208      	movs	r2, #8
 8004596:	4619      	mov	r1, r3
 8004598:	2000      	movs	r0, #0
 800459a:	f7ff ff9d 	bl	80044d8 <update_crc>
 800459e:	4603      	mov	r3, r0
 80045a0:	84fb      	strh	r3, [r7, #38]	; 0x26
	__buffer[9] = (crc>>8) & 0x00FF;
 80045a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045a4:	0a1b      	lsrs	r3, r3, #8
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	__buffer[8] = (crc & 0x00FF);
 80045ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	xl430_writebuffer(__buffer,10);
 80045b6:	f107 031c 	add.w	r3, r7, #28
 80045ba:	210a      	movs	r1, #10
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff ff0d 	bl	80043dc <xl430_writebuffer>

	struct prsRxData _data;
	_data = xl430_readbuffer();
 80045c2:	f107 030c 	add.w	r3, r7, #12
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff ff20 	bl	800440c <xl430_readbuffer>

		if(_data.crc_check && (!_data.errorFlag))
 80045cc:	7e3b      	ldrb	r3, [r7, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d004      	beq.n	80045dc <xl430_ping+0x68>
 80045d2:	7b7b      	ldrb	r3, [r7, #13]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <xl430_ping+0x68>
		{
			return true;
 80045d8:	2301      	movs	r3, #1
 80045da:	e000      	b.n	80045de <xl430_ping+0x6a>
		}
		else
		{
			return false;
 80045dc:	2300      	movs	r3, #0
		}


}
 80045de:	4618      	mov	r0, r3
 80045e0:	3728      	adds	r7, #40	; 0x28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	08009e9c 	.word	0x08009e9c

080045ec <xl430_writeToAddress>:

void xl430_writeToAddress(uint8_t Id ,int tx_data,const uint16_t *address,const uint8_t *__inst)
{
 80045ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ee:	b08b      	sub	sp, #44	; 0x2c
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	607a      	str	r2, [r7, #4]
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	4603      	mov	r3, r0
 80045fa:	73fb      	strb	r3, [r7, #15]
 80045fc:	466b      	mov	r3, sp
 80045fe:	461e      	mov	r6, r3
	  uint16_t mem_size=12;
 8004600:	230c      	movs	r3, #12
 8004602:	84bb      	strh	r3, [r7, #36]	; 0x24
	  uint16_t crc;
	  char crc_[2];
	  uint8_t data_size =4;
 8004604:	2304      	movs	r3, #4
 8004606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  uint8_t data_array[4];



	  data_array[0] = tx_data & 0x000000FF;
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	753b      	strb	r3, [r7, #20]
	  data_array[1] = (tx_data>>8) & 0x000000FF;
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	121b      	asrs	r3, r3, #8
 8004614:	b2db      	uxtb	r3, r3
 8004616:	757b      	strb	r3, [r7, #21]
	  data_array[2] = (tx_data>>16) & 0x000000FF;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	141b      	asrs	r3, r3, #16
 800461c:	b2db      	uxtb	r3, r3
 800461e:	75bb      	strb	r3, [r7, #22]
	  data_array[3] = (tx_data>>24) & 0x000000FF;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	0e1b      	lsrs	r3, r3, #24
 8004624:	b2db      	uxtb	r3, r3
 8004626:	75fb      	strb	r3, [r7, #23]

	  mem_size += data_size;
 8004628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800462c:	b29a      	uxth	r2, r3
 800462e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004630:	4413      	add	r3, r2
 8004632:	84bb      	strh	r3, [r7, #36]	; 0x24
	  uint8_t m_tx_buffer [mem_size];
 8004634:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 8004636:	462b      	mov	r3, r5
 8004638:	3b01      	subs	r3, #1
 800463a:	623b      	str	r3, [r7, #32]
 800463c:	b2a9      	uxth	r1, r5
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	f04f 0400 	mov.w	r4, #0
 800464a:	00d4      	lsls	r4, r2, #3
 800464c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004650:	00cb      	lsls	r3, r1, #3
 8004652:	b2a9      	uxth	r1, r5
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	f04f 0400 	mov.w	r4, #0
 8004660:	00d4      	lsls	r4, r2, #3
 8004662:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004666:	00cb      	lsls	r3, r1, #3
 8004668:	462b      	mov	r3, r5
 800466a:	3307      	adds	r3, #7
 800466c:	08db      	lsrs	r3, r3, #3
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	ebad 0d03 	sub.w	sp, sp, r3
 8004674:	466b      	mov	r3, sp
 8004676:	3300      	adds	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
	  uint16_t m_len =data_size+5;
 800467a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800467e:	b29b      	uxth	r3, r3
 8004680:	3305      	adds	r3, #5
 8004682:	b29b      	uxth	r3, r3
 8004684:	827b      	strh	r3, [r7, #18]


	  memcpy (m_tx_buffer,header,6);
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	2206      	movs	r2, #6
 800468a:	4921      	ldr	r1, [pc, #132]	; (8004710 <xl430_writeToAddress+0x124>)
 800468c:	4618      	mov	r0, r3
 800468e:	f005 f83b 	bl	8009708 <memcpy>
	  memcpy (m_tx_buffer+sizeof(header),&Id,1);
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	3304      	adds	r3, #4
 8004696:	7bfa      	ldrb	r2, [r7, #15]
 8004698:	701a      	strb	r2, [r3, #0]
	  memcpy (m_tx_buffer+sizeof(header)+1,&m_len,2);
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	3305      	adds	r3, #5
 800469e:	8a7a      	ldrh	r2, [r7, #18]
 80046a0:	801a      	strh	r2, [r3, #0]
	  memcpy (m_tx_buffer+sizeof(header)+3,__inst,1);
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	3307      	adds	r3, #7
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	7812      	ldrb	r2, [r2, #0]
 80046aa:	701a      	strb	r2, [r3, #0]
	  memcpy (m_tx_buffer+sizeof(header)+4,address,2);
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	3308      	adds	r3, #8
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	8812      	ldrh	r2, [r2, #0]
 80046b4:	b292      	uxth	r2, r2
 80046b6:	801a      	strh	r2, [r3, #0]
	  memcpy (m_tx_buffer+sizeof(header)+6,data_array,data_size);
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	330a      	adds	r3, #10
 80046bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80046c0:	f107 0114 	add.w	r1, r7, #20
 80046c4:	4618      	mov	r0, r3
 80046c6:	f005 f81f 	bl	8009708 <memcpy>

	  crc = update_crc(0,m_tx_buffer,mem_size -2);
 80046ca:	69f9      	ldr	r1, [r7, #28]
 80046cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046ce:	3b02      	subs	r3, #2
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	461a      	mov	r2, r3
 80046d4:	2000      	movs	r0, #0
 80046d6:	f7ff feff 	bl	80044d8 <update_crc>
 80046da:	4603      	mov	r3, r0
 80046dc:	837b      	strh	r3, [r7, #26]
	  crc_[0]=crc & 0x00FF;
 80046de:	8b7b      	ldrh	r3, [r7, #26]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	763b      	strb	r3, [r7, #24]
	  crc_[1]=(crc>>8) & 0x00FF;
 80046e4:	8b7b      	ldrh	r3, [r7, #26]
 80046e6:	0a1b      	lsrs	r3, r3, #8
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	767b      	strb	r3, [r7, #25]
	  memcpy (m_tx_buffer+sizeof(header)+6+data_size,crc_,2);
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046f4:	330a      	adds	r3, #10
 80046f6:	4413      	add	r3, r2
 80046f8:	8b3a      	ldrh	r2, [r7, #24]
 80046fa:	801a      	strh	r2, [r3, #0]

	    xl430_writebuffer(m_tx_buffer,sizeof(m_tx_buffer));
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	4629      	mov	r1, r5
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff fe6b 	bl	80043dc <xl430_writebuffer>
 8004706:	46b5      	mov	sp, r6



}
 8004708:	bf00      	nop
 800470a:	372c      	adds	r7, #44	; 0x2c
 800470c:	46bd      	mov	sp, r7
 800470e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004710:	0800a070 	.word	0x0800a070

08004714 <xl430_Action>:

void xl430_Action()
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
  uint8_t _dataArr[]={0xFF,0xFF,0xFD,0x00,0xFE,0x03,0x00,0x05,0x00,0x00};
 800471a:	4a0d      	ldr	r2, [pc, #52]	; (8004750 <xl430_Action+0x3c>)
 800471c:	1d3b      	adds	r3, r7, #4
 800471e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004720:	c303      	stmia	r3!, {r0, r1}
 8004722:	801a      	strh	r2, [r3, #0]
  uint16_t crc;
  crc = update_crc(0,_dataArr,8);
 8004724:	1d3b      	adds	r3, r7, #4
 8004726:	2208      	movs	r2, #8
 8004728:	4619      	mov	r1, r3
 800472a:	2000      	movs	r0, #0
 800472c:	f7ff fed4 	bl	80044d8 <update_crc>
 8004730:	4603      	mov	r3, r0
 8004732:	807b      	strh	r3, [r7, #2]
  memcpy (_dataArr+8,&crc,2);
 8004734:	1d3b      	adds	r3, r7, #4
 8004736:	3308      	adds	r3, #8
 8004738:	887a      	ldrh	r2, [r7, #2]
 800473a:	801a      	strh	r2, [r3, #0]
  xl430_writebuffer(_dataArr,10);
 800473c:	1d3b      	adds	r3, r7, #4
 800473e:	210a      	movs	r1, #10
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff fe4b 	bl	80043dc <xl430_writebuffer>

}
 8004746:	bf00      	nop
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	08009ea8 	.word	0x08009ea8

08004754 <xl430_setRxData>:



void xl430_setRxData(struct rxData *data)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
	_rxData = *data;
 800475c:	4a09      	ldr	r2, [pc, #36]	; (8004784 <xl430_setRxData+0x30>)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4610      	mov	r0, r2
 8004762:	4619      	mov	r1, r3
 8004764:	2342      	movs	r3, #66	; 0x42
 8004766:	461a      	mov	r2, r3
 8004768:	f004 ffce 	bl	8009708 <memcpy>
	memset(rx_buffer,0,data->dataSize);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	2100      	movs	r1, #0
 8004774:	4804      	ldr	r0, [pc, #16]	; (8004788 <xl430_setRxData+0x34>)
 8004776:	f004 ffd2 	bl	800971e <memset>
}
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	2000012c 	.word	0x2000012c
 8004788:	200000ec 	.word	0x200000ec

0800478c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800478c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800478e:	e003      	b.n	8004798 <LoopCopyDataInit>

08004790 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004792:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004794:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004796:	3104      	adds	r1, #4

08004798 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004798:	480a      	ldr	r0, [pc, #40]	; (80047c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800479a:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800479c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800479e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80047a0:	d3f6      	bcc.n	8004790 <CopyDataInit>
  ldr r2, =_sbss
 80047a2:	4a0a      	ldr	r2, [pc, #40]	; (80047cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80047a4:	e002      	b.n	80047ac <LoopFillZerobss>

080047a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80047a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80047a8:	f842 3b04 	str.w	r3, [r2], #4

080047ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80047ac:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80047ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80047b0:	d3f9      	bcc.n	80047a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80047b2:	f7ff fdbf 	bl	8004334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047b6:	f004 ff83 	bl	80096c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80047ba:	f7fc fb75 	bl	8000ea8 <main>
  bx lr
 80047be:	4770      	bx	lr
  ldr r3, =_sidata
 80047c0:	0800a080 	.word	0x0800a080
  ldr r0, =_sdata
 80047c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80047c8:	20000090 	.word	0x20000090
  ldr r2, =_sbss
 80047cc:	20000090 	.word	0x20000090
  ldr r3, = _ebss
 80047d0:	200026c4 	.word	0x200026c4

080047d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80047d4:	e7fe      	b.n	80047d4 <ADC1_2_IRQHandler>
	...

080047d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047dc:	4b08      	ldr	r3, [pc, #32]	; (8004800 <HAL_Init+0x28>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a07      	ldr	r2, [pc, #28]	; (8004800 <HAL_Init+0x28>)
 80047e2:	f043 0310 	orr.w	r3, r3, #16
 80047e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047e8:	2003      	movs	r0, #3
 80047ea:	f000 f8f3 	bl	80049d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047ee:	2000      	movs	r0, #0
 80047f0:	f7ff fc54 	bl	800409c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047f4:	f7ff fae2 	bl	8003dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40022000 	.word	0x40022000

08004804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004808:	4b05      	ldr	r3, [pc, #20]	; (8004820 <HAL_IncTick+0x1c>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	461a      	mov	r2, r3
 800480e:	4b05      	ldr	r3, [pc, #20]	; (8004824 <HAL_IncTick+0x20>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4413      	add	r3, r2
 8004814:	4a03      	ldr	r2, [pc, #12]	; (8004824 <HAL_IncTick+0x20>)
 8004816:	6013      	str	r3, [r2, #0]
}
 8004818:	bf00      	nop
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr
 8004820:	20000020 	.word	0x20000020
 8004824:	2000267c 	.word	0x2000267c

08004828 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return uwTick;
 800482c:	4b02      	ldr	r3, [pc, #8]	; (8004838 <HAL_GetTick+0x10>)
 800482e:	681b      	ldr	r3, [r3, #0]
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr
 8004838:	2000267c 	.word	0x2000267c

0800483c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004844:	f7ff fff0 	bl	8004828 <HAL_GetTick>
 8004848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004854:	d005      	beq.n	8004862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004856:	4b09      	ldr	r3, [pc, #36]	; (800487c <HAL_Delay+0x40>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4413      	add	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004862:	bf00      	nop
 8004864:	f7ff ffe0 	bl	8004828 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	429a      	cmp	r2, r3
 8004872:	d8f7      	bhi.n	8004864 <HAL_Delay+0x28>
  {
  }
}
 8004874:	bf00      	nop
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	20000020 	.word	0x20000020

08004880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004890:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800489c:	4013      	ands	r3, r2
 800489e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048b2:	4a04      	ldr	r2, [pc, #16]	; (80048c4 <__NVIC_SetPriorityGrouping+0x44>)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	60d3      	str	r3, [r2, #12]
}
 80048b8:	bf00      	nop
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	e000ed00 	.word	0xe000ed00

080048c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048cc:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <__NVIC_GetPriorityGrouping+0x18>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	0a1b      	lsrs	r3, r3, #8
 80048d2:	f003 0307 	and.w	r3, r3, #7
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	e000ed00 	.word	0xe000ed00

080048e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	db0b      	blt.n	800490e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048f6:	79fb      	ldrb	r3, [r7, #7]
 80048f8:	f003 021f 	and.w	r2, r3, #31
 80048fc:	4906      	ldr	r1, [pc, #24]	; (8004918 <__NVIC_EnableIRQ+0x34>)
 80048fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	2001      	movs	r0, #1
 8004906:	fa00 f202 	lsl.w	r2, r0, r2
 800490a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	e000e100 	.word	0xe000e100

0800491c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	4603      	mov	r3, r0
 8004924:	6039      	str	r1, [r7, #0]
 8004926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492c:	2b00      	cmp	r3, #0
 800492e:	db0a      	blt.n	8004946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	b2da      	uxtb	r2, r3
 8004934:	490c      	ldr	r1, [pc, #48]	; (8004968 <__NVIC_SetPriority+0x4c>)
 8004936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493a:	0112      	lsls	r2, r2, #4
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	440b      	add	r3, r1
 8004940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004944:	e00a      	b.n	800495c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	b2da      	uxtb	r2, r3
 800494a:	4908      	ldr	r1, [pc, #32]	; (800496c <__NVIC_SetPriority+0x50>)
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	3b04      	subs	r3, #4
 8004954:	0112      	lsls	r2, r2, #4
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	440b      	add	r3, r1
 800495a:	761a      	strb	r2, [r3, #24]
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	bc80      	pop	{r7}
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	e000e100 	.word	0xe000e100
 800496c:	e000ed00 	.word	0xe000ed00

08004970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004970:	b480      	push	{r7}
 8004972:	b089      	sub	sp, #36	; 0x24
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	f1c3 0307 	rsb	r3, r3, #7
 800498a:	2b04      	cmp	r3, #4
 800498c:	bf28      	it	cs
 800498e:	2304      	movcs	r3, #4
 8004990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	3304      	adds	r3, #4
 8004996:	2b06      	cmp	r3, #6
 8004998:	d902      	bls.n	80049a0 <NVIC_EncodePriority+0x30>
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	3b03      	subs	r3, #3
 800499e:	e000      	b.n	80049a2 <NVIC_EncodePriority+0x32>
 80049a0:	2300      	movs	r3, #0
 80049a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049a4:	f04f 32ff 	mov.w	r2, #4294967295
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	43da      	mvns	r2, r3
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	401a      	ands	r2, r3
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049b8:	f04f 31ff 	mov.w	r1, #4294967295
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	fa01 f303 	lsl.w	r3, r1, r3
 80049c2:	43d9      	mvns	r1, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c8:	4313      	orrs	r3, r2
         );
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3724      	adds	r7, #36	; 0x24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr

080049d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7ff ff4f 	bl	8004880 <__NVIC_SetPriorityGrouping>
}
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b086      	sub	sp, #24
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	4603      	mov	r3, r0
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	607a      	str	r2, [r7, #4]
 80049f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049fc:	f7ff ff64 	bl	80048c8 <__NVIC_GetPriorityGrouping>
 8004a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	6978      	ldr	r0, [r7, #20]
 8004a08:	f7ff ffb2 	bl	8004970 <NVIC_EncodePriority>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a12:	4611      	mov	r1, r2
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff ff81 	bl	800491c <__NVIC_SetPriority>
}
 8004a1a:	bf00      	nop
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	4603      	mov	r3, r0
 8004a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff ff57 	bl	80048e4 <__NVIC_EnableIRQ>
}
 8004a36:	bf00      	nop
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e043      	b.n	8004ade <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	4b22      	ldr	r3, [pc, #136]	; (8004ae8 <HAL_DMA_Init+0xa8>)
 8004a5e:	4413      	add	r3, r2
 8004a60:	4a22      	ldr	r2, [pc, #136]	; (8004aec <HAL_DMA_Init+0xac>)
 8004a62:	fba2 2303 	umull	r2, r3, r2, r3
 8004a66:	091b      	lsrs	r3, r3, #4
 8004a68:	009a      	lsls	r2, r3, #2
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a1f      	ldr	r2, [pc, #124]	; (8004af0 <HAL_DMA_Init+0xb0>)
 8004a72:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004a8a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004a8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ab0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr
 8004ae8:	bffdfff8 	.word	0xbffdfff8
 8004aec:	cccccccd 	.word	0xcccccccd
 8004af0:	40020000 	.word	0x40020000

08004af4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_DMA_Start_IT+0x20>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e04a      	b.n	8004baa <HAL_DMA_Start_IT+0xb6>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d13a      	bne.n	8004b9c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0201 	bic.w	r2, r2, #1
 8004b42:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 f9e8 	bl	8004f20 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 020e 	orr.w	r2, r2, #14
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	e00f      	b.n	8004b8a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0204 	bic.w	r2, r2, #4
 8004b78:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 020a 	orr.w	r2, r2, #10
 8004b88:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0201 	orr.w	r2, r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	e005      	b.n	8004ba8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b085      	sub	sp, #20
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d008      	beq.n	8004bda <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2204      	movs	r2, #4
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e020      	b.n	8004c1c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 020e 	bic.w	r2, r2, #14
 8004be8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0201 	bic.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c02:	2101      	movs	r1, #1
 8004c04:	fa01 f202 	lsl.w	r2, r1, r2
 8004c08:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr
	...

08004c28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d005      	beq.n	8004c4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2204      	movs	r2, #4
 8004c42:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	73fb      	strb	r3, [r7, #15]
 8004c48:	e051      	b.n	8004cee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 020e 	bic.w	r2, r2, #14
 8004c58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0201 	bic.w	r2, r2, #1
 8004c68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a22      	ldr	r2, [pc, #136]	; (8004cf8 <HAL_DMA_Abort_IT+0xd0>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d029      	beq.n	8004cc8 <HAL_DMA_Abort_IT+0xa0>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a20      	ldr	r2, [pc, #128]	; (8004cfc <HAL_DMA_Abort_IT+0xd4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d022      	beq.n	8004cc4 <HAL_DMA_Abort_IT+0x9c>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a1f      	ldr	r2, [pc, #124]	; (8004d00 <HAL_DMA_Abort_IT+0xd8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d01a      	beq.n	8004cbe <HAL_DMA_Abort_IT+0x96>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a1d      	ldr	r2, [pc, #116]	; (8004d04 <HAL_DMA_Abort_IT+0xdc>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d012      	beq.n	8004cb8 <HAL_DMA_Abort_IT+0x90>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a1c      	ldr	r2, [pc, #112]	; (8004d08 <HAL_DMA_Abort_IT+0xe0>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d00a      	beq.n	8004cb2 <HAL_DMA_Abort_IT+0x8a>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1a      	ldr	r2, [pc, #104]	; (8004d0c <HAL_DMA_Abort_IT+0xe4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d102      	bne.n	8004cac <HAL_DMA_Abort_IT+0x84>
 8004ca6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004caa:	e00e      	b.n	8004cca <HAL_DMA_Abort_IT+0xa2>
 8004cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cb0:	e00b      	b.n	8004cca <HAL_DMA_Abort_IT+0xa2>
 8004cb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cb6:	e008      	b.n	8004cca <HAL_DMA_Abort_IT+0xa2>
 8004cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cbc:	e005      	b.n	8004cca <HAL_DMA_Abort_IT+0xa2>
 8004cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cc2:	e002      	b.n	8004cca <HAL_DMA_Abort_IT+0xa2>
 8004cc4:	2310      	movs	r3, #16
 8004cc6:	e000      	b.n	8004cca <HAL_DMA_Abort_IT+0xa2>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	4a11      	ldr	r2, [pc, #68]	; (8004d10 <HAL_DMA_Abort_IT+0xe8>)
 8004ccc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	4798      	blx	r3
    } 
  }
  return status;
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40020008 	.word	0x40020008
 8004cfc:	4002001c 	.word	0x4002001c
 8004d00:	40020030 	.word	0x40020030
 8004d04:	40020044 	.word	0x40020044
 8004d08:	40020058 	.word	0x40020058
 8004d0c:	4002006c 	.word	0x4002006c
 8004d10:	40020000 	.word	0x40020000

08004d14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	2204      	movs	r2, #4
 8004d32:	409a      	lsls	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4013      	ands	r3, r2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d04f      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xc8>
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d04a      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d107      	bne.n	8004d64 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0204 	bic.w	r2, r2, #4
 8004d62:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a66      	ldr	r2, [pc, #408]	; (8004f04 <HAL_DMA_IRQHandler+0x1f0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d029      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0xae>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a65      	ldr	r2, [pc, #404]	; (8004f08 <HAL_DMA_IRQHandler+0x1f4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d022      	beq.n	8004dbe <HAL_DMA_IRQHandler+0xaa>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a63      	ldr	r2, [pc, #396]	; (8004f0c <HAL_DMA_IRQHandler+0x1f8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d01a      	beq.n	8004db8 <HAL_DMA_IRQHandler+0xa4>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a62      	ldr	r2, [pc, #392]	; (8004f10 <HAL_DMA_IRQHandler+0x1fc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d012      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x9e>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a60      	ldr	r2, [pc, #384]	; (8004f14 <HAL_DMA_IRQHandler+0x200>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00a      	beq.n	8004dac <HAL_DMA_IRQHandler+0x98>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a5f      	ldr	r2, [pc, #380]	; (8004f18 <HAL_DMA_IRQHandler+0x204>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d102      	bne.n	8004da6 <HAL_DMA_IRQHandler+0x92>
 8004da0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004da4:	e00e      	b.n	8004dc4 <HAL_DMA_IRQHandler+0xb0>
 8004da6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004daa:	e00b      	b.n	8004dc4 <HAL_DMA_IRQHandler+0xb0>
 8004dac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004db0:	e008      	b.n	8004dc4 <HAL_DMA_IRQHandler+0xb0>
 8004db2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004db6:	e005      	b.n	8004dc4 <HAL_DMA_IRQHandler+0xb0>
 8004db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dbc:	e002      	b.n	8004dc4 <HAL_DMA_IRQHandler+0xb0>
 8004dbe:	2340      	movs	r3, #64	; 0x40
 8004dc0:	e000      	b.n	8004dc4 <HAL_DMA_IRQHandler+0xb0>
 8004dc2:	2304      	movs	r3, #4
 8004dc4:	4a55      	ldr	r2, [pc, #340]	; (8004f1c <HAL_DMA_IRQHandler+0x208>)
 8004dc6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 8094 	beq.w	8004efa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004dda:	e08e      	b.n	8004efa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	2202      	movs	r2, #2
 8004de2:	409a      	lsls	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4013      	ands	r3, r2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d056      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x186>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d051      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10b      	bne.n	8004e1c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 020a 	bic.w	r2, r2, #10
 8004e12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a38      	ldr	r2, [pc, #224]	; (8004f04 <HAL_DMA_IRQHandler+0x1f0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d029      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x166>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a37      	ldr	r2, [pc, #220]	; (8004f08 <HAL_DMA_IRQHandler+0x1f4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d022      	beq.n	8004e76 <HAL_DMA_IRQHandler+0x162>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a35      	ldr	r2, [pc, #212]	; (8004f0c <HAL_DMA_IRQHandler+0x1f8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d01a      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x15c>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a34      	ldr	r2, [pc, #208]	; (8004f10 <HAL_DMA_IRQHandler+0x1fc>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d012      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x156>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a32      	ldr	r2, [pc, #200]	; (8004f14 <HAL_DMA_IRQHandler+0x200>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00a      	beq.n	8004e64 <HAL_DMA_IRQHandler+0x150>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a31      	ldr	r2, [pc, #196]	; (8004f18 <HAL_DMA_IRQHandler+0x204>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d102      	bne.n	8004e5e <HAL_DMA_IRQHandler+0x14a>
 8004e58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e5c:	e00e      	b.n	8004e7c <HAL_DMA_IRQHandler+0x168>
 8004e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e62:	e00b      	b.n	8004e7c <HAL_DMA_IRQHandler+0x168>
 8004e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e68:	e008      	b.n	8004e7c <HAL_DMA_IRQHandler+0x168>
 8004e6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e6e:	e005      	b.n	8004e7c <HAL_DMA_IRQHandler+0x168>
 8004e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e74:	e002      	b.n	8004e7c <HAL_DMA_IRQHandler+0x168>
 8004e76:	2320      	movs	r3, #32
 8004e78:	e000      	b.n	8004e7c <HAL_DMA_IRQHandler+0x168>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	4a27      	ldr	r2, [pc, #156]	; (8004f1c <HAL_DMA_IRQHandler+0x208>)
 8004e7e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d034      	beq.n	8004efa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004e98:	e02f      	b.n	8004efa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	2208      	movs	r2, #8
 8004ea0:	409a      	lsls	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d028      	beq.n	8004efc <HAL_DMA_IRQHandler+0x1e8>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d023      	beq.n	8004efc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 020e 	bic.w	r2, r2, #14
 8004ec2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ecc:	2101      	movs	r1, #1
 8004ece:	fa01 f202 	lsl.w	r2, r1, r2
 8004ed2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d004      	beq.n	8004efc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	4798      	blx	r3
    }
  }
  return;
 8004efa:	bf00      	nop
 8004efc:	bf00      	nop
}
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40020008 	.word	0x40020008
 8004f08:	4002001c 	.word	0x4002001c
 8004f0c:	40020030 	.word	0x40020030
 8004f10:	40020044 	.word	0x40020044
 8004f14:	40020058 	.word	0x40020058
 8004f18:	4002006c 	.word	0x4002006c
 8004f1c:	40020000 	.word	0x40020000

08004f20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f36:	2101      	movs	r1, #1
 8004f38:	fa01 f202 	lsl.w	r2, r1, r2
 8004f3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b10      	cmp	r3, #16
 8004f4c:	d108      	bne.n	8004f60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f5e:	e007      	b.n	8004f70 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	60da      	str	r2, [r3, #12]
}
 8004f70:	bf00      	nop
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr
	...

08004f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b08b      	sub	sp, #44	; 0x2c
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f86:	2300      	movs	r3, #0
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f8e:	e127      	b.n	80051e0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004f90:	2201      	movs	r2, #1
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	f040 8116 	bne.w	80051da <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b12      	cmp	r3, #18
 8004fb4:	d034      	beq.n	8005020 <HAL_GPIO_Init+0xa4>
 8004fb6:	2b12      	cmp	r3, #18
 8004fb8:	d80d      	bhi.n	8004fd6 <HAL_GPIO_Init+0x5a>
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d02b      	beq.n	8005016 <HAL_GPIO_Init+0x9a>
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d804      	bhi.n	8004fcc <HAL_GPIO_Init+0x50>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d031      	beq.n	800502a <HAL_GPIO_Init+0xae>
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d01c      	beq.n	8005004 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004fca:	e048      	b.n	800505e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d043      	beq.n	8005058 <HAL_GPIO_Init+0xdc>
 8004fd0:	2b11      	cmp	r3, #17
 8004fd2:	d01b      	beq.n	800500c <HAL_GPIO_Init+0x90>
          break;
 8004fd4:	e043      	b.n	800505e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004fd6:	4a89      	ldr	r2, [pc, #548]	; (80051fc <HAL_GPIO_Init+0x280>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d026      	beq.n	800502a <HAL_GPIO_Init+0xae>
 8004fdc:	4a87      	ldr	r2, [pc, #540]	; (80051fc <HAL_GPIO_Init+0x280>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d806      	bhi.n	8004ff0 <HAL_GPIO_Init+0x74>
 8004fe2:	4a87      	ldr	r2, [pc, #540]	; (8005200 <HAL_GPIO_Init+0x284>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d020      	beq.n	800502a <HAL_GPIO_Init+0xae>
 8004fe8:	4a86      	ldr	r2, [pc, #536]	; (8005204 <HAL_GPIO_Init+0x288>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d01d      	beq.n	800502a <HAL_GPIO_Init+0xae>
          break;
 8004fee:	e036      	b.n	800505e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004ff0:	4a85      	ldr	r2, [pc, #532]	; (8005208 <HAL_GPIO_Init+0x28c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d019      	beq.n	800502a <HAL_GPIO_Init+0xae>
 8004ff6:	4a85      	ldr	r2, [pc, #532]	; (800520c <HAL_GPIO_Init+0x290>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d016      	beq.n	800502a <HAL_GPIO_Init+0xae>
 8004ffc:	4a84      	ldr	r2, [pc, #528]	; (8005210 <HAL_GPIO_Init+0x294>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d013      	beq.n	800502a <HAL_GPIO_Init+0xae>
          break;
 8005002:	e02c      	b.n	800505e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	623b      	str	r3, [r7, #32]
          break;
 800500a:	e028      	b.n	800505e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	3304      	adds	r3, #4
 8005012:	623b      	str	r3, [r7, #32]
          break;
 8005014:	e023      	b.n	800505e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	3308      	adds	r3, #8
 800501c:	623b      	str	r3, [r7, #32]
          break;
 800501e:	e01e      	b.n	800505e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	330c      	adds	r3, #12
 8005026:	623b      	str	r3, [r7, #32]
          break;
 8005028:	e019      	b.n	800505e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d102      	bne.n	8005038 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005032:	2304      	movs	r3, #4
 8005034:	623b      	str	r3, [r7, #32]
          break;
 8005036:	e012      	b.n	800505e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d105      	bne.n	800504c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005040:	2308      	movs	r3, #8
 8005042:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	69fa      	ldr	r2, [r7, #28]
 8005048:	611a      	str	r2, [r3, #16]
          break;
 800504a:	e008      	b.n	800505e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800504c:	2308      	movs	r3, #8
 800504e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	69fa      	ldr	r2, [r7, #28]
 8005054:	615a      	str	r2, [r3, #20]
          break;
 8005056:	e002      	b.n	800505e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005058:	2300      	movs	r3, #0
 800505a:	623b      	str	r3, [r7, #32]
          break;
 800505c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2bff      	cmp	r3, #255	; 0xff
 8005062:	d801      	bhi.n	8005068 <HAL_GPIO_Init+0xec>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	e001      	b.n	800506c <HAL_GPIO_Init+0xf0>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3304      	adds	r3, #4
 800506c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2bff      	cmp	r3, #255	; 0xff
 8005072:	d802      	bhi.n	800507a <HAL_GPIO_Init+0xfe>
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	e002      	b.n	8005080 <HAL_GPIO_Init+0x104>
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	3b08      	subs	r3, #8
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	210f      	movs	r1, #15
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	fa01 f303 	lsl.w	r3, r1, r3
 800508e:	43db      	mvns	r3, r3
 8005090:	401a      	ands	r2, r3
 8005092:	6a39      	ldr	r1, [r7, #32]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	fa01 f303 	lsl.w	r3, r1, r3
 800509a:	431a      	orrs	r2, r3
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8096 	beq.w	80051da <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80050ae:	4b59      	ldr	r3, [pc, #356]	; (8005214 <HAL_GPIO_Init+0x298>)
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	4a58      	ldr	r2, [pc, #352]	; (8005214 <HAL_GPIO_Init+0x298>)
 80050b4:	f043 0301 	orr.w	r3, r3, #1
 80050b8:	6193      	str	r3, [r2, #24]
 80050ba:	4b56      	ldr	r3, [pc, #344]	; (8005214 <HAL_GPIO_Init+0x298>)
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	60bb      	str	r3, [r7, #8]
 80050c4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80050c6:	4a54      	ldr	r2, [pc, #336]	; (8005218 <HAL_GPIO_Init+0x29c>)
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	089b      	lsrs	r3, r3, #2
 80050cc:	3302      	adds	r3, #2
 80050ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	220f      	movs	r2, #15
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	43db      	mvns	r3, r3
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4013      	ands	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a4b      	ldr	r2, [pc, #300]	; (800521c <HAL_GPIO_Init+0x2a0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d013      	beq.n	800511a <HAL_GPIO_Init+0x19e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a4a      	ldr	r2, [pc, #296]	; (8005220 <HAL_GPIO_Init+0x2a4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00d      	beq.n	8005116 <HAL_GPIO_Init+0x19a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a49      	ldr	r2, [pc, #292]	; (8005224 <HAL_GPIO_Init+0x2a8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d007      	beq.n	8005112 <HAL_GPIO_Init+0x196>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a48      	ldr	r2, [pc, #288]	; (8005228 <HAL_GPIO_Init+0x2ac>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d101      	bne.n	800510e <HAL_GPIO_Init+0x192>
 800510a:	2303      	movs	r3, #3
 800510c:	e006      	b.n	800511c <HAL_GPIO_Init+0x1a0>
 800510e:	2304      	movs	r3, #4
 8005110:	e004      	b.n	800511c <HAL_GPIO_Init+0x1a0>
 8005112:	2302      	movs	r3, #2
 8005114:	e002      	b.n	800511c <HAL_GPIO_Init+0x1a0>
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <HAL_GPIO_Init+0x1a0>
 800511a:	2300      	movs	r3, #0
 800511c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511e:	f002 0203 	and.w	r2, r2, #3
 8005122:	0092      	lsls	r2, r2, #2
 8005124:	4093      	lsls	r3, r2
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4313      	orrs	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800512c:	493a      	ldr	r1, [pc, #232]	; (8005218 <HAL_GPIO_Init+0x29c>)
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	089b      	lsrs	r3, r3, #2
 8005132:	3302      	adds	r3, #2
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d006      	beq.n	8005154 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005146:	4b39      	ldr	r3, [pc, #228]	; (800522c <HAL_GPIO_Init+0x2b0>)
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4938      	ldr	r1, [pc, #224]	; (800522c <HAL_GPIO_Init+0x2b0>)
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	4313      	orrs	r3, r2
 8005150:	600b      	str	r3, [r1, #0]
 8005152:	e006      	b.n	8005162 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005154:	4b35      	ldr	r3, [pc, #212]	; (800522c <HAL_GPIO_Init+0x2b0>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	43db      	mvns	r3, r3
 800515c:	4933      	ldr	r1, [pc, #204]	; (800522c <HAL_GPIO_Init+0x2b0>)
 800515e:	4013      	ands	r3, r2
 8005160:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d006      	beq.n	800517c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800516e:	4b2f      	ldr	r3, [pc, #188]	; (800522c <HAL_GPIO_Init+0x2b0>)
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	492e      	ldr	r1, [pc, #184]	; (800522c <HAL_GPIO_Init+0x2b0>)
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	4313      	orrs	r3, r2
 8005178:	604b      	str	r3, [r1, #4]
 800517a:	e006      	b.n	800518a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800517c:	4b2b      	ldr	r3, [pc, #172]	; (800522c <HAL_GPIO_Init+0x2b0>)
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	43db      	mvns	r3, r3
 8005184:	4929      	ldr	r1, [pc, #164]	; (800522c <HAL_GPIO_Init+0x2b0>)
 8005186:	4013      	ands	r3, r2
 8005188:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d006      	beq.n	80051a4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005196:	4b25      	ldr	r3, [pc, #148]	; (800522c <HAL_GPIO_Init+0x2b0>)
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	4924      	ldr	r1, [pc, #144]	; (800522c <HAL_GPIO_Init+0x2b0>)
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	4313      	orrs	r3, r2
 80051a0:	608b      	str	r3, [r1, #8]
 80051a2:	e006      	b.n	80051b2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80051a4:	4b21      	ldr	r3, [pc, #132]	; (800522c <HAL_GPIO_Init+0x2b0>)
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	43db      	mvns	r3, r3
 80051ac:	491f      	ldr	r1, [pc, #124]	; (800522c <HAL_GPIO_Init+0x2b0>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d006      	beq.n	80051cc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80051be:	4b1b      	ldr	r3, [pc, #108]	; (800522c <HAL_GPIO_Init+0x2b0>)
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	491a      	ldr	r1, [pc, #104]	; (800522c <HAL_GPIO_Init+0x2b0>)
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60cb      	str	r3, [r1, #12]
 80051ca:	e006      	b.n	80051da <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80051cc:	4b17      	ldr	r3, [pc, #92]	; (800522c <HAL_GPIO_Init+0x2b0>)
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	43db      	mvns	r3, r3
 80051d4:	4915      	ldr	r1, [pc, #84]	; (800522c <HAL_GPIO_Init+0x2b0>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	3301      	adds	r3, #1
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f47f aed0 	bne.w	8004f90 <HAL_GPIO_Init+0x14>
  }
}
 80051f0:	bf00      	nop
 80051f2:	372c      	adds	r7, #44	; 0x2c
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	10210000 	.word	0x10210000
 8005200:	10110000 	.word	0x10110000
 8005204:	10120000 	.word	0x10120000
 8005208:	10310000 	.word	0x10310000
 800520c:	10320000 	.word	0x10320000
 8005210:	10220000 	.word	0x10220000
 8005214:	40021000 	.word	0x40021000
 8005218:	40010000 	.word	0x40010000
 800521c:	40010800 	.word	0x40010800
 8005220:	40010c00 	.word	0x40010c00
 8005224:	40011000 	.word	0x40011000
 8005228:	40011400 	.word	0x40011400
 800522c:	40010400 	.word	0x40010400

08005230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	807b      	strh	r3, [r7, #2]
 800523c:	4613      	mov	r3, r2
 800523e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005240:	787b      	ldrb	r3, [r7, #1]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005246:	887a      	ldrh	r2, [r7, #2]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800524c:	e003      	b.n	8005256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800524e:	887b      	ldrh	r3, [r7, #2]
 8005250:	041a      	lsls	r2, r3, #16
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	611a      	str	r2, [r3, #16]
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr

08005260 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005272:	887a      	ldrh	r2, [r7, #2]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4013      	ands	r3, r2
 8005278:	041a      	lsls	r2, r3, #16
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	43d9      	mvns	r1, r3
 800527e:	887b      	ldrh	r3, [r7, #2]
 8005280:	400b      	ands	r3, r1
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	611a      	str	r2, [r3, #16]
}
 8005288:	bf00      	nop
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	bc80      	pop	{r7}
 8005290:	4770      	bx	lr
	...

08005294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e26c      	b.n	8005780 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 8087 	beq.w	80053c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052b4:	4b92      	ldr	r3, [pc, #584]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f003 030c 	and.w	r3, r3, #12
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d00c      	beq.n	80052da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80052c0:	4b8f      	ldr	r3, [pc, #572]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f003 030c 	and.w	r3, r3, #12
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d112      	bne.n	80052f2 <HAL_RCC_OscConfig+0x5e>
 80052cc:	4b8c      	ldr	r3, [pc, #560]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d8:	d10b      	bne.n	80052f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052da:	4b89      	ldr	r3, [pc, #548]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d06c      	beq.n	80053c0 <HAL_RCC_OscConfig+0x12c>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d168      	bne.n	80053c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e246      	b.n	8005780 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fa:	d106      	bne.n	800530a <HAL_RCC_OscConfig+0x76>
 80052fc:	4b80      	ldr	r3, [pc, #512]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a7f      	ldr	r2, [pc, #508]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 8005302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	e02e      	b.n	8005368 <HAL_RCC_OscConfig+0xd4>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10c      	bne.n	800532c <HAL_RCC_OscConfig+0x98>
 8005312:	4b7b      	ldr	r3, [pc, #492]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a7a      	ldr	r2, [pc, #488]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 8005318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	4b78      	ldr	r3, [pc, #480]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a77      	ldr	r2, [pc, #476]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 8005324:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	e01d      	b.n	8005368 <HAL_RCC_OscConfig+0xd4>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005334:	d10c      	bne.n	8005350 <HAL_RCC_OscConfig+0xbc>
 8005336:	4b72      	ldr	r3, [pc, #456]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a71      	ldr	r2, [pc, #452]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 800533c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	4b6f      	ldr	r3, [pc, #444]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a6e      	ldr	r2, [pc, #440]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 8005348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	e00b      	b.n	8005368 <HAL_RCC_OscConfig+0xd4>
 8005350:	4b6b      	ldr	r3, [pc, #428]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a6a      	ldr	r2, [pc, #424]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 8005356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800535a:	6013      	str	r3, [r2, #0]
 800535c:	4b68      	ldr	r3, [pc, #416]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a67      	ldr	r2, [pc, #412]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 8005362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005366:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d013      	beq.n	8005398 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005370:	f7ff fa5a 	bl	8004828 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005378:	f7ff fa56 	bl	8004828 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b64      	cmp	r3, #100	; 0x64
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e1fa      	b.n	8005780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800538a:	4b5d      	ldr	r3, [pc, #372]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0f0      	beq.n	8005378 <HAL_RCC_OscConfig+0xe4>
 8005396:	e014      	b.n	80053c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005398:	f7ff fa46 	bl	8004828 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053a0:	f7ff fa42 	bl	8004828 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b64      	cmp	r3, #100	; 0x64
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e1e6      	b.n	8005780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053b2:	4b53      	ldr	r3, [pc, #332]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0x10c>
 80053be:	e000      	b.n	80053c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d063      	beq.n	8005496 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053ce:	4b4c      	ldr	r3, [pc, #304]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f003 030c 	and.w	r3, r3, #12
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00b      	beq.n	80053f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80053da:	4b49      	ldr	r3, [pc, #292]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f003 030c 	and.w	r3, r3, #12
 80053e2:	2b08      	cmp	r3, #8
 80053e4:	d11c      	bne.n	8005420 <HAL_RCC_OscConfig+0x18c>
 80053e6:	4b46      	ldr	r3, [pc, #280]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d116      	bne.n	8005420 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053f2:	4b43      	ldr	r3, [pc, #268]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d005      	beq.n	800540a <HAL_RCC_OscConfig+0x176>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d001      	beq.n	800540a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e1ba      	b.n	8005780 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800540a:	4b3d      	ldr	r3, [pc, #244]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	4939      	ldr	r1, [pc, #228]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 800541a:	4313      	orrs	r3, r2
 800541c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800541e:	e03a      	b.n	8005496 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d020      	beq.n	800546a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005428:	4b36      	ldr	r3, [pc, #216]	; (8005504 <HAL_RCC_OscConfig+0x270>)
 800542a:	2201      	movs	r2, #1
 800542c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542e:	f7ff f9fb 	bl	8004828 <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005436:	f7ff f9f7 	bl	8004828 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e19b      	b.n	8005780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005448:	4b2d      	ldr	r3, [pc, #180]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0f0      	beq.n	8005436 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005454:	4b2a      	ldr	r3, [pc, #168]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	4927      	ldr	r1, [pc, #156]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 8005464:	4313      	orrs	r3, r2
 8005466:	600b      	str	r3, [r1, #0]
 8005468:	e015      	b.n	8005496 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800546a:	4b26      	ldr	r3, [pc, #152]	; (8005504 <HAL_RCC_OscConfig+0x270>)
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005470:	f7ff f9da 	bl	8004828 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005478:	f7ff f9d6 	bl	8004828 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e17a      	b.n	8005780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800548a:	4b1d      	ldr	r3, [pc, #116]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1f0      	bne.n	8005478 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d03a      	beq.n	8005518 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d019      	beq.n	80054de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054aa:	4b17      	ldr	r3, [pc, #92]	; (8005508 <HAL_RCC_OscConfig+0x274>)
 80054ac:	2201      	movs	r2, #1
 80054ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054b0:	f7ff f9ba 	bl	8004828 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054b8:	f7ff f9b6 	bl	8004828 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e15a      	b.n	8005780 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ca:	4b0d      	ldr	r3, [pc, #52]	; (8005500 <HAL_RCC_OscConfig+0x26c>)
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0f0      	beq.n	80054b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80054d6:	2001      	movs	r0, #1
 80054d8:	f000 fb0a 	bl	8005af0 <RCC_Delay>
 80054dc:	e01c      	b.n	8005518 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054de:	4b0a      	ldr	r3, [pc, #40]	; (8005508 <HAL_RCC_OscConfig+0x274>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054e4:	f7ff f9a0 	bl	8004828 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054ea:	e00f      	b.n	800550c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054ec:	f7ff f99c 	bl	8004828 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d908      	bls.n	800550c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e140      	b.n	8005780 <HAL_RCC_OscConfig+0x4ec>
 80054fe:	bf00      	nop
 8005500:	40021000 	.word	0x40021000
 8005504:	42420000 	.word	0x42420000
 8005508:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800550c:	4b9e      	ldr	r3, [pc, #632]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e9      	bne.n	80054ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 80a6 	beq.w	8005672 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005526:	2300      	movs	r3, #0
 8005528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800552a:	4b97      	ldr	r3, [pc, #604]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10d      	bne.n	8005552 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005536:	4b94      	ldr	r3, [pc, #592]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	4a93      	ldr	r2, [pc, #588]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 800553c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005540:	61d3      	str	r3, [r2, #28]
 8005542:	4b91      	ldr	r3, [pc, #580]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554a:	60bb      	str	r3, [r7, #8]
 800554c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800554e:	2301      	movs	r3, #1
 8005550:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005552:	4b8e      	ldr	r3, [pc, #568]	; (800578c <HAL_RCC_OscConfig+0x4f8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555a:	2b00      	cmp	r3, #0
 800555c:	d118      	bne.n	8005590 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800555e:	4b8b      	ldr	r3, [pc, #556]	; (800578c <HAL_RCC_OscConfig+0x4f8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a8a      	ldr	r2, [pc, #552]	; (800578c <HAL_RCC_OscConfig+0x4f8>)
 8005564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800556a:	f7ff f95d 	bl	8004828 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005572:	f7ff f959 	bl	8004828 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b64      	cmp	r3, #100	; 0x64
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e0fd      	b.n	8005780 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005584:	4b81      	ldr	r3, [pc, #516]	; (800578c <HAL_RCC_OscConfig+0x4f8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0f0      	beq.n	8005572 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d106      	bne.n	80055a6 <HAL_RCC_OscConfig+0x312>
 8005598:	4b7b      	ldr	r3, [pc, #492]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	4a7a      	ldr	r2, [pc, #488]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	6213      	str	r3, [r2, #32]
 80055a4:	e02d      	b.n	8005602 <HAL_RCC_OscConfig+0x36e>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10c      	bne.n	80055c8 <HAL_RCC_OscConfig+0x334>
 80055ae:	4b76      	ldr	r3, [pc, #472]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	4a75      	ldr	r2, [pc, #468]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 80055b4:	f023 0301 	bic.w	r3, r3, #1
 80055b8:	6213      	str	r3, [r2, #32]
 80055ba:	4b73      	ldr	r3, [pc, #460]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	4a72      	ldr	r2, [pc, #456]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 80055c0:	f023 0304 	bic.w	r3, r3, #4
 80055c4:	6213      	str	r3, [r2, #32]
 80055c6:	e01c      	b.n	8005602 <HAL_RCC_OscConfig+0x36e>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	2b05      	cmp	r3, #5
 80055ce:	d10c      	bne.n	80055ea <HAL_RCC_OscConfig+0x356>
 80055d0:	4b6d      	ldr	r3, [pc, #436]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	4a6c      	ldr	r2, [pc, #432]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 80055d6:	f043 0304 	orr.w	r3, r3, #4
 80055da:	6213      	str	r3, [r2, #32]
 80055dc:	4b6a      	ldr	r3, [pc, #424]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	4a69      	ldr	r2, [pc, #420]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 80055e2:	f043 0301 	orr.w	r3, r3, #1
 80055e6:	6213      	str	r3, [r2, #32]
 80055e8:	e00b      	b.n	8005602 <HAL_RCC_OscConfig+0x36e>
 80055ea:	4b67      	ldr	r3, [pc, #412]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	4a66      	ldr	r2, [pc, #408]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 80055f0:	f023 0301 	bic.w	r3, r3, #1
 80055f4:	6213      	str	r3, [r2, #32]
 80055f6:	4b64      	ldr	r3, [pc, #400]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	4a63      	ldr	r2, [pc, #396]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 80055fc:	f023 0304 	bic.w	r3, r3, #4
 8005600:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d015      	beq.n	8005636 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800560a:	f7ff f90d 	bl	8004828 <HAL_GetTick>
 800560e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005610:	e00a      	b.n	8005628 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005612:	f7ff f909 	bl	8004828 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005620:	4293      	cmp	r3, r2
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e0ab      	b.n	8005780 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005628:	4b57      	ldr	r3, [pc, #348]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0ee      	beq.n	8005612 <HAL_RCC_OscConfig+0x37e>
 8005634:	e014      	b.n	8005660 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005636:	f7ff f8f7 	bl	8004828 <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800563c:	e00a      	b.n	8005654 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800563e:	f7ff f8f3 	bl	8004828 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	f241 3288 	movw	r2, #5000	; 0x1388
 800564c:	4293      	cmp	r3, r2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e095      	b.n	8005780 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005654:	4b4c      	ldr	r3, [pc, #304]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1ee      	bne.n	800563e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005660:	7dfb      	ldrb	r3, [r7, #23]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d105      	bne.n	8005672 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005666:	4b48      	ldr	r3, [pc, #288]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	4a47      	ldr	r2, [pc, #284]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 800566c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005670:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 8081 	beq.w	800577e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800567c:	4b42      	ldr	r3, [pc, #264]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f003 030c 	and.w	r3, r3, #12
 8005684:	2b08      	cmp	r3, #8
 8005686:	d061      	beq.n	800574c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	2b02      	cmp	r3, #2
 800568e:	d146      	bne.n	800571e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005690:	4b3f      	ldr	r3, [pc, #252]	; (8005790 <HAL_RCC_OscConfig+0x4fc>)
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005696:	f7ff f8c7 	bl	8004828 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800569e:	f7ff f8c3 	bl	8004828 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e067      	b.n	8005780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056b0:	4b35      	ldr	r3, [pc, #212]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1f0      	bne.n	800569e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c4:	d108      	bne.n	80056d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80056c6:	4b30      	ldr	r3, [pc, #192]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	492d      	ldr	r1, [pc, #180]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056d8:	4b2b      	ldr	r3, [pc, #172]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a19      	ldr	r1, [r3, #32]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	430b      	orrs	r3, r1
 80056ea:	4927      	ldr	r1, [pc, #156]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056f0:	4b27      	ldr	r3, [pc, #156]	; (8005790 <HAL_RCC_OscConfig+0x4fc>)
 80056f2:	2201      	movs	r2, #1
 80056f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f6:	f7ff f897 	bl	8004828 <HAL_GetTick>
 80056fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056fc:	e008      	b.n	8005710 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056fe:	f7ff f893 	bl	8004828 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d901      	bls.n	8005710 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e037      	b.n	8005780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005710:	4b1d      	ldr	r3, [pc, #116]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0f0      	beq.n	80056fe <HAL_RCC_OscConfig+0x46a>
 800571c:	e02f      	b.n	800577e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800571e:	4b1c      	ldr	r3, [pc, #112]	; (8005790 <HAL_RCC_OscConfig+0x4fc>)
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005724:	f7ff f880 	bl	8004828 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800572c:	f7ff f87c 	bl	8004828 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e020      	b.n	8005780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800573e:	4b12      	ldr	r3, [pc, #72]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f0      	bne.n	800572c <HAL_RCC_OscConfig+0x498>
 800574a:	e018      	b.n	800577e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d101      	bne.n	8005758 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e013      	b.n	8005780 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005758:	4b0b      	ldr	r3, [pc, #44]	; (8005788 <HAL_RCC_OscConfig+0x4f4>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	429a      	cmp	r2, r3
 800576a:	d106      	bne.n	800577a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005776:	429a      	cmp	r2, r3
 8005778:	d001      	beq.n	800577e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40021000 	.word	0x40021000
 800578c:	40007000 	.word	0x40007000
 8005790:	42420060 	.word	0x42420060

08005794 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e0d0      	b.n	800594a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057a8:	4b6a      	ldr	r3, [pc, #424]	; (8005954 <HAL_RCC_ClockConfig+0x1c0>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d910      	bls.n	80057d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057b6:	4b67      	ldr	r3, [pc, #412]	; (8005954 <HAL_RCC_ClockConfig+0x1c0>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f023 0207 	bic.w	r2, r3, #7
 80057be:	4965      	ldr	r1, [pc, #404]	; (8005954 <HAL_RCC_ClockConfig+0x1c0>)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c6:	4b63      	ldr	r3, [pc, #396]	; (8005954 <HAL_RCC_ClockConfig+0x1c0>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d001      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0b8      	b.n	800594a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d020      	beq.n	8005826 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d005      	beq.n	80057fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057f0:	4b59      	ldr	r3, [pc, #356]	; (8005958 <HAL_RCC_ClockConfig+0x1c4>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	4a58      	ldr	r2, [pc, #352]	; (8005958 <HAL_RCC_ClockConfig+0x1c4>)
 80057f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80057fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005808:	4b53      	ldr	r3, [pc, #332]	; (8005958 <HAL_RCC_ClockConfig+0x1c4>)
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	4a52      	ldr	r2, [pc, #328]	; (8005958 <HAL_RCC_ClockConfig+0x1c4>)
 800580e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005812:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005814:	4b50      	ldr	r3, [pc, #320]	; (8005958 <HAL_RCC_ClockConfig+0x1c4>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	494d      	ldr	r1, [pc, #308]	; (8005958 <HAL_RCC_ClockConfig+0x1c4>)
 8005822:	4313      	orrs	r3, r2
 8005824:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d040      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d107      	bne.n	800584a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800583a:	4b47      	ldr	r3, [pc, #284]	; (8005958 <HAL_RCC_ClockConfig+0x1c4>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d115      	bne.n	8005872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e07f      	b.n	800594a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b02      	cmp	r3, #2
 8005850:	d107      	bne.n	8005862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005852:	4b41      	ldr	r3, [pc, #260]	; (8005958 <HAL_RCC_ClockConfig+0x1c4>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d109      	bne.n	8005872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e073      	b.n	800594a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005862:	4b3d      	ldr	r3, [pc, #244]	; (8005958 <HAL_RCC_ClockConfig+0x1c4>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e06b      	b.n	800594a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005872:	4b39      	ldr	r3, [pc, #228]	; (8005958 <HAL_RCC_ClockConfig+0x1c4>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f023 0203 	bic.w	r2, r3, #3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	4936      	ldr	r1, [pc, #216]	; (8005958 <HAL_RCC_ClockConfig+0x1c4>)
 8005880:	4313      	orrs	r3, r2
 8005882:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005884:	f7fe ffd0 	bl	8004828 <HAL_GetTick>
 8005888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800588a:	e00a      	b.n	80058a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800588c:	f7fe ffcc 	bl	8004828 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	f241 3288 	movw	r2, #5000	; 0x1388
 800589a:	4293      	cmp	r3, r2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e053      	b.n	800594a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058a2:	4b2d      	ldr	r3, [pc, #180]	; (8005958 <HAL_RCC_ClockConfig+0x1c4>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f003 020c 	and.w	r2, r3, #12
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d1eb      	bne.n	800588c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058b4:	4b27      	ldr	r3, [pc, #156]	; (8005954 <HAL_RCC_ClockConfig+0x1c0>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d210      	bcs.n	80058e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058c2:	4b24      	ldr	r3, [pc, #144]	; (8005954 <HAL_RCC_ClockConfig+0x1c0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f023 0207 	bic.w	r2, r3, #7
 80058ca:	4922      	ldr	r1, [pc, #136]	; (8005954 <HAL_RCC_ClockConfig+0x1c0>)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058d2:	4b20      	ldr	r3, [pc, #128]	; (8005954 <HAL_RCC_ClockConfig+0x1c0>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d001      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e032      	b.n	800594a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d008      	beq.n	8005902 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058f0:	4b19      	ldr	r3, [pc, #100]	; (8005958 <HAL_RCC_ClockConfig+0x1c4>)
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	4916      	ldr	r1, [pc, #88]	; (8005958 <HAL_RCC_ClockConfig+0x1c4>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	2b00      	cmp	r3, #0
 800590c:	d009      	beq.n	8005922 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800590e:	4b12      	ldr	r3, [pc, #72]	; (8005958 <HAL_RCC_ClockConfig+0x1c4>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	490e      	ldr	r1, [pc, #56]	; (8005958 <HAL_RCC_ClockConfig+0x1c4>)
 800591e:	4313      	orrs	r3, r2
 8005920:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005922:	f000 f821 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 8005926:	4601      	mov	r1, r0
 8005928:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <HAL_RCC_ClockConfig+0x1c4>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	091b      	lsrs	r3, r3, #4
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	4a0a      	ldr	r2, [pc, #40]	; (800595c <HAL_RCC_ClockConfig+0x1c8>)
 8005934:	5cd3      	ldrb	r3, [r2, r3]
 8005936:	fa21 f303 	lsr.w	r3, r1, r3
 800593a:	4a09      	ldr	r2, [pc, #36]	; (8005960 <HAL_RCC_ClockConfig+0x1cc>)
 800593c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800593e:	4b09      	ldr	r3, [pc, #36]	; (8005964 <HAL_RCC_ClockConfig+0x1d0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4618      	mov	r0, r3
 8005944:	f7fe fbaa 	bl	800409c <HAL_InitTick>

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	40022000 	.word	0x40022000
 8005958:	40021000 	.word	0x40021000
 800595c:	0800a058 	.word	0x0800a058
 8005960:	20000018 	.word	0x20000018
 8005964:	2000001c 	.word	0x2000001c

08005968 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005968:	b490      	push	{r4, r7}
 800596a:	b08a      	sub	sp, #40	; 0x28
 800596c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800596e:	4b2a      	ldr	r3, [pc, #168]	; (8005a18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005970:	1d3c      	adds	r4, r7, #4
 8005972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005974:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005978:	4b28      	ldr	r3, [pc, #160]	; (8005a1c <HAL_RCC_GetSysClockFreq+0xb4>)
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	61fb      	str	r3, [r7, #28]
 8005982:	2300      	movs	r3, #0
 8005984:	61bb      	str	r3, [r7, #24]
 8005986:	2300      	movs	r3, #0
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
 800598a:	2300      	movs	r3, #0
 800598c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005992:	4b23      	ldr	r3, [pc, #140]	; (8005a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	f003 030c 	and.w	r3, r3, #12
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d002      	beq.n	80059a8 <HAL_RCC_GetSysClockFreq+0x40>
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d003      	beq.n	80059ae <HAL_RCC_GetSysClockFreq+0x46>
 80059a6:	e02d      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059a8:	4b1e      	ldr	r3, [pc, #120]	; (8005a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059aa:	623b      	str	r3, [r7, #32]
      break;
 80059ac:	e02d      	b.n	8005a0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	0c9b      	lsrs	r3, r3, #18
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80059ba:	4413      	add	r3, r2
 80059bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80059c0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d013      	beq.n	80059f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80059cc:	4b14      	ldr	r3, [pc, #80]	; (8005a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	0c5b      	lsrs	r3, r3, #17
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80059da:	4413      	add	r3, r2
 80059dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80059e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	4a0f      	ldr	r2, [pc, #60]	; (8005a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059e6:	fb02 f203 	mul.w	r2, r2, r3
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
 80059f2:	e004      	b.n	80059fe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	4a0c      	ldr	r2, [pc, #48]	; (8005a28 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059f8:	fb02 f303 	mul.w	r3, r2, r3
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	623b      	str	r3, [r7, #32]
      break;
 8005a02:	e002      	b.n	8005a0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a04:	4b07      	ldr	r3, [pc, #28]	; (8005a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a06:	623b      	str	r3, [r7, #32]
      break;
 8005a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3728      	adds	r7, #40	; 0x28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc90      	pop	{r4, r7}
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	08009eb4 	.word	0x08009eb4
 8005a1c:	08009ec4 	.word	0x08009ec4
 8005a20:	40021000 	.word	0x40021000
 8005a24:	007a1200 	.word	0x007a1200
 8005a28:	003d0900 	.word	0x003d0900

08005a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a30:	4b02      	ldr	r3, [pc, #8]	; (8005a3c <HAL_RCC_GetHCLKFreq+0x10>)
 8005a32:	681b      	ldr	r3, [r3, #0]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr
 8005a3c:	20000018 	.word	0x20000018

08005a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a44:	f7ff fff2 	bl	8005a2c <HAL_RCC_GetHCLKFreq>
 8005a48:	4601      	mov	r1, r0
 8005a4a:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	0a1b      	lsrs	r3, r3, #8
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	4a03      	ldr	r2, [pc, #12]	; (8005a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a56:	5cd3      	ldrb	r3, [r2, r3]
 8005a58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40021000 	.word	0x40021000
 8005a64:	0800a068 	.word	0x0800a068

08005a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a6c:	f7ff ffde 	bl	8005a2c <HAL_RCC_GetHCLKFreq>
 8005a70:	4601      	mov	r1, r0
 8005a72:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	0adb      	lsrs	r3, r3, #11
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	4a03      	ldr	r2, [pc, #12]	; (8005a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a7e:	5cd3      	ldrb	r3, [r2, r3]
 8005a80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	0800a068 	.word	0x0800a068

08005a90 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	220f      	movs	r2, #15
 8005a9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005aa0:	4b11      	ldr	r3, [pc, #68]	; (8005ae8 <HAL_RCC_GetClockConfig+0x58>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f003 0203 	and.w	r2, r3, #3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005aac:	4b0e      	ldr	r3, [pc, #56]	; (8005ae8 <HAL_RCC_GetClockConfig+0x58>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ab8:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <HAL_RCC_GetClockConfig+0x58>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005ac4:	4b08      	ldr	r3, [pc, #32]	; (8005ae8 <HAL_RCC_GetClockConfig+0x58>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	08db      	lsrs	r3, r3, #3
 8005aca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ad2:	4b06      	ldr	r3, [pc, #24]	; (8005aec <HAL_RCC_GetClockConfig+0x5c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0207 	and.w	r2, r3, #7
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bc80      	pop	{r7}
 8005ae6:	4770      	bx	lr
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	40022000 	.word	0x40022000

08005af0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005af8:	4b0a      	ldr	r3, [pc, #40]	; (8005b24 <RCC_Delay+0x34>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a0a      	ldr	r2, [pc, #40]	; (8005b28 <RCC_Delay+0x38>)
 8005afe:	fba2 2303 	umull	r2, r3, r2, r3
 8005b02:	0a5b      	lsrs	r3, r3, #9
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	fb02 f303 	mul.w	r3, r2, r3
 8005b0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b0c:	bf00      	nop
  }
  while (Delay --);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	1e5a      	subs	r2, r3, #1
 8005b12:	60fa      	str	r2, [r7, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1f9      	bne.n	8005b0c <RCC_Delay+0x1c>
}
 8005b18:	bf00      	nop
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20000018 	.word	0x20000018
 8005b28:	10624dd3 	.word	0x10624dd3

08005b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e041      	b.n	8005bc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d106      	bne.n	8005b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f839 	bl	8005bca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3304      	adds	r3, #4
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	f000 f9b4 	bl	8005ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005bd2:	bf00      	nop
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr

08005bdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d001      	beq.n	8005bf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e03a      	b.n	8005c6a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0201 	orr.w	r2, r2, #1
 8005c0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a18      	ldr	r2, [pc, #96]	; (8005c74 <HAL_TIM_Base_Start_IT+0x98>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00e      	beq.n	8005c34 <HAL_TIM_Base_Start_IT+0x58>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c1e:	d009      	beq.n	8005c34 <HAL_TIM_Base_Start_IT+0x58>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a14      	ldr	r2, [pc, #80]	; (8005c78 <HAL_TIM_Base_Start_IT+0x9c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d004      	beq.n	8005c34 <HAL_TIM_Base_Start_IT+0x58>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a13      	ldr	r2, [pc, #76]	; (8005c7c <HAL_TIM_Base_Start_IT+0xa0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d111      	bne.n	8005c58 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b06      	cmp	r3, #6
 8005c44:	d010      	beq.n	8005c68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f042 0201 	orr.w	r2, r2, #1
 8005c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c56:	e007      	b.n	8005c68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0201 	orr.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr
 8005c74:	40012c00 	.word	0x40012c00
 8005c78:	40000400 	.word	0x40000400
 8005c7c:	40000800 	.word	0x40000800

08005c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d122      	bne.n	8005cdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d11b      	bne.n	8005cdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f06f 0202 	mvn.w	r2, #2
 8005cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f8ed 	bl	8005ea2 <HAL_TIM_IC_CaptureCallback>
 8005cc8:	e005      	b.n	8005cd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f8e0 	bl	8005e90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f8ef 	bl	8005eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d122      	bne.n	8005d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d11b      	bne.n	8005d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f06f 0204 	mvn.w	r2, #4
 8005d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f8c3 	bl	8005ea2 <HAL_TIM_IC_CaptureCallback>
 8005d1c:	e005      	b.n	8005d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f8b6 	bl	8005e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f8c5 	bl	8005eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	f003 0308 	and.w	r3, r3, #8
 8005d3a:	2b08      	cmp	r3, #8
 8005d3c:	d122      	bne.n	8005d84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d11b      	bne.n	8005d84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f06f 0208 	mvn.w	r2, #8
 8005d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2204      	movs	r2, #4
 8005d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f899 	bl	8005ea2 <HAL_TIM_IC_CaptureCallback>
 8005d70:	e005      	b.n	8005d7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f88c 	bl	8005e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f89b 	bl	8005eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	f003 0310 	and.w	r3, r3, #16
 8005d8e:	2b10      	cmp	r3, #16
 8005d90:	d122      	bne.n	8005dd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f003 0310 	and.w	r3, r3, #16
 8005d9c:	2b10      	cmp	r3, #16
 8005d9e:	d11b      	bne.n	8005dd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f06f 0210 	mvn.w	r2, #16
 8005da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2208      	movs	r2, #8
 8005dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f86f 	bl	8005ea2 <HAL_TIM_IC_CaptureCallback>
 8005dc4:	e005      	b.n	8005dd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f862 	bl	8005e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f871 	bl	8005eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d10e      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d107      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f06f 0201 	mvn.w	r2, #1
 8005dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fb f9a8 	bl	8001154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0e:	2b80      	cmp	r3, #128	; 0x80
 8005e10:	d10e      	bne.n	8005e30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1c:	2b80      	cmp	r3, #128	; 0x80
 8005e1e:	d107      	bne.n	8005e30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f8bf 	bl	8005fae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3a:	2b40      	cmp	r3, #64	; 0x40
 8005e3c:	d10e      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e48:	2b40      	cmp	r3, #64	; 0x40
 8005e4a:	d107      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f835 	bl	8005ec6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b20      	cmp	r3, #32
 8005e68:	d10e      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b20      	cmp	r3, #32
 8005e76:	d107      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0220 	mvn.w	r2, #32
 8005e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f88a 	bl	8005f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr

08005ea2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eaa:	bf00      	nop
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bc80      	pop	{r7}
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc80      	pop	{r7}
 8005ec4:	4770      	bx	lr

08005ec6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr

08005ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a29      	ldr	r2, [pc, #164]	; (8005f90 <TIM_Base_SetConfig+0xb8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00b      	beq.n	8005f08 <TIM_Base_SetConfig+0x30>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef6:	d007      	beq.n	8005f08 <TIM_Base_SetConfig+0x30>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a26      	ldr	r2, [pc, #152]	; (8005f94 <TIM_Base_SetConfig+0xbc>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d003      	beq.n	8005f08 <TIM_Base_SetConfig+0x30>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a25      	ldr	r2, [pc, #148]	; (8005f98 <TIM_Base_SetConfig+0xc0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d108      	bne.n	8005f1a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a1c      	ldr	r2, [pc, #112]	; (8005f90 <TIM_Base_SetConfig+0xb8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00b      	beq.n	8005f3a <TIM_Base_SetConfig+0x62>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f28:	d007      	beq.n	8005f3a <TIM_Base_SetConfig+0x62>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a19      	ldr	r2, [pc, #100]	; (8005f94 <TIM_Base_SetConfig+0xbc>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d003      	beq.n	8005f3a <TIM_Base_SetConfig+0x62>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a18      	ldr	r2, [pc, #96]	; (8005f98 <TIM_Base_SetConfig+0xc0>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d108      	bne.n	8005f4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a07      	ldr	r2, [pc, #28]	; (8005f90 <TIM_Base_SetConfig+0xb8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d103      	bne.n	8005f80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	691a      	ldr	r2, [r3, #16]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	615a      	str	r2, [r3, #20]
}
 8005f86:	bf00      	nop
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bc80      	pop	{r7}
 8005f8e:	4770      	bx	lr
 8005f90:	40012c00 	.word	0x40012c00
 8005f94:	40000400 	.word	0x40000400
 8005f98:	40000800 	.word	0x40000800

08005f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bc80      	pop	{r7}
 8005fac:	4770      	bx	lr

08005fae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bc80      	pop	{r7}
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e03f      	b.n	8006052 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d106      	bne.n	8005fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7fd ff20 	bl	8003e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2224      	movs	r2, #36	; 0x24
 8005ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006002:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fe13 	bl	8006c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	691a      	ldr	r2, [r3, #16]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006018:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695a      	ldr	r2, [r3, #20]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006028:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68da      	ldr	r2, [r3, #12]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006038:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b082      	sub	sp, #8
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e047      	b.n	80060fc <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d106      	bne.n	8006086 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7fd fed3 	bl	8003e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2224      	movs	r2, #36	; 0x24
 800608a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800609c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fdc6 	bl	8006c30 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691a      	ldr	r2, [r3, #16]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	695a      	ldr	r2, [r3, #20]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80060c2:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695a      	ldr	r2, [r3, #20]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0208 	orr.w	r2, r2, #8
 80060d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08a      	sub	sp, #40	; 0x28
 8006108:	af02      	add	r7, sp, #8
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	603b      	str	r3, [r7, #0]
 8006110:	4613      	mov	r3, r2
 8006112:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b20      	cmp	r3, #32
 8006122:	d17c      	bne.n	800621e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <HAL_UART_Transmit+0x2c>
 800612a:	88fb      	ldrh	r3, [r7, #6]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e075      	b.n	8006220 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800613a:	2b01      	cmp	r3, #1
 800613c:	d101      	bne.n	8006142 <HAL_UART_Transmit+0x3e>
 800613e:	2302      	movs	r3, #2
 8006140:	e06e      	b.n	8006220 <HAL_UART_Transmit+0x11c>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2221      	movs	r2, #33	; 0x21
 8006154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006158:	f7fe fb66 	bl	8004828 <HAL_GetTick>
 800615c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	88fa      	ldrh	r2, [r7, #6]
 8006162:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	88fa      	ldrh	r2, [r7, #6]
 8006168:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006172:	d108      	bne.n	8006186 <HAL_UART_Transmit+0x82>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d104      	bne.n	8006186 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800617c:	2300      	movs	r3, #0
 800617e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	61bb      	str	r3, [r7, #24]
 8006184:	e003      	b.n	800618e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800618a:	2300      	movs	r3, #0
 800618c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006196:	e02a      	b.n	80061ee <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	2200      	movs	r2, #0
 80061a0:	2180      	movs	r1, #128	; 0x80
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 fbcc 	bl	8006940 <UART_WaitOnFlagUntilTimeout>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e036      	b.n	8006220 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10b      	bne.n	80061d0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	461a      	mov	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061c6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	3302      	adds	r3, #2
 80061cc:	61bb      	str	r3, [r7, #24]
 80061ce:	e007      	b.n	80061e0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	781a      	ldrb	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	3301      	adds	r3, #1
 80061de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1cf      	bne.n	8006198 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	2200      	movs	r2, #0
 8006200:	2140      	movs	r1, #64	; 0x40
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f000 fb9c 	bl	8006940 <UART_WaitOnFlagUntilTimeout>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e006      	b.n	8006220 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2220      	movs	r2, #32
 8006216:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	e000      	b.n	8006220 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800621e:	2302      	movs	r3, #2
  }
}
 8006220:	4618      	mov	r0, r3
 8006222:	3720      	adds	r7, #32
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	4613      	mov	r3, r2
 8006234:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b20      	cmp	r3, #32
 8006240:	d153      	bne.n	80062ea <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <HAL_UART_Transmit_DMA+0x26>
 8006248:	88fb      	ldrh	r3, [r7, #6]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e04c      	b.n	80062ec <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_UART_Transmit_DMA+0x38>
 800625c:	2302      	movs	r3, #2
 800625e:	e045      	b.n	80062ec <HAL_UART_Transmit_DMA+0xc4>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	88fa      	ldrh	r2, [r7, #6]
 8006272:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	88fa      	ldrh	r2, [r7, #6]
 8006278:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2221      	movs	r2, #33	; 0x21
 8006284:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628c:	4a19      	ldr	r2, [pc, #100]	; (80062f4 <HAL_UART_Transmit_DMA+0xcc>)
 800628e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006294:	4a18      	ldr	r2, [pc, #96]	; (80062f8 <HAL_UART_Transmit_DMA+0xd0>)
 8006296:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629c:	4a17      	ldr	r2, [pc, #92]	; (80062fc <HAL_UART_Transmit_DMA+0xd4>)
 800629e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a4:	2200      	movs	r2, #0
 80062a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80062a8:	f107 0308 	add.w	r3, r7, #8
 80062ac:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	6819      	ldr	r1, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3304      	adds	r3, #4
 80062bc:	461a      	mov	r2, r3
 80062be:	88fb      	ldrh	r3, [r7, #6]
 80062c0:	f7fe fc18 	bl	8004af4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062cc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695a      	ldr	r2, [r3, #20]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062e4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	e000      	b.n	80062ec <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80062ea:	2302      	movs	r3, #2
  }
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	080067bb 	.word	0x080067bb
 80062f8:	0800680d 	.word	0x0800680d
 80062fc:	080068ad 	.word	0x080068ad

08006300 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	4613      	mov	r3, r2
 800630c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b20      	cmp	r3, #32
 8006318:	d166      	bne.n	80063e8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <HAL_UART_Receive_DMA+0x26>
 8006320:	88fb      	ldrh	r3, [r7, #6]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e05f      	b.n	80063ea <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_UART_Receive_DMA+0x38>
 8006334:	2302      	movs	r3, #2
 8006336:	e058      	b.n	80063ea <HAL_UART_Receive_DMA+0xea>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	88fa      	ldrh	r2, [r7, #6]
 800634a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2222      	movs	r2, #34	; 0x22
 8006356:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635e:	4a25      	ldr	r2, [pc, #148]	; (80063f4 <HAL_UART_Receive_DMA+0xf4>)
 8006360:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006366:	4a24      	ldr	r2, [pc, #144]	; (80063f8 <HAL_UART_Receive_DMA+0xf8>)
 8006368:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636e:	4a23      	ldr	r2, [pc, #140]	; (80063fc <HAL_UART_Receive_DMA+0xfc>)
 8006370:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006376:	2200      	movs	r2, #0
 8006378:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800637a:	f107 0308 	add.w	r3, r7, #8
 800637e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3304      	adds	r3, #4
 800638a:	4619      	mov	r1, r3
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	88fb      	ldrh	r3, [r7, #6]
 8006392:	f7fe fbaf 	bl	8004af4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006396:	2300      	movs	r3, #0
 8006398:	613b      	str	r3, [r7, #16]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	613b      	str	r3, [r7, #16]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	613b      	str	r3, [r7, #16]
 80063aa:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063c2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695a      	ldr	r2, [r3, #20]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695a      	ldr	r2, [r3, #20]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063e2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	e000      	b.n	80063ea <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80063e8:	2302      	movs	r3, #2
  }
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3718      	adds	r7, #24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	08006829 	.word	0x08006829
 80063f8:	08006891 	.word	0x08006891
 80063fc:	080068ad 	.word	0x080068ad

08006400 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006408:	2300      	movs	r3, #0
 800640a:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006416:	2b00      	cmp	r3, #0
 8006418:	bf14      	ite	ne
 800641a:	2301      	movne	r3, #1
 800641c:	2300      	moveq	r3, #0
 800641e:	b2db      	uxtb	r3, r3
 8006420:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b21      	cmp	r3, #33	; 0x21
 800642c:	d116      	bne.n	800645c <HAL_UART_DMAStop+0x5c>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d013      	beq.n	800645c <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695a      	ldr	r2, [r3, #20]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006442:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006448:	2b00      	cmp	r3, #0
 800644a:	d004      	beq.n	8006456 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	4618      	mov	r0, r3
 8006452:	f7fe fbae 	bl	8004bb2 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fabc 	bl	80069d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006466:	2b00      	cmp	r3, #0
 8006468:	bf14      	ite	ne
 800646a:	2301      	movne	r3, #1
 800646c:	2300      	moveq	r3, #0
 800646e:	b2db      	uxtb	r3, r3
 8006470:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b22      	cmp	r3, #34	; 0x22
 800647c:	d116      	bne.n	80064ac <HAL_UART_DMAStop+0xac>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d013      	beq.n	80064ac <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695a      	ldr	r2, [r3, #20]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006492:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006498:	2b00      	cmp	r3, #0
 800649a:	d004      	beq.n	80064a6 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fe fb86 	bl	8004bb2 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 faa9 	bl	80069fe <UART_EndRxTransfer>
  }

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80064d8:	2300      	movs	r3, #0
 80064da:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10d      	bne.n	800650a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	f003 0320 	and.w	r3, r3, #32
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d008      	beq.n	800650a <HAL_UART_IRQHandler+0x52>
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fb13 	bl	8006b2e <UART_Receive_IT>
      return;
 8006508:	e0d1      	b.n	80066ae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 80b0 	beq.w	8006672 <HAL_UART_IRQHandler+0x1ba>
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d105      	bne.n	8006528 <HAL_UART_IRQHandler+0x70>
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 80a5 	beq.w	8006672 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <HAL_UART_IRQHandler+0x90>
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006540:	f043 0201 	orr.w	r2, r3, #1
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f003 0304 	and.w	r3, r3, #4
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <HAL_UART_IRQHandler+0xb0>
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d005      	beq.n	8006568 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006560:	f043 0202 	orr.w	r2, r3, #2
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <HAL_UART_IRQHandler+0xd0>
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006580:	f043 0204 	orr.w	r2, r3, #4
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00f      	beq.n	80065b2 <HAL_UART_IRQHandler+0xfa>
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	f003 0320 	and.w	r3, r3, #32
 8006598:	2b00      	cmp	r3, #0
 800659a:	d104      	bne.n	80065a6 <HAL_UART_IRQHandler+0xee>
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d005      	beq.n	80065b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065aa:	f043 0208 	orr.w	r2, r3, #8
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d078      	beq.n	80066ac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	f003 0320 	and.w	r3, r3, #32
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d007      	beq.n	80065d4 <HAL_UART_IRQHandler+0x11c>
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 faad 	bl	8006b2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065de:	2b00      	cmp	r3, #0
 80065e0:	bf14      	ite	ne
 80065e2:	2301      	movne	r3, #1
 80065e4:	2300      	moveq	r3, #0
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d102      	bne.n	80065fc <HAL_UART_IRQHandler+0x144>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d031      	beq.n	8006660 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f9fe 	bl	80069fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660c:	2b00      	cmp	r3, #0
 800660e:	d023      	beq.n	8006658 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695a      	ldr	r2, [r3, #20]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800661e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006624:	2b00      	cmp	r3, #0
 8006626:	d013      	beq.n	8006650 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662c:	4a21      	ldr	r2, [pc, #132]	; (80066b4 <HAL_UART_IRQHandler+0x1fc>)
 800662e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006634:	4618      	mov	r0, r3
 8006636:	f7fe faf7 	bl	8004c28 <HAL_DMA_Abort_IT>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d016      	beq.n	800666e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800664a:	4610      	mov	r0, r2
 800664c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800664e:	e00e      	b.n	800666e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f843 	bl	80066dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006656:	e00a      	b.n	800666e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f83f 	bl	80066dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800665e:	e006      	b.n	800666e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f83b 	bl	80066dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800666c:	e01e      	b.n	80066ac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800666e:	bf00      	nop
    return;
 8006670:	e01c      	b.n	80066ac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006678:	2b00      	cmp	r3, #0
 800667a:	d008      	beq.n	800668e <HAL_UART_IRQHandler+0x1d6>
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f9ea 	bl	8006a60 <UART_Transmit_IT>
    return;
 800668c:	e00f      	b.n	80066ae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00a      	beq.n	80066ae <HAL_UART_IRQHandler+0x1f6>
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d005      	beq.n	80066ae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fa2b 	bl	8006afe <UART_EndTransmit_IT>
    return;
 80066a8:	bf00      	nop
 80066aa:	e000      	b.n	80066ae <HAL_UART_IRQHandler+0x1f6>
    return;
 80066ac:	bf00      	nop
  }
}
 80066ae:	3720      	adds	r7, #32
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	08006a39 	.word	0x08006a39

080066b8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bc80      	pop	{r7}
 80066c8:	4770      	bx	lr

080066ca <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bc80      	pop	{r7}
 80066da:	4770      	bx	lr

080066dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bc80      	pop	{r7}
 80066ec:	4770      	bx	lr

080066ee <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b085      	sub	sp, #20
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8006704:	2302      	movs	r3, #2
 8006706:	e020      	b.n	800674a <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2224      	movs	r2, #36	; 0x24
 8006714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 030c 	bic.w	r3, r3, #12
 8006726:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f043 0308 	orr.w	r3, r3, #8
 800672e:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	bc80      	pop	{r7}
 8006752:	4770      	bx	lr

08006754 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800675c:	2300      	movs	r3, #0
 800675e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_HalfDuplex_EnableReceiver+0x1a>
 800676a:	2302      	movs	r3, #2
 800676c:	e020      	b.n	80067b0 <HAL_HalfDuplex_EnableReceiver+0x5c>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2224      	movs	r2, #36	; 0x24
 800677a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f023 030c 	bic.w	r3, r3, #12
 800678c:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f043 0304 	orr.w	r3, r3, #4
 8006794:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2220      	movs	r2, #32
 80067a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr

080067ba <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0320 	and.w	r3, r3, #32
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d113      	bne.n	80067fe <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	695a      	ldr	r2, [r3, #20]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067ea:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68da      	ldr	r2, [r3, #12]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067fa:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067fc:	e002      	b.n	8006804 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f7fc fa4a 	bl	8002c98 <HAL_UART_TxCpltCallback>
}
 8006804:	bf00      	nop
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f7ff ff4c 	bl	80066b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006820:	bf00      	nop
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006834:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	d11e      	bne.n	8006882 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006858:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695a      	ldr	r2, [r3, #20]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0201 	bic.w	r2, r2, #1
 8006868:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695a      	ldr	r2, [r3, #20]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006878:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f7fc fad8 	bl	8002e38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006888:	bf00      	nop
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f7ff ff13 	bl	80066ca <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068a4:	bf00      	nop
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bf14      	ite	ne
 80068cc:	2301      	movne	r3, #1
 80068ce:	2300      	moveq	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b21      	cmp	r3, #33	; 0x21
 80068de:	d108      	bne.n	80068f2 <UART_DMAError+0x46>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d005      	beq.n	80068f2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2200      	movs	r2, #0
 80068ea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80068ec:	68b8      	ldr	r0, [r7, #8]
 80068ee:	f000 f871 	bl	80069d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	bf14      	ite	ne
 8006900:	2301      	movne	r3, #1
 8006902:	2300      	moveq	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b22      	cmp	r3, #34	; 0x22
 8006912:	d108      	bne.n	8006926 <UART_DMAError+0x7a>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2200      	movs	r2, #0
 800691e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006920:	68b8      	ldr	r0, [r7, #8]
 8006922:	f000 f86c 	bl	80069fe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692a:	f043 0210 	orr.w	r2, r3, #16
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006932:	68b8      	ldr	r0, [r7, #8]
 8006934:	f7ff fed2 	bl	80066dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006938:	bf00      	nop
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	603b      	str	r3, [r7, #0]
 800694c:	4613      	mov	r3, r2
 800694e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006950:	e02c      	b.n	80069ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006958:	d028      	beq.n	80069ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d007      	beq.n	8006970 <UART_WaitOnFlagUntilTimeout+0x30>
 8006960:	f7fd ff62 	bl	8004828 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	429a      	cmp	r2, r3
 800696e:	d21d      	bcs.n	80069ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800697e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	695a      	ldr	r2, [r3, #20]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0201 	bic.w	r2, r2, #1
 800698e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2220      	movs	r2, #32
 8006994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2220      	movs	r2, #32
 800699c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e00f      	b.n	80069cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	4013      	ands	r3, r2
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	bf0c      	ite	eq
 80069bc:	2301      	moveq	r3, #1
 80069be:	2300      	movne	r3, #0
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	461a      	mov	r2, r3
 80069c4:	79fb      	ldrb	r3, [r7, #7]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d0c3      	beq.n	8006952 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80069ea:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr

080069fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68da      	ldr	r2, [r3, #12]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a14:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	695a      	ldr	r2, [r3, #20]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0201 	bic.w	r2, r2, #1
 8006a24:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bc80      	pop	{r7}
 8006a36:	4770      	bx	lr

08006a38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f7ff fe42 	bl	80066dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a58:	bf00      	nop
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b21      	cmp	r3, #33	; 0x21
 8006a72:	d13e      	bne.n	8006af2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a7c:	d114      	bne.n	8006aa8 <UART_Transmit_IT+0x48>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d110      	bne.n	8006aa8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	1c9a      	adds	r2, r3, #2
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	621a      	str	r2, [r3, #32]
 8006aa6:	e008      	b.n	8006aba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	1c59      	adds	r1, r3, #1
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	6211      	str	r1, [r2, #32]
 8006ab2:	781a      	ldrb	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10f      	bne.n	8006aee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68da      	ldr	r2, [r3, #12]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006adc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68da      	ldr	r2, [r3, #12]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	e000      	b.n	8006af4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006af2:	2302      	movs	r3, #2
  }
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr

08006afe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b082      	sub	sp, #8
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68da      	ldr	r2, [r3, #12]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7fc f8ba 	bl	8002c98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b22      	cmp	r3, #34	; 0x22
 8006b40:	d170      	bne.n	8006c24 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b4a:	d117      	bne.n	8006b7c <UART_Receive_IT+0x4e>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d113      	bne.n	8006b7c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8006b54:	2300      	movs	r3, #0
 8006b56:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b74:	1c9a      	adds	r2, r3, #2
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	629a      	str	r2, [r3, #40]	; 0x28
 8006b7a:	e026      	b.n	8006bca <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b80:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8e:	d007      	beq.n	8006ba0 <UART_Receive_IT+0x72>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <UART_Receive_IT+0x80>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d106      	bne.n	8006bae <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	e008      	b.n	8006bc0 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d120      	bne.n	8006c20 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68da      	ldr	r2, [r3, #12]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0220 	bic.w	r2, r2, #32
 8006bec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68da      	ldr	r2, [r3, #12]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	695a      	ldr	r2, [r3, #20]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 0201 	bic.w	r2, r2, #1
 8006c0c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2220      	movs	r2, #32
 8006c12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fc f90e 	bl	8002e38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	e002      	b.n	8006c26 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	e000      	b.n	8006c26 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8006c24:	2302      	movs	r3, #2
  }
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
	...

08006c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	431a      	orrs	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006c6a:	f023 030c 	bic.w	r3, r3, #12
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6812      	ldr	r2, [r2, #0]
 8006c72:	68b9      	ldr	r1, [r7, #8]
 8006c74:	430b      	orrs	r3, r1
 8006c76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	699a      	ldr	r2, [r3, #24]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a2c      	ldr	r2, [pc, #176]	; (8006d44 <UART_SetConfig+0x114>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d103      	bne.n	8006ca0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006c98:	f7fe fee6 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	e002      	b.n	8006ca6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006ca0:	f7fe fece 	bl	8005a40 <HAL_RCC_GetPCLK1Freq>
 8006ca4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	009a      	lsls	r2, r3, #2
 8006cb0:	441a      	add	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cbc:	4a22      	ldr	r2, [pc, #136]	; (8006d48 <UART_SetConfig+0x118>)
 8006cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	0119      	lsls	r1, r3, #4
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	009a      	lsls	r2, r3, #2
 8006cd0:	441a      	add	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cdc:	4b1a      	ldr	r3, [pc, #104]	; (8006d48 <UART_SetConfig+0x118>)
 8006cde:	fba3 0302 	umull	r0, r3, r3, r2
 8006ce2:	095b      	lsrs	r3, r3, #5
 8006ce4:	2064      	movs	r0, #100	; 0x64
 8006ce6:	fb00 f303 	mul.w	r3, r0, r3
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	011b      	lsls	r3, r3, #4
 8006cee:	3332      	adds	r3, #50	; 0x32
 8006cf0:	4a15      	ldr	r2, [pc, #84]	; (8006d48 <UART_SetConfig+0x118>)
 8006cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cfc:	4419      	add	r1, r3
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	4613      	mov	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	009a      	lsls	r2, r3, #2
 8006d08:	441a      	add	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d14:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <UART_SetConfig+0x118>)
 8006d16:	fba3 0302 	umull	r0, r3, r3, r2
 8006d1a:	095b      	lsrs	r3, r3, #5
 8006d1c:	2064      	movs	r0, #100	; 0x64
 8006d1e:	fb00 f303 	mul.w	r3, r0, r3
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	011b      	lsls	r3, r3, #4
 8006d26:	3332      	adds	r3, #50	; 0x32
 8006d28:	4a07      	ldr	r2, [pc, #28]	; (8006d48 <UART_SetConfig+0x118>)
 8006d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2e:	095b      	lsrs	r3, r3, #5
 8006d30:	f003 020f 	and.w	r2, r3, #15
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	440a      	add	r2, r1
 8006d3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006d3c:	bf00      	nop
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	40013800 	.word	0x40013800
 8006d48:	51eb851f 	.word	0x51eb851f

08006d4c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d52:	f3ef 8305 	mrs	r3, IPSR
 8006d56:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10f      	bne.n	8006d7e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d62:	607b      	str	r3, [r7, #4]
  return(result);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d109      	bne.n	8006d7e <osKernelInitialize+0x32>
 8006d6a:	4b10      	ldr	r3, [pc, #64]	; (8006dac <osKernelInitialize+0x60>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d109      	bne.n	8006d86 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d72:	f3ef 8311 	mrs	r3, BASEPRI
 8006d76:	603b      	str	r3, [r7, #0]
  return(result);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006d7e:	f06f 0305 	mvn.w	r3, #5
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	e00c      	b.n	8006da0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d86:	4b09      	ldr	r3, [pc, #36]	; (8006dac <osKernelInitialize+0x60>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d105      	bne.n	8006d9a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006d8e:	4b07      	ldr	r3, [pc, #28]	; (8006dac <osKernelInitialize+0x60>)
 8006d90:	2201      	movs	r2, #1
 8006d92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	e002      	b.n	8006da0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006da0:	68fb      	ldr	r3, [r7, #12]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bc80      	pop	{r7}
 8006daa:	4770      	bx	lr
 8006dac:	20000b2c 	.word	0x20000b2c

08006db0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006db6:	f3ef 8305 	mrs	r3, IPSR
 8006dba:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10f      	bne.n	8006de2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8006dc6:	607b      	str	r3, [r7, #4]
  return(result);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d109      	bne.n	8006de2 <osKernelStart+0x32>
 8006dce:	4b11      	ldr	r3, [pc, #68]	; (8006e14 <osKernelStart+0x64>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d109      	bne.n	8006dea <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8006dda:	603b      	str	r3, [r7, #0]
  return(result);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <osKernelStart+0x3a>
    stat = osErrorISR;
 8006de2:	f06f 0305 	mvn.w	r3, #5
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	e00e      	b.n	8006e08 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006dea:	4b0a      	ldr	r3, [pc, #40]	; (8006e14 <osKernelStart+0x64>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d107      	bne.n	8006e02 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006df2:	4b08      	ldr	r3, [pc, #32]	; (8006e14 <osKernelStart+0x64>)
 8006df4:	2202      	movs	r2, #2
 8006df6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006df8:	f001 f864 	bl	8007ec4 <vTaskStartScheduler>
      stat = osOK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	e002      	b.n	8006e08 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006e02:	f04f 33ff 	mov.w	r3, #4294967295
 8006e06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006e08:	68fb      	ldr	r3, [r7, #12]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20000b2c 	.word	0x20000b2c

08006e18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b092      	sub	sp, #72	; 0x48
 8006e1c:	af04      	add	r7, sp, #16
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e28:	f3ef 8305 	mrs	r3, IPSR
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f040 8094 	bne.w	8006f5e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e36:	f3ef 8310 	mrs	r3, PRIMASK
 8006e3a:	623b      	str	r3, [r7, #32]
  return(result);
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f040 808d 	bne.w	8006f5e <osThreadNew+0x146>
 8006e44:	4b48      	ldr	r3, [pc, #288]	; (8006f68 <osThreadNew+0x150>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d106      	bne.n	8006e5a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e4c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e50:	61fb      	str	r3, [r7, #28]
  return(result);
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f040 8082 	bne.w	8006f5e <osThreadNew+0x146>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d07e      	beq.n	8006f5e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006e60:	2380      	movs	r3, #128	; 0x80
 8006e62:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006e64:	2318      	movs	r3, #24
 8006e66:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006e68:	2300      	movs	r3, #0
 8006e6a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006e6c:	f107 031b 	add.w	r3, r7, #27
 8006e70:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006e72:	f04f 33ff 	mov.w	r3, #4294967295
 8006e76:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d045      	beq.n	8006f0a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <osThreadNew+0x74>
        name = attr->name;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d008      	beq.n	8006eb2 <osThreadNew+0x9a>
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	2b38      	cmp	r3, #56	; 0x38
 8006ea4:	d805      	bhi.n	8006eb2 <osThreadNew+0x9a>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <osThreadNew+0x9e>
        return (NULL);
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	e054      	b.n	8006f60 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	089b      	lsrs	r3, r3, #2
 8006ec4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00e      	beq.n	8006eec <osThreadNew+0xd4>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	2b5b      	cmp	r3, #91	; 0x5b
 8006ed4:	d90a      	bls.n	8006eec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d006      	beq.n	8006eec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <osThreadNew+0xd4>
        mem = 1;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eea:	e010      	b.n	8006f0e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10c      	bne.n	8006f0e <osThreadNew+0xf6>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d108      	bne.n	8006f0e <osThreadNew+0xf6>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d104      	bne.n	8006f0e <osThreadNew+0xf6>
          mem = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f08:	e001      	b.n	8006f0e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d110      	bne.n	8006f36 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f1c:	9202      	str	r2, [sp, #8]
 8006f1e:	9301      	str	r3, [sp, #4]
 8006f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 fe02 	bl	8007b34 <xTaskCreateStatic>
 8006f30:	4603      	mov	r3, r0
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	e013      	b.n	8006f5e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d110      	bne.n	8006f5e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	f107 0314 	add.w	r3, r7, #20
 8006f44:	9301      	str	r3, [sp, #4]
 8006f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 fe49 	bl	8007be6 <xTaskCreate>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d001      	beq.n	8006f5e <osThreadNew+0x146>
          hTask = NULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006f5e:	697b      	ldr	r3, [r7, #20]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3738      	adds	r7, #56	; 0x38
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	20000b2c 	.word	0x20000b2c

08006f6c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f74:	f3ef 8305 	mrs	r3, IPSR
 8006f78:	613b      	str	r3, [r7, #16]
  return(result);
 8006f7a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10f      	bne.n	8006fa0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f80:	f3ef 8310 	mrs	r3, PRIMASK
 8006f84:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d109      	bne.n	8006fa0 <osDelay+0x34>
 8006f8c:	4b0d      	ldr	r3, [pc, #52]	; (8006fc4 <osDelay+0x58>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d109      	bne.n	8006fa8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f94:	f3ef 8311 	mrs	r3, BASEPRI
 8006f98:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d003      	beq.n	8006fa8 <osDelay+0x3c>
    stat = osErrorISR;
 8006fa0:	f06f 0305 	mvn.w	r3, #5
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	e007      	b.n	8006fb8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 ff52 	bl	8007e5c <vTaskDelay>
    }
  }

  return (stat);
 8006fb8:	697b      	ldr	r3, [r7, #20]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3718      	adds	r7, #24
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000b2c 	.word	0x20000b2c

08006fc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4a06      	ldr	r2, [pc, #24]	; (8006ff0 <vApplicationGetIdleTaskMemory+0x28>)
 8006fd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	4a05      	ldr	r2, [pc, #20]	; (8006ff4 <vApplicationGetIdleTaskMemory+0x2c>)
 8006fde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2280      	movs	r2, #128	; 0x80
 8006fe4:	601a      	str	r2, [r3, #0]
}
 8006fe6:	bf00      	nop
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bc80      	pop	{r7}
 8006fee:	4770      	bx	lr
 8006ff0:	20000b30 	.word	0x20000b30
 8006ff4:	20000b8c 	.word	0x20000b8c

08006ff8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4a07      	ldr	r2, [pc, #28]	; (8007024 <vApplicationGetTimerTaskMemory+0x2c>)
 8007008:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	4a06      	ldr	r2, [pc, #24]	; (8007028 <vApplicationGetTimerTaskMemory+0x30>)
 800700e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007016:	601a      	str	r2, [r3, #0]
}
 8007018:	bf00      	nop
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	bc80      	pop	{r7}
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	20000d8c 	.word	0x20000d8c
 8007028:	20000de8 	.word	0x20000de8

0800702c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f103 0208 	add.w	r2, r3, #8
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f04f 32ff 	mov.w	r2, #4294967295
 8007044:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f103 0208 	add.w	r2, r3, #8
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f103 0208 	add.w	r2, r3, #8
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	bc80      	pop	{r7}
 8007068:	4770      	bx	lr

0800706a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	bc80      	pop	{r7}
 8007080:	4770      	bx	lr

08007082 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007082:	b480      	push	{r7}
 8007084:	b085      	sub	sp, #20
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	601a      	str	r2, [r3, #0]
}
 80070be:	bf00      	nop
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bc80      	pop	{r7}
 80070c6:	4770      	bx	lr

080070c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070de:	d103      	bne.n	80070e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	e00c      	b.n	8007102 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	3308      	adds	r3, #8
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	e002      	b.n	80070f6 <vListInsert+0x2e>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d2f6      	bcs.n	80070f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	601a      	str	r2, [r3, #0]
}
 800712e:	bf00      	nop
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	bc80      	pop	{r7}
 8007136:	4770      	bx	lr

08007138 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6892      	ldr	r2, [r2, #8]
 800714e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	6852      	ldr	r2, [r2, #4]
 8007158:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	429a      	cmp	r2, r3
 8007162:	d103      	bne.n	800716c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	1e5a      	subs	r2, r3, #1
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	bc80      	pop	{r7}
 8007188:	4770      	bx	lr
	...

0800718c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d109      	bne.n	80071b4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	60bb      	str	r3, [r7, #8]
 80071b2:	e7fe      	b.n	80071b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80071b4:	f001 ff98 	bl	80090e8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c0:	68f9      	ldr	r1, [r7, #12]
 80071c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071c4:	fb01 f303 	mul.w	r3, r1, r3
 80071c8:	441a      	add	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e4:	3b01      	subs	r3, #1
 80071e6:	68f9      	ldr	r1, [r7, #12]
 80071e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071ea:	fb01 f303 	mul.w	r3, r1, r3
 80071ee:	441a      	add	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	22ff      	movs	r2, #255	; 0xff
 80071f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	22ff      	movs	r2, #255	; 0xff
 8007200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d114      	bne.n	8007234 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d01a      	beq.n	8007248 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3310      	adds	r3, #16
 8007216:	4618      	mov	r0, r3
 8007218:	f001 f8d8 	bl	80083cc <xTaskRemoveFromEventList>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d012      	beq.n	8007248 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007222:	4b0d      	ldr	r3, [pc, #52]	; (8007258 <xQueueGenericReset+0xcc>)
 8007224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	e009      	b.n	8007248 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	3310      	adds	r3, #16
 8007238:	4618      	mov	r0, r3
 800723a:	f7ff fef7 	bl	800702c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3324      	adds	r3, #36	; 0x24
 8007242:	4618      	mov	r0, r3
 8007244:	f7ff fef2 	bl	800702c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007248:	f001 ff7c 	bl	8009144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800724c:	2301      	movs	r3, #1
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	e000ed04 	.word	0xe000ed04

0800725c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08e      	sub	sp, #56	; 0x38
 8007260:	af02      	add	r7, sp, #8
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
 8007268:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d109      	bne.n	8007284 <xQueueGenericCreateStatic+0x28>
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	62bb      	str	r3, [r7, #40]	; 0x28
 8007282:	e7fe      	b.n	8007282 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d109      	bne.n	800729e <xQueueGenericCreateStatic+0x42>
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	627b      	str	r3, [r7, #36]	; 0x24
 800729c:	e7fe      	b.n	800729c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <xQueueGenericCreateStatic+0x4e>
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <xQueueGenericCreateStatic+0x52>
 80072aa:	2301      	movs	r3, #1
 80072ac:	e000      	b.n	80072b0 <xQueueGenericCreateStatic+0x54>
 80072ae:	2300      	movs	r3, #0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d109      	bne.n	80072c8 <xQueueGenericCreateStatic+0x6c>
 80072b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	623b      	str	r3, [r7, #32]
 80072c6:	e7fe      	b.n	80072c6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d102      	bne.n	80072d4 <xQueueGenericCreateStatic+0x78>
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <xQueueGenericCreateStatic+0x7c>
 80072d4:	2301      	movs	r3, #1
 80072d6:	e000      	b.n	80072da <xQueueGenericCreateStatic+0x7e>
 80072d8:	2300      	movs	r3, #0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d109      	bne.n	80072f2 <xQueueGenericCreateStatic+0x96>
 80072de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	61fb      	str	r3, [r7, #28]
 80072f0:	e7fe      	b.n	80072f0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80072f2:	2350      	movs	r3, #80	; 0x50
 80072f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2b50      	cmp	r3, #80	; 0x50
 80072fa:	d009      	beq.n	8007310 <xQueueGenericCreateStatic+0xb4>
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	61bb      	str	r3, [r7, #24]
 800730e:	e7fe      	b.n	800730e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00d      	beq.n	8007336 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731c:	2201      	movs	r2, #1
 800731e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007322:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	4613      	mov	r3, r2
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	68b9      	ldr	r1, [r7, #8]
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 f805 	bl	8007340 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007338:	4618      	mov	r0, r3
 800733a:	3730      	adds	r7, #48	; 0x30
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d103      	bne.n	800735c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	69ba      	ldr	r2, [r7, #24]
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	e002      	b.n	8007362 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800736e:	2101      	movs	r1, #1
 8007370:	69b8      	ldr	r0, [r7, #24]
 8007372:	f7ff ff0b 	bl	800718c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	78fa      	ldrb	r2, [r7, #3]
 800737a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800737e:	bf00      	nop
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08e      	sub	sp, #56	; 0x38
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007396:	2300      	movs	r3, #0
 8007398:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d109      	bne.n	80073b8 <xQueueGenericSend+0x30>
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80073b6:	e7fe      	b.n	80073b6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d103      	bne.n	80073c6 <xQueueGenericSend+0x3e>
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <xQueueGenericSend+0x42>
 80073c6:	2301      	movs	r3, #1
 80073c8:	e000      	b.n	80073cc <xQueueGenericSend+0x44>
 80073ca:	2300      	movs	r3, #0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d109      	bne.n	80073e4 <xQueueGenericSend+0x5c>
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
 80073e2:	e7fe      	b.n	80073e2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d103      	bne.n	80073f2 <xQueueGenericSend+0x6a>
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d101      	bne.n	80073f6 <xQueueGenericSend+0x6e>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <xQueueGenericSend+0x70>
 80073f6:	2300      	movs	r3, #0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d109      	bne.n	8007410 <xQueueGenericSend+0x88>
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	623b      	str	r3, [r7, #32]
 800740e:	e7fe      	b.n	800740e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007410:	f001 f996 	bl	8008740 <xTaskGetSchedulerState>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d102      	bne.n	8007420 <xQueueGenericSend+0x98>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <xQueueGenericSend+0x9c>
 8007420:	2301      	movs	r3, #1
 8007422:	e000      	b.n	8007426 <xQueueGenericSend+0x9e>
 8007424:	2300      	movs	r3, #0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d109      	bne.n	800743e <xQueueGenericSend+0xb6>
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	61fb      	str	r3, [r7, #28]
 800743c:	e7fe      	b.n	800743c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800743e:	f001 fe53 	bl	80090e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744a:	429a      	cmp	r2, r3
 800744c:	d302      	bcc.n	8007454 <xQueueGenericSend+0xcc>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b02      	cmp	r3, #2
 8007452:	d129      	bne.n	80074a8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	68b9      	ldr	r1, [r7, #8]
 8007458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800745a:	f000 f9ff 	bl	800785c <prvCopyDataToQueue>
 800745e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	2b00      	cmp	r3, #0
 8007466:	d010      	beq.n	800748a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	3324      	adds	r3, #36	; 0x24
 800746c:	4618      	mov	r0, r3
 800746e:	f000 ffad 	bl	80083cc <xTaskRemoveFromEventList>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d013      	beq.n	80074a0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007478:	4b3f      	ldr	r3, [pc, #252]	; (8007578 <xQueueGenericSend+0x1f0>)
 800747a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	e00a      	b.n	80074a0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	2b00      	cmp	r3, #0
 800748e:	d007      	beq.n	80074a0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007490:	4b39      	ldr	r3, [pc, #228]	; (8007578 <xQueueGenericSend+0x1f0>)
 8007492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80074a0:	f001 fe50 	bl	8009144 <vPortExitCritical>
				return pdPASS;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e063      	b.n	8007570 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d103      	bne.n	80074b6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074ae:	f001 fe49 	bl	8009144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	e05c      	b.n	8007570 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d106      	bne.n	80074ca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074bc:	f107 0314 	add.w	r3, r7, #20
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 ffe5 	bl	8008490 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074c6:	2301      	movs	r3, #1
 80074c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074ca:	f001 fe3b 	bl	8009144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074ce:	f000 fd5d 	bl	8007f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074d2:	f001 fe09 	bl	80090e8 <vPortEnterCritical>
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074dc:	b25b      	sxtb	r3, r3
 80074de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e2:	d103      	bne.n	80074ec <xQueueGenericSend+0x164>
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074f2:	b25b      	sxtb	r3, r3
 80074f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f8:	d103      	bne.n	8007502 <xQueueGenericSend+0x17a>
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007502:	f001 fe1f 	bl	8009144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007506:	1d3a      	adds	r2, r7, #4
 8007508:	f107 0314 	add.w	r3, r7, #20
 800750c:	4611      	mov	r1, r2
 800750e:	4618      	mov	r0, r3
 8007510:	f000 ffd4 	bl	80084bc <xTaskCheckForTimeOut>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d124      	bne.n	8007564 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800751a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800751c:	f000 fa96 	bl	8007a4c <prvIsQueueFull>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d018      	beq.n	8007558 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007528:	3310      	adds	r3, #16
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	4611      	mov	r1, r2
 800752e:	4618      	mov	r0, r3
 8007530:	f000 fefe 	bl	8008330 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007536:	f000 fa21 	bl	800797c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800753a:	f000 fd35 	bl	8007fa8 <xTaskResumeAll>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	f47f af7c 	bne.w	800743e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007546:	4b0c      	ldr	r3, [pc, #48]	; (8007578 <xQueueGenericSend+0x1f0>)
 8007548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	e772      	b.n	800743e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800755a:	f000 fa0f 	bl	800797c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800755e:	f000 fd23 	bl	8007fa8 <xTaskResumeAll>
 8007562:	e76c      	b.n	800743e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007566:	f000 fa09 	bl	800797c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800756a:	f000 fd1d 	bl	8007fa8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800756e:	2300      	movs	r3, #0
		}
	}
}
 8007570:	4618      	mov	r0, r3
 8007572:	3738      	adds	r7, #56	; 0x38
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	e000ed04 	.word	0xe000ed04

0800757c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b08e      	sub	sp, #56	; 0x38
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007590:	2b00      	cmp	r3, #0
 8007592:	d109      	bne.n	80075a8 <xQueueGenericSendFromISR+0x2c>
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	627b      	str	r3, [r7, #36]	; 0x24
 80075a6:	e7fe      	b.n	80075a6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d103      	bne.n	80075b6 <xQueueGenericSendFromISR+0x3a>
 80075ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <xQueueGenericSendFromISR+0x3e>
 80075b6:	2301      	movs	r3, #1
 80075b8:	e000      	b.n	80075bc <xQueueGenericSendFromISR+0x40>
 80075ba:	2300      	movs	r3, #0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d109      	bne.n	80075d4 <xQueueGenericSendFromISR+0x58>
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	623b      	str	r3, [r7, #32]
 80075d2:	e7fe      	b.n	80075d2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d103      	bne.n	80075e2 <xQueueGenericSendFromISR+0x66>
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d101      	bne.n	80075e6 <xQueueGenericSendFromISR+0x6a>
 80075e2:	2301      	movs	r3, #1
 80075e4:	e000      	b.n	80075e8 <xQueueGenericSendFromISR+0x6c>
 80075e6:	2300      	movs	r3, #0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d109      	bne.n	8007600 <xQueueGenericSendFromISR+0x84>
 80075ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	61fb      	str	r3, [r7, #28]
 80075fe:	e7fe      	b.n	80075fe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007600:	f001 fe2c 	bl	800925c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007604:	f3ef 8211 	mrs	r2, BASEPRI
 8007608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760c:	f383 8811 	msr	BASEPRI, r3
 8007610:	f3bf 8f6f 	isb	sy
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	61ba      	str	r2, [r7, #24]
 800761a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800761c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800761e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007628:	429a      	cmp	r2, r3
 800762a:	d302      	bcc.n	8007632 <xQueueGenericSendFromISR+0xb6>
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b02      	cmp	r3, #2
 8007630:	d12c      	bne.n	800768c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	68b9      	ldr	r1, [r7, #8]
 8007640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007642:	f000 f90b 	bl	800785c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007646:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800764a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764e:	d112      	bne.n	8007676 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	2b00      	cmp	r3, #0
 8007656:	d016      	beq.n	8007686 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765a:	3324      	adds	r3, #36	; 0x24
 800765c:	4618      	mov	r0, r3
 800765e:	f000 feb5 	bl	80083cc <xTaskRemoveFromEventList>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00e      	beq.n	8007686 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00b      	beq.n	8007686 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	e007      	b.n	8007686 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007676:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800767a:	3301      	adds	r3, #1
 800767c:	b2db      	uxtb	r3, r3
 800767e:	b25a      	sxtb	r2, r3
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007686:	2301      	movs	r3, #1
 8007688:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800768a:	e001      	b.n	8007690 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800768c:	2300      	movs	r3, #0
 800768e:	637b      	str	r3, [r7, #52]	; 0x34
 8007690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007692:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800769a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800769c:	4618      	mov	r0, r3
 800769e:	3738      	adds	r7, #56	; 0x38
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08c      	sub	sp, #48	; 0x30
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80076b0:	2300      	movs	r3, #0
 80076b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d109      	bne.n	80076d2 <xQueueReceive+0x2e>
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	623b      	str	r3, [r7, #32]
 80076d0:	e7fe      	b.n	80076d0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d103      	bne.n	80076e0 <xQueueReceive+0x3c>
 80076d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <xQueueReceive+0x40>
 80076e0:	2301      	movs	r3, #1
 80076e2:	e000      	b.n	80076e6 <xQueueReceive+0x42>
 80076e4:	2300      	movs	r3, #0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d109      	bne.n	80076fe <xQueueReceive+0x5a>
 80076ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	61fb      	str	r3, [r7, #28]
 80076fc:	e7fe      	b.n	80076fc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076fe:	f001 f81f 	bl	8008740 <xTaskGetSchedulerState>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d102      	bne.n	800770e <xQueueReceive+0x6a>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <xQueueReceive+0x6e>
 800770e:	2301      	movs	r3, #1
 8007710:	e000      	b.n	8007714 <xQueueReceive+0x70>
 8007712:	2300      	movs	r3, #0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d109      	bne.n	800772c <xQueueReceive+0x88>
 8007718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	61bb      	str	r3, [r7, #24]
 800772a:	e7fe      	b.n	800772a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800772c:	f001 fcdc 	bl	80090e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007734:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	2b00      	cmp	r3, #0
 800773a:	d01f      	beq.n	800777c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800773c:	68b9      	ldr	r1, [r7, #8]
 800773e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007740:	f000 f8f6 	bl	8007930 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	1e5a      	subs	r2, r3, #1
 8007748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800774c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00f      	beq.n	8007774 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007756:	3310      	adds	r3, #16
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fe37 	bl	80083cc <xTaskRemoveFromEventList>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d007      	beq.n	8007774 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007764:	4b3c      	ldr	r3, [pc, #240]	; (8007858 <xQueueReceive+0x1b4>)
 8007766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007774:	f001 fce6 	bl	8009144 <vPortExitCritical>
				return pdPASS;
 8007778:	2301      	movs	r3, #1
 800777a:	e069      	b.n	8007850 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d103      	bne.n	800778a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007782:	f001 fcdf 	bl	8009144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007786:	2300      	movs	r3, #0
 8007788:	e062      	b.n	8007850 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	2b00      	cmp	r3, #0
 800778e:	d106      	bne.n	800779e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007790:	f107 0310 	add.w	r3, r7, #16
 8007794:	4618      	mov	r0, r3
 8007796:	f000 fe7b 	bl	8008490 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800779a:	2301      	movs	r3, #1
 800779c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800779e:	f001 fcd1 	bl	8009144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077a2:	f000 fbf3 	bl	8007f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077a6:	f001 fc9f 	bl	80090e8 <vPortEnterCritical>
 80077aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077b0:	b25b      	sxtb	r3, r3
 80077b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b6:	d103      	bne.n	80077c0 <xQueueReceive+0x11c>
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077c6:	b25b      	sxtb	r3, r3
 80077c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077cc:	d103      	bne.n	80077d6 <xQueueReceive+0x132>
 80077ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077d6:	f001 fcb5 	bl	8009144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077da:	1d3a      	adds	r2, r7, #4
 80077dc:	f107 0310 	add.w	r3, r7, #16
 80077e0:	4611      	mov	r1, r2
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fe6a 	bl	80084bc <xTaskCheckForTimeOut>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d123      	bne.n	8007836 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077f0:	f000 f916 	bl	8007a20 <prvIsQueueEmpty>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d017      	beq.n	800782a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fc:	3324      	adds	r3, #36	; 0x24
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	4611      	mov	r1, r2
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fd94 	bl	8008330 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800780a:	f000 f8b7 	bl	800797c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800780e:	f000 fbcb 	bl	8007fa8 <xTaskResumeAll>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d189      	bne.n	800772c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007818:	4b0f      	ldr	r3, [pc, #60]	; (8007858 <xQueueReceive+0x1b4>)
 800781a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	e780      	b.n	800772c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800782a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800782c:	f000 f8a6 	bl	800797c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007830:	f000 fbba 	bl	8007fa8 <xTaskResumeAll>
 8007834:	e77a      	b.n	800772c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007838:	f000 f8a0 	bl	800797c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800783c:	f000 fbb4 	bl	8007fa8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007842:	f000 f8ed 	bl	8007a20 <prvIsQueueEmpty>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	f43f af6f 	beq.w	800772c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800784e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007850:	4618      	mov	r0, r3
 8007852:	3730      	adds	r7, #48	; 0x30
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	e000ed04 	.word	0xe000ed04

0800785c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b086      	sub	sp, #24
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007868:	2300      	movs	r3, #0
 800786a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007870:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10d      	bne.n	8007896 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d14d      	bne.n	800791e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	4618      	mov	r0, r3
 8007888:	f000 ff78 	bl	800877c <xTaskPriorityDisinherit>
 800788c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	605a      	str	r2, [r3, #4]
 8007894:	e043      	b.n	800791e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d119      	bne.n	80078d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6898      	ldr	r0, [r3, #8]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a4:	461a      	mov	r2, r3
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	f001 ff2e 	bl	8009708 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	689a      	ldr	r2, [r3, #8]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b4:	441a      	add	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	689a      	ldr	r2, [r3, #8]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d32b      	bcc.n	800791e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	609a      	str	r2, [r3, #8]
 80078ce:	e026      	b.n	800791e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	68d8      	ldr	r0, [r3, #12]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d8:	461a      	mov	r2, r3
 80078da:	68b9      	ldr	r1, [r7, #8]
 80078dc:	f001 ff14 	bl	8009708 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	68da      	ldr	r2, [r3, #12]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e8:	425b      	negs	r3, r3
 80078ea:	441a      	add	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d207      	bcs.n	800790c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007904:	425b      	negs	r3, r3
 8007906:	441a      	add	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b02      	cmp	r3, #2
 8007910:	d105      	bne.n	800791e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	3b01      	subs	r3, #1
 800791c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	1c5a      	adds	r2, r3, #1
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007926:	697b      	ldr	r3, [r7, #20]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3718      	adds	r7, #24
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	2b00      	cmp	r3, #0
 8007940:	d018      	beq.n	8007974 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794a:	441a      	add	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	68da      	ldr	r2, [r3, #12]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	429a      	cmp	r2, r3
 800795a:	d303      	bcc.n	8007964 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68d9      	ldr	r1, [r3, #12]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796c:	461a      	mov	r2, r3
 800796e:	6838      	ldr	r0, [r7, #0]
 8007970:	f001 feca 	bl	8009708 <memcpy>
	}
}
 8007974:	bf00      	nop
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007984:	f001 fbb0 	bl	80090e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800798e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007990:	e011      	b.n	80079b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	2b00      	cmp	r3, #0
 8007998:	d012      	beq.n	80079c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	3324      	adds	r3, #36	; 0x24
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 fd14 	bl	80083cc <xTaskRemoveFromEventList>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80079aa:	f000 fde7 	bl	800857c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	dce9      	bgt.n	8007992 <prvUnlockQueue+0x16>
 80079be:	e000      	b.n	80079c2 <prvUnlockQueue+0x46>
					break;
 80079c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	22ff      	movs	r2, #255	; 0xff
 80079c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80079ca:	f001 fbbb 	bl	8009144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079ce:	f001 fb8b 	bl	80090e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079da:	e011      	b.n	8007a00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d012      	beq.n	8007a0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	3310      	adds	r3, #16
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 fcef 	bl	80083cc <xTaskRemoveFromEventList>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80079f4:	f000 fdc2 	bl	800857c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
 80079fa:	3b01      	subs	r3, #1
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	dce9      	bgt.n	80079dc <prvUnlockQueue+0x60>
 8007a08:	e000      	b.n	8007a0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	22ff      	movs	r2, #255	; 0xff
 8007a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a14:	f001 fb96 	bl	8009144 <vPortExitCritical>
}
 8007a18:	bf00      	nop
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a28:	f001 fb5e 	bl	80090e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d102      	bne.n	8007a3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a34:	2301      	movs	r3, #1
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	e001      	b.n	8007a3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a3e:	f001 fb81 	bl	8009144 <vPortExitCritical>

	return xReturn;
 8007a42:	68fb      	ldr	r3, [r7, #12]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a54:	f001 fb48 	bl	80090e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d102      	bne.n	8007a6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a64:	2301      	movs	r3, #1
 8007a66:	60fb      	str	r3, [r7, #12]
 8007a68:	e001      	b.n	8007a6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a6e:	f001 fb69 	bl	8009144 <vPortExitCritical>

	return xReturn;
 8007a72:	68fb      	ldr	r3, [r7, #12]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a86:	2300      	movs	r3, #0
 8007a88:	60fb      	str	r3, [r7, #12]
 8007a8a:	e014      	b.n	8007ab6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a8c:	4a0e      	ldr	r2, [pc, #56]	; (8007ac8 <vQueueAddToRegistry+0x4c>)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10b      	bne.n	8007ab0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a98:	490b      	ldr	r1, [pc, #44]	; (8007ac8 <vQueueAddToRegistry+0x4c>)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007aa2:	4a09      	ldr	r2, [pc, #36]	; (8007ac8 <vQueueAddToRegistry+0x4c>)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	00db      	lsls	r3, r3, #3
 8007aa8:	4413      	add	r3, r2
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007aae:	e005      	b.n	8007abc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	60fb      	str	r3, [r7, #12]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2b07      	cmp	r3, #7
 8007aba:	d9e7      	bls.n	8007a8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007abc:	bf00      	nop
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bc80      	pop	{r7}
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	20002680 	.word	0x20002680

08007acc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007adc:	f001 fb04 	bl	80090e8 <vPortEnterCritical>
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ae6:	b25b      	sxtb	r3, r3
 8007ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aec:	d103      	bne.n	8007af6 <vQueueWaitForMessageRestricted+0x2a>
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007afc:	b25b      	sxtb	r3, r3
 8007afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b02:	d103      	bne.n	8007b0c <vQueueWaitForMessageRestricted+0x40>
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b0c:	f001 fb1a 	bl	8009144 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d106      	bne.n	8007b26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	3324      	adds	r3, #36	; 0x24
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	68b9      	ldr	r1, [r7, #8]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 fc29 	bl	8008378 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b26:	6978      	ldr	r0, [r7, #20]
 8007b28:	f7ff ff28 	bl	800797c <prvUnlockQueue>
	}
 8007b2c:	bf00      	nop
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08e      	sub	sp, #56	; 0x38
 8007b38:	af04      	add	r7, sp, #16
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
 8007b40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d109      	bne.n	8007b5c <xTaskCreateStatic+0x28>
 8007b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	623b      	str	r3, [r7, #32]
 8007b5a:	e7fe      	b.n	8007b5a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d109      	bne.n	8007b76 <xTaskCreateStatic+0x42>
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	61fb      	str	r3, [r7, #28]
 8007b74:	e7fe      	b.n	8007b74 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b76:	235c      	movs	r3, #92	; 0x5c
 8007b78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	2b5c      	cmp	r3, #92	; 0x5c
 8007b7e:	d009      	beq.n	8007b94 <xTaskCreateStatic+0x60>
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	61bb      	str	r3, [r7, #24]
 8007b92:	e7fe      	b.n	8007b92 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d01e      	beq.n	8007bd8 <xTaskCreateStatic+0xa4>
 8007b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d01b      	beq.n	8007bd8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ba8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	2202      	movs	r2, #2
 8007bae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	9303      	str	r3, [sp, #12]
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	9302      	str	r3, [sp, #8]
 8007bba:	f107 0314 	add.w	r3, r7, #20
 8007bbe:	9301      	str	r3, [sp, #4]
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	68b9      	ldr	r1, [r7, #8]
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 f850 	bl	8007c70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bd2:	f000 f8d3 	bl	8007d7c <prvAddNewTaskToReadyList>
 8007bd6:	e001      	b.n	8007bdc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007bdc:	697b      	ldr	r3, [r7, #20]
	}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3728      	adds	r7, #40	; 0x28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b08c      	sub	sp, #48	; 0x30
 8007bea:	af04      	add	r7, sp, #16
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	60b9      	str	r1, [r7, #8]
 8007bf0:	603b      	str	r3, [r7, #0]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bf6:	88fb      	ldrh	r3, [r7, #6]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f001 fb6a 	bl	80092d4 <pvPortMalloc>
 8007c00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00e      	beq.n	8007c26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007c08:	205c      	movs	r0, #92	; 0x5c
 8007c0a:	f001 fb63 	bl	80092d4 <pvPortMalloc>
 8007c0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8007c1c:	e005      	b.n	8007c2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c1e:	6978      	ldr	r0, [r7, #20]
 8007c20:	f001 fc1a 	bl	8009458 <vPortFree>
 8007c24:	e001      	b.n	8007c2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d017      	beq.n	8007c60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c38:	88fa      	ldrh	r2, [r7, #6]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	9303      	str	r3, [sp, #12]
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	9302      	str	r3, [sp, #8]
 8007c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c44:	9301      	str	r3, [sp, #4]
 8007c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	68b9      	ldr	r1, [r7, #8]
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 f80e 	bl	8007c70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c54:	69f8      	ldr	r0, [r7, #28]
 8007c56:	f000 f891 	bl	8007d7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	61bb      	str	r3, [r7, #24]
 8007c5e:	e002      	b.n	8007c66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c60:	f04f 33ff 	mov.w	r3, #4294967295
 8007c64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c66:	69bb      	ldr	r3, [r7, #24]
	}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3720      	adds	r7, #32
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b088      	sub	sp, #32
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	461a      	mov	r2, r3
 8007c88:	21a5      	movs	r1, #165	; 0xa5
 8007c8a:	f001 fd48 	bl	800971e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	f023 0307 	bic.w	r3, r3, #7
 8007ca6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	f003 0307 	and.w	r3, r3, #7
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d009      	beq.n	8007cc6 <prvInitialiseNewTask+0x56>
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	617b      	str	r3, [r7, #20]
 8007cc4:	e7fe      	b.n	8007cc4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	61fb      	str	r3, [r7, #28]
 8007cca:	e012      	b.n	8007cf2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	7819      	ldrb	r1, [r3, #0]
 8007cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	4413      	add	r3, r2
 8007cda:	3334      	adds	r3, #52	; 0x34
 8007cdc:	460a      	mov	r2, r1
 8007cde:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d006      	beq.n	8007cfa <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	61fb      	str	r3, [r7, #28]
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	2b0f      	cmp	r3, #15
 8007cf6:	d9e9      	bls.n	8007ccc <prvInitialiseNewTask+0x5c>
 8007cf8:	e000      	b.n	8007cfc <prvInitialiseNewTask+0x8c>
		{
			break;
 8007cfa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	2b37      	cmp	r3, #55	; 0x37
 8007d08:	d901      	bls.n	8007d0e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d0a:	2337      	movs	r3, #55	; 0x37
 8007d0c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d12:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d18:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d22:	3304      	adds	r3, #4
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7ff f9a0 	bl	800706a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	3318      	adds	r3, #24
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7ff f99b 	bl	800706a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d48:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	68f9      	ldr	r1, [r7, #12]
 8007d5c:	69b8      	ldr	r0, [r7, #24]
 8007d5e:	f001 f8d7 	bl	8008f10 <pxPortInitialiseStack>
 8007d62:	4602      	mov	r2, r0
 8007d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d66:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d74:	bf00      	nop
 8007d76:	3720      	adds	r7, #32
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d84:	f001 f9b0 	bl	80090e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d88:	4b2d      	ldr	r3, [pc, #180]	; (8007e40 <prvAddNewTaskToReadyList+0xc4>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	4a2c      	ldr	r2, [pc, #176]	; (8007e40 <prvAddNewTaskToReadyList+0xc4>)
 8007d90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d92:	4b2c      	ldr	r3, [pc, #176]	; (8007e44 <prvAddNewTaskToReadyList+0xc8>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d109      	bne.n	8007dae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d9a:	4a2a      	ldr	r2, [pc, #168]	; (8007e44 <prvAddNewTaskToReadyList+0xc8>)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007da0:	4b27      	ldr	r3, [pc, #156]	; (8007e40 <prvAddNewTaskToReadyList+0xc4>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d110      	bne.n	8007dca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007da8:	f000 fc0c 	bl	80085c4 <prvInitialiseTaskLists>
 8007dac:	e00d      	b.n	8007dca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007dae:	4b26      	ldr	r3, [pc, #152]	; (8007e48 <prvAddNewTaskToReadyList+0xcc>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d109      	bne.n	8007dca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007db6:	4b23      	ldr	r3, [pc, #140]	; (8007e44 <prvAddNewTaskToReadyList+0xc8>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d802      	bhi.n	8007dca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007dc4:	4a1f      	ldr	r2, [pc, #124]	; (8007e44 <prvAddNewTaskToReadyList+0xc8>)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007dca:	4b20      	ldr	r3, [pc, #128]	; (8007e4c <prvAddNewTaskToReadyList+0xd0>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	4a1e      	ldr	r2, [pc, #120]	; (8007e4c <prvAddNewTaskToReadyList+0xd0>)
 8007dd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007dd4:	4b1d      	ldr	r3, [pc, #116]	; (8007e4c <prvAddNewTaskToReadyList+0xd0>)
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de0:	4b1b      	ldr	r3, [pc, #108]	; (8007e50 <prvAddNewTaskToReadyList+0xd4>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d903      	bls.n	8007df0 <prvAddNewTaskToReadyList+0x74>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dec:	4a18      	ldr	r2, [pc, #96]	; (8007e50 <prvAddNewTaskToReadyList+0xd4>)
 8007dee:	6013      	str	r3, [r2, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df4:	4613      	mov	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4a15      	ldr	r2, [pc, #84]	; (8007e54 <prvAddNewTaskToReadyList+0xd8>)
 8007dfe:	441a      	add	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3304      	adds	r3, #4
 8007e04:	4619      	mov	r1, r3
 8007e06:	4610      	mov	r0, r2
 8007e08:	f7ff f93b 	bl	8007082 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e0c:	f001 f99a 	bl	8009144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e10:	4b0d      	ldr	r3, [pc, #52]	; (8007e48 <prvAddNewTaskToReadyList+0xcc>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00e      	beq.n	8007e36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e18:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <prvAddNewTaskToReadyList+0xc8>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d207      	bcs.n	8007e36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e26:	4b0c      	ldr	r3, [pc, #48]	; (8007e58 <prvAddNewTaskToReadyList+0xdc>)
 8007e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e2c:	601a      	str	r2, [r3, #0]
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e36:	bf00      	nop
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	200016bc 	.word	0x200016bc
 8007e44:	200011e8 	.word	0x200011e8
 8007e48:	200016c8 	.word	0x200016c8
 8007e4c:	200016d8 	.word	0x200016d8
 8007e50:	200016c4 	.word	0x200016c4
 8007e54:	200011ec 	.word	0x200011ec
 8007e58:	e000ed04 	.word	0xe000ed04

08007e5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e64:	2300      	movs	r3, #0
 8007e66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d016      	beq.n	8007e9c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e6e:	4b13      	ldr	r3, [pc, #76]	; (8007ebc <vTaskDelay+0x60>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d009      	beq.n	8007e8a <vTaskDelay+0x2e>
 8007e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	60bb      	str	r3, [r7, #8]
 8007e88:	e7fe      	b.n	8007e88 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007e8a:	f000 f87f 	bl	8007f8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e8e:	2100      	movs	r1, #0
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fcdf 	bl	8008854 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e96:	f000 f887 	bl	8007fa8 <xTaskResumeAll>
 8007e9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d107      	bne.n	8007eb2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007ea2:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <vTaskDelay+0x64>)
 8007ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007eb2:	bf00      	nop
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	200016e4 	.word	0x200016e4
 8007ec0:	e000ed04 	.word	0xe000ed04

08007ec4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08a      	sub	sp, #40	; 0x28
 8007ec8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ed2:	463a      	mov	r2, r7
 8007ed4:	1d39      	adds	r1, r7, #4
 8007ed6:	f107 0308 	add.w	r3, r7, #8
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff f874 	bl	8006fc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	9202      	str	r2, [sp, #8]
 8007ee8:	9301      	str	r3, [sp, #4]
 8007eea:	2300      	movs	r3, #0
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	2300      	movs	r3, #0
 8007ef0:	460a      	mov	r2, r1
 8007ef2:	4920      	ldr	r1, [pc, #128]	; (8007f74 <vTaskStartScheduler+0xb0>)
 8007ef4:	4820      	ldr	r0, [pc, #128]	; (8007f78 <vTaskStartScheduler+0xb4>)
 8007ef6:	f7ff fe1d 	bl	8007b34 <xTaskCreateStatic>
 8007efa:	4602      	mov	r2, r0
 8007efc:	4b1f      	ldr	r3, [pc, #124]	; (8007f7c <vTaskStartScheduler+0xb8>)
 8007efe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f00:	4b1e      	ldr	r3, [pc, #120]	; (8007f7c <vTaskStartScheduler+0xb8>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d002      	beq.n	8007f0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	617b      	str	r3, [r7, #20]
 8007f0c:	e001      	b.n	8007f12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d102      	bne.n	8007f1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007f18:	f000 fcf0 	bl	80088fc <xTimerCreateTimerTask>
 8007f1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d115      	bne.n	8007f50 <vTaskStartScheduler+0x8c>
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f36:	4b12      	ldr	r3, [pc, #72]	; (8007f80 <vTaskStartScheduler+0xbc>)
 8007f38:	f04f 32ff 	mov.w	r2, #4294967295
 8007f3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f3e:	4b11      	ldr	r3, [pc, #68]	; (8007f84 <vTaskStartScheduler+0xc0>)
 8007f40:	2201      	movs	r2, #1
 8007f42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007f44:	4b10      	ldr	r3, [pc, #64]	; (8007f88 <vTaskStartScheduler+0xc4>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f4a:	f001 f85d 	bl	8009008 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f4e:	e00d      	b.n	8007f6c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f56:	d109      	bne.n	8007f6c <vTaskStartScheduler+0xa8>
 8007f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	60fb      	str	r3, [r7, #12]
 8007f6a:	e7fe      	b.n	8007f6a <vTaskStartScheduler+0xa6>
}
 8007f6c:	bf00      	nop
 8007f6e:	3718      	adds	r7, #24
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	08009ec8 	.word	0x08009ec8
 8007f78:	08008595 	.word	0x08008595
 8007f7c:	200016e0 	.word	0x200016e0
 8007f80:	200016dc 	.word	0x200016dc
 8007f84:	200016c8 	.word	0x200016c8
 8007f88:	200016c0 	.word	0x200016c0

08007f8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007f90:	4b04      	ldr	r3, [pc, #16]	; (8007fa4 <vTaskSuspendAll+0x18>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3301      	adds	r3, #1
 8007f96:	4a03      	ldr	r2, [pc, #12]	; (8007fa4 <vTaskSuspendAll+0x18>)
 8007f98:	6013      	str	r3, [r2, #0]
}
 8007f9a:	bf00      	nop
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bc80      	pop	{r7}
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	200016e4 	.word	0x200016e4

08007fa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007fb6:	4b41      	ldr	r3, [pc, #260]	; (80080bc <xTaskResumeAll+0x114>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d109      	bne.n	8007fd2 <xTaskResumeAll+0x2a>
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	603b      	str	r3, [r7, #0]
 8007fd0:	e7fe      	b.n	8007fd0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007fd2:	f001 f889 	bl	80090e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007fd6:	4b39      	ldr	r3, [pc, #228]	; (80080bc <xTaskResumeAll+0x114>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	4a37      	ldr	r2, [pc, #220]	; (80080bc <xTaskResumeAll+0x114>)
 8007fde:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fe0:	4b36      	ldr	r3, [pc, #216]	; (80080bc <xTaskResumeAll+0x114>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d162      	bne.n	80080ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007fe8:	4b35      	ldr	r3, [pc, #212]	; (80080c0 <xTaskResumeAll+0x118>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d05e      	beq.n	80080ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ff0:	e02f      	b.n	8008052 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007ff2:	4b34      	ldr	r3, [pc, #208]	; (80080c4 <xTaskResumeAll+0x11c>)
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3318      	adds	r3, #24
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7ff f89a 	bl	8007138 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3304      	adds	r3, #4
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff f895 	bl	8007138 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008012:	4b2d      	ldr	r3, [pc, #180]	; (80080c8 <xTaskResumeAll+0x120>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	429a      	cmp	r2, r3
 8008018:	d903      	bls.n	8008022 <xTaskResumeAll+0x7a>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	4a2a      	ldr	r2, [pc, #168]	; (80080c8 <xTaskResumeAll+0x120>)
 8008020:	6013      	str	r3, [r2, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008026:	4613      	mov	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4a27      	ldr	r2, [pc, #156]	; (80080cc <xTaskResumeAll+0x124>)
 8008030:	441a      	add	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	3304      	adds	r3, #4
 8008036:	4619      	mov	r1, r3
 8008038:	4610      	mov	r0, r2
 800803a:	f7ff f822 	bl	8007082 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008042:	4b23      	ldr	r3, [pc, #140]	; (80080d0 <xTaskResumeAll+0x128>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008048:	429a      	cmp	r2, r3
 800804a:	d302      	bcc.n	8008052 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800804c:	4b21      	ldr	r3, [pc, #132]	; (80080d4 <xTaskResumeAll+0x12c>)
 800804e:	2201      	movs	r2, #1
 8008050:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008052:	4b1c      	ldr	r3, [pc, #112]	; (80080c4 <xTaskResumeAll+0x11c>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1cb      	bne.n	8007ff2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008060:	f000 fb4a 	bl	80086f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008064:	4b1c      	ldr	r3, [pc, #112]	; (80080d8 <xTaskResumeAll+0x130>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d010      	beq.n	8008092 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008070:	f000 f844 	bl	80080fc <xTaskIncrementTick>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d002      	beq.n	8008080 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800807a:	4b16      	ldr	r3, [pc, #88]	; (80080d4 <xTaskResumeAll+0x12c>)
 800807c:	2201      	movs	r2, #1
 800807e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	3b01      	subs	r3, #1
 8008084:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1f1      	bne.n	8008070 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800808c:	4b12      	ldr	r3, [pc, #72]	; (80080d8 <xTaskResumeAll+0x130>)
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008092:	4b10      	ldr	r3, [pc, #64]	; (80080d4 <xTaskResumeAll+0x12c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d009      	beq.n	80080ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800809a:	2301      	movs	r3, #1
 800809c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800809e:	4b0f      	ldr	r3, [pc, #60]	; (80080dc <xTaskResumeAll+0x134>)
 80080a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080ae:	f001 f849 	bl	8009144 <vPortExitCritical>

	return xAlreadyYielded;
 80080b2:	68bb      	ldr	r3, [r7, #8]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	200016e4 	.word	0x200016e4
 80080c0:	200016bc 	.word	0x200016bc
 80080c4:	2000167c 	.word	0x2000167c
 80080c8:	200016c4 	.word	0x200016c4
 80080cc:	200011ec 	.word	0x200011ec
 80080d0:	200011e8 	.word	0x200011e8
 80080d4:	200016d0 	.word	0x200016d0
 80080d8:	200016cc 	.word	0x200016cc
 80080dc:	e000ed04 	.word	0xe000ed04

080080e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80080e6:	4b04      	ldr	r3, [pc, #16]	; (80080f8 <xTaskGetTickCount+0x18>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80080ec:	687b      	ldr	r3, [r7, #4]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bc80      	pop	{r7}
 80080f6:	4770      	bx	lr
 80080f8:	200016c0 	.word	0x200016c0

080080fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008102:	2300      	movs	r3, #0
 8008104:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008106:	4b51      	ldr	r3, [pc, #324]	; (800824c <xTaskIncrementTick+0x150>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	f040 808d 	bne.w	800822a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008110:	4b4f      	ldr	r3, [pc, #316]	; (8008250 <xTaskIncrementTick+0x154>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3301      	adds	r3, #1
 8008116:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008118:	4a4d      	ldr	r2, [pc, #308]	; (8008250 <xTaskIncrementTick+0x154>)
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d11f      	bne.n	8008164 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008124:	4b4b      	ldr	r3, [pc, #300]	; (8008254 <xTaskIncrementTick+0x158>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d009      	beq.n	8008142 <xTaskIncrementTick+0x46>
 800812e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	603b      	str	r3, [r7, #0]
 8008140:	e7fe      	b.n	8008140 <xTaskIncrementTick+0x44>
 8008142:	4b44      	ldr	r3, [pc, #272]	; (8008254 <xTaskIncrementTick+0x158>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	60fb      	str	r3, [r7, #12]
 8008148:	4b43      	ldr	r3, [pc, #268]	; (8008258 <xTaskIncrementTick+0x15c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a41      	ldr	r2, [pc, #260]	; (8008254 <xTaskIncrementTick+0x158>)
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	4a41      	ldr	r2, [pc, #260]	; (8008258 <xTaskIncrementTick+0x15c>)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6013      	str	r3, [r2, #0]
 8008156:	4b41      	ldr	r3, [pc, #260]	; (800825c <xTaskIncrementTick+0x160>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3301      	adds	r3, #1
 800815c:	4a3f      	ldr	r2, [pc, #252]	; (800825c <xTaskIncrementTick+0x160>)
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	f000 faca 	bl	80086f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008164:	4b3e      	ldr	r3, [pc, #248]	; (8008260 <xTaskIncrementTick+0x164>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	429a      	cmp	r2, r3
 800816c:	d34e      	bcc.n	800820c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800816e:	4b39      	ldr	r3, [pc, #228]	; (8008254 <xTaskIncrementTick+0x158>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <xTaskIncrementTick+0x80>
 8008178:	2301      	movs	r3, #1
 800817a:	e000      	b.n	800817e <xTaskIncrementTick+0x82>
 800817c:	2300      	movs	r3, #0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d004      	beq.n	800818c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008182:	4b37      	ldr	r3, [pc, #220]	; (8008260 <xTaskIncrementTick+0x164>)
 8008184:	f04f 32ff 	mov.w	r2, #4294967295
 8008188:	601a      	str	r2, [r3, #0]
					break;
 800818a:	e03f      	b.n	800820c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800818c:	4b31      	ldr	r3, [pc, #196]	; (8008254 <xTaskIncrementTick+0x158>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d203      	bcs.n	80081ac <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80081a4:	4a2e      	ldr	r2, [pc, #184]	; (8008260 <xTaskIncrementTick+0x164>)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6013      	str	r3, [r2, #0]
						break;
 80081aa:	e02f      	b.n	800820c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	3304      	adds	r3, #4
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fe ffc1 	bl	8007138 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d004      	beq.n	80081c8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	3318      	adds	r3, #24
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fe ffb8 	bl	8007138 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081cc:	4b25      	ldr	r3, [pc, #148]	; (8008264 <xTaskIncrementTick+0x168>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d903      	bls.n	80081dc <xTaskIncrementTick+0xe0>
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d8:	4a22      	ldr	r2, [pc, #136]	; (8008264 <xTaskIncrementTick+0x168>)
 80081da:	6013      	str	r3, [r2, #0]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e0:	4613      	mov	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4a1f      	ldr	r2, [pc, #124]	; (8008268 <xTaskIncrementTick+0x16c>)
 80081ea:	441a      	add	r2, r3
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	3304      	adds	r3, #4
 80081f0:	4619      	mov	r1, r3
 80081f2:	4610      	mov	r0, r2
 80081f4:	f7fe ff45 	bl	8007082 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fc:	4b1b      	ldr	r3, [pc, #108]	; (800826c <xTaskIncrementTick+0x170>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008202:	429a      	cmp	r2, r3
 8008204:	d3b3      	bcc.n	800816e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008206:	2301      	movs	r3, #1
 8008208:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800820a:	e7b0      	b.n	800816e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800820c:	4b17      	ldr	r3, [pc, #92]	; (800826c <xTaskIncrementTick+0x170>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008212:	4915      	ldr	r1, [pc, #84]	; (8008268 <xTaskIncrementTick+0x16c>)
 8008214:	4613      	mov	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	440b      	add	r3, r1
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d907      	bls.n	8008234 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008224:	2301      	movs	r3, #1
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	e004      	b.n	8008234 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800822a:	4b11      	ldr	r3, [pc, #68]	; (8008270 <xTaskIncrementTick+0x174>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3301      	adds	r3, #1
 8008230:	4a0f      	ldr	r2, [pc, #60]	; (8008270 <xTaskIncrementTick+0x174>)
 8008232:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008234:	4b0f      	ldr	r3, [pc, #60]	; (8008274 <xTaskIncrementTick+0x178>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800823c:	2301      	movs	r3, #1
 800823e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008240:	697b      	ldr	r3, [r7, #20]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	200016e4 	.word	0x200016e4
 8008250:	200016c0 	.word	0x200016c0
 8008254:	20001674 	.word	0x20001674
 8008258:	20001678 	.word	0x20001678
 800825c:	200016d4 	.word	0x200016d4
 8008260:	200016dc 	.word	0x200016dc
 8008264:	200016c4 	.word	0x200016c4
 8008268:	200011ec 	.word	0x200011ec
 800826c:	200011e8 	.word	0x200011e8
 8008270:	200016cc 	.word	0x200016cc
 8008274:	200016d0 	.word	0x200016d0

08008278 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800827e:	4b27      	ldr	r3, [pc, #156]	; (800831c <vTaskSwitchContext+0xa4>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008286:	4b26      	ldr	r3, [pc, #152]	; (8008320 <vTaskSwitchContext+0xa8>)
 8008288:	2201      	movs	r2, #1
 800828a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800828c:	e040      	b.n	8008310 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800828e:	4b24      	ldr	r3, [pc, #144]	; (8008320 <vTaskSwitchContext+0xa8>)
 8008290:	2200      	movs	r2, #0
 8008292:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008294:	4b23      	ldr	r3, [pc, #140]	; (8008324 <vTaskSwitchContext+0xac>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	60fb      	str	r3, [r7, #12]
 800829a:	e00f      	b.n	80082bc <vTaskSwitchContext+0x44>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d109      	bne.n	80082b6 <vTaskSwitchContext+0x3e>
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	607b      	str	r3, [r7, #4]
 80082b4:	e7fe      	b.n	80082b4 <vTaskSwitchContext+0x3c>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3b01      	subs	r3, #1
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	491a      	ldr	r1, [pc, #104]	; (8008328 <vTaskSwitchContext+0xb0>)
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	4613      	mov	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	440b      	add	r3, r1
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d0e5      	beq.n	800829c <vTaskSwitchContext+0x24>
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	4613      	mov	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	4413      	add	r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	4a13      	ldr	r2, [pc, #76]	; (8008328 <vTaskSwitchContext+0xb0>)
 80082dc:	4413      	add	r3, r2
 80082de:	60bb      	str	r3, [r7, #8]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	605a      	str	r2, [r3, #4]
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	685a      	ldr	r2, [r3, #4]
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	3308      	adds	r3, #8
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d104      	bne.n	8008300 <vTaskSwitchContext+0x88>
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	605a      	str	r2, [r3, #4]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	4a09      	ldr	r2, [pc, #36]	; (800832c <vTaskSwitchContext+0xb4>)
 8008308:	6013      	str	r3, [r2, #0]
 800830a:	4a06      	ldr	r2, [pc, #24]	; (8008324 <vTaskSwitchContext+0xac>)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6013      	str	r3, [r2, #0]
}
 8008310:	bf00      	nop
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	bc80      	pop	{r7}
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	200016e4 	.word	0x200016e4
 8008320:	200016d0 	.word	0x200016d0
 8008324:	200016c4 	.word	0x200016c4
 8008328:	200011ec 	.word	0x200011ec
 800832c:	200011e8 	.word	0x200011e8

08008330 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d109      	bne.n	8008354 <vTaskPlaceOnEventList+0x24>
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	60fb      	str	r3, [r7, #12]
 8008352:	e7fe      	b.n	8008352 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008354:	4b07      	ldr	r3, [pc, #28]	; (8008374 <vTaskPlaceOnEventList+0x44>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3318      	adds	r3, #24
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7fe feb3 	bl	80070c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008362:	2101      	movs	r1, #1
 8008364:	6838      	ldr	r0, [r7, #0]
 8008366:	f000 fa75 	bl	8008854 <prvAddCurrentTaskToDelayedList>
}
 800836a:	bf00      	nop
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	200011e8 	.word	0x200011e8

08008378 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d109      	bne.n	800839e <vTaskPlaceOnEventListRestricted+0x26>
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	617b      	str	r3, [r7, #20]
 800839c:	e7fe      	b.n	800839c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800839e:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <vTaskPlaceOnEventListRestricted+0x50>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3318      	adds	r3, #24
 80083a4:	4619      	mov	r1, r3
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f7fe fe6b 	bl	8007082 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d002      	beq.n	80083b8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80083b2:	f04f 33ff 	mov.w	r3, #4294967295
 80083b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80083b8:	6879      	ldr	r1, [r7, #4]
 80083ba:	68b8      	ldr	r0, [r7, #8]
 80083bc:	f000 fa4a 	bl	8008854 <prvAddCurrentTaskToDelayedList>
	}
 80083c0:	bf00      	nop
 80083c2:	3718      	adds	r7, #24
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	200011e8 	.word	0x200011e8

080083cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d109      	bne.n	80083f6 <xTaskRemoveFromEventList+0x2a>
 80083e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e6:	f383 8811 	msr	BASEPRI, r3
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	e7fe      	b.n	80083f4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	3318      	adds	r3, #24
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe fe9c 	bl	8007138 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008400:	4b1d      	ldr	r3, [pc, #116]	; (8008478 <xTaskRemoveFromEventList+0xac>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d11d      	bne.n	8008444 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	3304      	adds	r3, #4
 800840c:	4618      	mov	r0, r3
 800840e:	f7fe fe93 	bl	8007138 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008416:	4b19      	ldr	r3, [pc, #100]	; (800847c <xTaskRemoveFromEventList+0xb0>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	429a      	cmp	r2, r3
 800841c:	d903      	bls.n	8008426 <xTaskRemoveFromEventList+0x5a>
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008422:	4a16      	ldr	r2, [pc, #88]	; (800847c <xTaskRemoveFromEventList+0xb0>)
 8008424:	6013      	str	r3, [r2, #0]
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800842a:	4613      	mov	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4413      	add	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4a13      	ldr	r2, [pc, #76]	; (8008480 <xTaskRemoveFromEventList+0xb4>)
 8008434:	441a      	add	r2, r3
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	3304      	adds	r3, #4
 800843a:	4619      	mov	r1, r3
 800843c:	4610      	mov	r0, r2
 800843e:	f7fe fe20 	bl	8007082 <vListInsertEnd>
 8008442:	e005      	b.n	8008450 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	3318      	adds	r3, #24
 8008448:	4619      	mov	r1, r3
 800844a:	480e      	ldr	r0, [pc, #56]	; (8008484 <xTaskRemoveFromEventList+0xb8>)
 800844c:	f7fe fe19 	bl	8007082 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008454:	4b0c      	ldr	r3, [pc, #48]	; (8008488 <xTaskRemoveFromEventList+0xbc>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845a:	429a      	cmp	r2, r3
 800845c:	d905      	bls.n	800846a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800845e:	2301      	movs	r3, #1
 8008460:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008462:	4b0a      	ldr	r3, [pc, #40]	; (800848c <xTaskRemoveFromEventList+0xc0>)
 8008464:	2201      	movs	r2, #1
 8008466:	601a      	str	r2, [r3, #0]
 8008468:	e001      	b.n	800846e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800846a:	2300      	movs	r3, #0
 800846c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800846e:	697b      	ldr	r3, [r7, #20]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	200016e4 	.word	0x200016e4
 800847c:	200016c4 	.word	0x200016c4
 8008480:	200011ec 	.word	0x200011ec
 8008484:	2000167c 	.word	0x2000167c
 8008488:	200011e8 	.word	0x200011e8
 800848c:	200016d0 	.word	0x200016d0

08008490 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008498:	4b06      	ldr	r3, [pc, #24]	; (80084b4 <vTaskInternalSetTimeOutState+0x24>)
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80084a0:	4b05      	ldr	r3, [pc, #20]	; (80084b8 <vTaskInternalSetTimeOutState+0x28>)
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	605a      	str	r2, [r3, #4]
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bc80      	pop	{r7}
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	200016d4 	.word	0x200016d4
 80084b8:	200016c0 	.word	0x200016c0

080084bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b088      	sub	sp, #32
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d109      	bne.n	80084e0 <xTaskCheckForTimeOut+0x24>
 80084cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	613b      	str	r3, [r7, #16]
 80084de:	e7fe      	b.n	80084de <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d109      	bne.n	80084fa <xTaskCheckForTimeOut+0x3e>
 80084e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	e7fe      	b.n	80084f8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80084fa:	f000 fdf5 	bl	80090e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80084fe:	4b1d      	ldr	r3, [pc, #116]	; (8008574 <xTaskCheckForTimeOut+0xb8>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	69ba      	ldr	r2, [r7, #24]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008516:	d102      	bne.n	800851e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008518:	2300      	movs	r3, #0
 800851a:	61fb      	str	r3, [r7, #28]
 800851c:	e023      	b.n	8008566 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	4b15      	ldr	r3, [pc, #84]	; (8008578 <xTaskCheckForTimeOut+0xbc>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	429a      	cmp	r2, r3
 8008528:	d007      	beq.n	800853a <xTaskCheckForTimeOut+0x7e>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	429a      	cmp	r2, r3
 8008532:	d302      	bcc.n	800853a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008534:	2301      	movs	r3, #1
 8008536:	61fb      	str	r3, [r7, #28]
 8008538:	e015      	b.n	8008566 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	429a      	cmp	r2, r3
 8008542:	d20b      	bcs.n	800855c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	1ad2      	subs	r2, r2, r3
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff ff9d 	bl	8008490 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008556:	2300      	movs	r3, #0
 8008558:	61fb      	str	r3, [r7, #28]
 800855a:	e004      	b.n	8008566 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2200      	movs	r2, #0
 8008560:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008562:	2301      	movs	r3, #1
 8008564:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008566:	f000 fded 	bl	8009144 <vPortExitCritical>

	return xReturn;
 800856a:	69fb      	ldr	r3, [r7, #28]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3720      	adds	r7, #32
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	200016c0 	.word	0x200016c0
 8008578:	200016d4 	.word	0x200016d4

0800857c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800857c:	b480      	push	{r7}
 800857e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008580:	4b03      	ldr	r3, [pc, #12]	; (8008590 <vTaskMissedYield+0x14>)
 8008582:	2201      	movs	r2, #1
 8008584:	601a      	str	r2, [r3, #0]
}
 8008586:	bf00      	nop
 8008588:	46bd      	mov	sp, r7
 800858a:	bc80      	pop	{r7}
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	200016d0 	.word	0x200016d0

08008594 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800859c:	f000 f852 	bl	8008644 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80085a0:	4b06      	ldr	r3, [pc, #24]	; (80085bc <prvIdleTask+0x28>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d9f9      	bls.n	800859c <prvIdleTask+0x8>
			{
				taskYIELD();
 80085a8:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <prvIdleTask+0x2c>)
 80085aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ae:	601a      	str	r2, [r3, #0]
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80085b8:	e7f0      	b.n	800859c <prvIdleTask+0x8>
 80085ba:	bf00      	nop
 80085bc:	200011ec 	.word	0x200011ec
 80085c0:	e000ed04 	.word	0xe000ed04

080085c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085ca:	2300      	movs	r3, #0
 80085cc:	607b      	str	r3, [r7, #4]
 80085ce:	e00c      	b.n	80085ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	4613      	mov	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4a12      	ldr	r2, [pc, #72]	; (8008624 <prvInitialiseTaskLists+0x60>)
 80085dc:	4413      	add	r3, r2
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fe fd24 	bl	800702c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	3301      	adds	r3, #1
 80085e8:	607b      	str	r3, [r7, #4]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2b37      	cmp	r3, #55	; 0x37
 80085ee:	d9ef      	bls.n	80085d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80085f0:	480d      	ldr	r0, [pc, #52]	; (8008628 <prvInitialiseTaskLists+0x64>)
 80085f2:	f7fe fd1b 	bl	800702c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80085f6:	480d      	ldr	r0, [pc, #52]	; (800862c <prvInitialiseTaskLists+0x68>)
 80085f8:	f7fe fd18 	bl	800702c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80085fc:	480c      	ldr	r0, [pc, #48]	; (8008630 <prvInitialiseTaskLists+0x6c>)
 80085fe:	f7fe fd15 	bl	800702c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008602:	480c      	ldr	r0, [pc, #48]	; (8008634 <prvInitialiseTaskLists+0x70>)
 8008604:	f7fe fd12 	bl	800702c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008608:	480b      	ldr	r0, [pc, #44]	; (8008638 <prvInitialiseTaskLists+0x74>)
 800860a:	f7fe fd0f 	bl	800702c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800860e:	4b0b      	ldr	r3, [pc, #44]	; (800863c <prvInitialiseTaskLists+0x78>)
 8008610:	4a05      	ldr	r2, [pc, #20]	; (8008628 <prvInitialiseTaskLists+0x64>)
 8008612:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008614:	4b0a      	ldr	r3, [pc, #40]	; (8008640 <prvInitialiseTaskLists+0x7c>)
 8008616:	4a05      	ldr	r2, [pc, #20]	; (800862c <prvInitialiseTaskLists+0x68>)
 8008618:	601a      	str	r2, [r3, #0]
}
 800861a:	bf00      	nop
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	200011ec 	.word	0x200011ec
 8008628:	2000164c 	.word	0x2000164c
 800862c:	20001660 	.word	0x20001660
 8008630:	2000167c 	.word	0x2000167c
 8008634:	20001690 	.word	0x20001690
 8008638:	200016a8 	.word	0x200016a8
 800863c:	20001674 	.word	0x20001674
 8008640:	20001678 	.word	0x20001678

08008644 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800864a:	e019      	b.n	8008680 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800864c:	f000 fd4c 	bl	80090e8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008650:	4b0f      	ldr	r3, [pc, #60]	; (8008690 <prvCheckTasksWaitingTermination+0x4c>)
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3304      	adds	r3, #4
 800865c:	4618      	mov	r0, r3
 800865e:	f7fe fd6b 	bl	8007138 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008662:	4b0c      	ldr	r3, [pc, #48]	; (8008694 <prvCheckTasksWaitingTermination+0x50>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3b01      	subs	r3, #1
 8008668:	4a0a      	ldr	r2, [pc, #40]	; (8008694 <prvCheckTasksWaitingTermination+0x50>)
 800866a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800866c:	4b0a      	ldr	r3, [pc, #40]	; (8008698 <prvCheckTasksWaitingTermination+0x54>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3b01      	subs	r3, #1
 8008672:	4a09      	ldr	r2, [pc, #36]	; (8008698 <prvCheckTasksWaitingTermination+0x54>)
 8008674:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008676:	f000 fd65 	bl	8009144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f80e 	bl	800869c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008680:	4b05      	ldr	r3, [pc, #20]	; (8008698 <prvCheckTasksWaitingTermination+0x54>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1e1      	bne.n	800864c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	20001690 	.word	0x20001690
 8008694:	200016bc 	.word	0x200016bc
 8008698:	200016a4 	.word	0x200016a4

0800869c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d108      	bne.n	80086c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fed0 	bl	8009458 <vPortFree>
				vPortFree( pxTCB );
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fecd 	bl	8009458 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80086be:	e017      	b.n	80086f0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d103      	bne.n	80086d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fec4 	bl	8009458 <vPortFree>
	}
 80086d0:	e00e      	b.n	80086f0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d009      	beq.n	80086f0 <prvDeleteTCB+0x54>
 80086dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	e7fe      	b.n	80086ee <prvDeleteTCB+0x52>
	}
 80086f0:	bf00      	nop
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086fe:	4b0e      	ldr	r3, [pc, #56]	; (8008738 <prvResetNextTaskUnblockTime+0x40>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d101      	bne.n	800870c <prvResetNextTaskUnblockTime+0x14>
 8008708:	2301      	movs	r3, #1
 800870a:	e000      	b.n	800870e <prvResetNextTaskUnblockTime+0x16>
 800870c:	2300      	movs	r3, #0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d004      	beq.n	800871c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008712:	4b0a      	ldr	r3, [pc, #40]	; (800873c <prvResetNextTaskUnblockTime+0x44>)
 8008714:	f04f 32ff 	mov.w	r2, #4294967295
 8008718:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800871a:	e008      	b.n	800872e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800871c:	4b06      	ldr	r3, [pc, #24]	; (8008738 <prvResetNextTaskUnblockTime+0x40>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	4a04      	ldr	r2, [pc, #16]	; (800873c <prvResetNextTaskUnblockTime+0x44>)
 800872c:	6013      	str	r3, [r2, #0]
}
 800872e:	bf00      	nop
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	bc80      	pop	{r7}
 8008736:	4770      	bx	lr
 8008738:	20001674 	.word	0x20001674
 800873c:	200016dc 	.word	0x200016dc

08008740 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008746:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <xTaskGetSchedulerState+0x34>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d102      	bne.n	8008754 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800874e:	2301      	movs	r3, #1
 8008750:	607b      	str	r3, [r7, #4]
 8008752:	e008      	b.n	8008766 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008754:	4b08      	ldr	r3, [pc, #32]	; (8008778 <xTaskGetSchedulerState+0x38>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d102      	bne.n	8008762 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800875c:	2302      	movs	r3, #2
 800875e:	607b      	str	r3, [r7, #4]
 8008760:	e001      	b.n	8008766 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008762:	2300      	movs	r3, #0
 8008764:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008766:	687b      	ldr	r3, [r7, #4]
	}
 8008768:	4618      	mov	r0, r3
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	bc80      	pop	{r7}
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	200016c8 	.word	0x200016c8
 8008778:	200016e4 	.word	0x200016e4

0800877c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008788:	2300      	movs	r3, #0
 800878a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d054      	beq.n	800883c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008792:	4b2d      	ldr	r3, [pc, #180]	; (8008848 <xTaskPriorityDisinherit+0xcc>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	429a      	cmp	r2, r3
 800879a:	d009      	beq.n	80087b0 <xTaskPriorityDisinherit+0x34>
 800879c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	60fb      	str	r3, [r7, #12]
 80087ae:	e7fe      	b.n	80087ae <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d109      	bne.n	80087cc <xTaskPriorityDisinherit+0x50>
 80087b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	60bb      	str	r3, [r7, #8]
 80087ca:	e7fe      	b.n	80087ca <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d0:	1e5a      	subs	r2, r3, #1
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087de:	429a      	cmp	r2, r3
 80087e0:	d02c      	beq.n	800883c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d128      	bne.n	800883c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	3304      	adds	r3, #4
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7fe fca2 	bl	8007138 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008800:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800880c:	4b0f      	ldr	r3, [pc, #60]	; (800884c <xTaskPriorityDisinherit+0xd0>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	429a      	cmp	r2, r3
 8008812:	d903      	bls.n	800881c <xTaskPriorityDisinherit+0xa0>
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008818:	4a0c      	ldr	r2, [pc, #48]	; (800884c <xTaskPriorityDisinherit+0xd0>)
 800881a:	6013      	str	r3, [r2, #0]
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008820:	4613      	mov	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4413      	add	r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4a09      	ldr	r2, [pc, #36]	; (8008850 <xTaskPriorityDisinherit+0xd4>)
 800882a:	441a      	add	r2, r3
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	3304      	adds	r3, #4
 8008830:	4619      	mov	r1, r3
 8008832:	4610      	mov	r0, r2
 8008834:	f7fe fc25 	bl	8007082 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008838:	2301      	movs	r3, #1
 800883a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800883c:	697b      	ldr	r3, [r7, #20]
	}
 800883e:	4618      	mov	r0, r3
 8008840:	3718      	adds	r7, #24
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	200011e8 	.word	0x200011e8
 800884c:	200016c4 	.word	0x200016c4
 8008850:	200011ec 	.word	0x200011ec

08008854 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800885e:	4b21      	ldr	r3, [pc, #132]	; (80088e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008864:	4b20      	ldr	r3, [pc, #128]	; (80088e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	3304      	adds	r3, #4
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe fc64 	bl	8007138 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008876:	d10a      	bne.n	800888e <prvAddCurrentTaskToDelayedList+0x3a>
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d007      	beq.n	800888e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800887e:	4b1a      	ldr	r3, [pc, #104]	; (80088e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	3304      	adds	r3, #4
 8008884:	4619      	mov	r1, r3
 8008886:	4819      	ldr	r0, [pc, #100]	; (80088ec <prvAddCurrentTaskToDelayedList+0x98>)
 8008888:	f7fe fbfb 	bl	8007082 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800888c:	e026      	b.n	80088dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4413      	add	r3, r2
 8008894:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008896:	4b14      	ldr	r3, [pc, #80]	; (80088e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d209      	bcs.n	80088ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088a6:	4b12      	ldr	r3, [pc, #72]	; (80088f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	4b0f      	ldr	r3, [pc, #60]	; (80088e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	3304      	adds	r3, #4
 80088b0:	4619      	mov	r1, r3
 80088b2:	4610      	mov	r0, r2
 80088b4:	f7fe fc08 	bl	80070c8 <vListInsert>
}
 80088b8:	e010      	b.n	80088dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088ba:	4b0e      	ldr	r3, [pc, #56]	; (80088f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	4b0a      	ldr	r3, [pc, #40]	; (80088e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	3304      	adds	r3, #4
 80088c4:	4619      	mov	r1, r3
 80088c6:	4610      	mov	r0, r2
 80088c8:	f7fe fbfe 	bl	80070c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80088cc:	4b0a      	ldr	r3, [pc, #40]	; (80088f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d202      	bcs.n	80088dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80088d6:	4a08      	ldr	r2, [pc, #32]	; (80088f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	6013      	str	r3, [r2, #0]
}
 80088dc:	bf00      	nop
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	200016c0 	.word	0x200016c0
 80088e8:	200011e8 	.word	0x200011e8
 80088ec:	200016a8 	.word	0x200016a8
 80088f0:	20001678 	.word	0x20001678
 80088f4:	20001674 	.word	0x20001674
 80088f8:	200016dc 	.word	0x200016dc

080088fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08a      	sub	sp, #40	; 0x28
 8008900:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008902:	2300      	movs	r3, #0
 8008904:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008906:	f000 fac3 	bl	8008e90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800890a:	4b1c      	ldr	r3, [pc, #112]	; (800897c <xTimerCreateTimerTask+0x80>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d021      	beq.n	8008956 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008912:	2300      	movs	r3, #0
 8008914:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008916:	2300      	movs	r3, #0
 8008918:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800891a:	1d3a      	adds	r2, r7, #4
 800891c:	f107 0108 	add.w	r1, r7, #8
 8008920:	f107 030c 	add.w	r3, r7, #12
 8008924:	4618      	mov	r0, r3
 8008926:	f7fe fb67 	bl	8006ff8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800892a:	6879      	ldr	r1, [r7, #4]
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	9202      	str	r2, [sp, #8]
 8008932:	9301      	str	r3, [sp, #4]
 8008934:	2302      	movs	r3, #2
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	2300      	movs	r3, #0
 800893a:	460a      	mov	r2, r1
 800893c:	4910      	ldr	r1, [pc, #64]	; (8008980 <xTimerCreateTimerTask+0x84>)
 800893e:	4811      	ldr	r0, [pc, #68]	; (8008984 <xTimerCreateTimerTask+0x88>)
 8008940:	f7ff f8f8 	bl	8007b34 <xTaskCreateStatic>
 8008944:	4602      	mov	r2, r0
 8008946:	4b10      	ldr	r3, [pc, #64]	; (8008988 <xTimerCreateTimerTask+0x8c>)
 8008948:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800894a:	4b0f      	ldr	r3, [pc, #60]	; (8008988 <xTimerCreateTimerTask+0x8c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008952:	2301      	movs	r3, #1
 8008954:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d109      	bne.n	8008970 <xTimerCreateTimerTask+0x74>
 800895c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	613b      	str	r3, [r7, #16]
 800896e:	e7fe      	b.n	800896e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008970:	697b      	ldr	r3, [r7, #20]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3718      	adds	r7, #24
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	20001718 	.word	0x20001718
 8008980:	08009ed0 	.word	0x08009ed0
 8008984:	08008aa5 	.word	0x08008aa5
 8008988:	2000171c 	.word	0x2000171c

0800898c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b08a      	sub	sp, #40	; 0x28
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
 8008998:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800899a:	2300      	movs	r3, #0
 800899c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d109      	bne.n	80089b8 <xTimerGenericCommand+0x2c>
 80089a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	623b      	str	r3, [r7, #32]
 80089b6:	e7fe      	b.n	80089b6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80089b8:	4b19      	ldr	r3, [pc, #100]	; (8008a20 <xTimerGenericCommand+0x94>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d02a      	beq.n	8008a16 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2b05      	cmp	r3, #5
 80089d0:	dc18      	bgt.n	8008a04 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80089d2:	f7ff feb5 	bl	8008740 <xTaskGetSchedulerState>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d109      	bne.n	80089f0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80089dc:	4b10      	ldr	r3, [pc, #64]	; (8008a20 <xTimerGenericCommand+0x94>)
 80089de:	6818      	ldr	r0, [r3, #0]
 80089e0:	f107 0110 	add.w	r1, r7, #16
 80089e4:	2300      	movs	r3, #0
 80089e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089e8:	f7fe fcce 	bl	8007388 <xQueueGenericSend>
 80089ec:	6278      	str	r0, [r7, #36]	; 0x24
 80089ee:	e012      	b.n	8008a16 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80089f0:	4b0b      	ldr	r3, [pc, #44]	; (8008a20 <xTimerGenericCommand+0x94>)
 80089f2:	6818      	ldr	r0, [r3, #0]
 80089f4:	f107 0110 	add.w	r1, r7, #16
 80089f8:	2300      	movs	r3, #0
 80089fa:	2200      	movs	r2, #0
 80089fc:	f7fe fcc4 	bl	8007388 <xQueueGenericSend>
 8008a00:	6278      	str	r0, [r7, #36]	; 0x24
 8008a02:	e008      	b.n	8008a16 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a04:	4b06      	ldr	r3, [pc, #24]	; (8008a20 <xTimerGenericCommand+0x94>)
 8008a06:	6818      	ldr	r0, [r3, #0]
 8008a08:	f107 0110 	add.w	r1, r7, #16
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	f7fe fdb4 	bl	800757c <xQueueGenericSendFromISR>
 8008a14:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3728      	adds	r7, #40	; 0x28
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	20001718 	.word	0x20001718

08008a24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b088      	sub	sp, #32
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a2e:	4b1c      	ldr	r3, [pc, #112]	; (8008aa0 <prvProcessExpiredTimer+0x7c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	3304      	adds	r3, #4
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7fe fb7b 	bl	8007138 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	69db      	ldr	r3, [r3, #28]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d121      	bne.n	8008a8e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	699a      	ldr	r2, [r3, #24]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	18d1      	adds	r1, r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	6978      	ldr	r0, [r7, #20]
 8008a58:	f000 f8c8 	bl	8008bec <prvInsertTimerInActiveList>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d015      	beq.n	8008a8e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a62:	2300      	movs	r3, #0
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	2300      	movs	r3, #0
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	6978      	ldr	r0, [r7, #20]
 8008a6e:	f7ff ff8d 	bl	800898c <xTimerGenericCommand>
 8008a72:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d109      	bne.n	8008a8e <prvProcessExpiredTimer+0x6a>
 8008a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7e:	f383 8811 	msr	BASEPRI, r3
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	60fb      	str	r3, [r7, #12]
 8008a8c:	e7fe      	b.n	8008a8c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a92:	6978      	ldr	r0, [r7, #20]
 8008a94:	4798      	blx	r3
}
 8008a96:	bf00      	nop
 8008a98:	3718      	adds	r7, #24
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20001710 	.word	0x20001710

08008aa4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008aac:	f107 0308 	add.w	r3, r7, #8
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 f857 	bl	8008b64 <prvGetNextExpireTime>
 8008ab6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	4619      	mov	r1, r3
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f000 f803 	bl	8008ac8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008ac2:	f000 f8d5 	bl	8008c70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ac6:	e7f1      	b.n	8008aac <prvTimerTask+0x8>

08008ac8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008ad2:	f7ff fa5b 	bl	8007f8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ad6:	f107 0308 	add.w	r3, r7, #8
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 f866 	bl	8008bac <prvSampleTimeNow>
 8008ae0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d130      	bne.n	8008b4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10a      	bne.n	8008b04 <prvProcessTimerOrBlockTask+0x3c>
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d806      	bhi.n	8008b04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008af6:	f7ff fa57 	bl	8007fa8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008afa:	68f9      	ldr	r1, [r7, #12]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7ff ff91 	bl	8008a24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008b02:	e024      	b.n	8008b4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d008      	beq.n	8008b1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b0a:	4b13      	ldr	r3, [pc, #76]	; (8008b58 <prvProcessTimerOrBlockTask+0x90>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	bf0c      	ite	eq
 8008b14:	2301      	moveq	r3, #1
 8008b16:	2300      	movne	r3, #0
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b1c:	4b0f      	ldr	r3, [pc, #60]	; (8008b5c <prvProcessTimerOrBlockTask+0x94>)
 8008b1e:	6818      	ldr	r0, [r3, #0]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	f7fe ffcf 	bl	8007acc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b2e:	f7ff fa3b 	bl	8007fa8 <xTaskResumeAll>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10a      	bne.n	8008b4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b38:	4b09      	ldr	r3, [pc, #36]	; (8008b60 <prvProcessTimerOrBlockTask+0x98>)
 8008b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b3e:	601a      	str	r2, [r3, #0]
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	f3bf 8f6f 	isb	sy
}
 8008b48:	e001      	b.n	8008b4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008b4a:	f7ff fa2d 	bl	8007fa8 <xTaskResumeAll>
}
 8008b4e:	bf00      	nop
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	20001714 	.word	0x20001714
 8008b5c:	20001718 	.word	0x20001718
 8008b60:	e000ed04 	.word	0xe000ed04

08008b64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b6c:	4b0e      	ldr	r3, [pc, #56]	; (8008ba8 <prvGetNextExpireTime+0x44>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	bf0c      	ite	eq
 8008b76:	2301      	moveq	r3, #1
 8008b78:	2300      	movne	r3, #0
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d105      	bne.n	8008b96 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b8a:	4b07      	ldr	r3, [pc, #28]	; (8008ba8 <prvGetNextExpireTime+0x44>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	60fb      	str	r3, [r7, #12]
 8008b94:	e001      	b.n	8008b9a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008b96:	2300      	movs	r3, #0
 8008b98:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bc80      	pop	{r7}
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	20001710 	.word	0x20001710

08008bac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008bb4:	f7ff fa94 	bl	80080e0 <xTaskGetTickCount>
 8008bb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008bba:	4b0b      	ldr	r3, [pc, #44]	; (8008be8 <prvSampleTimeNow+0x3c>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d205      	bcs.n	8008bd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008bc4:	f000 f904 	bl	8008dd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	e002      	b.n	8008bd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008bd6:	4a04      	ldr	r2, [pc, #16]	; (8008be8 <prvSampleTimeNow+0x3c>)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	20001720 	.word	0x20001720

08008bec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
 8008bf8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d812      	bhi.n	8008c38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	1ad2      	subs	r2, r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d302      	bcc.n	8008c26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008c20:	2301      	movs	r3, #1
 8008c22:	617b      	str	r3, [r7, #20]
 8008c24:	e01b      	b.n	8008c5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c26:	4b10      	ldr	r3, [pc, #64]	; (8008c68 <prvInsertTimerInActiveList+0x7c>)
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	4619      	mov	r1, r3
 8008c30:	4610      	mov	r0, r2
 8008c32:	f7fe fa49 	bl	80070c8 <vListInsert>
 8008c36:	e012      	b.n	8008c5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d206      	bcs.n	8008c4e <prvInsertTimerInActiveList+0x62>
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d302      	bcc.n	8008c4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	617b      	str	r3, [r7, #20]
 8008c4c:	e007      	b.n	8008c5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c4e:	4b07      	ldr	r3, [pc, #28]	; (8008c6c <prvInsertTimerInActiveList+0x80>)
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	3304      	adds	r3, #4
 8008c56:	4619      	mov	r1, r3
 8008c58:	4610      	mov	r0, r2
 8008c5a:	f7fe fa35 	bl	80070c8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008c5e:	697b      	ldr	r3, [r7, #20]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	20001714 	.word	0x20001714
 8008c6c:	20001710 	.word	0x20001710

08008c70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b08e      	sub	sp, #56	; 0x38
 8008c74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c76:	e099      	b.n	8008dac <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	da17      	bge.n	8008cae <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008c7e:	1d3b      	adds	r3, r7, #4
 8008c80:	3304      	adds	r3, #4
 8008c82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d109      	bne.n	8008c9e <prvProcessReceivedCommands+0x2e>
 8008c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8e:	f383 8811 	msr	BASEPRI, r3
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	61fb      	str	r3, [r7, #28]
 8008c9c:	e7fe      	b.n	8008c9c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ca4:	6850      	ldr	r0, [r2, #4]
 8008ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ca8:	6892      	ldr	r2, [r2, #8]
 8008caa:	4611      	mov	r1, r2
 8008cac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	db7a      	blt.n	8008daa <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d004      	beq.n	8008cca <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7fe fa37 	bl	8007138 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008cca:	463b      	mov	r3, r7
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7ff ff6d 	bl	8008bac <prvSampleTimeNow>
 8008cd2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b09      	cmp	r3, #9
 8008cd8:	d868      	bhi.n	8008dac <prvProcessReceivedCommands+0x13c>
 8008cda:	a201      	add	r2, pc, #4	; (adr r2, 8008ce0 <prvProcessReceivedCommands+0x70>)
 8008cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce0:	08008d09 	.word	0x08008d09
 8008ce4:	08008d09 	.word	0x08008d09
 8008ce8:	08008d09 	.word	0x08008d09
 8008cec:	08008dad 	.word	0x08008dad
 8008cf0:	08008d63 	.word	0x08008d63
 8008cf4:	08008d99 	.word	0x08008d99
 8008cf8:	08008d09 	.word	0x08008d09
 8008cfc:	08008d09 	.word	0x08008d09
 8008d00:	08008dad 	.word	0x08008dad
 8008d04:	08008d63 	.word	0x08008d63
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0c:	699b      	ldr	r3, [r3, #24]
 8008d0e:	18d1      	adds	r1, r2, r3
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d16:	f7ff ff69 	bl	8008bec <prvInsertTimerInActiveList>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d045      	beq.n	8008dac <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d26:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2a:	69db      	ldr	r3, [r3, #28]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d13d      	bne.n	8008dac <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	441a      	add	r2, r3
 8008d38:	2300      	movs	r3, #0
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	2100      	movs	r1, #0
 8008d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d42:	f7ff fe23 	bl	800898c <xTimerGenericCommand>
 8008d46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d12e      	bne.n	8008dac <prvProcessReceivedCommands+0x13c>
 8008d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	61bb      	str	r3, [r7, #24]
 8008d60:	e7fe      	b.n	8008d60 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d66:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d109      	bne.n	8008d84 <prvProcessReceivedCommands+0x114>
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	617b      	str	r3, [r7, #20]
 8008d82:	e7fe      	b.n	8008d82 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d86:	699a      	ldr	r2, [r3, #24]
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	18d1      	adds	r1, r2, r3
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d92:	f7ff ff2b 	bl	8008bec <prvInsertTimerInActiveList>
					break;
 8008d96:	e009      	b.n	8008dac <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d104      	bne.n	8008dac <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008da4:	f000 fb58 	bl	8009458 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008da8:	e000      	b.n	8008dac <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008daa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008dac:	4b07      	ldr	r3, [pc, #28]	; (8008dcc <prvProcessReceivedCommands+0x15c>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	1d39      	adds	r1, r7, #4
 8008db2:	2200      	movs	r2, #0
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fe fc75 	bl	80076a4 <xQueueReceive>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f47f af5b 	bne.w	8008c78 <prvProcessReceivedCommands+0x8>
	}
}
 8008dc2:	bf00      	nop
 8008dc4:	3730      	adds	r7, #48	; 0x30
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	20001718 	.word	0x20001718

08008dd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b088      	sub	sp, #32
 8008dd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008dd6:	e044      	b.n	8008e62 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008dd8:	4b2b      	ldr	r3, [pc, #172]	; (8008e88 <prvSwitchTimerLists+0xb8>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008de2:	4b29      	ldr	r3, [pc, #164]	; (8008e88 <prvSwitchTimerLists+0xb8>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	3304      	adds	r3, #4
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fe f9a1 	bl	8007138 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d12d      	bne.n	8008e62 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008e10:	68ba      	ldr	r2, [r7, #8]
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d90e      	bls.n	8008e36 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e24:	4b18      	ldr	r3, [pc, #96]	; (8008e88 <prvSwitchTimerLists+0xb8>)
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	3304      	adds	r3, #4
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	4610      	mov	r0, r2
 8008e30:	f7fe f94a 	bl	80070c8 <vListInsert>
 8008e34:	e015      	b.n	8008e62 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e36:	2300      	movs	r3, #0
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	2100      	movs	r1, #0
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f7ff fda3 	bl	800898c <xTimerGenericCommand>
 8008e46:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d109      	bne.n	8008e62 <prvSwitchTimerLists+0x92>
 8008e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	603b      	str	r3, [r7, #0]
 8008e60:	e7fe      	b.n	8008e60 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e62:	4b09      	ldr	r3, [pc, #36]	; (8008e88 <prvSwitchTimerLists+0xb8>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1b5      	bne.n	8008dd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008e6c:	4b06      	ldr	r3, [pc, #24]	; (8008e88 <prvSwitchTimerLists+0xb8>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008e72:	4b06      	ldr	r3, [pc, #24]	; (8008e8c <prvSwitchTimerLists+0xbc>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a04      	ldr	r2, [pc, #16]	; (8008e88 <prvSwitchTimerLists+0xb8>)
 8008e78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008e7a:	4a04      	ldr	r2, [pc, #16]	; (8008e8c <prvSwitchTimerLists+0xbc>)
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	6013      	str	r3, [r2, #0]
}
 8008e80:	bf00      	nop
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	20001710 	.word	0x20001710
 8008e8c:	20001714 	.word	0x20001714

08008e90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008e96:	f000 f927 	bl	80090e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008e9a:	4b15      	ldr	r3, [pc, #84]	; (8008ef0 <prvCheckForValidListAndQueue+0x60>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d120      	bne.n	8008ee4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008ea2:	4814      	ldr	r0, [pc, #80]	; (8008ef4 <prvCheckForValidListAndQueue+0x64>)
 8008ea4:	f7fe f8c2 	bl	800702c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008ea8:	4813      	ldr	r0, [pc, #76]	; (8008ef8 <prvCheckForValidListAndQueue+0x68>)
 8008eaa:	f7fe f8bf 	bl	800702c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008eae:	4b13      	ldr	r3, [pc, #76]	; (8008efc <prvCheckForValidListAndQueue+0x6c>)
 8008eb0:	4a10      	ldr	r2, [pc, #64]	; (8008ef4 <prvCheckForValidListAndQueue+0x64>)
 8008eb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008eb4:	4b12      	ldr	r3, [pc, #72]	; (8008f00 <prvCheckForValidListAndQueue+0x70>)
 8008eb6:	4a10      	ldr	r2, [pc, #64]	; (8008ef8 <prvCheckForValidListAndQueue+0x68>)
 8008eb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008eba:	2300      	movs	r3, #0
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	4b11      	ldr	r3, [pc, #68]	; (8008f04 <prvCheckForValidListAndQueue+0x74>)
 8008ec0:	4a11      	ldr	r2, [pc, #68]	; (8008f08 <prvCheckForValidListAndQueue+0x78>)
 8008ec2:	2110      	movs	r1, #16
 8008ec4:	200a      	movs	r0, #10
 8008ec6:	f7fe f9c9 	bl	800725c <xQueueGenericCreateStatic>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	4b08      	ldr	r3, [pc, #32]	; (8008ef0 <prvCheckForValidListAndQueue+0x60>)
 8008ece:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008ed0:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <prvCheckForValidListAndQueue+0x60>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d005      	beq.n	8008ee4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ed8:	4b05      	ldr	r3, [pc, #20]	; (8008ef0 <prvCheckForValidListAndQueue+0x60>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	490b      	ldr	r1, [pc, #44]	; (8008f0c <prvCheckForValidListAndQueue+0x7c>)
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fe fdcc 	bl	8007a7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ee4:	f000 f92e 	bl	8009144 <vPortExitCritical>
}
 8008ee8:	bf00      	nop
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20001718 	.word	0x20001718
 8008ef4:	200016e8 	.word	0x200016e8
 8008ef8:	200016fc 	.word	0x200016fc
 8008efc:	20001710 	.word	0x20001710
 8008f00:	20001714 	.word	0x20001714
 8008f04:	200017c4 	.word	0x200017c4
 8008f08:	20001724 	.word	0x20001724
 8008f0c:	08009ed8 	.word	0x08009ed8

08008f10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	3b04      	subs	r3, #4
 8008f20:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008f28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	3b04      	subs	r3, #4
 8008f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	f023 0201 	bic.w	r2, r3, #1
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3b04      	subs	r3, #4
 8008f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f40:	4a08      	ldr	r2, [pc, #32]	; (8008f64 <pxPortInitialiseStack+0x54>)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3b14      	subs	r3, #20
 8008f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	3b20      	subs	r3, #32
 8008f56:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f58:	68fb      	ldr	r3, [r7, #12]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bc80      	pop	{r7}
 8008f62:	4770      	bx	lr
 8008f64:	08008f69 	.word	0x08008f69

08008f68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f72:	4b10      	ldr	r3, [pc, #64]	; (8008fb4 <prvTaskExitError+0x4c>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f7a:	d009      	beq.n	8008f90 <prvTaskExitError+0x28>
 8008f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	60fb      	str	r3, [r7, #12]
 8008f8e:	e7fe      	b.n	8008f8e <prvTaskExitError+0x26>
 8008f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008fa2:	bf00      	nop
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d0fc      	beq.n	8008fa4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008faa:	bf00      	nop
 8008fac:	3714      	adds	r7, #20
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bc80      	pop	{r7}
 8008fb2:	4770      	bx	lr
 8008fb4:	20000024 	.word	0x20000024
	...

08008fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008fc0:	4b07      	ldr	r3, [pc, #28]	; (8008fe0 <pxCurrentTCBConst2>)
 8008fc2:	6819      	ldr	r1, [r3, #0]
 8008fc4:	6808      	ldr	r0, [r1, #0]
 8008fc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008fca:	f380 8809 	msr	PSP, r0
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f04f 0000 	mov.w	r0, #0
 8008fd6:	f380 8811 	msr	BASEPRI, r0
 8008fda:	f04e 0e0d 	orr.w	lr, lr, #13
 8008fde:	4770      	bx	lr

08008fe0 <pxCurrentTCBConst2>:
 8008fe0:	200011e8 	.word	0x200011e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008fe4:	bf00      	nop
 8008fe6:	bf00      	nop

08008fe8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008fe8:	4806      	ldr	r0, [pc, #24]	; (8009004 <prvPortStartFirstTask+0x1c>)
 8008fea:	6800      	ldr	r0, [r0, #0]
 8008fec:	6800      	ldr	r0, [r0, #0]
 8008fee:	f380 8808 	msr	MSP, r0
 8008ff2:	b662      	cpsie	i
 8008ff4:	b661      	cpsie	f
 8008ff6:	f3bf 8f4f 	dsb	sy
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	df00      	svc	0
 8009000:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009002:	bf00      	nop
 8009004:	e000ed08 	.word	0xe000ed08

08009008 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800900e:	4b31      	ldr	r3, [pc, #196]	; (80090d4 <xPortStartScheduler+0xcc>)
 8009010:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	b2db      	uxtb	r3, r3
 8009018:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	22ff      	movs	r2, #255	; 0xff
 800901e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	b2db      	uxtb	r3, r3
 8009026:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009028:	78fb      	ldrb	r3, [r7, #3]
 800902a:	b2db      	uxtb	r3, r3
 800902c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009030:	b2da      	uxtb	r2, r3
 8009032:	4b29      	ldr	r3, [pc, #164]	; (80090d8 <xPortStartScheduler+0xd0>)
 8009034:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009036:	4b29      	ldr	r3, [pc, #164]	; (80090dc <xPortStartScheduler+0xd4>)
 8009038:	2207      	movs	r2, #7
 800903a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800903c:	e009      	b.n	8009052 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800903e:	4b27      	ldr	r3, [pc, #156]	; (80090dc <xPortStartScheduler+0xd4>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3b01      	subs	r3, #1
 8009044:	4a25      	ldr	r2, [pc, #148]	; (80090dc <xPortStartScheduler+0xd4>)
 8009046:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009048:	78fb      	ldrb	r3, [r7, #3]
 800904a:	b2db      	uxtb	r3, r3
 800904c:	005b      	lsls	r3, r3, #1
 800904e:	b2db      	uxtb	r3, r3
 8009050:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009052:	78fb      	ldrb	r3, [r7, #3]
 8009054:	b2db      	uxtb	r3, r3
 8009056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800905a:	2b80      	cmp	r3, #128	; 0x80
 800905c:	d0ef      	beq.n	800903e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800905e:	4b1f      	ldr	r3, [pc, #124]	; (80090dc <xPortStartScheduler+0xd4>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f1c3 0307 	rsb	r3, r3, #7
 8009066:	2b04      	cmp	r3, #4
 8009068:	d009      	beq.n	800907e <xPortStartScheduler+0x76>
 800906a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	60bb      	str	r3, [r7, #8]
 800907c:	e7fe      	b.n	800907c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800907e:	4b17      	ldr	r3, [pc, #92]	; (80090dc <xPortStartScheduler+0xd4>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	021b      	lsls	r3, r3, #8
 8009084:	4a15      	ldr	r2, [pc, #84]	; (80090dc <xPortStartScheduler+0xd4>)
 8009086:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009088:	4b14      	ldr	r3, [pc, #80]	; (80090dc <xPortStartScheduler+0xd4>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009090:	4a12      	ldr	r2, [pc, #72]	; (80090dc <xPortStartScheduler+0xd4>)
 8009092:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	b2da      	uxtb	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800909c:	4b10      	ldr	r3, [pc, #64]	; (80090e0 <xPortStartScheduler+0xd8>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a0f      	ldr	r2, [pc, #60]	; (80090e0 <xPortStartScheduler+0xd8>)
 80090a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80090a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80090a8:	4b0d      	ldr	r3, [pc, #52]	; (80090e0 <xPortStartScheduler+0xd8>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a0c      	ldr	r2, [pc, #48]	; (80090e0 <xPortStartScheduler+0xd8>)
 80090ae:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80090b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80090b4:	f000 f8b0 	bl	8009218 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80090b8:	4b0a      	ldr	r3, [pc, #40]	; (80090e4 <xPortStartScheduler+0xdc>)
 80090ba:	2200      	movs	r2, #0
 80090bc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80090be:	f7ff ff93 	bl	8008fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80090c2:	f7ff f8d9 	bl	8008278 <vTaskSwitchContext>
	prvTaskExitError();
 80090c6:	f7ff ff4f 	bl	8008f68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	e000e400 	.word	0xe000e400
 80090d8:	20001814 	.word	0x20001814
 80090dc:	20001818 	.word	0x20001818
 80090e0:	e000ed20 	.word	0xe000ed20
 80090e4:	20000024 	.word	0x20000024

080090e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009100:	4b0e      	ldr	r3, [pc, #56]	; (800913c <vPortEnterCritical+0x54>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	3301      	adds	r3, #1
 8009106:	4a0d      	ldr	r2, [pc, #52]	; (800913c <vPortEnterCritical+0x54>)
 8009108:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800910a:	4b0c      	ldr	r3, [pc, #48]	; (800913c <vPortEnterCritical+0x54>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d10e      	bne.n	8009130 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009112:	4b0b      	ldr	r3, [pc, #44]	; (8009140 <vPortEnterCritical+0x58>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	b2db      	uxtb	r3, r3
 8009118:	2b00      	cmp	r3, #0
 800911a:	d009      	beq.n	8009130 <vPortEnterCritical+0x48>
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	603b      	str	r3, [r7, #0]
 800912e:	e7fe      	b.n	800912e <vPortEnterCritical+0x46>
	}
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	bc80      	pop	{r7}
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	20000024 	.word	0x20000024
 8009140:	e000ed04 	.word	0xe000ed04

08009144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800914a:	4b10      	ldr	r3, [pc, #64]	; (800918c <vPortExitCritical+0x48>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d109      	bne.n	8009166 <vPortExitCritical+0x22>
 8009152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	607b      	str	r3, [r7, #4]
 8009164:	e7fe      	b.n	8009164 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009166:	4b09      	ldr	r3, [pc, #36]	; (800918c <vPortExitCritical+0x48>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3b01      	subs	r3, #1
 800916c:	4a07      	ldr	r2, [pc, #28]	; (800918c <vPortExitCritical+0x48>)
 800916e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009170:	4b06      	ldr	r3, [pc, #24]	; (800918c <vPortExitCritical+0x48>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d104      	bne.n	8009182 <vPortExitCritical+0x3e>
 8009178:	2300      	movs	r3, #0
 800917a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009182:	bf00      	nop
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	bc80      	pop	{r7}
 800918a:	4770      	bx	lr
 800918c:	20000024 	.word	0x20000024

08009190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009190:	f3ef 8009 	mrs	r0, PSP
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	4b0d      	ldr	r3, [pc, #52]	; (80091d0 <pxCurrentTCBConst>)
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80091a0:	6010      	str	r0, [r2, #0]
 80091a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80091a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80091aa:	f380 8811 	msr	BASEPRI, r0
 80091ae:	f7ff f863 	bl	8008278 <vTaskSwitchContext>
 80091b2:	f04f 0000 	mov.w	r0, #0
 80091b6:	f380 8811 	msr	BASEPRI, r0
 80091ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80091be:	6819      	ldr	r1, [r3, #0]
 80091c0:	6808      	ldr	r0, [r1, #0]
 80091c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80091c6:	f380 8809 	msr	PSP, r0
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	4770      	bx	lr

080091d0 <pxCurrentTCBConst>:
 80091d0:	200011e8 	.word	0x200011e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80091d4:	bf00      	nop
 80091d6:	bf00      	nop

080091d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
	__asm volatile
 80091de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80091f0:	f7fe ff84 	bl	80080fc <xTaskIncrementTick>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091fa:	4b06      	ldr	r3, [pc, #24]	; (8009214 <SysTick_Handler+0x3c>)
 80091fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	2300      	movs	r3, #0
 8009204:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800920c:	bf00      	nop
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	e000ed04 	.word	0xe000ed04

08009218 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009218:	b480      	push	{r7}
 800921a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800921c:	4b0a      	ldr	r3, [pc, #40]	; (8009248 <vPortSetupTimerInterrupt+0x30>)
 800921e:	2200      	movs	r2, #0
 8009220:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009222:	4b0a      	ldr	r3, [pc, #40]	; (800924c <vPortSetupTimerInterrupt+0x34>)
 8009224:	2200      	movs	r2, #0
 8009226:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009228:	4b09      	ldr	r3, [pc, #36]	; (8009250 <vPortSetupTimerInterrupt+0x38>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a09      	ldr	r2, [pc, #36]	; (8009254 <vPortSetupTimerInterrupt+0x3c>)
 800922e:	fba2 2303 	umull	r2, r3, r2, r3
 8009232:	099b      	lsrs	r3, r3, #6
 8009234:	4a08      	ldr	r2, [pc, #32]	; (8009258 <vPortSetupTimerInterrupt+0x40>)
 8009236:	3b01      	subs	r3, #1
 8009238:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800923a:	4b03      	ldr	r3, [pc, #12]	; (8009248 <vPortSetupTimerInterrupt+0x30>)
 800923c:	2207      	movs	r2, #7
 800923e:	601a      	str	r2, [r3, #0]
}
 8009240:	bf00      	nop
 8009242:	46bd      	mov	sp, r7
 8009244:	bc80      	pop	{r7}
 8009246:	4770      	bx	lr
 8009248:	e000e010 	.word	0xe000e010
 800924c:	e000e018 	.word	0xe000e018
 8009250:	20000018 	.word	0x20000018
 8009254:	10624dd3 	.word	0x10624dd3
 8009258:	e000e014 	.word	0xe000e014

0800925c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009262:	f3ef 8305 	mrs	r3, IPSR
 8009266:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2b0f      	cmp	r3, #15
 800926c:	d913      	bls.n	8009296 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800926e:	4a15      	ldr	r2, [pc, #84]	; (80092c4 <vPortValidateInterruptPriority+0x68>)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	4413      	add	r3, r2
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009278:	4b13      	ldr	r3, [pc, #76]	; (80092c8 <vPortValidateInterruptPriority+0x6c>)
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	7afa      	ldrb	r2, [r7, #11]
 800927e:	429a      	cmp	r2, r3
 8009280:	d209      	bcs.n	8009296 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	607b      	str	r3, [r7, #4]
 8009294:	e7fe      	b.n	8009294 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009296:	4b0d      	ldr	r3, [pc, #52]	; (80092cc <vPortValidateInterruptPriority+0x70>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800929e:	4b0c      	ldr	r3, [pc, #48]	; (80092d0 <vPortValidateInterruptPriority+0x74>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d909      	bls.n	80092ba <vPortValidateInterruptPriority+0x5e>
 80092a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	603b      	str	r3, [r7, #0]
 80092b8:	e7fe      	b.n	80092b8 <vPortValidateInterruptPriority+0x5c>
	}
 80092ba:	bf00      	nop
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	bc80      	pop	{r7}
 80092c2:	4770      	bx	lr
 80092c4:	e000e3f0 	.word	0xe000e3f0
 80092c8:	20001814 	.word	0x20001814
 80092cc:	e000ed0c 	.word	0xe000ed0c
 80092d0:	20001818 	.word	0x20001818

080092d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08a      	sub	sp, #40	; 0x28
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80092dc:	2300      	movs	r3, #0
 80092de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80092e0:	f7fe fe54 	bl	8007f8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80092e4:	4b57      	ldr	r3, [pc, #348]	; (8009444 <pvPortMalloc+0x170>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d101      	bne.n	80092f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092ec:	f000 f90c 	bl	8009508 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092f0:	4b55      	ldr	r3, [pc, #340]	; (8009448 <pvPortMalloc+0x174>)
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4013      	ands	r3, r2
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f040 808c 	bne.w	8009416 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d01c      	beq.n	800933e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009304:	2208      	movs	r2, #8
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4413      	add	r3, r2
 800930a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f003 0307 	and.w	r3, r3, #7
 8009312:	2b00      	cmp	r3, #0
 8009314:	d013      	beq.n	800933e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f023 0307 	bic.w	r3, r3, #7
 800931c:	3308      	adds	r3, #8
 800931e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f003 0307 	and.w	r3, r3, #7
 8009326:	2b00      	cmp	r3, #0
 8009328:	d009      	beq.n	800933e <pvPortMalloc+0x6a>
 800932a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	617b      	str	r3, [r7, #20]
 800933c:	e7fe      	b.n	800933c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d068      	beq.n	8009416 <pvPortMalloc+0x142>
 8009344:	4b41      	ldr	r3, [pc, #260]	; (800944c <pvPortMalloc+0x178>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	429a      	cmp	r2, r3
 800934c:	d863      	bhi.n	8009416 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800934e:	4b40      	ldr	r3, [pc, #256]	; (8009450 <pvPortMalloc+0x17c>)
 8009350:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009352:	4b3f      	ldr	r3, [pc, #252]	; (8009450 <pvPortMalloc+0x17c>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009358:	e004      	b.n	8009364 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800935e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	429a      	cmp	r2, r3
 800936c:	d903      	bls.n	8009376 <pvPortMalloc+0xa2>
 800936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1f1      	bne.n	800935a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009376:	4b33      	ldr	r3, [pc, #204]	; (8009444 <pvPortMalloc+0x170>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800937c:	429a      	cmp	r2, r3
 800937e:	d04a      	beq.n	8009416 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009380:	6a3b      	ldr	r3, [r7, #32]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2208      	movs	r2, #8
 8009386:	4413      	add	r3, r2
 8009388:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	1ad2      	subs	r2, r2, r3
 800939a:	2308      	movs	r3, #8
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	429a      	cmp	r2, r3
 80093a0:	d91e      	bls.n	80093e0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4413      	add	r3, r2
 80093a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	f003 0307 	and.w	r3, r3, #7
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d009      	beq.n	80093c8 <pvPortMalloc+0xf4>
 80093b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b8:	f383 8811 	msr	BASEPRI, r3
 80093bc:	f3bf 8f6f 	isb	sy
 80093c0:	f3bf 8f4f 	dsb	sy
 80093c4:	613b      	str	r3, [r7, #16]
 80093c6:	e7fe      	b.n	80093c6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	685a      	ldr	r2, [r3, #4]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	1ad2      	subs	r2, r2, r3
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80093da:	69b8      	ldr	r0, [r7, #24]
 80093dc:	f000 f8f6 	bl	80095cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093e0:	4b1a      	ldr	r3, [pc, #104]	; (800944c <pvPortMalloc+0x178>)
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	4a18      	ldr	r2, [pc, #96]	; (800944c <pvPortMalloc+0x178>)
 80093ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093ee:	4b17      	ldr	r3, [pc, #92]	; (800944c <pvPortMalloc+0x178>)
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	4b18      	ldr	r3, [pc, #96]	; (8009454 <pvPortMalloc+0x180>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d203      	bcs.n	8009402 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093fa:	4b14      	ldr	r3, [pc, #80]	; (800944c <pvPortMalloc+0x178>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a15      	ldr	r2, [pc, #84]	; (8009454 <pvPortMalloc+0x180>)
 8009400:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	685a      	ldr	r2, [r3, #4]
 8009406:	4b10      	ldr	r3, [pc, #64]	; (8009448 <pvPortMalloc+0x174>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	431a      	orrs	r2, r3
 800940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009412:	2200      	movs	r2, #0
 8009414:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009416:	f7fe fdc7 	bl	8007fa8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	f003 0307 	and.w	r3, r3, #7
 8009420:	2b00      	cmp	r3, #0
 8009422:	d009      	beq.n	8009438 <pvPortMalloc+0x164>
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	60fb      	str	r3, [r7, #12]
 8009436:	e7fe      	b.n	8009436 <pvPortMalloc+0x162>
	return pvReturn;
 8009438:	69fb      	ldr	r3, [r7, #28]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3728      	adds	r7, #40	; 0x28
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	20002424 	.word	0x20002424
 8009448:	20002430 	.word	0x20002430
 800944c:	20002428 	.word	0x20002428
 8009450:	2000241c 	.word	0x2000241c
 8009454:	2000242c 	.word	0x2000242c

08009458 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d046      	beq.n	80094f8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800946a:	2308      	movs	r3, #8
 800946c:	425b      	negs	r3, r3
 800946e:	697a      	ldr	r2, [r7, #20]
 8009470:	4413      	add	r3, r2
 8009472:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	4b20      	ldr	r3, [pc, #128]	; (8009500 <vPortFree+0xa8>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4013      	ands	r3, r2
 8009482:	2b00      	cmp	r3, #0
 8009484:	d109      	bne.n	800949a <vPortFree+0x42>
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	60fb      	str	r3, [r7, #12]
 8009498:	e7fe      	b.n	8009498 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d009      	beq.n	80094b6 <vPortFree+0x5e>
 80094a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	60bb      	str	r3, [r7, #8]
 80094b4:	e7fe      	b.n	80094b4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	685a      	ldr	r2, [r3, #4]
 80094ba:	4b11      	ldr	r3, [pc, #68]	; (8009500 <vPortFree+0xa8>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4013      	ands	r3, r2
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d019      	beq.n	80094f8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d115      	bne.n	80094f8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	4b0b      	ldr	r3, [pc, #44]	; (8009500 <vPortFree+0xa8>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	43db      	mvns	r3, r3
 80094d6:	401a      	ands	r2, r3
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094dc:	f7fe fd56 	bl	8007f8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	4b07      	ldr	r3, [pc, #28]	; (8009504 <vPortFree+0xac>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4413      	add	r3, r2
 80094ea:	4a06      	ldr	r2, [pc, #24]	; (8009504 <vPortFree+0xac>)
 80094ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094ee:	6938      	ldr	r0, [r7, #16]
 80094f0:	f000 f86c 	bl	80095cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80094f4:	f7fe fd58 	bl	8007fa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80094f8:	bf00      	nop
 80094fa:	3718      	adds	r7, #24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	20002430 	.word	0x20002430
 8009504:	20002428 	.word	0x20002428

08009508 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800950e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009512:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009514:	4b27      	ldr	r3, [pc, #156]	; (80095b4 <prvHeapInit+0xac>)
 8009516:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f003 0307 	and.w	r3, r3, #7
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00c      	beq.n	800953c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	3307      	adds	r3, #7
 8009526:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f023 0307 	bic.w	r3, r3, #7
 800952e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	4a1f      	ldr	r2, [pc, #124]	; (80095b4 <prvHeapInit+0xac>)
 8009538:	4413      	add	r3, r2
 800953a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009540:	4a1d      	ldr	r2, [pc, #116]	; (80095b8 <prvHeapInit+0xb0>)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009546:	4b1c      	ldr	r3, [pc, #112]	; (80095b8 <prvHeapInit+0xb0>)
 8009548:	2200      	movs	r2, #0
 800954a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	4413      	add	r3, r2
 8009552:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009554:	2208      	movs	r2, #8
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	1a9b      	subs	r3, r3, r2
 800955a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f023 0307 	bic.w	r3, r3, #7
 8009562:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	4a15      	ldr	r2, [pc, #84]	; (80095bc <prvHeapInit+0xb4>)
 8009568:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800956a:	4b14      	ldr	r3, [pc, #80]	; (80095bc <prvHeapInit+0xb4>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2200      	movs	r2, #0
 8009570:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009572:	4b12      	ldr	r3, [pc, #72]	; (80095bc <prvHeapInit+0xb4>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2200      	movs	r2, #0
 8009578:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	1ad2      	subs	r2, r2, r3
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009588:	4b0c      	ldr	r3, [pc, #48]	; (80095bc <prvHeapInit+0xb4>)
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	4a0a      	ldr	r2, [pc, #40]	; (80095c0 <prvHeapInit+0xb8>)
 8009596:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	4a09      	ldr	r2, [pc, #36]	; (80095c4 <prvHeapInit+0xbc>)
 800959e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80095a0:	4b09      	ldr	r3, [pc, #36]	; (80095c8 <prvHeapInit+0xc0>)
 80095a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80095a6:	601a      	str	r2, [r3, #0]
}
 80095a8:	bf00      	nop
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bc80      	pop	{r7}
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	2000181c 	.word	0x2000181c
 80095b8:	2000241c 	.word	0x2000241c
 80095bc:	20002424 	.word	0x20002424
 80095c0:	2000242c 	.word	0x2000242c
 80095c4:	20002428 	.word	0x20002428
 80095c8:	20002430 	.word	0x20002430

080095cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095d4:	4b27      	ldr	r3, [pc, #156]	; (8009674 <prvInsertBlockIntoFreeList+0xa8>)
 80095d6:	60fb      	str	r3, [r7, #12]
 80095d8:	e002      	b.n	80095e0 <prvInsertBlockIntoFreeList+0x14>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	60fb      	str	r3, [r7, #12]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d8f7      	bhi.n	80095da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	4413      	add	r3, r2
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d108      	bne.n	800960e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	685a      	ldr	r2, [r3, #4]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	441a      	add	r2, r3
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	68ba      	ldr	r2, [r7, #8]
 8009618:	441a      	add	r2, r3
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	429a      	cmp	r2, r3
 8009620:	d118      	bne.n	8009654 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	4b14      	ldr	r3, [pc, #80]	; (8009678 <prvInsertBlockIntoFreeList+0xac>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	429a      	cmp	r2, r3
 800962c:	d00d      	beq.n	800964a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685a      	ldr	r2, [r3, #4]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	441a      	add	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	601a      	str	r2, [r3, #0]
 8009648:	e008      	b.n	800965c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800964a:	4b0b      	ldr	r3, [pc, #44]	; (8009678 <prvInsertBlockIntoFreeList+0xac>)
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	601a      	str	r2, [r3, #0]
 8009652:	e003      	b.n	800965c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	429a      	cmp	r2, r3
 8009662:	d002      	beq.n	800966a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800966a:	bf00      	nop
 800966c:	3714      	adds	r7, #20
 800966e:	46bd      	mov	sp, r7
 8009670:	bc80      	pop	{r7}
 8009672:	4770      	bx	lr
 8009674:	2000241c 	.word	0x2000241c
 8009678:	20002424 	.word	0x20002424

0800967c <__cxa_pure_virtual>:
 800967c:	b508      	push	{r3, lr}
 800967e:	f000 f80d 	bl	800969c <_ZSt9terminatev>

08009682 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009682:	b508      	push	{r3, lr}
 8009684:	4780      	blx	r0
 8009686:	f000 f80e 	bl	80096a6 <abort>
	...

0800968c <_ZSt13get_terminatev>:
 800968c:	4b02      	ldr	r3, [pc, #8]	; (8009698 <_ZSt13get_terminatev+0xc>)
 800968e:	6818      	ldr	r0, [r3, #0]
 8009690:	f3bf 8f5b 	dmb	ish
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	20000028 	.word	0x20000028

0800969c <_ZSt9terminatev>:
 800969c:	b508      	push	{r3, lr}
 800969e:	f7ff fff5 	bl	800968c <_ZSt13get_terminatev>
 80096a2:	f7ff ffee 	bl	8009682 <_ZN10__cxxabiv111__terminateEPFvvE>

080096a6 <abort>:
 80096a6:	b508      	push	{r3, lr}
 80096a8:	2006      	movs	r0, #6
 80096aa:	f000 f871 	bl	8009790 <raise>
 80096ae:	2001      	movs	r0, #1
 80096b0:	f7fa fdff 	bl	80042b2 <_exit>

080096b4 <__errno>:
 80096b4:	4b01      	ldr	r3, [pc, #4]	; (80096bc <__errno+0x8>)
 80096b6:	6818      	ldr	r0, [r3, #0]
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	2000002c 	.word	0x2000002c

080096c0 <__libc_init_array>:
 80096c0:	b570      	push	{r4, r5, r6, lr}
 80096c2:	2500      	movs	r5, #0
 80096c4:	4e0c      	ldr	r6, [pc, #48]	; (80096f8 <__libc_init_array+0x38>)
 80096c6:	4c0d      	ldr	r4, [pc, #52]	; (80096fc <__libc_init_array+0x3c>)
 80096c8:	1ba4      	subs	r4, r4, r6
 80096ca:	10a4      	asrs	r4, r4, #2
 80096cc:	42a5      	cmp	r5, r4
 80096ce:	d109      	bne.n	80096e4 <__libc_init_array+0x24>
 80096d0:	f000 f960 	bl	8009994 <_init>
 80096d4:	2500      	movs	r5, #0
 80096d6:	4e0a      	ldr	r6, [pc, #40]	; (8009700 <__libc_init_array+0x40>)
 80096d8:	4c0a      	ldr	r4, [pc, #40]	; (8009704 <__libc_init_array+0x44>)
 80096da:	1ba4      	subs	r4, r4, r6
 80096dc:	10a4      	asrs	r4, r4, #2
 80096de:	42a5      	cmp	r5, r4
 80096e0:	d105      	bne.n	80096ee <__libc_init_array+0x2e>
 80096e2:	bd70      	pop	{r4, r5, r6, pc}
 80096e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096e8:	4798      	blx	r3
 80096ea:	3501      	adds	r5, #1
 80096ec:	e7ee      	b.n	80096cc <__libc_init_array+0xc>
 80096ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096f2:	4798      	blx	r3
 80096f4:	3501      	adds	r5, #1
 80096f6:	e7f2      	b.n	80096de <__libc_init_array+0x1e>
 80096f8:	0800a074 	.word	0x0800a074
 80096fc:	0800a074 	.word	0x0800a074
 8009700:	0800a074 	.word	0x0800a074
 8009704:	0800a07c 	.word	0x0800a07c

08009708 <memcpy>:
 8009708:	b510      	push	{r4, lr}
 800970a:	1e43      	subs	r3, r0, #1
 800970c:	440a      	add	r2, r1
 800970e:	4291      	cmp	r1, r2
 8009710:	d100      	bne.n	8009714 <memcpy+0xc>
 8009712:	bd10      	pop	{r4, pc}
 8009714:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009718:	f803 4f01 	strb.w	r4, [r3, #1]!
 800971c:	e7f7      	b.n	800970e <memcpy+0x6>

0800971e <memset>:
 800971e:	4603      	mov	r3, r0
 8009720:	4402      	add	r2, r0
 8009722:	4293      	cmp	r3, r2
 8009724:	d100      	bne.n	8009728 <memset+0xa>
 8009726:	4770      	bx	lr
 8009728:	f803 1b01 	strb.w	r1, [r3], #1
 800972c:	e7f9      	b.n	8009722 <memset+0x4>
	...

08009730 <realloc>:
 8009730:	4b02      	ldr	r3, [pc, #8]	; (800973c <realloc+0xc>)
 8009732:	460a      	mov	r2, r1
 8009734:	4601      	mov	r1, r0
 8009736:	6818      	ldr	r0, [r3, #0]
 8009738:	f000 b8a0 	b.w	800987c <_realloc_r>
 800973c:	2000002c 	.word	0x2000002c

08009740 <_raise_r>:
 8009740:	291f      	cmp	r1, #31
 8009742:	b538      	push	{r3, r4, r5, lr}
 8009744:	4604      	mov	r4, r0
 8009746:	460d      	mov	r5, r1
 8009748:	d904      	bls.n	8009754 <_raise_r+0x14>
 800974a:	2316      	movs	r3, #22
 800974c:	6003      	str	r3, [r0, #0]
 800974e:	f04f 30ff 	mov.w	r0, #4294967295
 8009752:	bd38      	pop	{r3, r4, r5, pc}
 8009754:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009756:	b112      	cbz	r2, 800975e <_raise_r+0x1e>
 8009758:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800975c:	b94b      	cbnz	r3, 8009772 <_raise_r+0x32>
 800975e:	4620      	mov	r0, r4
 8009760:	f000 f830 	bl	80097c4 <_getpid_r>
 8009764:	462a      	mov	r2, r5
 8009766:	4601      	mov	r1, r0
 8009768:	4620      	mov	r0, r4
 800976a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800976e:	f000 b817 	b.w	80097a0 <_kill_r>
 8009772:	2b01      	cmp	r3, #1
 8009774:	d00a      	beq.n	800978c <_raise_r+0x4c>
 8009776:	1c59      	adds	r1, r3, #1
 8009778:	d103      	bne.n	8009782 <_raise_r+0x42>
 800977a:	2316      	movs	r3, #22
 800977c:	6003      	str	r3, [r0, #0]
 800977e:	2001      	movs	r0, #1
 8009780:	e7e7      	b.n	8009752 <_raise_r+0x12>
 8009782:	2400      	movs	r4, #0
 8009784:	4628      	mov	r0, r5
 8009786:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800978a:	4798      	blx	r3
 800978c:	2000      	movs	r0, #0
 800978e:	e7e0      	b.n	8009752 <_raise_r+0x12>

08009790 <raise>:
 8009790:	4b02      	ldr	r3, [pc, #8]	; (800979c <raise+0xc>)
 8009792:	4601      	mov	r1, r0
 8009794:	6818      	ldr	r0, [r3, #0]
 8009796:	f7ff bfd3 	b.w	8009740 <_raise_r>
 800979a:	bf00      	nop
 800979c:	2000002c 	.word	0x2000002c

080097a0 <_kill_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	2300      	movs	r3, #0
 80097a4:	4c06      	ldr	r4, [pc, #24]	; (80097c0 <_kill_r+0x20>)
 80097a6:	4605      	mov	r5, r0
 80097a8:	4608      	mov	r0, r1
 80097aa:	4611      	mov	r1, r2
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	f7fa fd70 	bl	8004292 <_kill>
 80097b2:	1c43      	adds	r3, r0, #1
 80097b4:	d102      	bne.n	80097bc <_kill_r+0x1c>
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	b103      	cbz	r3, 80097bc <_kill_r+0x1c>
 80097ba:	602b      	str	r3, [r5, #0]
 80097bc:	bd38      	pop	{r3, r4, r5, pc}
 80097be:	bf00      	nop
 80097c0:	200026c0 	.word	0x200026c0

080097c4 <_getpid_r>:
 80097c4:	f7fa bd5e 	b.w	8004284 <_getpid>

080097c8 <_malloc_r>:
 80097c8:	b570      	push	{r4, r5, r6, lr}
 80097ca:	1ccd      	adds	r5, r1, #3
 80097cc:	f025 0503 	bic.w	r5, r5, #3
 80097d0:	3508      	adds	r5, #8
 80097d2:	2d0c      	cmp	r5, #12
 80097d4:	bf38      	it	cc
 80097d6:	250c      	movcc	r5, #12
 80097d8:	2d00      	cmp	r5, #0
 80097da:	4606      	mov	r6, r0
 80097dc:	db01      	blt.n	80097e2 <_malloc_r+0x1a>
 80097de:	42a9      	cmp	r1, r5
 80097e0:	d903      	bls.n	80097ea <_malloc_r+0x22>
 80097e2:	230c      	movs	r3, #12
 80097e4:	6033      	str	r3, [r6, #0]
 80097e6:	2000      	movs	r0, #0
 80097e8:	bd70      	pop	{r4, r5, r6, pc}
 80097ea:	f000 f87d 	bl	80098e8 <__malloc_lock>
 80097ee:	4a21      	ldr	r2, [pc, #132]	; (8009874 <_malloc_r+0xac>)
 80097f0:	6814      	ldr	r4, [r2, #0]
 80097f2:	4621      	mov	r1, r4
 80097f4:	b991      	cbnz	r1, 800981c <_malloc_r+0x54>
 80097f6:	4c20      	ldr	r4, [pc, #128]	; (8009878 <_malloc_r+0xb0>)
 80097f8:	6823      	ldr	r3, [r4, #0]
 80097fa:	b91b      	cbnz	r3, 8009804 <_malloc_r+0x3c>
 80097fc:	4630      	mov	r0, r6
 80097fe:	f000 f863 	bl	80098c8 <_sbrk_r>
 8009802:	6020      	str	r0, [r4, #0]
 8009804:	4629      	mov	r1, r5
 8009806:	4630      	mov	r0, r6
 8009808:	f000 f85e 	bl	80098c8 <_sbrk_r>
 800980c:	1c43      	adds	r3, r0, #1
 800980e:	d124      	bne.n	800985a <_malloc_r+0x92>
 8009810:	230c      	movs	r3, #12
 8009812:	4630      	mov	r0, r6
 8009814:	6033      	str	r3, [r6, #0]
 8009816:	f000 f868 	bl	80098ea <__malloc_unlock>
 800981a:	e7e4      	b.n	80097e6 <_malloc_r+0x1e>
 800981c:	680b      	ldr	r3, [r1, #0]
 800981e:	1b5b      	subs	r3, r3, r5
 8009820:	d418      	bmi.n	8009854 <_malloc_r+0x8c>
 8009822:	2b0b      	cmp	r3, #11
 8009824:	d90f      	bls.n	8009846 <_malloc_r+0x7e>
 8009826:	600b      	str	r3, [r1, #0]
 8009828:	18cc      	adds	r4, r1, r3
 800982a:	50cd      	str	r5, [r1, r3]
 800982c:	4630      	mov	r0, r6
 800982e:	f000 f85c 	bl	80098ea <__malloc_unlock>
 8009832:	f104 000b 	add.w	r0, r4, #11
 8009836:	1d23      	adds	r3, r4, #4
 8009838:	f020 0007 	bic.w	r0, r0, #7
 800983c:	1ac3      	subs	r3, r0, r3
 800983e:	d0d3      	beq.n	80097e8 <_malloc_r+0x20>
 8009840:	425a      	negs	r2, r3
 8009842:	50e2      	str	r2, [r4, r3]
 8009844:	e7d0      	b.n	80097e8 <_malloc_r+0x20>
 8009846:	684b      	ldr	r3, [r1, #4]
 8009848:	428c      	cmp	r4, r1
 800984a:	bf16      	itet	ne
 800984c:	6063      	strne	r3, [r4, #4]
 800984e:	6013      	streq	r3, [r2, #0]
 8009850:	460c      	movne	r4, r1
 8009852:	e7eb      	b.n	800982c <_malloc_r+0x64>
 8009854:	460c      	mov	r4, r1
 8009856:	6849      	ldr	r1, [r1, #4]
 8009858:	e7cc      	b.n	80097f4 <_malloc_r+0x2c>
 800985a:	1cc4      	adds	r4, r0, #3
 800985c:	f024 0403 	bic.w	r4, r4, #3
 8009860:	42a0      	cmp	r0, r4
 8009862:	d005      	beq.n	8009870 <_malloc_r+0xa8>
 8009864:	1a21      	subs	r1, r4, r0
 8009866:	4630      	mov	r0, r6
 8009868:	f000 f82e 	bl	80098c8 <_sbrk_r>
 800986c:	3001      	adds	r0, #1
 800986e:	d0cf      	beq.n	8009810 <_malloc_r+0x48>
 8009870:	6025      	str	r5, [r4, #0]
 8009872:	e7db      	b.n	800982c <_malloc_r+0x64>
 8009874:	20002434 	.word	0x20002434
 8009878:	20002438 	.word	0x20002438

0800987c <_realloc_r>:
 800987c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987e:	4607      	mov	r7, r0
 8009880:	4614      	mov	r4, r2
 8009882:	460e      	mov	r6, r1
 8009884:	b921      	cbnz	r1, 8009890 <_realloc_r+0x14>
 8009886:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800988a:	4611      	mov	r1, r2
 800988c:	f7ff bf9c 	b.w	80097c8 <_malloc_r>
 8009890:	b922      	cbnz	r2, 800989c <_realloc_r+0x20>
 8009892:	f000 f82b 	bl	80098ec <_free_r>
 8009896:	4625      	mov	r5, r4
 8009898:	4628      	mov	r0, r5
 800989a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800989c:	f000 f872 	bl	8009984 <_malloc_usable_size_r>
 80098a0:	42a0      	cmp	r0, r4
 80098a2:	d20f      	bcs.n	80098c4 <_realloc_r+0x48>
 80098a4:	4621      	mov	r1, r4
 80098a6:	4638      	mov	r0, r7
 80098a8:	f7ff ff8e 	bl	80097c8 <_malloc_r>
 80098ac:	4605      	mov	r5, r0
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d0f2      	beq.n	8009898 <_realloc_r+0x1c>
 80098b2:	4631      	mov	r1, r6
 80098b4:	4622      	mov	r2, r4
 80098b6:	f7ff ff27 	bl	8009708 <memcpy>
 80098ba:	4631      	mov	r1, r6
 80098bc:	4638      	mov	r0, r7
 80098be:	f000 f815 	bl	80098ec <_free_r>
 80098c2:	e7e9      	b.n	8009898 <_realloc_r+0x1c>
 80098c4:	4635      	mov	r5, r6
 80098c6:	e7e7      	b.n	8009898 <_realloc_r+0x1c>

080098c8 <_sbrk_r>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	2300      	movs	r3, #0
 80098cc:	4c05      	ldr	r4, [pc, #20]	; (80098e4 <_sbrk_r+0x1c>)
 80098ce:	4605      	mov	r5, r0
 80098d0:	4608      	mov	r0, r1
 80098d2:	6023      	str	r3, [r4, #0]
 80098d4:	f7fa fcf8 	bl	80042c8 <_sbrk>
 80098d8:	1c43      	adds	r3, r0, #1
 80098da:	d102      	bne.n	80098e2 <_sbrk_r+0x1a>
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	b103      	cbz	r3, 80098e2 <_sbrk_r+0x1a>
 80098e0:	602b      	str	r3, [r5, #0]
 80098e2:	bd38      	pop	{r3, r4, r5, pc}
 80098e4:	200026c0 	.word	0x200026c0

080098e8 <__malloc_lock>:
 80098e8:	4770      	bx	lr

080098ea <__malloc_unlock>:
 80098ea:	4770      	bx	lr

080098ec <_free_r>:
 80098ec:	b538      	push	{r3, r4, r5, lr}
 80098ee:	4605      	mov	r5, r0
 80098f0:	2900      	cmp	r1, #0
 80098f2:	d043      	beq.n	800997c <_free_r+0x90>
 80098f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098f8:	1f0c      	subs	r4, r1, #4
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	bfb8      	it	lt
 80098fe:	18e4      	addlt	r4, r4, r3
 8009900:	f7ff fff2 	bl	80098e8 <__malloc_lock>
 8009904:	4a1e      	ldr	r2, [pc, #120]	; (8009980 <_free_r+0x94>)
 8009906:	6813      	ldr	r3, [r2, #0]
 8009908:	4610      	mov	r0, r2
 800990a:	b933      	cbnz	r3, 800991a <_free_r+0x2e>
 800990c:	6063      	str	r3, [r4, #4]
 800990e:	6014      	str	r4, [r2, #0]
 8009910:	4628      	mov	r0, r5
 8009912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009916:	f7ff bfe8 	b.w	80098ea <__malloc_unlock>
 800991a:	42a3      	cmp	r3, r4
 800991c:	d90b      	bls.n	8009936 <_free_r+0x4a>
 800991e:	6821      	ldr	r1, [r4, #0]
 8009920:	1862      	adds	r2, r4, r1
 8009922:	4293      	cmp	r3, r2
 8009924:	bf01      	itttt	eq
 8009926:	681a      	ldreq	r2, [r3, #0]
 8009928:	685b      	ldreq	r3, [r3, #4]
 800992a:	1852      	addeq	r2, r2, r1
 800992c:	6022      	streq	r2, [r4, #0]
 800992e:	6063      	str	r3, [r4, #4]
 8009930:	6004      	str	r4, [r0, #0]
 8009932:	e7ed      	b.n	8009910 <_free_r+0x24>
 8009934:	4613      	mov	r3, r2
 8009936:	685a      	ldr	r2, [r3, #4]
 8009938:	b10a      	cbz	r2, 800993e <_free_r+0x52>
 800993a:	42a2      	cmp	r2, r4
 800993c:	d9fa      	bls.n	8009934 <_free_r+0x48>
 800993e:	6819      	ldr	r1, [r3, #0]
 8009940:	1858      	adds	r0, r3, r1
 8009942:	42a0      	cmp	r0, r4
 8009944:	d10b      	bne.n	800995e <_free_r+0x72>
 8009946:	6820      	ldr	r0, [r4, #0]
 8009948:	4401      	add	r1, r0
 800994a:	1858      	adds	r0, r3, r1
 800994c:	4282      	cmp	r2, r0
 800994e:	6019      	str	r1, [r3, #0]
 8009950:	d1de      	bne.n	8009910 <_free_r+0x24>
 8009952:	6810      	ldr	r0, [r2, #0]
 8009954:	6852      	ldr	r2, [r2, #4]
 8009956:	4401      	add	r1, r0
 8009958:	6019      	str	r1, [r3, #0]
 800995a:	605a      	str	r2, [r3, #4]
 800995c:	e7d8      	b.n	8009910 <_free_r+0x24>
 800995e:	d902      	bls.n	8009966 <_free_r+0x7a>
 8009960:	230c      	movs	r3, #12
 8009962:	602b      	str	r3, [r5, #0]
 8009964:	e7d4      	b.n	8009910 <_free_r+0x24>
 8009966:	6820      	ldr	r0, [r4, #0]
 8009968:	1821      	adds	r1, r4, r0
 800996a:	428a      	cmp	r2, r1
 800996c:	bf01      	itttt	eq
 800996e:	6811      	ldreq	r1, [r2, #0]
 8009970:	6852      	ldreq	r2, [r2, #4]
 8009972:	1809      	addeq	r1, r1, r0
 8009974:	6021      	streq	r1, [r4, #0]
 8009976:	6062      	str	r2, [r4, #4]
 8009978:	605c      	str	r4, [r3, #4]
 800997a:	e7c9      	b.n	8009910 <_free_r+0x24>
 800997c:	bd38      	pop	{r3, r4, r5, pc}
 800997e:	bf00      	nop
 8009980:	20002434 	.word	0x20002434

08009984 <_malloc_usable_size_r>:
 8009984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009988:	1f18      	subs	r0, r3, #4
 800998a:	2b00      	cmp	r3, #0
 800998c:	bfbc      	itt	lt
 800998e:	580b      	ldrlt	r3, [r1, r0]
 8009990:	18c0      	addlt	r0, r0, r3
 8009992:	4770      	bx	lr

08009994 <_init>:
 8009994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009996:	bf00      	nop
 8009998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800999a:	bc08      	pop	{r3}
 800999c:	469e      	mov	lr, r3
 800999e:	4770      	bx	lr

080099a0 <_fini>:
 80099a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a2:	bf00      	nop
 80099a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099a6:	bc08      	pop	{r3}
 80099a8:	469e      	mov	lr, r3
 80099aa:	4770      	bx	lr
