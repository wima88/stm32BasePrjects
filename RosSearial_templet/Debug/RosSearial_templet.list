
RosSearial_templet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e250  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cd8  0800e360  0800e360  0001e360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f038  0800f038  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800f038  0800f038  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f038  0800f038  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f038  0800f038  0001f038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f040  0800f040  0001f040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800f044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fb8  200000a8  0800f0ec  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001060  0800f0ec  00021060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aadd  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003242  00000000  00000000  0003abae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001508  00000000  00000000  0003ddf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001400  00000000  00000000  0003f2f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b49c  00000000  00000000  000406f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fb50  00000000  00000000  0005bb94  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009516b  00000000  00000000  0006b6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010084f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068b8  00000000  00000000  001008cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a8 	.word	0x200000a8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e348 	.word	0x0800e348

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000ac 	.word	0x200000ac
 800014c:	0800e348 	.word	0x0800e348

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_frsub>:
 8000afc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b00:	e002      	b.n	8000b08 <__addsf3>
 8000b02:	bf00      	nop

08000b04 <__aeabi_fsub>:
 8000b04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b08 <__addsf3>:
 8000b08:	0042      	lsls	r2, r0, #1
 8000b0a:	bf1f      	itttt	ne
 8000b0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b10:	ea92 0f03 	teqne	r2, r3
 8000b14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1c:	d06a      	beq.n	8000bf4 <__addsf3+0xec>
 8000b1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b26:	bfc1      	itttt	gt
 8000b28:	18d2      	addgt	r2, r2, r3
 8000b2a:	4041      	eorgt	r1, r0
 8000b2c:	4048      	eorgt	r0, r1
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	bfb8      	it	lt
 8000b32:	425b      	neglt	r3, r3
 8000b34:	2b19      	cmp	r3, #25
 8000b36:	bf88      	it	hi
 8000b38:	4770      	bxhi	lr
 8000b3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b56:	bf18      	it	ne
 8000b58:	4249      	negne	r1, r1
 8000b5a:	ea92 0f03 	teq	r2, r3
 8000b5e:	d03f      	beq.n	8000be0 <__addsf3+0xd8>
 8000b60:	f1a2 0201 	sub.w	r2, r2, #1
 8000b64:	fa41 fc03 	asr.w	ip, r1, r3
 8000b68:	eb10 000c 	adds.w	r0, r0, ip
 8000b6c:	f1c3 0320 	rsb	r3, r3, #32
 8000b70:	fa01 f103 	lsl.w	r1, r1, r3
 8000b74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__addsf3+0x78>
 8000b7a:	4249      	negs	r1, r1
 8000b7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b84:	d313      	bcc.n	8000bae <__addsf3+0xa6>
 8000b86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8a:	d306      	bcc.n	8000b9a <__addsf3+0x92>
 8000b8c:	0840      	lsrs	r0, r0, #1
 8000b8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b92:	f102 0201 	add.w	r2, r2, #1
 8000b96:	2afe      	cmp	r2, #254	; 0xfe
 8000b98:	d251      	bcs.n	8000c3e <__addsf3+0x136>
 8000b9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba2:	bf08      	it	eq
 8000ba4:	f020 0001 	biceq.w	r0, r0, #1
 8000ba8:	ea40 0003 	orr.w	r0, r0, r3
 8000bac:	4770      	bx	lr
 8000bae:	0049      	lsls	r1, r1, #1
 8000bb0:	eb40 0000 	adc.w	r0, r0, r0
 8000bb4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bbc:	d1ed      	bne.n	8000b9a <__addsf3+0x92>
 8000bbe:	fab0 fc80 	clz	ip, r0
 8000bc2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bc6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bce:	bfaa      	itet	ge
 8000bd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd4:	4252      	neglt	r2, r2
 8000bd6:	4318      	orrge	r0, r3
 8000bd8:	bfbc      	itt	lt
 8000bda:	40d0      	lsrlt	r0, r2
 8000bdc:	4318      	orrlt	r0, r3
 8000bde:	4770      	bx	lr
 8000be0:	f092 0f00 	teq	r2, #0
 8000be4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be8:	bf06      	itte	eq
 8000bea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bee:	3201      	addeq	r2, #1
 8000bf0:	3b01      	subne	r3, #1
 8000bf2:	e7b5      	b.n	8000b60 <__addsf3+0x58>
 8000bf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bfc:	bf18      	it	ne
 8000bfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c02:	d021      	beq.n	8000c48 <__addsf3+0x140>
 8000c04:	ea92 0f03 	teq	r2, r3
 8000c08:	d004      	beq.n	8000c14 <__addsf3+0x10c>
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	bf08      	it	eq
 8000c10:	4608      	moveq	r0, r1
 8000c12:	4770      	bx	lr
 8000c14:	ea90 0f01 	teq	r0, r1
 8000c18:	bf1c      	itt	ne
 8000c1a:	2000      	movne	r0, #0
 8000c1c:	4770      	bxne	lr
 8000c1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c22:	d104      	bne.n	8000c2e <__addsf3+0x126>
 8000c24:	0040      	lsls	r0, r0, #1
 8000c26:	bf28      	it	cs
 8000c28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	4770      	bx	lr
 8000c2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c32:	bf3c      	itt	cc
 8000c34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bxcc	lr
 8000c3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	4770      	bx	lr
 8000c48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c4c:	bf16      	itet	ne
 8000c4e:	4608      	movne	r0, r1
 8000c50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c54:	4601      	movne	r1, r0
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	bf06      	itte	eq
 8000c5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c5e:	ea90 0f01 	teqeq	r0, r1
 8000c62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_ui2f>:
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e004      	b.n	8000c78 <__aeabi_i2f+0x8>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_i2f>:
 8000c70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	bf48      	it	mi
 8000c76:	4240      	negmi	r0, r0
 8000c78:	ea5f 0c00 	movs.w	ip, r0
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c84:	4601      	mov	r1, r0
 8000c86:	f04f 0000 	mov.w	r0, #0
 8000c8a:	e01c      	b.n	8000cc6 <__aeabi_l2f+0x2a>

08000c8c <__aeabi_ul2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e00a      	b.n	8000cb0 <__aeabi_l2f+0x14>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_l2f>:
 8000c9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca8:	d502      	bpl.n	8000cb0 <__aeabi_l2f+0x14>
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	ea5f 0c01 	movs.w	ip, r1
 8000cb4:	bf02      	ittt	eq
 8000cb6:	4684      	moveq	ip, r0
 8000cb8:	4601      	moveq	r1, r0
 8000cba:	2000      	moveq	r0, #0
 8000cbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc0:	bf08      	it	eq
 8000cc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cca:	fabc f28c 	clz	r2, ip
 8000cce:	3a08      	subs	r2, #8
 8000cd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd4:	db10      	blt.n	8000cf8 <__aeabi_l2f+0x5c>
 8000cd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cda:	4463      	add	r3, ip
 8000cdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f102 0220 	add.w	r2, r2, #32
 8000cfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d00:	f1c2 0220 	rsb	r2, r2, #32
 8000d04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d08:	fa21 f202 	lsr.w	r2, r1, r2
 8000d0c:	eb43 0002 	adc.w	r0, r3, r2
 8000d10:	bf08      	it	eq
 8000d12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_fmul>:
 8000d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d20:	bf1e      	ittt	ne
 8000d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d26:	ea92 0f0c 	teqne	r2, ip
 8000d2a:	ea93 0f0c 	teqne	r3, ip
 8000d2e:	d06f      	beq.n	8000e10 <__aeabi_fmul+0xf8>
 8000d30:	441a      	add	r2, r3
 8000d32:	ea80 0c01 	eor.w	ip, r0, r1
 8000d36:	0240      	lsls	r0, r0, #9
 8000d38:	bf18      	it	ne
 8000d3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d3e:	d01e      	beq.n	8000d7e <__aeabi_fmul+0x66>
 8000d40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d58:	bf3e      	ittt	cc
 8000d5a:	0049      	lslcc	r1, r1, #1
 8000d5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d60:	005b      	lslcc	r3, r3, #1
 8000d62:	ea40 0001 	orr.w	r0, r0, r1
 8000d66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d6a:	2afd      	cmp	r2, #253	; 0xfd
 8000d6c:	d81d      	bhi.n	8000daa <__aeabi_fmul+0x92>
 8000d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	4770      	bx	lr
 8000d7e:	f090 0f00 	teq	r0, #0
 8000d82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d86:	bf08      	it	eq
 8000d88:	0249      	lsleq	r1, r1, #9
 8000d8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d92:	3a7f      	subs	r2, #127	; 0x7f
 8000d94:	bfc2      	ittt	gt
 8000d96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d9e:	4770      	bxgt	lr
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	3a01      	subs	r2, #1
 8000daa:	dc5d      	bgt.n	8000e68 <__aeabi_fmul+0x150>
 8000dac:	f112 0f19 	cmn.w	r2, #25
 8000db0:	bfdc      	itt	le
 8000db2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000db6:	4770      	bxle	lr
 8000db8:	f1c2 0200 	rsb	r2, r2, #0
 8000dbc:	0041      	lsls	r1, r0, #1
 8000dbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000dc2:	f1c2 0220 	rsb	r2, r2, #32
 8000dc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dce:	f140 0000 	adc.w	r0, r0, #0
 8000dd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dd6:	bf08      	it	eq
 8000dd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ddc:	4770      	bx	lr
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0040      	lsleq	r0, r0, #1
 8000dea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dee:	3a01      	subeq	r2, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fmul+0xce>
 8000df2:	ea40 000c 	orr.w	r0, r0, ip
 8000df6:	f093 0f00 	teq	r3, #0
 8000dfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0049      	lsleq	r1, r1, #1
 8000e02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e06:	3b01      	subeq	r3, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xe6>
 8000e0a:	ea41 010c 	orr.w	r1, r1, ip
 8000e0e:	e78f      	b.n	8000d30 <__aeabi_fmul+0x18>
 8000e10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	bf18      	it	ne
 8000e1a:	ea93 0f0c 	teqne	r3, ip
 8000e1e:	d00a      	beq.n	8000e36 <__aeabi_fmul+0x11e>
 8000e20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e24:	bf18      	it	ne
 8000e26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	d1d8      	bne.n	8000dde <__aeabi_fmul+0xc6>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e34:	4770      	bx	lr
 8000e36:	f090 0f00 	teq	r0, #0
 8000e3a:	bf17      	itett	ne
 8000e3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e40:	4608      	moveq	r0, r1
 8000e42:	f091 0f00 	teqne	r1, #0
 8000e46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e4a:	d014      	beq.n	8000e76 <__aeabi_fmul+0x15e>
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d101      	bne.n	8000e56 <__aeabi_fmul+0x13e>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d10f      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e56:	ea93 0f0c 	teq	r3, ip
 8000e5a:	d103      	bne.n	8000e64 <__aeabi_fmul+0x14c>
 8000e5c:	024b      	lsls	r3, r1, #9
 8000e5e:	bf18      	it	ne
 8000e60:	4608      	movne	r0, r1
 8000e62:	d108      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e64:	ea80 0001 	eor.w	r0, r0, r1
 8000e68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e74:	4770      	bx	lr
 8000e76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e7e:	4770      	bx	lr

08000e80 <__aeabi_fdiv>:
 8000e80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e88:	bf1e      	ittt	ne
 8000e8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e8e:	ea92 0f0c 	teqne	r2, ip
 8000e92:	ea93 0f0c 	teqne	r3, ip
 8000e96:	d069      	beq.n	8000f6c <__aeabi_fdiv+0xec>
 8000e98:	eba2 0203 	sub.w	r2, r2, r3
 8000e9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea0:	0249      	lsls	r1, r1, #9
 8000ea2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ea6:	d037      	beq.n	8000f18 <__aeabi_fdiv+0x98>
 8000ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	bf38      	it	cc
 8000ebc:	005b      	lslcc	r3, r3, #1
 8000ebe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ec2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	bf24      	itt	cs
 8000eca:	1a5b      	subcs	r3, r3, r1
 8000ecc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed4:	bf24      	itt	cs
 8000ed6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ede:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ee2:	bf24      	itt	cs
 8000ee4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ee8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ef6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	bf18      	it	ne
 8000efe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f02:	d1e0      	bne.n	8000ec6 <__aeabi_fdiv+0x46>
 8000f04:	2afd      	cmp	r2, #253	; 0xfd
 8000f06:	f63f af50 	bhi.w	8000daa <__aeabi_fmul+0x92>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f10:	bf08      	it	eq
 8000f12:	f020 0001 	biceq.w	r0, r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f20:	327f      	adds	r2, #127	; 0x7f
 8000f22:	bfc2      	ittt	gt
 8000f24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f2c:	4770      	bxgt	lr
 8000f2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	3a01      	subs	r2, #1
 8000f38:	e737      	b.n	8000daa <__aeabi_fmul+0x92>
 8000f3a:	f092 0f00 	teq	r2, #0
 8000f3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0040      	lsleq	r0, r0, #1
 8000f46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4a:	3a01      	subeq	r2, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fdiv+0xc2>
 8000f4e:	ea40 000c 	orr.w	r0, r0, ip
 8000f52:	f093 0f00 	teq	r3, #0
 8000f56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0049      	lsleq	r1, r1, #1
 8000f5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f62:	3b01      	subeq	r3, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xda>
 8000f66:	ea41 010c 	orr.w	r1, r1, ip
 8000f6a:	e795      	b.n	8000e98 <__aeabi_fdiv+0x18>
 8000f6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f70:	ea92 0f0c 	teq	r2, ip
 8000f74:	d108      	bne.n	8000f88 <__aeabi_fdiv+0x108>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	f47f af7d 	bne.w	8000e76 <__aeabi_fmul+0x15e>
 8000f7c:	ea93 0f0c 	teq	r3, ip
 8000f80:	f47f af70 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e776      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	d104      	bne.n	8000f98 <__aeabi_fdiv+0x118>
 8000f8e:	024b      	lsls	r3, r1, #9
 8000f90:	f43f af4c 	beq.w	8000e2c <__aeabi_fmul+0x114>
 8000f94:	4608      	mov	r0, r1
 8000f96:	e76e      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f9c:	bf18      	it	ne
 8000f9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fa2:	d1ca      	bne.n	8000f3a <__aeabi_fdiv+0xba>
 8000fa4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fa8:	f47f af5c 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000fac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fb0:	f47f af3c 	bne.w	8000e2c <__aeabi_fmul+0x114>
 8000fb4:	e75f      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000fb6:	bf00      	nop

08000fb8 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	2007      	movs	r0, #7
 8000fc8:	f003 ff4c 	bl	8004e64 <bno055_writeData>
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	203d      	movs	r0, #61	; 0x3d
 8000fe4:	f003 ff3e 	bl	8004e64 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d103      	bne.n	8000ff6 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000fee:	2013      	movs	r0, #19
 8000ff0:	f003 ff2c 	bl	8004e4c <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000ff4:	e002      	b.n	8000ffc <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000ff6:	2007      	movs	r0, #7
 8000ff8:	f003 ff28 	bl	8004e4c <bno055_delay>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff ffe3 	bl	8000fd4 <bno055_setOperationMode>
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}

08001012 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001016:	200c      	movs	r0, #12
 8001018:	f7ff ffdc 	bl	8000fd4 <bno055_setOperationMode>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001024:	2120      	movs	r1, #32
 8001026:	203f      	movs	r0, #63	; 0x3f
 8001028:	f003 ff1c 	bl	8004e64 <bno055_writeData>
  bno055_delay(700);
 800102c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001030:	f003 ff0c 	bl	8004e4c <bno055_delay>
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}

08001038 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  bno055_reset();
 800103e:	f7ff ffef 	bl	8001020 <bno055_reset>

  uint8_t id = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	2201      	movs	r2, #1
 800104a:	4619      	mov	r1, r3
 800104c:	2000      	movs	r0, #0
 800104e:	f003 fff5 	bl	800503c <bno055_readData>
  if (id != BNO055_ID) {
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2ba0      	cmp	r3, #160	; 0xa0
 8001056:	d004      	beq.n	8001062 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	4619      	mov	r1, r3
 800105c:	4809      	ldr	r0, [pc, #36]	; (8001084 <bno055_setup+0x4c>)
 800105e:	f00c f9a7 	bl	800d3b0 <iprintf>
  }
  bno055_setPage(0);
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff ffa8 	bl	8000fb8 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001068:	2100      	movs	r1, #0
 800106a:	203f      	movs	r0, #63	; 0x3f
 800106c:	f003 fefa 	bl	8004e64 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001070:	f7ff ffc8 	bl	8001004 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001074:	200a      	movs	r0, #10
 8001076:	f003 fee9 	bl	8004e4c <bno055_delay>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	0800e360 	.word	0x0800e360

08001088 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b08e      	sub	sp, #56	; 0x38
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
  bno055_setPage(0);
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff ff8f 	bl	8000fb8 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	2b20      	cmp	r3, #32
 800109e:	d107      	bne.n	80010b0 <bno055_getVector+0x28>
    bno055_readData(vec, buffer, 8);
 80010a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	2208      	movs	r2, #8
 80010a8:	4618      	mov	r0, r3
 80010aa:	f003 ffc7 	bl	800503c <bno055_readData>
 80010ae:	e006      	b.n	80010be <bno055_getVector+0x36>
  else
    bno055_readData(vec, buffer, 6);
 80010b0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	2206      	movs	r2, #6
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 ffbf 	bl	800503c <bno055_readData>

  double scale = 1;
 80010be:	f04f 0300 	mov.w	r3, #0
 80010c2:	4c77      	ldr	r4, [pc, #476]	; (80012a0 <bno055_getVector+0x218>)
 80010c4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	2b0e      	cmp	r3, #14
 80010cc:	d109      	bne.n	80010e2 <bno055_getVector+0x5a>
    scale = magScale;
 80010ce:	4b75      	ldr	r3, [pc, #468]	; (80012a4 <bno055_getVector+0x21c>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f986 	bl	80003e4 <__aeabi_ui2d>
 80010d8:	4603      	mov	r3, r0
 80010da:	460c      	mov	r4, r1
 80010dc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 80010e0:	e038      	b.n	8001154 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d005      	beq.n	80010f4 <bno055_getVector+0x6c>
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	2b28      	cmp	r3, #40	; 0x28
 80010ec:	d002      	beq.n	80010f4 <bno055_getVector+0x6c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	2b2e      	cmp	r3, #46	; 0x2e
 80010f2:	d109      	bne.n	8001108 <bno055_getVector+0x80>
    scale = accelScale;
 80010f4:	4b6c      	ldr	r3, [pc, #432]	; (80012a8 <bno055_getVector+0x220>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff f973 	bl	80003e4 <__aeabi_ui2d>
 80010fe:	4603      	mov	r3, r0
 8001100:	460c      	mov	r4, r1
 8001102:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8001106:	e025      	b.n	8001154 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	2b14      	cmp	r3, #20
 800110c:	d109      	bne.n	8001122 <bno055_getVector+0x9a>
    scale = angularRateScale;
 800110e:	4b67      	ldr	r3, [pc, #412]	; (80012ac <bno055_getVector+0x224>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff f966 	bl	80003e4 <__aeabi_ui2d>
 8001118:	4603      	mov	r3, r0
 800111a:	460c      	mov	r4, r1
 800111c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8001120:	e018      	b.n	8001154 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001122:	78fb      	ldrb	r3, [r7, #3]
 8001124:	2b1a      	cmp	r3, #26
 8001126:	d109      	bne.n	800113c <bno055_getVector+0xb4>
    scale = eulerScale;
 8001128:	4b61      	ldr	r3, [pc, #388]	; (80012b0 <bno055_getVector+0x228>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f959 	bl	80003e4 <__aeabi_ui2d>
 8001132:	4603      	mov	r3, r0
 8001134:	460c      	mov	r4, r1
 8001136:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 800113a:	e00b      	b.n	8001154 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 800113c:	78fb      	ldrb	r3, [r7, #3]
 800113e:	2b20      	cmp	r3, #32
 8001140:	d108      	bne.n	8001154 <bno055_getVector+0xcc>
    scale = quaScale;
 8001142:	4b5c      	ldr	r3, [pc, #368]	; (80012b4 <bno055_getVector+0x22c>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f94c 	bl	80003e4 <__aeabi_ui2d>
 800114c:	4603      	mov	r3, r0
 800114e:	460c      	mov	r4, r1
 8001150:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001154:	f107 0308 	add.w	r3, r7, #8
 8001158:	2220      	movs	r2, #32
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f00c f91e 	bl	800d39e <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	2b20      	cmp	r3, #32
 8001166:	d150      	bne.n	800120a <bno055_getVector+0x182>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001168:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21a      	sxth	r2, r3
 8001170:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001174:	b21b      	sxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b21b      	sxth	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f942 	bl	8000404 <__aeabi_i2d>
 8001180:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001184:	f7ff fad2 	bl	800072c <__aeabi_ddiv>
 8001188:	4603      	mov	r3, r0
 800118a:	460c      	mov	r4, r1
 800118c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001190:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	b21a      	sxth	r2, r3
 8001198:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800119c:	b21b      	sxth	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f92e 	bl	8000404 <__aeabi_i2d>
 80011a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011ac:	f7ff fabe 	bl	800072c <__aeabi_ddiv>
 80011b0:	4603      	mov	r3, r0
 80011b2:	460c      	mov	r4, r1
 80011b4:	e9c7 3404 	strd	r3, r4, [r7, #16]
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80011b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21a      	sxth	r2, r3
 80011c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	4313      	orrs	r3, r2
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f91a 	bl	8000404 <__aeabi_i2d>
 80011d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011d4:	f7ff faaa 	bl	800072c <__aeabi_ddiv>
 80011d8:	4603      	mov	r3, r0
 80011da:	460c      	mov	r4, r1
 80011dc:	e9c7 3406 	strd	r3, r4, [r7, #24]
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80011e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f906 	bl	8000404 <__aeabi_i2d>
 80011f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011fc:	f7ff fa96 	bl	800072c <__aeabi_ddiv>
 8001200:	4603      	mov	r3, r0
 8001202:	460c      	mov	r4, r1
 8001204:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001208:	e03b      	b.n	8001282 <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800120a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b21a      	sxth	r2, r3
 8001212:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001216:	b21b      	sxth	r3, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	b21b      	sxth	r3, r3
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f8f1 	bl	8000404 <__aeabi_i2d>
 8001222:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001226:	f7ff fa81 	bl	800072c <__aeabi_ddiv>
 800122a:	4603      	mov	r3, r0
 800122c:	460c      	mov	r4, r1
 800122e:	e9c7 3404 	strd	r3, r4, [r7, #16]
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001232:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b21a      	sxth	r2, r3
 800123a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800123e:	b21b      	sxth	r3, r3
 8001240:	4313      	orrs	r3, r2
 8001242:	b21b      	sxth	r3, r3
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f8dd 	bl	8000404 <__aeabi_i2d>
 800124a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800124e:	f7ff fa6d 	bl	800072c <__aeabi_ddiv>
 8001252:	4603      	mov	r3, r0
 8001254:	460c      	mov	r4, r1
 8001256:	e9c7 3406 	strd	r3, r4, [r7, #24]
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800125a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001266:	b21b      	sxth	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b21b      	sxth	r3, r3
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f8c9 	bl	8000404 <__aeabi_i2d>
 8001272:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001276:	f7ff fa59 	bl	800072c <__aeabi_ddiv>
 800127a:	4603      	mov	r3, r0
 800127c:	460c      	mov	r4, r1
 800127e:	e9c7 3408 	strd	r3, r4, [r7, #32]
  }

  return xyz;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	461d      	mov	r5, r3
 8001286:	f107 0408 	add.w	r4, r7, #8
 800128a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800128c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800128e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001292:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	3738      	adds	r7, #56	; 0x38
 800129a:	46bd      	mov	sp, r7
 800129c:	bdb0      	pop	{r4, r5, r7, pc}
 800129e:	bf00      	nop
 80012a0:	3ff00000 	.word	0x3ff00000
 80012a4:	20000006 	.word	0x20000006
 80012a8:	20000000 	.word	0x20000000
 80012ac:	20000002 	.word	0x20000002
 80012b0:	20000004 	.word	0x20000004
 80012b4:	20000008 	.word	0x20000008

080012b8 <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2114      	movs	r1, #20
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fedf 	bl	8001088 <bno055_getVector>
}
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <bno055_getVectorLinearAccel>:
bno055_vector_t bno055_getVectorEuler() {
  return bno055_getVector(BNO055_VECTOR_EULER);
}
bno055_vector_t bno055_getVectorLinearAccel() {
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2128      	movs	r1, #40	; 0x28
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fed2 	bl	8001088 <bno055_getVector>
}
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f0:	f006 f9b2 	bl	8007658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f4:	f000 f814 	bl	8001320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f8:	f000 f916 	bl	8001528 <MX_GPIO_Init>
  MX_DMA_Init();
 80012fc:	f000 f8de 	bl	80014bc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001300:	f000 f878 	bl	80013f4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001304:	f000 f8a0 	bl	8001448 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001308:	f000 f846 	bl	8001398 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  xl430_int(&huart3);
 800130c:	4803      	ldr	r0, [pc, #12]	; (800131c <main+0x30>)
 800130e:	f005 fe07 	bl	8006f20 <xl430_int>
  setup();
 8001312:	f003 ff9b 	bl	800524c <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  setup_dummy();
 8001316:	f004 f8b3 	bl	8005480 <setup_dummy>
 800131a:	e7fc      	b.n	8001316 <main+0x2a>
 800131c:	20000e2c 	.word	0x20000e2c

08001320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b090      	sub	sp, #64	; 0x40
 8001324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	f107 0318 	add.w	r3, r7, #24
 800132a:	2228      	movs	r2, #40	; 0x28
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f00c f835 	bl	800d39e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001342:	2302      	movs	r3, #2
 8001344:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001346:	2301      	movs	r3, #1
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134a:	2310      	movs	r3, #16
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800134e:	2300      	movs	r3, #0
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001352:	f107 0318 	add.w	r3, r7, #24
 8001356:	4618      	mov	r0, r3
 8001358:	f009 fa54 	bl	800a804 <HAL_RCC_OscConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001362:	f000 f94b 	bl	80015fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001366:	230f      	movs	r3, #15
 8001368:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f009 fcc0 	bl	800ad04 <HAL_RCC_ClockConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800138a:	f000 f937 	bl	80015fc <Error_Handler>
  }
}
 800138e:	bf00      	nop
 8001390:	3740      	adds	r7, #64	; 0x40
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <MX_I2C1_Init+0x50>)
 800139e:	4a13      	ldr	r2, [pc, #76]	; (80013ec <MX_I2C1_Init+0x54>)
 80013a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013a4:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <MX_I2C1_Init+0x58>)
 80013a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013d6:	f006 fea9 	bl	800812c <HAL_I2C_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013e0:	f000 f90c 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000e6c 	.word	0x20000e6c
 80013ec:	40005400 	.word	0x40005400
 80013f0:	00061a80 	.word	0x00061a80

080013f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <MX_USART1_UART_Init+0x50>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 8001400:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001404:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 800142c:	f00a f880 	bl	800b530 <HAL_UART_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001436:	f000 f8e1 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000f8c 	.word	0x20000f8c
 8001444:	40013800 	.word	0x40013800

08001448 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <MX_USART3_UART_Init+0x6c>)
 800144e:	4a1a      	ldr	r2, [pc, #104]	; (80014b8 <MX_USART3_UART_Init+0x70>)
 8001450:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57200;
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <MX_USART3_UART_Init+0x6c>)
 8001454:	f64d 7270 	movw	r2, #57200	; 0xdf70
 8001458:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_USART3_UART_Init+0x6c>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_USART3_UART_Init+0x6c>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <MX_USART3_UART_Init+0x6c>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <MX_USART3_UART_Init+0x6c>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <MX_USART3_UART_Init+0x6c>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <MX_USART3_UART_Init+0x6c>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_USART3_UART_Init+0x6c>)
 8001480:	f00a f8a3 	bl	800b5ca <HAL_HalfDuplex_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800148a:	f000 f8b7 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_USART3_UART_Init+0x6c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <MX_USART3_UART_Init+0x6c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f042 0210 	orr.w	r2, r2, #16
 800149c:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <MX_USART3_UART_Init+0x6c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <MX_USART3_UART_Init+0x6c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART3_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000e2c 	.word	0x20000e2c
 80014b8:	40004800 	.word	0x40004800

080014bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <MX_DMA_Init+0x68>)
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	4a17      	ldr	r2, [pc, #92]	; (8001524 <MX_DMA_Init+0x68>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6153      	str	r3, [r2, #20]
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <MX_DMA_Init+0x68>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	200c      	movs	r0, #12
 80014e0:	f006 f9c3 	bl	800786a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014e4:	200c      	movs	r0, #12
 80014e6:	f006 f9dc 	bl	80078a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	200d      	movs	r0, #13
 80014f0:	f006 f9bb 	bl	800786a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014f4:	200d      	movs	r0, #13
 80014f6:	f006 f9d4 	bl	80078a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	200e      	movs	r0, #14
 8001500:	f006 f9b3 	bl	800786a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001504:	200e      	movs	r0, #14
 8001506:	f006 f9cc 	bl	80078a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	200f      	movs	r0, #15
 8001510:	f006 f9ab 	bl	800786a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001514:	200f      	movs	r0, #15
 8001516:	f006 f9c4 	bl	80078a2 <HAL_NVIC_EnableIRQ>

}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000

08001528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153c:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <MX_GPIO_Init+0xa8>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a23      	ldr	r2, [pc, #140]	; (80015d0 <MX_GPIO_Init+0xa8>)
 8001542:	f043 0310 	orr.w	r3, r3, #16
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <MX_GPIO_Init+0xa8>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0310 	and.w	r3, r3, #16
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <MX_GPIO_Init+0xa8>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <MX_GPIO_Init+0xa8>)
 800155a:	f043 0320 	orr.w	r3, r3, #32
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <MX_GPIO_Init+0xa8>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0320 	and.w	r3, r3, #32
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <MX_GPIO_Init+0xa8>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <MX_GPIO_Init+0xa8>)
 8001572:	f043 0308 	orr.w	r3, r3, #8
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <MX_GPIO_Init+0xa8>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <MX_GPIO_Init+0xa8>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a11      	ldr	r2, [pc, #68]	; (80015d0 <MX_GPIO_Init+0xa8>)
 800158a:	f043 0304 	orr.w	r3, r3, #4
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_GPIO_Init+0xa8>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a2:	480c      	ldr	r0, [pc, #48]	; (80015d4 <MX_GPIO_Init+0xac>)
 80015a4:	f006 fd90 	bl	80080c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80015a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	4619      	mov	r1, r3
 80015c0:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_GPIO_Init+0xac>)
 80015c2:	f006 fc27 	bl	8007e14 <HAL_GPIO_Init>

}
 80015c6:	bf00      	nop
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40011000 	.word	0x40011000

080015d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015ea:	f006 f84b 	bl	8007684 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40012c00 	.word	0x40012c00

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001602:	e7fe      	b.n	8001602 <Error_Handler+0x6>

08001604 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	0000      	movs	r0, r0
	...

08001628 <_ZNK3ros4Time5toSecEv>:
  Time(uint32_t _sec, uint32_t _nsec) : sec(_sec), nsec(_nsec)
  {
    normalizeSecNSec(sec, nsec);
  }

  double toSec() const
 8001628:	b5b0      	push	{r4, r5, r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  {
    return (double)sec + 1e-9 * (double)nsec;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe fed5 	bl	80003e4 <__aeabi_ui2d>
 800163a:	4604      	mov	r4, r0
 800163c:	460d      	mov	r5, r1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fece 	bl	80003e4 <__aeabi_ui2d>
 8001648:	a309      	add	r3, pc, #36	; (adr r3, 8001670 <_ZNK3ros4Time5toSecEv+0x48>)
 800164a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164e:	f7fe ff43 	bl	80004d8 <__aeabi_dmul>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4620      	mov	r0, r4
 8001658:	4629      	mov	r1, r5
 800165a:	f7fe fd87 	bl	800016c <__adddf3>
 800165e:	4603      	mov	r3, r0
 8001660:	460c      	mov	r4, r1
  };
 8001662:	4618      	mov	r0, r3
 8001664:	4621      	mov	r1, r4
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bdb0      	pop	{r4, r5, r7, pc}
 800166c:	f3af 8000 	nop.w
 8001670:	e826d695 	.word	0xe826d695
 8001674:	3e112e0b 	.word	0x3e112e0b

08001678 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <_ZN3ros3MsgC1Ev+0x1c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	0800ed94 	.word	0x0800ed94

08001698 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
      data()
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff ffe8 	bl	8001678 <_ZN3ros3MsgC1Ev>
 80016a8:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3304      	adds	r3, #4
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ffa6 	bl	8001604 <_ZN3ros4TimeC1Ev>
    {
    }
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	0800ed7c 	.word	0x0800ed7c

080016c8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6859      	ldr	r1, [r3, #4]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	b2ca      	uxtb	r2, r1
 80016e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	0a19      	lsrs	r1, r3, #8
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	3301      	adds	r3, #1
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	4413      	add	r3, r2
 80016f2:	b2ca      	uxtb	r2, r1
 80016f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	0c19      	lsrs	r1, r3, #16
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	3302      	adds	r3, #2
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	4413      	add	r3, r2
 8001704:	b2ca      	uxtb	r2, r1
 8001706:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	0e19      	lsrs	r1, r3, #24
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3303      	adds	r3, #3
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	4413      	add	r3, r2
 8001716:	b2ca      	uxtb	r2, r1
 8001718:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	3304      	adds	r3, #4
 800171e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6899      	ldr	r1, [r3, #8]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	4413      	add	r3, r2
 800172a:	b2ca      	uxtb	r2, r1
 800172c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	0a19      	lsrs	r1, r3, #8
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3301      	adds	r3, #1
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	4413      	add	r3, r2
 800173c:	b2ca      	uxtb	r2, r1
 800173e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	0c19      	lsrs	r1, r3, #16
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3302      	adds	r3, #2
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	4413      	add	r3, r2
 800174e:	b2ca      	uxtb	r2, r1
 8001750:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	0e19      	lsrs	r1, r3, #24
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	3303      	adds	r3, #3
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	4413      	add	r3, r2
 8001760:	b2ca      	uxtb	r2, r1
 8001762:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3304      	adds	r3, #4
 8001768:	60fb      	str	r3, [r7, #12]
      return offset;
 800176a:	68fb      	ldr	r3, [r7, #12]
    }
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001776:	b480      	push	{r7}
 8001778:	b085      	sub	sp, #20
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3301      	adds	r3, #1
 800179a:	6839      	ldr	r1, [r7, #0]
 800179c:	440b      	add	r3, r1
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3302      	adds	r3, #2
 80017b0:	6839      	ldr	r1, [r7, #0]
 80017b2:	440b      	add	r3, r1
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	041b      	lsls	r3, r3, #16
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3303      	adds	r3, #3
 80017c6:	6839      	ldr	r1, [r7, #0]
 80017c8:	440b      	add	r3, r1
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	061b      	lsls	r3, r3, #24
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3304      	adds	r3, #4
 80017d8:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3301      	adds	r3, #1
 80017f0:	6839      	ldr	r1, [r7, #0]
 80017f2:	440b      	add	r3, r1
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3302      	adds	r3, #2
 8001806:	6839      	ldr	r1, [r7, #0]
 8001808:	440b      	add	r3, r1
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	041b      	lsls	r3, r3, #16
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	3303      	adds	r3, #3
 800181c:	6839      	ldr	r1, [r7, #0]
 800181e:	440b      	add	r3, r1
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	061b      	lsls	r3, r3, #24
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3304      	adds	r3, #4
 800182e:	60fb      	str	r3, [r7, #12]
     return offset;
 8001830:	68fb      	ldr	r3, [r7, #12]
    }
 8001832:	4618      	mov	r0, r3
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	4b02      	ldr	r3, [pc, #8]	; (8001850 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	0800e39c 	.word	0x0800e39c

08001854 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	4b02      	ldr	r3, [pc, #8]	; (8001868 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	0800e3ac 	.word	0x0800e3ac

0800186c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fefe 	bl	8001678 <_ZN3ros3MsgC1Ev>
 800187c:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	809a      	strh	r2, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a09      	ldr	r2, [pc, #36]	; (80018b0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a06      	ldr	r2, [pc, #24]	; (80018b0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001898:	611a      	str	r2, [r3, #16]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
    {
    }
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	0800ed64 	.word	0x0800ed64
 80018b0:	0800e3d0 	.word	0x0800e3d0

080018b4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	8899      	ldrh	r1, [r3, #4]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	b2ca      	uxtb	r2, r1
 80018ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	889b      	ldrh	r3, [r3, #4]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	b299      	uxth	r1, r3
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	3301      	adds	r3, #1
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	b2ca      	uxtb	r2, r1
 80018e2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	3302      	adds	r3, #2
 80018e8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fc2e 	bl	8000150 <strlen>
 80018f4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	69b9      	ldr	r1, [r7, #24]
 80018fe:	4618      	mov	r0, r3
 8001900:	f004 f844 	bl	800598c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	3304      	adds	r3, #4
 8001908:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	18d0      	adds	r0, r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4619      	mov	r1, r3
 8001918:	f00b fd36 	bl	800d388 <memcpy>
      offset += length_topic_name;
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	4413      	add	r3, r2
 8001922:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fc11 	bl	8000150 <strlen>
 800192e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	4413      	add	r3, r2
 8001936:	6979      	ldr	r1, [r7, #20]
 8001938:	4618      	mov	r0, r3
 800193a:	f004 f827 	bl	800598c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3304      	adds	r3, #4
 8001942:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	18d0      	adds	r0, r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4619      	mov	r1, r3
 8001952:	f00b fd19 	bl	800d388 <memcpy>
      offset += length_message_type;
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	4413      	add	r3, r2
 800195c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fbf4 	bl	8000150 <strlen>
 8001968:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	4413      	add	r3, r2
 8001970:	6939      	ldr	r1, [r7, #16]
 8001972:	4618      	mov	r0, r3
 8001974:	f004 f80a 	bl	800598c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	3304      	adds	r3, #4
 800197c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	18d0      	adds	r0, r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4619      	mov	r1, r3
 800198c:	f00b fcfc 	bl	800d388 <memcpy>
      offset += length_md5sum;
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4413      	add	r3, r2
 8001996:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800199e:	68f9      	ldr	r1, [r7, #12]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	4413      	add	r3, r2
 80019a6:	b2ca      	uxtb	r2, r1
 80019a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	0a19      	lsrs	r1, r3, #8
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3301      	adds	r3, #1
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	4413      	add	r3, r2
 80019b6:	b2ca      	uxtb	r2, r1
 80019b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	0c19      	lsrs	r1, r3, #16
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3302      	adds	r3, #2
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	4413      	add	r3, r2
 80019c6:	b2ca      	uxtb	r2, r1
 80019c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	0e19      	lsrs	r1, r3, #24
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3303      	adds	r3, #3
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	4413      	add	r3, r2
 80019d6:	b2ca      	uxtb	r2, r1
 80019d8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	61fb      	str	r3, [r7, #28]
      return offset;
 80019e0:	69fb      	ldr	r3, [r7, #28]
    }
 80019e2:	4618      	mov	r0, r3
 80019e4:	3720      	adds	r7, #32
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b08a      	sub	sp, #40	; 0x28
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	4413      	add	r3, r2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	889b      	ldrh	r3, [r3, #4]
 8001a0a:	b21a      	sxth	r2, r3
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	6839      	ldr	r1, [r7, #0]
 8001a12:	440b      	add	r3, r1
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	021b      	lsls	r3, r3, #8
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	3302      	adds	r3, #2
 8001a28:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	441a      	add	r2, r3
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 ffc5 	bl	80059c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	3304      	adds	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d20c      	bcs.n	8001a6c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	441a      	add	r2, r3
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	6839      	ldr	r1, [r7, #0]
 8001a5e:	440b      	add	r3, r1
 8001a60:	7812      	ldrb	r2, [r2, #0]
 8001a62:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	3301      	adds	r3, #1
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6a:	e7ec      	b.n	8001a46 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	4413      	add	r3, r2
 8001a72:	3b01      	subs	r3, #1
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	441a      	add	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	441a      	add	r2, r3
 8001a96:	f107 0310 	add.w	r3, r7, #16
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f003 ff92 	bl	80059c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	623b      	str	r3, [r7, #32]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	6a3a      	ldr	r2, [r7, #32]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d20c      	bcs.n	8001ad2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	441a      	add	r2, r3
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	6839      	ldr	r1, [r7, #0]
 8001ac4:	440b      	add	r3, r1
 8001ac6:	7812      	ldrb	r2, [r2, #0]
 8001ac8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	3301      	adds	r3, #1
 8001ace:	623b      	str	r3, [r7, #32]
 8001ad0:	e7ec      	b.n	8001aac <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	4413      	add	r3, r2
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	441a      	add	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4413      	add	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	441a      	add	r2, r3
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	4611      	mov	r1, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f003 ff5f 	bl	80059c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d20c      	bcs.n	8001b38 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	441a      	add	r2, r3
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	6839      	ldr	r1, [r7, #0]
 8001b2a:	440b      	add	r3, r1
 8001b2c:	7812      	ldrb	r2, [r2, #0]
 8001b2e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	3301      	adds	r3, #1
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	e7ec      	b.n	8001b12 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	441a      	add	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4413      	add	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	6839      	ldr	r1, [r7, #0]
 8001b66:	440a      	add	r2, r1
 8001b68:	7812      	ldrb	r2, [r2, #0]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	3301      	adds	r3, #1
 8001b74:	6839      	ldr	r1, [r7, #0]
 8001b76:	440b      	add	r3, r1
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	021b      	lsls	r3, r3, #8
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	3302      	adds	r3, #2
 8001b86:	6839      	ldr	r1, [r7, #0]
 8001b88:	440b      	add	r3, r1
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	3303      	adds	r3, #3
 8001b98:	6839      	ldr	r1, [r7, #0]
 8001b9a:	440b      	add	r3, r1
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	061b      	lsls	r3, r3, #24
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	3304      	adds	r3, #4
 8001bae:	61bb      	str	r3, [r7, #24]
     return offset;
 8001bb0:	69bb      	ldr	r3, [r7, #24]
    }
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3728      	adds	r7, #40	; 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	4b02      	ldr	r3, [pc, #8]	; (8001bd0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	0800e3d4 	.word	0x0800e3d4

08001bd4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	4b02      	ldr	r3, [pc, #8]	; (8001be8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	0800e3f0 	.word	0x0800e3f0

08001bec <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fd3e 	bl	8001678 <_ZN3ros3MsgC1Ev>
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	711a      	strb	r2, [r3, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001c0c:	609a      	str	r2, [r3, #8]
    {
    }
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	0800ed4c 	.word	0x0800ed4c
 8001c1c:	0800e3d0 	.word	0x0800e3d0

08001c20 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	7912      	ldrb	r2, [r2, #4]
 8001c38:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fa83 	bl	8000150 <strlen>
 8001c4a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	4413      	add	r3, r2
 8001c52:	68b9      	ldr	r1, [r7, #8]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f003 fe99 	bl	800598c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	18d0      	adds	r0, r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f00b fb8b 	bl	800d388 <memcpy>
      offset += length_msg;
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4413      	add	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
      return offset;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
    }
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	781a      	ldrb	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	441a      	add	r2, r3
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f003 fe88 	bl	80059c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d20c      	bcs.n	8001ce6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	441a      	add	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	6839      	ldr	r1, [r7, #0]
 8001cd8:	440b      	add	r3, r1
 8001cda:	7812      	ldrb	r2, [r2, #0]
 8001cdc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	e7ec      	b.n	8001cc0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	3b01      	subs	r3, #1
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	441a      	add	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
     return offset;
 8001d0a:	693b      	ldr	r3, [r7, #16]
    }
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	4b02      	ldr	r3, [pc, #8]	; (8001d28 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	0800e414 	.word	0x0800e414

08001d2c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	4b02      	ldr	r3, [pc, #8]	; (8001d40 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	0800e428 	.word	0x0800e428

08001d44 <_ZN14rosserial_msgs19RequestParamRequestC1Ev>:
  {
    public:
      typedef const char* _name_type;
      _name_type name;

    RequestParamRequest():
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
      name("")
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fc92 	bl	8001678 <_ZN3ros3MsgC1Ev>
 8001d54:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <_ZN14rosserial_msgs19RequestParamRequestC1Ev+0x28>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <_ZN14rosserial_msgs19RequestParamRequestC1Ev+0x2c>)
 8001d5e:	605a      	str	r2, [r3, #4]
    {
    }
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	0800ed34 	.word	0x0800ed34
 8001d70:	0800e3d0 	.word	0x0800e3d0

08001d74 <_ZNK14rosserial_msgs19RequestParamRequest9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
      uint32_t length_name = strlen(this->name);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe f9e2 	bl	8000150 <strlen>
 8001d8c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_name);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 fdf8 	bl	800598c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3304      	adds	r3, #4
 8001da0:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->name, length_name);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	18d0      	adds	r0, r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	4619      	mov	r1, r3
 8001db0:	f00b faea 	bl	800d388 <memcpy>
      offset += length_name;
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	4413      	add	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]
      return offset;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    }
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_ZN14rosserial_msgs19RequestParamRequest11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	613b      	str	r3, [r7, #16]
      uint32_t length_name;
      arrToVar(length_name, (inbuffer + offset));
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	441a      	add	r2, r3
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f003 fdf0 	bl	80059c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	3304      	adds	r3, #4
 8001dea:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_name; ++k){
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4413      	add	r3, r2
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d20c      	bcs.n	8001e16 <_ZN14rosserial_msgs19RequestParamRequest11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	441a      	add	r2, r3
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	6839      	ldr	r1, [r7, #0]
 8001e08:	440b      	add	r3, r1
 8001e0a:	7812      	ldrb	r2, [r2, #0]
 8001e0c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_name; ++k){
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3301      	adds	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	e7ec      	b.n	8001df0 <_ZN14rosserial_msgs19RequestParamRequest11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_name-1]=0;
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	4413      	add	r3, r2
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
      this->name = (char *)(inbuffer + offset-1);
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	441a      	add	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	605a      	str	r2, [r3, #4]
      offset += length_name;
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4413      	add	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
     return offset;
 8001e3a:	693b      	ldr	r3, [r7, #16]
    }
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <_ZN14rosserial_msgs19RequestParamRequest7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	4b02      	ldr	r3, [pc, #8]	; (8001e58 <_ZN14rosserial_msgs19RequestParamRequest7getTypeEv+0x14>)
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	0800ebd4 	.word	0x0800ebd4

08001e5c <_ZN14rosserial_msgs19RequestParamRequest6getMD5Ev>:
    const char * getMD5(){ return "c1f3d28f1b044c871e6eff2e9fc3c667"; };
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	4b02      	ldr	r3, [pc, #8]	; (8001e70 <_ZN14rosserial_msgs19RequestParamRequest6getMD5Ev+0x14>)
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	0800e44c 	.word	0x0800e44c

08001e74 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fbfa 	bl	8001678 <_ZN3ros3MsgC1Ev>
 8001e84:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	619a      	str	r2, [r3, #24]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	61da      	str	r2, [r3, #28]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	0800ed1c 	.word	0x0800ed1c

08001ebc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6859      	ldr	r1, [r3, #4]
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	b2ca      	uxtb	r2, r1
 8001ed6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	0a19      	lsrs	r1, r3, #8
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	b2ca      	uxtb	r2, r1
 8001ee8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	0c19      	lsrs	r1, r3, #16
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b2ca      	uxtb	r2, r1
 8001efa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	0e19      	lsrs	r1, r3, #24
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	3303      	adds	r3, #3
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	4413      	add	r3, r2
 8001f0a:	b2ca      	uxtb	r2, r1
 8001f0c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	3304      	adds	r3, #4
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001f14:	2300      	movs	r3, #0
 8001f16:	623b      	str	r3, [r7, #32]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	6a3a      	ldr	r2, [r7, #32]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d22b      	bcs.n	8001f7a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001f30:	6939      	ldr	r1, [r7, #16]
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	b2ca      	uxtb	r2, r1
 8001f3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	0a19      	lsrs	r1, r3, #8
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	3301      	adds	r3, #1
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	b2ca      	uxtb	r2, r1
 8001f4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	0c19      	lsrs	r1, r3, #16
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	3302      	adds	r3, #2
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	b2ca      	uxtb	r2, r1
 8001f5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	0e19      	lsrs	r1, r3, #24
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	3303      	adds	r3, #3
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	b2ca      	uxtb	r2, r1
 8001f6a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	3304      	adds	r3, #4
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	3301      	adds	r3, #1
 8001f76:	623b      	str	r3, [r7, #32]
 8001f78:	e7ce      	b.n	8001f18 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6919      	ldr	r1, [r3, #16]
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	b2ca      	uxtb	r2, r1
 8001f86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	0a19      	lsrs	r1, r3, #8
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	3301      	adds	r3, #1
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	4413      	add	r3, r2
 8001f96:	b2ca      	uxtb	r2, r1
 8001f98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	0c19      	lsrs	r1, r3, #16
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	b2ca      	uxtb	r2, r1
 8001faa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	0e19      	lsrs	r1, r3, #24
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	3303      	adds	r3, #3
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	b2ca      	uxtb	r2, r1
 8001fbc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d22b      	bcs.n	800202a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001fe0:	68f9      	ldr	r1, [r7, #12]
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	b2ca      	uxtb	r2, r1
 8001fea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	0a19      	lsrs	r1, r3, #8
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b2ca      	uxtb	r2, r1
 8001ffa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	0c19      	lsrs	r1, r3, #16
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	3302      	adds	r3, #2
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	4413      	add	r3, r2
 8002008:	b2ca      	uxtb	r2, r1
 800200a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	0e19      	lsrs	r1, r3, #24
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	3303      	adds	r3, #3
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	4413      	add	r3, r2
 8002018:	b2ca      	uxtb	r2, r1
 800201a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	3304      	adds	r3, #4
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3301      	adds	r3, #1
 8002026:	61fb      	str	r3, [r7, #28]
 8002028:	e7ce      	b.n	8001fc8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69d9      	ldr	r1, [r3, #28]
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	4413      	add	r3, r2
 8002034:	b2ca      	uxtb	r2, r1
 8002036:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	0a19      	lsrs	r1, r3, #8
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	3301      	adds	r3, #1
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	4413      	add	r3, r2
 8002046:	b2ca      	uxtb	r2, r1
 8002048:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	0c19      	lsrs	r1, r3, #16
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	3302      	adds	r3, #2
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	4413      	add	r3, r2
 8002058:	b2ca      	uxtb	r2, r1
 800205a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	0e19      	lsrs	r1, r3, #24
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	3303      	adds	r3, #3
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	4413      	add	r3, r2
 800206a:	b2ca      	uxtb	r2, r1
 800206c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	3304      	adds	r3, #4
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	429a      	cmp	r2, r3
 8002080:	d228      	bcs.n	80020d4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe f85e 	bl	8000150 <strlen>
 8002094:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	4413      	add	r3, r2
 800209c:	6979      	ldr	r1, [r7, #20]
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 fc74 	bl	800598c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	3304      	adds	r3, #4
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	18d0      	adds	r0, r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	4619      	mov	r1, r3
 80020c0:	f00b f962 	bl	800d388 <memcpy>
      offset += length_stringsi;
 80020c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	4413      	add	r3, r2
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	3301      	adds	r3, #1
 80020d0:	61bb      	str	r3, [r7, #24]
 80020d2:	e7d1      	b.n	8002078 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80020d6:	4618      	mov	r0, r3
 80020d8:	3728      	adds	r7, #40	; 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80020de:	b580      	push	{r7, lr}
 80020e0:	b08e      	sub	sp, #56	; 0x38
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80020ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	4413      	add	r3, r2
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80020f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f8:	3301      	adds	r3, #1
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	4413      	add	r3, r2
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	6a3a      	ldr	r2, [r7, #32]
 8002104:	4313      	orrs	r3, r2
 8002106:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210a:	3302      	adds	r3, #2
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	4413      	add	r3, r2
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	041b      	lsls	r3, r3, #16
 8002114:	6a3a      	ldr	r2, [r7, #32]
 8002116:	4313      	orrs	r3, r2
 8002118:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800211a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211c:	3303      	adds	r3, #3
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	4413      	add	r3, r2
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	061b      	lsls	r3, r3, #24
 8002126:	6a3a      	ldr	r2, [r7, #32]
 8002128:	4313      	orrs	r3, r2
 800212a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800212c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212e:	3304      	adds	r3, #4
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	6a3a      	ldr	r2, [r7, #32]
 8002138:	429a      	cmp	r2, r3
 800213a:	d90a      	bls.n	8002152 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f00b f9ae 	bl	800d4a8 <realloc>
 800214c:	4602      	mov	r2, r0
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a3a      	ldr	r2, [r7, #32]
 8002156:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002158:	2300      	movs	r3, #0
 800215a:	633b      	str	r3, [r7, #48]	; 0x30
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002162:	429a      	cmp	r2, r3
 8002164:	d236      	bcs.n	80021d4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800216e:	6839      	ldr	r1, [r7, #0]
 8002170:	440a      	add	r2, r1
 8002172:	7812      	ldrb	r2, [r2, #0]
 8002174:	4313      	orrs	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217c:	3301      	adds	r3, #1
 800217e:	6839      	ldr	r1, [r7, #0]
 8002180:	440b      	add	r3, r1
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	4313      	orrs	r3, r2
 8002188:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218e:	3302      	adds	r3, #2
 8002190:	6839      	ldr	r1, [r7, #0]
 8002192:	440b      	add	r3, r1
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	041b      	lsls	r3, r3, #16
 8002198:	4313      	orrs	r3, r2
 800219a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a0:	3303      	adds	r3, #3
 80021a2:	6839      	ldr	r1, [r7, #0]
 80021a4:	440b      	add	r3, r1
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	061b      	lsls	r3, r3, #24
 80021aa:	4313      	orrs	r3, r2
 80021ac:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80021b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b6:	3304      	adds	r3, #4
 80021b8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	3208      	adds	r2, #8
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80021cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ce:	3301      	adds	r3, #1
 80021d0:	633b      	str	r3, [r7, #48]	; 0x30
 80021d2:	e7c3      	b.n	800215c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80021d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	4413      	add	r3, r2
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80021de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e0:	3301      	adds	r3, #1
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	4413      	add	r3, r2
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	69fa      	ldr	r2, [r7, #28]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80021f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f2:	3302      	adds	r3, #2
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	4413      	add	r3, r2
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	041b      	lsls	r3, r3, #16
 80021fc:	69fa      	ldr	r2, [r7, #28]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002204:	3303      	adds	r3, #3
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	4413      	add	r3, r2
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	4313      	orrs	r3, r2
 8002212:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002216:	3304      	adds	r3, #4
 8002218:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	429a      	cmp	r2, r3
 8002222:	d90a      	bls.n	800223a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699a      	ldr	r2, [r3, #24]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4619      	mov	r1, r3
 800222e:	4610      	mov	r0, r2
 8002230:	f00b f93a 	bl	800d4a8 <realloc>
 8002234:	4602      	mov	r2, r0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002240:	2300      	movs	r3, #0
 8002242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800224a:	429a      	cmp	r2, r3
 800224c:	d236      	bcs.n	80022bc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002256:	6839      	ldr	r1, [r7, #0]
 8002258:	440a      	add	r2, r1
 800225a:	7812      	ldrb	r2, [r2, #0]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002264:	3301      	adds	r3, #1
 8002266:	6839      	ldr	r1, [r7, #0]
 8002268:	440b      	add	r3, r1
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002276:	3302      	adds	r3, #2
 8002278:	6839      	ldr	r1, [r7, #0]
 800227a:	440b      	add	r3, r1
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	041b      	lsls	r3, r3, #16
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002288:	3303      	adds	r3, #3
 800228a:	6839      	ldr	r1, [r7, #0]
 800228c:	440b      	add	r3, r1
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	061b      	lsls	r3, r3, #24
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800229c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229e:	3304      	adds	r3, #4
 80022a0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699a      	ldr	r2, [r3, #24]
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	3214      	adds	r2, #20
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80022b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b6:	3301      	adds	r3, #1
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ba:	e7c3      	b.n	8002244 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80022bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80022c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c8:	3301      	adds	r3, #1
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80022d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022da:	3302      	adds	r3, #2
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	041b      	lsls	r3, r3, #16
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80022ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ec:	3303      	adds	r3, #3
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	4413      	add	r3, r2
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	061b      	lsls	r3, r3, #24
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80022fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fe:	3304      	adds	r3, #4
 8002300:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	429a      	cmp	r2, r3
 800230a:	d90a      	bls.n	8002322 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4619      	mov	r1, r3
 8002316:	4610      	mov	r0, r2
 8002318:	f00b f8c6 	bl	800d4a8 <realloc>
 800231c:	4602      	mov	r2, r0
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002328:	2300      	movs	r3, #0
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002332:	429a      	cmp	r2, r3
 8002334:	d23f      	bcs.n	80023b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	441a      	add	r2, r3
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f003 fb3f 	bl	80059c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800234a:	3304      	adds	r3, #4
 800234c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800234e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
 8002352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235a:	429a      	cmp	r2, r3
 800235c:	d20c      	bcs.n	8002378 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	441a      	add	r2, r3
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	3b01      	subs	r3, #1
 8002368:	6839      	ldr	r1, [r7, #0]
 800236a:	440b      	add	r3, r1
 800236c:	7812      	ldrb	r2, [r2, #0]
 800236e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	3301      	adds	r3, #1
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
 8002376:	e7ec      	b.n	8002352 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4413      	add	r3, r2
 800237e:	3b01      	subs	r3, #1
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	4413      	add	r3, r2
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238a:	3b01      	subs	r3, #1
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	441a      	add	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002394:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4413      	add	r3, r2
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	3220      	adds	r2, #32
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b0:	3301      	adds	r3, #1
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023b4:	e7ba      	b.n	800232c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80023b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80023b8:	4618      	mov	r0, r3
 80023ba:	3738      	adds	r7, #56	; 0x38
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	4b02      	ldr	r3, [pc, #8]	; (80023d4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	0800ebd4 	.word	0x0800ebd4

080023d8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	4b02      	ldr	r3, [pc, #8]	; (80023ec <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	0800e470 	.word	0x0800e470

080023f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	611a      	str	r2, [r3, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68d8      	ldr	r0, [r3, #12]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6891      	ldr	r1, [r2, #8]
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	4798      	blx	r3
 800243a:	4603      	mov	r3, r0
  };
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
  }
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr

0800245a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	425b      	negs	r3, r3
 800246e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <_ZN13STM32HardwareC1Ev+0x34>)
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000f8c 	.word	0x20000f8c

080024b4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f804 	bl	80024ca <_ZN13STM32Hardware10reset_rbufEv>
    }
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
     if( HAL_UART_Receive_DMA(huart, rbuf, rbuflen) != HAL_OK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3304      	adds	r3, #4
 80024da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024de:	4619      	mov	r1, r3
 80024e0:	f009 f9c6 	bl	800b870 <HAL_UART_Receive_DMA>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
    		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    		 HAL_Delay(100);
    		 }*/

     }
    }
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295
 80024fc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ffa8 	bl	800245a <_ZN13STM32Hardware10getRdmaIndEv>
 800250a:	4603      	mov	r3, r0
 800250c:	429c      	cmp	r4, r3
 800250e:	bf14      	ite	ne
 8002510:	2301      	movne	r3, #1
 8002512:	2300      	moveq	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d012      	beq.n	8002540 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002520:	1c59      	adds	r1, r3, #1
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	4413      	add	r3, r2
 800252c:	791b      	ldrb	r3, [r3, #4]
 800252e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002536:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002540:	68fb      	ldr	r3, [r7, #12]
    }
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bd90      	pop	{r4, r7, pc}
	...

0800254c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b20      	cmp	r3, #32
 8002560:	d108      	bne.n	8002574 <_ZN13STM32Hardware5flushEv+0x28>
 8002562:	4b28      	ldr	r3, [pc, #160]	; (8002604 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	f083 0301 	eor.w	r3, r3, #1
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <_ZN13STM32Hardware5flushEv+0x28>
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <_ZN13STM32Hardware5flushEv+0x2a>
 8002574:	2300      	movs	r3, #0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d03f      	beq.n	80025fa <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 800257a:	4b22      	ldr	r3, [pc, #136]	; (8002604 <_ZN13STM32Hardware5flushEv+0xb8>)
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800258c:	429a      	cmp	r2, r3
 800258e:	d031      	beq.n	80025f4 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800259c:	429a      	cmp	r2, r3
 800259e:	d20a      	bcs.n	80025b6 <_ZN13STM32Hardware5flushEv+0x6a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	e006      	b.n	80025c4 <_ZN13STM32Hardware5flushEv+0x78>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80025bc:	b29b      	uxth	r3, r3
 80025be:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80025d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	89fa      	ldrh	r2, [r7, #14]
 80025da:	4619      	mov	r1, r3
 80025dc:	f009 f8dc 	bl	800b798 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80025e6:	89fb      	ldrh	r3, [r7, #14]
 80025e8:	4413      	add	r3, r2
 80025ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <_ZN13STM32Hardware5flushEv+0xb8>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
      }
    }
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000186 	.word	0x20000186

08002608 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
      int n = length;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800261e:	bfa8      	it	ge
 8002620:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002624:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800262c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	4293      	cmp	r3, r2
 8002634:	bf28      	it	cs
 8002636:	4613      	movcs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002640:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4413      	add	r3, r2
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	4618      	mov	r0, r3
 800264e:	f00a fe9b 	bl	800d388 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	4413      	add	r3, r2
 800265c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	429a      	cmp	r2, r3
 800266c:	d00b      	beq.n	8002686 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	18d1      	adds	r1, r2, r3
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	461a      	mov	r2, r3
 8002682:	f00a fe81 	bl	800d388 <memcpy>
      }

      flush();
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f7ff ff60 	bl	800254c <_ZN13STM32Hardware5flushEv>
    }
 800268c:	bf00      	nop
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	f005 f804 	bl	80076a8 <HAL_GetTick>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe ffde 	bl	8001678 <_ZN3ros3MsgC1Ev>
 80026bc:	4a0e      	ldr	r2, [pc, #56]	; (80026f8 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	f04f 0400 	mov.w	r4, #0
 80026cc:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	f04f 0400 	mov.w	r4, #0
 80026da:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	f04f 0400 	mov.w	r4, #0
 80026e8:	e9c2 3406 	strd	r3, r4, [r2, #24]
    {
    }
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd90      	pop	{r4, r7, pc}
 80026f6:	bf00      	nop
 80026f8:	0800ecd8 	.word	0x0800ecd8

080026fc <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80026fc:	b490      	push	{r4, r7}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f103 0408 	add.w	r4, r3, #8
 8002710:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002714:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002718:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800271c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271e:	6839      	ldr	r1, [r7, #0]
 8002720:	440a      	add	r2, r1
 8002722:	b2db      	uxtb	r3, r3
 8002724:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002726:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	f04f 0400 	mov.w	r4, #0
 8002732:	0a0b      	lsrs	r3, r1, #8
 8002734:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002738:	0a14      	lsrs	r4, r2, #8
 800273a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273c:	3201      	adds	r2, #1
 800273e:	6839      	ldr	r1, [r7, #0]
 8002740:	440a      	add	r2, r1
 8002742:	b2db      	uxtb	r3, r3
 8002744:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002746:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	f04f 0400 	mov.w	r4, #0
 8002752:	0c0b      	lsrs	r3, r1, #16
 8002754:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002758:	0c14      	lsrs	r4, r2, #16
 800275a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275c:	3202      	adds	r2, #2
 800275e:	6839      	ldr	r1, [r7, #0]
 8002760:	440a      	add	r2, r1
 8002762:	b2db      	uxtb	r3, r3
 8002764:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002766:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	f04f 0400 	mov.w	r4, #0
 8002772:	0e0b      	lsrs	r3, r1, #24
 8002774:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002778:	0e14      	lsrs	r4, r2, #24
 800277a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277c:	3203      	adds	r2, #3
 800277e:	6839      	ldr	r1, [r7, #0]
 8002780:	440a      	add	r2, r1
 8002782:	b2db      	uxtb	r3, r3
 8002784:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002786:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	f04f 0400 	mov.w	r4, #0
 8002792:	0013      	movs	r3, r2
 8002794:	2400      	movs	r4, #0
 8002796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002798:	3204      	adds	r2, #4
 800279a:	6839      	ldr	r1, [r7, #0]
 800279c:	440a      	add	r2, r1
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80027a2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	f04f 0400 	mov.w	r4, #0
 80027ae:	0a13      	lsrs	r3, r2, #8
 80027b0:	2400      	movs	r4, #0
 80027b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b4:	3205      	adds	r2, #5
 80027b6:	6839      	ldr	r1, [r7, #0]
 80027b8:	440a      	add	r2, r1
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80027be:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	f04f 0400 	mov.w	r4, #0
 80027ca:	0c13      	lsrs	r3, r2, #16
 80027cc:	2400      	movs	r4, #0
 80027ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d0:	3206      	adds	r2, #6
 80027d2:	6839      	ldr	r1, [r7, #0]
 80027d4:	440a      	add	r2, r1
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80027da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	f04f 0400 	mov.w	r4, #0
 80027e6:	0e13      	lsrs	r3, r2, #24
 80027e8:	2400      	movs	r4, #0
 80027ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ec:	3207      	adds	r2, #7
 80027ee:	6839      	ldr	r1, [r7, #0]
 80027f0:	440a      	add	r2, r1
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	3308      	adds	r3, #8
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f103 0410 	add.w	r4, r3, #16
 8002802:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002806:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800280a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800280e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002810:	6839      	ldr	r1, [r7, #0]
 8002812:	440a      	add	r2, r1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002818:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	f04f 0400 	mov.w	r4, #0
 8002824:	0a0b      	lsrs	r3, r1, #8
 8002826:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800282a:	0a14      	lsrs	r4, r2, #8
 800282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282e:	3201      	adds	r2, #1
 8002830:	6839      	ldr	r1, [r7, #0]
 8002832:	440a      	add	r2, r1
 8002834:	b2db      	uxtb	r3, r3
 8002836:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002838:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	f04f 0400 	mov.w	r4, #0
 8002844:	0c0b      	lsrs	r3, r1, #16
 8002846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800284a:	0c14      	lsrs	r4, r2, #16
 800284c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284e:	3202      	adds	r2, #2
 8002850:	6839      	ldr	r1, [r7, #0]
 8002852:	440a      	add	r2, r1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002858:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	f04f 0400 	mov.w	r4, #0
 8002864:	0e0b      	lsrs	r3, r1, #24
 8002866:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800286a:	0e14      	lsrs	r4, r2, #24
 800286c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286e:	3203      	adds	r2, #3
 8002870:	6839      	ldr	r1, [r7, #0]
 8002872:	440a      	add	r2, r1
 8002874:	b2db      	uxtb	r3, r3
 8002876:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002878:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	f04f 0400 	mov.w	r4, #0
 8002884:	0013      	movs	r3, r2
 8002886:	2400      	movs	r4, #0
 8002888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288a:	3204      	adds	r2, #4
 800288c:	6839      	ldr	r1, [r7, #0]
 800288e:	440a      	add	r2, r1
 8002890:	b2db      	uxtb	r3, r3
 8002892:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002894:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	f04f 0400 	mov.w	r4, #0
 80028a0:	0a13      	lsrs	r3, r2, #8
 80028a2:	2400      	movs	r4, #0
 80028a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a6:	3205      	adds	r2, #5
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	440a      	add	r2, r1
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80028b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	f04f 0400 	mov.w	r4, #0
 80028bc:	0c13      	lsrs	r3, r2, #16
 80028be:	2400      	movs	r4, #0
 80028c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c2:	3206      	adds	r2, #6
 80028c4:	6839      	ldr	r1, [r7, #0]
 80028c6:	440a      	add	r2, r1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80028cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	f04f 0400 	mov.w	r4, #0
 80028d8:	0e13      	lsrs	r3, r2, #24
 80028da:	2400      	movs	r4, #0
 80028dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028de:	3207      	adds	r2, #7
 80028e0:	6839      	ldr	r1, [r7, #0]
 80028e2:	440a      	add	r2, r1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	3308      	adds	r3, #8
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f103 0418 	add.w	r4, r3, #24
 80028f4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80028f8:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80028fc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002902:	6839      	ldr	r1, [r7, #0]
 8002904:	440a      	add	r2, r1
 8002906:	b2db      	uxtb	r3, r3
 8002908:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800290a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	f04f 0400 	mov.w	r4, #0
 8002916:	0a0b      	lsrs	r3, r1, #8
 8002918:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800291c:	0a14      	lsrs	r4, r2, #8
 800291e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002920:	3201      	adds	r2, #1
 8002922:	6839      	ldr	r1, [r7, #0]
 8002924:	440a      	add	r2, r1
 8002926:	b2db      	uxtb	r3, r3
 8002928:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800292a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	f04f 0400 	mov.w	r4, #0
 8002936:	0c0b      	lsrs	r3, r1, #16
 8002938:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800293c:	0c14      	lsrs	r4, r2, #16
 800293e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002940:	3202      	adds	r2, #2
 8002942:	6839      	ldr	r1, [r7, #0]
 8002944:	440a      	add	r2, r1
 8002946:	b2db      	uxtb	r3, r3
 8002948:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800294a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	f04f 0400 	mov.w	r4, #0
 8002956:	0e0b      	lsrs	r3, r1, #24
 8002958:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800295c:	0e14      	lsrs	r4, r2, #24
 800295e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002960:	3203      	adds	r2, #3
 8002962:	6839      	ldr	r1, [r7, #0]
 8002964:	440a      	add	r2, r1
 8002966:	b2db      	uxtb	r3, r3
 8002968:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800296a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	f04f 0400 	mov.w	r4, #0
 8002976:	0013      	movs	r3, r2
 8002978:	2400      	movs	r4, #0
 800297a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297c:	3204      	adds	r2, #4
 800297e:	6839      	ldr	r1, [r7, #0]
 8002980:	440a      	add	r2, r1
 8002982:	b2db      	uxtb	r3, r3
 8002984:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002986:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	f04f 0400 	mov.w	r4, #0
 8002992:	0a13      	lsrs	r3, r2, #8
 8002994:	2400      	movs	r4, #0
 8002996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002998:	3205      	adds	r2, #5
 800299a:	6839      	ldr	r1, [r7, #0]
 800299c:	440a      	add	r2, r1
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80029a2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	f04f 0400 	mov.w	r4, #0
 80029ae:	0c13      	lsrs	r3, r2, #16
 80029b0:	2400      	movs	r4, #0
 80029b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b4:	3206      	adds	r2, #6
 80029b6:	6839      	ldr	r1, [r7, #0]
 80029b8:	440a      	add	r2, r1
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80029be:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	f04f 0400 	mov.w	r4, #0
 80029ca:	0e13      	lsrs	r3, r2, #24
 80029cc:	2400      	movs	r4, #0
 80029ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d0:	3207      	adds	r2, #7
 80029d2:	6839      	ldr	r1, [r7, #0]
 80029d4:	440a      	add	r2, r1
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	3308      	adds	r3, #8
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80029e2:	4618      	mov	r0, r3
 80029e4:	3728      	adds	r7, #40	; 0x28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc90      	pop	{r4, r7}
 80029ea:	4770      	bx	lr

080029ec <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80029ec:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80029f0:	b08c      	sub	sp, #48	; 0x30
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	f04f 0400 	mov.w	r4, #0
 8002a04:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a08:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0e:	68b8      	ldr	r0, [r7, #8]
 8002a10:	4403      	add	r3, r0
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	461c      	mov	r4, r3
 8002a16:	b2e4      	uxtb	r4, r4
 8002a18:	f04f 0500 	mov.w	r5, #0
 8002a1c:	4623      	mov	r3, r4
 8002a1e:	462c      	mov	r4, r5
 8002a20:	ea43 0301 	orr.w	r3, r3, r1
 8002a24:	ea44 0402 	orr.w	r4, r4, r2
 8002a28:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a2c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002a30:	461d      	mov	r5, r3
 8002a32:	4626      	mov	r6, r4
 8002a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a36:	3301      	adds	r3, #1
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	b2d9      	uxtb	r1, r3
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	f04f 0400 	mov.w	r4, #0
 8002a4c:	0214      	lsls	r4, r2, #8
 8002a4e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002a52:	020b      	lsls	r3, r1, #8
 8002a54:	4629      	mov	r1, r5
 8002a56:	4632      	mov	r2, r6
 8002a58:	ea41 0103 	orr.w	r1, r1, r3
 8002a5c:	ea42 0204 	orr.w	r2, r2, r4
 8002a60:	460b      	mov	r3, r1
 8002a62:	4614      	mov	r4, r2
 8002a64:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a68:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002a6c:	461d      	mov	r5, r3
 8002a6e:	4626      	mov	r6, r4
 8002a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a72:	3302      	adds	r3, #2
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	4413      	add	r3, r2
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	b2d9      	uxtb	r1, r3
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	f04f 0400 	mov.w	r4, #0
 8002a88:	0414      	lsls	r4, r2, #16
 8002a8a:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8002a8e:	040b      	lsls	r3, r1, #16
 8002a90:	4629      	mov	r1, r5
 8002a92:	4632      	mov	r2, r6
 8002a94:	ea41 0103 	orr.w	r1, r1, r3
 8002a98:	ea42 0204 	orr.w	r2, r2, r4
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4614      	mov	r4, r2
 8002aa0:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002aa4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aaa:	3303      	adds	r3, #3
 8002aac:	68b8      	ldr	r0, [r7, #8]
 8002aae:	4403      	add	r3, r0
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f04f 0400 	mov.w	r4, #0
 8002ab8:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8002abc:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8002ac0:	ea41 030a 	orr.w	r3, r1, sl
 8002ac4:	ea42 040b 	orr.w	r4, r2, fp
 8002ac8:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002acc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	68b8      	ldr	r0, [r7, #8]
 8002ad6:	4403      	add	r3, r0
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	fa5f fa83 	uxtb.w	sl, r3
 8002ade:	f04f 0b00 	mov.w	fp, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	f04f 0400 	mov.w	r4, #0
 8002aea:	4625      	mov	r5, r4
 8002aec:	461c      	mov	r4, r3
 8002aee:	4653      	mov	r3, sl
 8002af0:	461d      	mov	r5, r3
 8002af2:	2300      	movs	r3, #0
 8002af4:	461c      	mov	r4, r3
 8002af6:	4623      	mov	r3, r4
 8002af8:	462c      	mov	r4, r5
 8002afa:	ea43 0301 	orr.w	r3, r3, r1
 8002afe:	ea44 0402 	orr.w	r4, r4, r2
 8002b02:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002b06:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	3305      	adds	r3, #5
 8002b0e:	68b8      	ldr	r0, [r7, #8]
 8002b10:	4403      	add	r3, r0
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	fa5f fa83 	uxtb.w	sl, r3
 8002b18:	f04f 0b00 	mov.w	fp, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	f04f 0400 	mov.w	r4, #0
 8002b24:	4625      	mov	r5, r4
 8002b26:	461c      	mov	r4, r3
 8002b28:	ea4f 230a 	mov.w	r3, sl, lsl #8
 8002b2c:	461d      	mov	r5, r3
 8002b2e:	2300      	movs	r3, #0
 8002b30:	461c      	mov	r4, r3
 8002b32:	4623      	mov	r3, r4
 8002b34:	462c      	mov	r4, r5
 8002b36:	ea43 0301 	orr.w	r3, r3, r1
 8002b3a:	ea44 0402 	orr.w	r4, r4, r2
 8002b3e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002b42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	3306      	adds	r3, #6
 8002b4a:	68b8      	ldr	r0, [r7, #8]
 8002b4c:	4403      	add	r3, r0
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	fa5f fa83 	uxtb.w	sl, r3
 8002b54:	f04f 0b00 	mov.w	fp, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	f04f 0400 	mov.w	r4, #0
 8002b60:	4625      	mov	r5, r4
 8002b62:	461c      	mov	r4, r3
 8002b64:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8002b68:	461d      	mov	r5, r3
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	461c      	mov	r4, r3
 8002b6e:	4623      	mov	r3, r4
 8002b70:	462c      	mov	r4, r5
 8002b72:	ea43 0301 	orr.w	r3, r3, r1
 8002b76:	ea44 0402 	orr.w	r4, r4, r2
 8002b7a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002b7e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b84:	3307      	adds	r3, #7
 8002b86:	68b8      	ldr	r0, [r7, #8]
 8002b88:	4403      	add	r3, r0
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	fa5f fa83 	uxtb.w	sl, r3
 8002b90:	f04f 0b00 	mov.w	fp, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	f04f 0400 	mov.w	r4, #0
 8002b9c:	4625      	mov	r5, r4
 8002b9e:	461c      	mov	r4, r3
 8002ba0:	ea4f 630a 	mov.w	r3, sl, lsl #24
 8002ba4:	461d      	mov	r5, r3
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	461c      	mov	r4, r3
 8002baa:	4623      	mov	r3, r4
 8002bac:	462c      	mov	r4, r5
 8002bae:	ea43 0301 	orr.w	r3, r3, r1
 8002bb2:	ea44 0402 	orr.w	r4, r4, r2
 8002bb6:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->x = u_x.real;
 8002bba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->x);
 8002bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc6:	3308      	adds	r3, #8
 8002bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	f04f 0400 	mov.w	r4, #0
 8002bd2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002bd6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	68b8      	ldr	r0, [r7, #8]
 8002bde:	4403      	add	r3, r0
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	fa5f fa83 	uxtb.w	sl, r3
 8002be6:	f04f 0b00 	mov.w	fp, #0
 8002bea:	ea4a 0301 	orr.w	r3, sl, r1
 8002bee:	ea4b 0402 	orr.w	r4, fp, r2
 8002bf2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bf6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	4413      	add	r3, r2
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b2d9      	uxtb	r1, r3
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	f04f 0400 	mov.w	r4, #0
 8002c12:	4625      	mov	r5, r4
 8002c14:	461c      	mov	r4, r3
 8002c16:	0213      	lsls	r3, r2, #8
 8002c18:	461d      	mov	r5, r3
 8002c1a:	462b      	mov	r3, r5
 8002c1c:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8002c20:	461d      	mov	r5, r3
 8002c22:	020b      	lsls	r3, r1, #8
 8002c24:	461c      	mov	r4, r3
 8002c26:	4623      	mov	r3, r4
 8002c28:	462c      	mov	r4, r5
 8002c2a:	ea43 030a 	orr.w	r3, r3, sl
 8002c2e:	ea44 040b 	orr.w	r4, r4, fp
 8002c32:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c36:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	3302      	adds	r3, #2
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	4413      	add	r3, r2
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	b2d9      	uxtb	r1, r3
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	f04f 0400 	mov.w	r4, #0
 8002c52:	4625      	mov	r5, r4
 8002c54:	461c      	mov	r4, r3
 8002c56:	0413      	lsls	r3, r2, #16
 8002c58:	461d      	mov	r5, r3
 8002c5a:	462b      	mov	r3, r5
 8002c5c:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8002c60:	461d      	mov	r5, r3
 8002c62:	040b      	lsls	r3, r1, #16
 8002c64:	461c      	mov	r4, r3
 8002c66:	4623      	mov	r3, r4
 8002c68:	462c      	mov	r4, r5
 8002c6a:	ea43 030a 	orr.w	r3, r3, sl
 8002c6e:	ea44 040b 	orr.w	r4, r4, fp
 8002c72:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c76:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7c:	3303      	adds	r3, #3
 8002c7e:	68b8      	ldr	r0, [r7, #8]
 8002c80:	4403      	add	r3, r0
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f04f 0400 	mov.w	r4, #0
 8002c8a:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8002c8e:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8002c92:	ea41 0308 	orr.w	r3, r1, r8
 8002c96:	ea42 0409 	orr.w	r4, r2, r9
 8002c9a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002c9e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	68b8      	ldr	r0, [r7, #8]
 8002ca8:	4403      	add	r3, r0
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	fa5f f883 	uxtb.w	r8, r3
 8002cb0:	f04f 0900 	mov.w	r9, #0
 8002cb4:	f04f 0a00 	mov.w	sl, #0
 8002cb8:	f04f 0b00 	mov.w	fp, #0
 8002cbc:	46c3      	mov	fp, r8
 8002cbe:	f04f 0a00 	mov.w	sl, #0
 8002cc2:	ea4a 0301 	orr.w	r3, sl, r1
 8002cc6:	ea4b 0402 	orr.w	r4, fp, r2
 8002cca:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002cce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd4:	3305      	adds	r3, #5
 8002cd6:	68b8      	ldr	r0, [r7, #8]
 8002cd8:	4403      	add	r3, r0
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	fa5f f883 	uxtb.w	r8, r3
 8002ce0:	f04f 0900 	mov.w	r9, #0
 8002ce4:	f04f 0a00 	mov.w	sl, #0
 8002ce8:	f04f 0b00 	mov.w	fp, #0
 8002cec:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 8002cf0:	f04f 0a00 	mov.w	sl, #0
 8002cf4:	ea4a 0301 	orr.w	r3, sl, r1
 8002cf8:	ea4b 0402 	orr.w	r4, fp, r2
 8002cfc:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002d00:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	3306      	adds	r3, #6
 8002d08:	68b8      	ldr	r0, [r7, #8]
 8002d0a:	4403      	add	r3, r0
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	fa5f f883 	uxtb.w	r8, r3
 8002d12:	f04f 0900 	mov.w	r9, #0
 8002d16:	f04f 0a00 	mov.w	sl, #0
 8002d1a:	f04f 0b00 	mov.w	fp, #0
 8002d1e:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 8002d22:	f04f 0a00 	mov.w	sl, #0
 8002d26:	ea4a 0301 	orr.w	r3, sl, r1
 8002d2a:	ea4b 0402 	orr.w	r4, fp, r2
 8002d2e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002d32:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	3307      	adds	r3, #7
 8002d3a:	68b8      	ldr	r0, [r7, #8]
 8002d3c:	4403      	add	r3, r0
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	fa5f f883 	uxtb.w	r8, r3
 8002d44:	f04f 0900 	mov.w	r9, #0
 8002d48:	f04f 0a00 	mov.w	sl, #0
 8002d4c:	f04f 0b00 	mov.w	fp, #0
 8002d50:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 8002d54:	f04f 0a00 	mov.w	sl, #0
 8002d58:	ea4a 0301 	orr.w	r3, sl, r1
 8002d5c:	ea4b 0402 	orr.w	r4, fp, r2
 8002d60:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->y = u_y.real;
 8002d64:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->y);
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	3308      	adds	r3, #8
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	f04f 0400 	mov.w	r4, #0
 8002d7c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d80:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	68b8      	ldr	r0, [r7, #8]
 8002d88:	4403      	add	r3, r0
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	fa5f f883 	uxtb.w	r8, r3
 8002d90:	f04f 0900 	mov.w	r9, #0
 8002d94:	ea48 0301 	orr.w	r3, r8, r1
 8002d98:	ea49 0402 	orr.w	r4, r9, r2
 8002d9c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002da0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da6:	3301      	adds	r3, #1
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	4413      	add	r3, r2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	b2d9      	uxtb	r1, r3
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0a00 	mov.w	sl, #0
 8002db8:	f04f 0b00 	mov.w	fp, #0
 8002dbc:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8002dc0:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 8002dc4:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8002dc8:	ea4a 0308 	orr.w	r3, sl, r8
 8002dcc:	ea4b 0409 	orr.w	r4, fp, r9
 8002dd0:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002dd4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dda:	3302      	adds	r3, #2
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	4413      	add	r3, r2
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	b2d9      	uxtb	r1, r3
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0a00 	mov.w	sl, #0
 8002dec:	f04f 0b00 	mov.w	fp, #0
 8002df0:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8002df4:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8002df8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8002dfc:	ea4a 0308 	orr.w	r3, sl, r8
 8002e00:	ea4b 0409 	orr.w	r4, fp, r9
 8002e04:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e08:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0e:	3303      	adds	r3, #3
 8002e10:	68b8      	ldr	r0, [r7, #8]
 8002e12:	4403      	add	r3, r0
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f04f 0400 	mov.w	r4, #0
 8002e1c:	0a18      	lsrs	r0, r3, #8
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002e28:	ea43 0301 	orr.w	r3, r3, r1
 8002e2c:	ea44 0402 	orr.w	r4, r4, r2
 8002e30:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002e34:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	68b8      	ldr	r0, [r7, #8]
 8002e3e:	4403      	add	r3, r0
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	b2dd      	uxtb	r5, r3
 8002e44:	f04f 0600 	mov.w	r6, #0
 8002e48:	f04f 0800 	mov.w	r8, #0
 8002e4c:	f04f 0900 	mov.w	r9, #0
 8002e50:	46a9      	mov	r9, r5
 8002e52:	f04f 0800 	mov.w	r8, #0
 8002e56:	ea48 0301 	orr.w	r3, r8, r1
 8002e5a:	ea49 0402 	orr.w	r4, r9, r2
 8002e5e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002e62:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e68:	3305      	adds	r3, #5
 8002e6a:	68b8      	ldr	r0, [r7, #8]
 8002e6c:	4403      	add	r3, r0
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	b2dd      	uxtb	r5, r3
 8002e72:	f04f 0600 	mov.w	r6, #0
 8002e76:	f04f 0800 	mov.w	r8, #0
 8002e7a:	f04f 0900 	mov.w	r9, #0
 8002e7e:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8002e82:	f04f 0800 	mov.w	r8, #0
 8002e86:	ea48 0301 	orr.w	r3, r8, r1
 8002e8a:	ea49 0402 	orr.w	r4, r9, r2
 8002e8e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002e92:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	3306      	adds	r3, #6
 8002e9a:	68b8      	ldr	r0, [r7, #8]
 8002e9c:	4403      	add	r3, r0
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	b2dd      	uxtb	r5, r3
 8002ea2:	f04f 0600 	mov.w	r6, #0
 8002ea6:	f04f 0800 	mov.w	r8, #0
 8002eaa:	f04f 0900 	mov.w	r9, #0
 8002eae:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8002eb2:	f04f 0800 	mov.w	r8, #0
 8002eb6:	ea48 0301 	orr.w	r3, r8, r1
 8002eba:	ea49 0402 	orr.w	r4, r9, r2
 8002ebe:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002ec2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec8:	3307      	adds	r3, #7
 8002eca:	68b8      	ldr	r0, [r7, #8]
 8002ecc:	4403      	add	r3, r0
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b2dd      	uxtb	r5, r3
 8002ed2:	f04f 0600 	mov.w	r6, #0
 8002ed6:	f04f 0800 	mov.w	r8, #0
 8002eda:	f04f 0900 	mov.w	r9, #0
 8002ede:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8002ee2:	f04f 0800 	mov.w	r8, #0
 8002ee6:	ea48 0301 	orr.w	r3, r8, r1
 8002eea:	ea49 0402 	orr.w	r4, r9, r2
 8002eee:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->z = u_z.real;
 8002ef2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->z);
 8002efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efe:	3308      	adds	r3, #8
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
     return offset;
 8002f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002f04:	4618      	mov	r0, r3
 8002f06:	3730      	adds	r7, #48	; 0x30
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f0e:	4770      	bx	lr

08002f10 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	4b02      	ldr	r3, [pc, #8]	; (8002f24 <_ZN13geometry_msgs7Vector37getTypeEv+0x14>)
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr
 8002f24:	0800e494 	.word	0x0800e494

08002f28 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	4b02      	ldr	r3, [pc, #8]	; (8002f3c <_ZN13geometry_msgs7Vector36getMD5Ev+0x14>)
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr
 8002f3c:	0800e4ac 	.word	0x0800e4ac

08002f40 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fb94 	bl	8001678 <_ZN3ros3MsgC1Ev>
 8002f50:	4a08      	ldr	r2, [pc, #32]	; (8002f74 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3308      	adds	r3, #8
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fba6 	bl	80026ac <_ZN13geometry_msgs7Vector3C1Ev>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3328      	adds	r3, #40	; 0x28
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fba1 	bl	80026ac <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	0800ecc0 	.word	0x0800ecc0

08002f78 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f103 0008 	add.w	r0, r3, #8
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	4413      	add	r3, r2
 8002f92:	4619      	mov	r1, r3
 8002f94:	f7ff fbb2 	bl	80026fc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	4619      	mov	r1, r3
 8002fae:	f7ff fba5 	bl	80026fc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
      return offset;
 8002fba:	68fb      	ldr	r3, [r7, #12]
    }
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f103 0008 	add.w	r0, r3, #8
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	4413      	add	r3, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f7ff fd04 	bl	80029ec <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4413      	add	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f7ff fcf7 	bl	80029ec <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002ffe:	4602      	mov	r2, r0
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
     return offset;
 8003006:	68fb      	ldr	r3, [r7, #12]
    }
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	4b02      	ldr	r3, [pc, #8]	; (8003024 <_ZN13geometry_msgs5Twist7getTypeEv+0x14>)
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr
 8003024:	0800e4d0 	.word	0x0800e4d0

08003028 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	4b02      	ldr	r3, [pc, #8]	; (800303c <_ZN13geometry_msgs5Twist6getMD5Ev+0x14>)
 8003032:	4618      	mov	r0, r3
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr
 800303c:	0800e4e4 	.word	0x0800e4e4

08003040 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe fb14 	bl	8001678 <_ZN3ros3MsgC1Ev>
 8003050:	4a09      	ldr	r2, [pc, #36]	; (8003078 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3308      	adds	r3, #8
 8003060:	4618      	mov	r0, r3
 8003062:	f7fe facf 	bl	8001604 <_ZN3ros4TimeC1Ev>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a04      	ldr	r2, [pc, #16]	; (800307c <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 800306a:	611a      	str	r2, [r3, #16]
    {
    }
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	0800eca8 	.word	0x0800eca8
 800307c:	0800e3d0 	.word	0x0800e3d0

08003080 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6859      	ldr	r1, [r3, #4]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	4413      	add	r3, r2
 8003098:	b2ca      	uxtb	r2, r1
 800309a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	0a19      	lsrs	r1, r3, #8
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3301      	adds	r3, #1
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	4413      	add	r3, r2
 80030aa:	b2ca      	uxtb	r2, r1
 80030ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	0c19      	lsrs	r1, r3, #16
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	3302      	adds	r3, #2
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	4413      	add	r3, r2
 80030bc:	b2ca      	uxtb	r2, r1
 80030be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	0e19      	lsrs	r1, r3, #24
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3303      	adds	r3, #3
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	4413      	add	r3, r2
 80030ce:	b2ca      	uxtb	r2, r1
 80030d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3304      	adds	r3, #4
 80030d6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6899      	ldr	r1, [r3, #8]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	4413      	add	r3, r2
 80030e2:	b2ca      	uxtb	r2, r1
 80030e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	0a19      	lsrs	r1, r3, #8
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	3301      	adds	r3, #1
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	4413      	add	r3, r2
 80030f4:	b2ca      	uxtb	r2, r1
 80030f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	0c19      	lsrs	r1, r3, #16
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3302      	adds	r3, #2
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	4413      	add	r3, r2
 8003106:	b2ca      	uxtb	r2, r1
 8003108:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	0e19      	lsrs	r1, r3, #24
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	3303      	adds	r3, #3
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	4413      	add	r3, r2
 8003118:	b2ca      	uxtb	r2, r1
 800311a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3304      	adds	r3, #4
 8003120:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68d9      	ldr	r1, [r3, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	4413      	add	r3, r2
 800312c:	b2ca      	uxtb	r2, r1
 800312e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	0a19      	lsrs	r1, r3, #8
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3301      	adds	r3, #1
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	4413      	add	r3, r2
 800313e:	b2ca      	uxtb	r2, r1
 8003140:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	0c19      	lsrs	r1, r3, #16
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3302      	adds	r3, #2
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	4413      	add	r3, r2
 8003150:	b2ca      	uxtb	r2, r1
 8003152:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	0e19      	lsrs	r1, r3, #24
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3303      	adds	r3, #3
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	4413      	add	r3, r2
 8003162:	b2ca      	uxtb	r2, r1
 8003164:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3304      	adds	r3, #4
 800316a:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	4618      	mov	r0, r3
 8003172:	f7fc ffed 	bl	8000150 <strlen>
 8003176:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	4413      	add	r3, r2
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	4618      	mov	r0, r3
 8003182:	f002 fc03 	bl	800598c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3304      	adds	r3, #4
 800318a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	18d0      	adds	r0, r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	4619      	mov	r1, r3
 800319a:	f00a f8f5 	bl	800d388 <memcpy>
      offset += length_frame_id;
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4413      	add	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]
      return offset;
 80031a6:	68fb      	ldr	r3, [r7, #12]
    }
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	4413      	add	r3, r2
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	3301      	adds	r3, #1
 80031d4:	6839      	ldr	r1, [r7, #0]
 80031d6:	440b      	add	r3, r1
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	021b      	lsls	r3, r3, #8
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	3302      	adds	r3, #2
 80031ea:	6839      	ldr	r1, [r7, #0]
 80031ec:	440b      	add	r3, r1
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	041b      	lsls	r3, r3, #16
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	3303      	adds	r3, #3
 8003200:	6839      	ldr	r1, [r7, #0]
 8003202:	440b      	add	r3, r1
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	061b      	lsls	r3, r3, #24
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	3304      	adds	r3, #4
 8003212:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	4413      	add	r3, r2
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	3301      	adds	r3, #1
 800322a:	6839      	ldr	r1, [r7, #0]
 800322c:	440b      	add	r3, r1
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	021b      	lsls	r3, r3, #8
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	3302      	adds	r3, #2
 8003240:	6839      	ldr	r1, [r7, #0]
 8003242:	440b      	add	r3, r1
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	041b      	lsls	r3, r3, #16
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	3303      	adds	r3, #3
 8003256:	6839      	ldr	r1, [r7, #0]
 8003258:	440b      	add	r3, r1
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	061b      	lsls	r3, r3, #24
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	3304      	adds	r3, #4
 8003268:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	4413      	add	r3, r2
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	3301      	adds	r3, #1
 8003280:	6839      	ldr	r1, [r7, #0]
 8003282:	440b      	add	r3, r1
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	3302      	adds	r3, #2
 8003296:	6839      	ldr	r1, [r7, #0]
 8003298:	440b      	add	r3, r1
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	041b      	lsls	r3, r3, #16
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	3303      	adds	r3, #3
 80032ac:	6839      	ldr	r1, [r7, #0]
 80032ae:	440b      	add	r3, r1
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	061b      	lsls	r3, r3, #24
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	3304      	adds	r3, #4
 80032be:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	441a      	add	r2, r3
 80032c6:	f107 030c 	add.w	r3, r7, #12
 80032ca:	4611      	mov	r1, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f002 fb7a 	bl	80059c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	3304      	adds	r3, #4
 80032d6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4413      	add	r3, r2
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d20c      	bcs.n	8003302 <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	441a      	add	r2, r3
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	6839      	ldr	r1, [r7, #0]
 80032f4:	440b      	add	r3, r1
 80032f6:	7812      	ldrb	r2, [r2, #0]
 80032f8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	3301      	adds	r3, #1
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	e7ec      	b.n	80032dc <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4413      	add	r3, r2
 8003308:	3b01      	subs	r3, #1
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	4413      	add	r3, r2
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	3b01      	subs	r3, #1
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	441a      	add	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
     return offset;
 8003326:	693b      	ldr	r3, [r7, #16]
    }
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	4b02      	ldr	r3, [pc, #8]	; (8003344 <_ZN8std_msgs6Header7getTypeEv+0x14>)
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	0800e508 	.word	0x0800e508

08003348 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	4b02      	ldr	r3, [pc, #8]	; (800335c <_ZN8std_msgs6Header6getMD5Ev+0x14>)
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr
 800335c:	0800e518 	.word	0x0800e518

08003360 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe f984 	bl	8001678 <_ZN3ros3MsgC1Ev>
 8003370:	4a11      	ldr	r2, [pc, #68]	; (80033b8 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	f04f 0400 	mov.w	r4, #0
 8003380:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	f04f 0400 	mov.w	r4, #0
 800338e:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	f04f 0400 	mov.w	r4, #0
 800339c:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	f04f 0400 	mov.w	r4, #0
 80033aa:	e9c2 3408 	strd	r3, r4, [r2, #32]
    {
    }
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd90      	pop	{r4, r7, pc}
 80033b8:	0800ec90 	.word	0x0800ec90

080033bc <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80033bc:	b490      	push	{r4, r7}
 80033be:	b08c      	sub	sp, #48	; 0x30
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f103 0408 	add.w	r4, r3, #8
 80033d0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80033d4:	e9c7 3408 	strd	r3, r4, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80033d8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80033dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033de:	6839      	ldr	r1, [r7, #0]
 80033e0:	440a      	add	r2, r1
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80033e6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	f04f 0400 	mov.w	r4, #0
 80033f2:	0a0b      	lsrs	r3, r1, #8
 80033f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80033f8:	0a14      	lsrs	r4, r2, #8
 80033fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033fc:	3201      	adds	r2, #1
 80033fe:	6839      	ldr	r1, [r7, #0]
 8003400:	440a      	add	r2, r1
 8003402:	b2db      	uxtb	r3, r3
 8003404:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003406:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	f04f 0400 	mov.w	r4, #0
 8003412:	0c0b      	lsrs	r3, r1, #16
 8003414:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003418:	0c14      	lsrs	r4, r2, #16
 800341a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800341c:	3202      	adds	r2, #2
 800341e:	6839      	ldr	r1, [r7, #0]
 8003420:	440a      	add	r2, r1
 8003422:	b2db      	uxtb	r3, r3
 8003424:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003426:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	f04f 0400 	mov.w	r4, #0
 8003432:	0e0b      	lsrs	r3, r1, #24
 8003434:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003438:	0e14      	lsrs	r4, r2, #24
 800343a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800343c:	3203      	adds	r2, #3
 800343e:	6839      	ldr	r1, [r7, #0]
 8003440:	440a      	add	r2, r1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003446:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	f04f 0400 	mov.w	r4, #0
 8003452:	0013      	movs	r3, r2
 8003454:	2400      	movs	r4, #0
 8003456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003458:	3204      	adds	r2, #4
 800345a:	6839      	ldr	r1, [r7, #0]
 800345c:	440a      	add	r2, r1
 800345e:	b2db      	uxtb	r3, r3
 8003460:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003462:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	f04f 0400 	mov.w	r4, #0
 800346e:	0a13      	lsrs	r3, r2, #8
 8003470:	2400      	movs	r4, #0
 8003472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003474:	3205      	adds	r2, #5
 8003476:	6839      	ldr	r1, [r7, #0]
 8003478:	440a      	add	r2, r1
 800347a:	b2db      	uxtb	r3, r3
 800347c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800347e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	f04f 0400 	mov.w	r4, #0
 800348a:	0c13      	lsrs	r3, r2, #16
 800348c:	2400      	movs	r4, #0
 800348e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003490:	3206      	adds	r2, #6
 8003492:	6839      	ldr	r1, [r7, #0]
 8003494:	440a      	add	r2, r1
 8003496:	b2db      	uxtb	r3, r3
 8003498:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800349a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	f04f 0400 	mov.w	r4, #0
 80034a6:	0e13      	lsrs	r3, r2, #24
 80034a8:	2400      	movs	r4, #0
 80034aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ac:	3207      	adds	r2, #7
 80034ae:	6839      	ldr	r1, [r7, #0]
 80034b0:	440a      	add	r2, r1
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 80034b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b8:	3308      	adds	r3, #8
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f103 0410 	add.w	r4, r3, #16
 80034c2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80034c6:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80034ca:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80034ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034d0:	6839      	ldr	r1, [r7, #0]
 80034d2:	440a      	add	r2, r1
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80034d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	f04f 0400 	mov.w	r4, #0
 80034e4:	0a0b      	lsrs	r3, r1, #8
 80034e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80034ea:	0a14      	lsrs	r4, r2, #8
 80034ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ee:	3201      	adds	r2, #1
 80034f0:	6839      	ldr	r1, [r7, #0]
 80034f2:	440a      	add	r2, r1
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80034f8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	f04f 0400 	mov.w	r4, #0
 8003504:	0c0b      	lsrs	r3, r1, #16
 8003506:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800350a:	0c14      	lsrs	r4, r2, #16
 800350c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800350e:	3202      	adds	r2, #2
 8003510:	6839      	ldr	r1, [r7, #0]
 8003512:	440a      	add	r2, r1
 8003514:	b2db      	uxtb	r3, r3
 8003516:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003518:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	f04f 0400 	mov.w	r4, #0
 8003524:	0e0b      	lsrs	r3, r1, #24
 8003526:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800352a:	0e14      	lsrs	r4, r2, #24
 800352c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800352e:	3203      	adds	r2, #3
 8003530:	6839      	ldr	r1, [r7, #0]
 8003532:	440a      	add	r2, r1
 8003534:	b2db      	uxtb	r3, r3
 8003536:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003538:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	f04f 0400 	mov.w	r4, #0
 8003544:	0013      	movs	r3, r2
 8003546:	2400      	movs	r4, #0
 8003548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800354a:	3204      	adds	r2, #4
 800354c:	6839      	ldr	r1, [r7, #0]
 800354e:	440a      	add	r2, r1
 8003550:	b2db      	uxtb	r3, r3
 8003552:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003554:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	f04f 0400 	mov.w	r4, #0
 8003560:	0a13      	lsrs	r3, r2, #8
 8003562:	2400      	movs	r4, #0
 8003564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003566:	3205      	adds	r2, #5
 8003568:	6839      	ldr	r1, [r7, #0]
 800356a:	440a      	add	r2, r1
 800356c:	b2db      	uxtb	r3, r3
 800356e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003570:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	f04f 0400 	mov.w	r4, #0
 800357c:	0c13      	lsrs	r3, r2, #16
 800357e:	2400      	movs	r4, #0
 8003580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003582:	3206      	adds	r2, #6
 8003584:	6839      	ldr	r1, [r7, #0]
 8003586:	440a      	add	r2, r1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800358c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	f04f 0400 	mov.w	r4, #0
 8003598:	0e13      	lsrs	r3, r2, #24
 800359a:	2400      	movs	r4, #0
 800359c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359e:	3207      	adds	r2, #7
 80035a0:	6839      	ldr	r1, [r7, #0]
 80035a2:	440a      	add	r2, r1
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035aa:	3308      	adds	r3, #8
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f103 0418 	add.w	r4, r3, #24
 80035b4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80035b8:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80035bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80035c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035c2:	6839      	ldr	r1, [r7, #0]
 80035c4:	440a      	add	r2, r1
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80035ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	f04f 0400 	mov.w	r4, #0
 80035d6:	0a0b      	lsrs	r3, r1, #8
 80035d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80035dc:	0a14      	lsrs	r4, r2, #8
 80035de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035e0:	3201      	adds	r2, #1
 80035e2:	6839      	ldr	r1, [r7, #0]
 80035e4:	440a      	add	r2, r1
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80035ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	f04f 0400 	mov.w	r4, #0
 80035f6:	0c0b      	lsrs	r3, r1, #16
 80035f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80035fc:	0c14      	lsrs	r4, r2, #16
 80035fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003600:	3202      	adds	r2, #2
 8003602:	6839      	ldr	r1, [r7, #0]
 8003604:	440a      	add	r2, r1
 8003606:	b2db      	uxtb	r3, r3
 8003608:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800360a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	f04f 0400 	mov.w	r4, #0
 8003616:	0e0b      	lsrs	r3, r1, #24
 8003618:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800361c:	0e14      	lsrs	r4, r2, #24
 800361e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003620:	3203      	adds	r2, #3
 8003622:	6839      	ldr	r1, [r7, #0]
 8003624:	440a      	add	r2, r1
 8003626:	b2db      	uxtb	r3, r3
 8003628:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800362a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	f04f 0400 	mov.w	r4, #0
 8003636:	0013      	movs	r3, r2
 8003638:	2400      	movs	r4, #0
 800363a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800363c:	3204      	adds	r2, #4
 800363e:	6839      	ldr	r1, [r7, #0]
 8003640:	440a      	add	r2, r1
 8003642:	b2db      	uxtb	r3, r3
 8003644:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003646:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	f04f 0400 	mov.w	r4, #0
 8003652:	0a13      	lsrs	r3, r2, #8
 8003654:	2400      	movs	r4, #0
 8003656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003658:	3205      	adds	r2, #5
 800365a:	6839      	ldr	r1, [r7, #0]
 800365c:	440a      	add	r2, r1
 800365e:	b2db      	uxtb	r3, r3
 8003660:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003662:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	f04f 0400 	mov.w	r4, #0
 800366e:	0c13      	lsrs	r3, r2, #16
 8003670:	2400      	movs	r4, #0
 8003672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003674:	3206      	adds	r2, #6
 8003676:	6839      	ldr	r1, [r7, #0]
 8003678:	440a      	add	r2, r1
 800367a:	b2db      	uxtb	r3, r3
 800367c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800367e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	f04f 0400 	mov.w	r4, #0
 800368a:	0e13      	lsrs	r3, r2, #24
 800368c:	2400      	movs	r4, #0
 800368e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003690:	3207      	adds	r2, #7
 8003692:	6839      	ldr	r1, [r7, #0]
 8003694:	440a      	add	r2, r1
 8003696:	b2db      	uxtb	r3, r3
 8003698:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 800369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369c:	3308      	adds	r3, #8
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f103 0420 	add.w	r4, r3, #32
 80036a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80036aa:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 80036ae:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80036b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036b4:	6839      	ldr	r1, [r7, #0]
 80036b6:	440a      	add	r2, r1
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 80036bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	f04f 0400 	mov.w	r4, #0
 80036c8:	0a0b      	lsrs	r3, r1, #8
 80036ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80036ce:	0a14      	lsrs	r4, r2, #8
 80036d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036d2:	3201      	adds	r2, #1
 80036d4:	6839      	ldr	r1, [r7, #0]
 80036d6:	440a      	add	r2, r1
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 80036dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	f04f 0400 	mov.w	r4, #0
 80036e8:	0c0b      	lsrs	r3, r1, #16
 80036ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80036ee:	0c14      	lsrs	r4, r2, #16
 80036f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036f2:	3202      	adds	r2, #2
 80036f4:	6839      	ldr	r1, [r7, #0]
 80036f6:	440a      	add	r2, r1
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 80036fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	f04f 0400 	mov.w	r4, #0
 8003708:	0e0b      	lsrs	r3, r1, #24
 800370a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800370e:	0e14      	lsrs	r4, r2, #24
 8003710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003712:	3203      	adds	r2, #3
 8003714:	6839      	ldr	r1, [r7, #0]
 8003716:	440a      	add	r2, r1
 8003718:	b2db      	uxtb	r3, r3
 800371a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 800371c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	f04f 0400 	mov.w	r4, #0
 8003728:	0013      	movs	r3, r2
 800372a:	2400      	movs	r4, #0
 800372c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800372e:	3204      	adds	r2, #4
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	440a      	add	r2, r1
 8003734:	b2db      	uxtb	r3, r3
 8003736:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8003738:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	f04f 0400 	mov.w	r4, #0
 8003744:	0a13      	lsrs	r3, r2, #8
 8003746:	2400      	movs	r4, #0
 8003748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800374a:	3205      	adds	r2, #5
 800374c:	6839      	ldr	r1, [r7, #0]
 800374e:	440a      	add	r2, r1
 8003750:	b2db      	uxtb	r3, r3
 8003752:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8003754:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	f04f 0400 	mov.w	r4, #0
 8003760:	0c13      	lsrs	r3, r2, #16
 8003762:	2400      	movs	r4, #0
 8003764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003766:	3206      	adds	r2, #6
 8003768:	6839      	ldr	r1, [r7, #0]
 800376a:	440a      	add	r2, r1
 800376c:	b2db      	uxtb	r3, r3
 800376e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8003770:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	f04f 0400 	mov.w	r4, #0
 800377c:	0e13      	lsrs	r3, r2, #24
 800377e:	2400      	movs	r4, #0
 8003780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003782:	3207      	adds	r2, #7
 8003784:	6839      	ldr	r1, [r7, #0]
 8003786:	440a      	add	r2, r1
 8003788:	b2db      	uxtb	r3, r3
 800378a:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->w);
 800378c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378e:	3308      	adds	r3, #8
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 8003792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8003794:	4618      	mov	r0, r3
 8003796:	3730      	adds	r7, #48	; 0x30
 8003798:	46bd      	mov	sp, r7
 800379a:	bc90      	pop	{r4, r7}
 800379c:	4770      	bx	lr

0800379e <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800379e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037a2:	b092      	sub	sp, #72	; 0x48
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	61f8      	str	r0, [r7, #28]
 80037a8:	61b9      	str	r1, [r7, #24]
    {
      int offset = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	f04f 0400 	mov.w	r4, #0
 80037b6:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80037ba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80037be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037c0:	69b8      	ldr	r0, [r7, #24]
 80037c2:	4403      	add	r3, r0
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	b2dd      	uxtb	r5, r3
 80037c8:	f04f 0600 	mov.w	r6, #0
 80037cc:	ea45 0301 	orr.w	r3, r5, r1
 80037d0:	ea46 0402 	orr.w	r4, r6, r2
 80037d4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80037d8:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
 80037dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037de:	3301      	adds	r3, #1
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4413      	add	r3, r2
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	b2d9      	uxtb	r1, r3
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	f04f 0400 	mov.w	r4, #0
 80037f4:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80037f8:	0213      	lsls	r3, r2, #8
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	020b      	lsls	r3, r1, #8
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800380c:	ea43 0305 	orr.w	r3, r3, r5
 8003810:	ea44 0406 	orr.w	r4, r4, r6
 8003814:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003818:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
 800381c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800381e:	3302      	adds	r3, #2
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4413      	add	r3, r2
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	b2d9      	uxtb	r1, r3
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	f04f 0400 	mov.w	r4, #0
 8003834:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8003838:	0413      	lsls	r3, r2, #16
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	040b      	lsls	r3, r1, #16
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800384c:	ea43 0305 	orr.w	r3, r3, r5
 8003850:	ea44 0406 	orr.w	r4, r4, r6
 8003854:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003858:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800385c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800385e:	3303      	adds	r3, #3
 8003860:	69b8      	ldr	r0, [r7, #24]
 8003862:	4403      	add	r3, r0
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	f04f 0400 	mov.w	r4, #0
 800386c:	0a18      	lsrs	r0, r3, #8
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	061b      	lsls	r3, r3, #24
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003878:	ea43 0301 	orr.w	r3, r3, r1
 800387c:	ea44 0402 	orr.w	r4, r4, r2
 8003880:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003884:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800388a:	3304      	adds	r3, #4
 800388c:	69b8      	ldr	r0, [r7, #24]
 800388e:	4403      	add	r3, r0
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	b2dd      	uxtb	r5, r3
 8003894:	f04f 0600 	mov.w	r6, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	f04f 0400 	mov.w	r4, #0
 80038a0:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80038a4:	002b      	movs	r3, r5
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	2300      	movs	r3, #0
 80038aa:	613b      	str	r3, [r7, #16]
 80038ac:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80038b0:	ea43 0301 	orr.w	r3, r3, r1
 80038b4:	ea44 0402 	orr.w	r4, r4, r2
 80038b8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80038bc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80038c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c2:	3305      	adds	r3, #5
 80038c4:	69b8      	ldr	r0, [r7, #24]
 80038c6:	4403      	add	r3, r0
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	b2dd      	uxtb	r5, r3
 80038cc:	f04f 0600 	mov.w	r6, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	f04f 0400 	mov.w	r4, #0
 80038d8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80038dc:	022b      	lsls	r3, r5, #8
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	2300      	movs	r3, #0
 80038e2:	613b      	str	r3, [r7, #16]
 80038e4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80038e8:	ea43 0301 	orr.w	r3, r3, r1
 80038ec:	ea44 0402 	orr.w	r4, r4, r2
 80038f0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80038f4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80038f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038fa:	3306      	adds	r3, #6
 80038fc:	69b8      	ldr	r0, [r7, #24]
 80038fe:	4403      	add	r3, r0
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	b2dd      	uxtb	r5, r3
 8003904:	f04f 0600 	mov.w	r6, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	f04f 0400 	mov.w	r4, #0
 8003910:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8003914:	042b      	lsls	r3, r5, #16
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	2300      	movs	r3, #0
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003920:	ea43 0301 	orr.w	r3, r3, r1
 8003924:	ea44 0402 	orr.w	r4, r4, r2
 8003928:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800392c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003932:	3307      	adds	r3, #7
 8003934:	69b8      	ldr	r0, [r7, #24]
 8003936:	4403      	add	r3, r0
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	b2dd      	uxtb	r5, r3
 800393c:	f04f 0600 	mov.w	r6, #0
 8003940:	f04f 0300 	mov.w	r3, #0
 8003944:	f04f 0400 	mov.w	r4, #0
 8003948:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800394c:	062b      	lsls	r3, r5, #24
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003958:	ea43 0301 	orr.w	r3, r3, r1
 800395c:	ea44 0402 	orr.w	r4, r4, r2
 8003960:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      this->x = u_x.real;
 8003964:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->x);
 800396e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003970:	3308      	adds	r3, #8
 8003972:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	f04f 0400 	mov.w	r4, #0
 800397c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003980:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003986:	69b8      	ldr	r0, [r7, #24]
 8003988:	4403      	add	r3, r0
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	b2dd      	uxtb	r5, r3
 800398e:	f04f 0600 	mov.w	r6, #0
 8003992:	ea45 0301 	orr.w	r3, r5, r1
 8003996:	ea46 0402 	orr.w	r4, r6, r2
 800399a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800399e:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 80039a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a4:	3301      	adds	r3, #1
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4413      	add	r3, r2
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	b2d9      	uxtb	r1, r3
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	f04f 0400 	mov.w	r4, #0
 80039ba:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80039be:	0213      	lsls	r3, r2, #8
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	020b      	lsls	r3, r1, #8
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80039d2:	ea43 0305 	orr.w	r3, r3, r5
 80039d6:	ea44 0406 	orr.w	r4, r4, r6
 80039da:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80039de:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 80039e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e4:	3302      	adds	r3, #2
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4413      	add	r3, r2
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	b2d9      	uxtb	r1, r3
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	f04f 0400 	mov.w	r4, #0
 80039fa:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80039fe:	0413      	lsls	r3, r2, #16
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	040b      	lsls	r3, r1, #16
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003a12:	ea43 0305 	orr.w	r3, r3, r5
 8003a16:	ea44 0406 	orr.w	r4, r4, r6
 8003a1a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a1e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a24:	3303      	adds	r3, #3
 8003a26:	69b8      	ldr	r0, [r7, #24]
 8003a28:	4403      	add	r3, r0
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f04f 0400 	mov.w	r4, #0
 8003a32:	0a18      	lsrs	r0, r3, #8
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	061b      	lsls	r3, r3, #24
 8003a38:	603b      	str	r3, [r7, #0]
 8003a3a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003a3e:	ea43 0301 	orr.w	r3, r3, r1
 8003a42:	ea44 0402 	orr.w	r4, r4, r2
 8003a46:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003a4a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a50:	3304      	adds	r3, #4
 8003a52:	69b8      	ldr	r0, [r7, #24]
 8003a54:	4403      	add	r3, r0
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	b2dd      	uxtb	r5, r3
 8003a5a:	f04f 0600 	mov.w	r6, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	f04f 0400 	mov.w	r4, #0
 8003a66:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8003a6a:	002b      	movs	r3, r5
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	613b      	str	r3, [r7, #16]
 8003a72:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003a76:	ea43 0301 	orr.w	r3, r3, r1
 8003a7a:	ea44 0402 	orr.w	r4, r4, r2
 8003a7e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003a82:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a88:	3305      	adds	r3, #5
 8003a8a:	69b8      	ldr	r0, [r7, #24]
 8003a8c:	4403      	add	r3, r0
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	b2dd      	uxtb	r5, r3
 8003a92:	f04f 0600 	mov.w	r6, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	f04f 0400 	mov.w	r4, #0
 8003a9e:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8003aa2:	022b      	lsls	r3, r5, #8
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003aae:	ea43 0301 	orr.w	r3, r3, r1
 8003ab2:	ea44 0402 	orr.w	r4, r4, r2
 8003ab6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003aba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac0:	3306      	adds	r3, #6
 8003ac2:	69b8      	ldr	r0, [r7, #24]
 8003ac4:	4403      	add	r3, r0
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	b2dd      	uxtb	r5, r3
 8003aca:	f04f 0600 	mov.w	r6, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	f04f 0400 	mov.w	r4, #0
 8003ad6:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8003ada:	042b      	lsls	r3, r5, #16
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003ae6:	ea43 0301 	orr.w	r3, r3, r1
 8003aea:	ea44 0402 	orr.w	r4, r4, r2
 8003aee:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003af2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af8:	3307      	adds	r3, #7
 8003afa:	69b8      	ldr	r0, [r7, #24]
 8003afc:	4403      	add	r3, r0
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	b2dd      	uxtb	r5, r3
 8003b02:	f04f 0600 	mov.w	r6, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	f04f 0400 	mov.w	r4, #0
 8003b0e:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8003b12:	062b      	lsls	r3, r5, #24
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	2300      	movs	r3, #0
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003b1e:	ea43 0301 	orr.w	r3, r3, r1
 8003b22:	ea44 0402 	orr.w	r4, r4, r2
 8003b26:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      this->y = u_y.real;
 8003b2a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->y);
 8003b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b36:	3308      	adds	r3, #8
 8003b38:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	f04f 0400 	mov.w	r4, #0
 8003b42:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003b46:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b4c:	69b8      	ldr	r0, [r7, #24]
 8003b4e:	4403      	add	r3, r0
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	b2dd      	uxtb	r5, r3
 8003b54:	f04f 0600 	mov.w	r6, #0
 8003b58:	ea45 0301 	orr.w	r3, r5, r1
 8003b5c:	ea46 0402 	orr.w	r4, r6, r2
 8003b60:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003b64:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8003b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4413      	add	r3, r2
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	b2d9      	uxtb	r1, r3
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	f04f 0400 	mov.w	r4, #0
 8003b80:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8003b84:	0213      	lsls	r3, r2, #8
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	020b      	lsls	r3, r1, #8
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003b98:	ea43 0305 	orr.w	r3, r3, r5
 8003b9c:	ea44 0406 	orr.w	r4, r4, r6
 8003ba0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ba4:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8003ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003baa:	3302      	adds	r3, #2
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4413      	add	r3, r2
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	b2d9      	uxtb	r1, r3
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	f04f 0400 	mov.w	r4, #0
 8003bc0:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8003bc4:	0413      	lsls	r3, r2, #16
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	040b      	lsls	r3, r1, #16
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003bd8:	ea43 0305 	orr.w	r3, r3, r5
 8003bdc:	ea44 0406 	orr.w	r4, r4, r6
 8003be0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003be4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bea:	3303      	adds	r3, #3
 8003bec:	69b8      	ldr	r0, [r7, #24]
 8003bee:	4403      	add	r3, r0
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	f04f 0400 	mov.w	r4, #0
 8003bf8:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8003bfc:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8003c00:	ea41 030a 	orr.w	r3, r1, sl
 8003c04:	ea42 040b 	orr.w	r4, r2, fp
 8003c08:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003c0c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c12:	3304      	adds	r3, #4
 8003c14:	69b8      	ldr	r0, [r7, #24]
 8003c16:	4403      	add	r3, r0
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	b2dd      	uxtb	r5, r3
 8003c1c:	f04f 0600 	mov.w	r6, #0
 8003c20:	f04f 0a00 	mov.w	sl, #0
 8003c24:	f04f 0b00 	mov.w	fp, #0
 8003c28:	46ab      	mov	fp, r5
 8003c2a:	f04f 0a00 	mov.w	sl, #0
 8003c2e:	ea4a 0301 	orr.w	r3, sl, r1
 8003c32:	ea4b 0402 	orr.w	r4, fp, r2
 8003c36:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003c3a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c40:	3305      	adds	r3, #5
 8003c42:	69b8      	ldr	r0, [r7, #24]
 8003c44:	4403      	add	r3, r0
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	b2dd      	uxtb	r5, r3
 8003c4a:	f04f 0600 	mov.w	r6, #0
 8003c4e:	f04f 0a00 	mov.w	sl, #0
 8003c52:	f04f 0b00 	mov.w	fp, #0
 8003c56:	ea4f 2b05 	mov.w	fp, r5, lsl #8
 8003c5a:	f04f 0a00 	mov.w	sl, #0
 8003c5e:	ea4a 0301 	orr.w	r3, sl, r1
 8003c62:	ea4b 0402 	orr.w	r4, fp, r2
 8003c66:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003c6a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c70:	3306      	adds	r3, #6
 8003c72:	69b8      	ldr	r0, [r7, #24]
 8003c74:	4403      	add	r3, r0
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	b2dd      	uxtb	r5, r3
 8003c7a:	f04f 0600 	mov.w	r6, #0
 8003c7e:	f04f 0a00 	mov.w	sl, #0
 8003c82:	f04f 0b00 	mov.w	fp, #0
 8003c86:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8003c8a:	f04f 0a00 	mov.w	sl, #0
 8003c8e:	ea4a 0301 	orr.w	r3, sl, r1
 8003c92:	ea4b 0402 	orr.w	r4, fp, r2
 8003c96:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c9a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca0:	3307      	adds	r3, #7
 8003ca2:	69b8      	ldr	r0, [r7, #24]
 8003ca4:	4403      	add	r3, r0
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	b2dd      	uxtb	r5, r3
 8003caa:	f04f 0600 	mov.w	r6, #0
 8003cae:	f04f 0a00 	mov.w	sl, #0
 8003cb2:	f04f 0b00 	mov.w	fp, #0
 8003cb6:	ea4f 6b05 	mov.w	fp, r5, lsl #24
 8003cba:	f04f 0a00 	mov.w	sl, #0
 8003cbe:	ea4a 0301 	orr.w	r3, sl, r1
 8003cc2:	ea4b 0402 	orr.w	r4, fp, r2
 8003cc6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      this->z = u_z.real;
 8003cca:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->z);
 8003cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	f04f 0400 	mov.w	r4, #0
 8003ce2:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003ce6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cec:	69b8      	ldr	r0, [r7, #24]
 8003cee:	4403      	add	r3, r0
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	b2dd      	uxtb	r5, r3
 8003cf4:	f04f 0600 	mov.w	r6, #0
 8003cf8:	ea45 0301 	orr.w	r3, r5, r1
 8003cfc:	ea46 0402 	orr.w	r4, r6, r2
 8003d00:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d04:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8003d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4413      	add	r3, r2
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	b2d9      	uxtb	r1, r3
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0a00 	mov.w	sl, #0
 8003d1c:	f04f 0b00 	mov.w	fp, #0
 8003d20:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8003d24:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 8003d28:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8003d2c:	ea4a 0305 	orr.w	r3, sl, r5
 8003d30:	ea4b 0406 	orr.w	r4, fp, r6
 8003d34:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d38:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8003d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d3e:	3302      	adds	r3, #2
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4413      	add	r3, r2
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	b2d9      	uxtb	r1, r3
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0a00 	mov.w	sl, #0
 8003d50:	f04f 0b00 	mov.w	fp, #0
 8003d54:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8003d58:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8003d5c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8003d60:	ea4a 0305 	orr.w	r3, sl, r5
 8003d64:	ea4b 0406 	orr.w	r4, fp, r6
 8003d68:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d6c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d72:	3303      	adds	r3, #3
 8003d74:	69b8      	ldr	r0, [r7, #24]
 8003d76:	4403      	add	r3, r0
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f04f 0400 	mov.w	r4, #0
 8003d80:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8003d84:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8003d88:	ea41 0308 	orr.w	r3, r1, r8
 8003d8c:	ea42 0409 	orr.w	r4, r2, r9
 8003d90:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003d94:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	69b8      	ldr	r0, [r7, #24]
 8003d9e:	4403      	add	r3, r0
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	b2dd      	uxtb	r5, r3
 8003da4:	f04f 0600 	mov.w	r6, #0
 8003da8:	f04f 0800 	mov.w	r8, #0
 8003dac:	f04f 0900 	mov.w	r9, #0
 8003db0:	46a9      	mov	r9, r5
 8003db2:	f04f 0800 	mov.w	r8, #0
 8003db6:	ea48 0301 	orr.w	r3, r8, r1
 8003dba:	ea49 0402 	orr.w	r4, r9, r2
 8003dbe:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003dc2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc8:	3305      	adds	r3, #5
 8003dca:	69b8      	ldr	r0, [r7, #24]
 8003dcc:	4403      	add	r3, r0
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	b2dd      	uxtb	r5, r3
 8003dd2:	f04f 0600 	mov.w	r6, #0
 8003dd6:	f04f 0800 	mov.w	r8, #0
 8003dda:	f04f 0900 	mov.w	r9, #0
 8003dde:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8003de2:	f04f 0800 	mov.w	r8, #0
 8003de6:	ea48 0301 	orr.w	r3, r8, r1
 8003dea:	ea49 0402 	orr.w	r4, r9, r2
 8003dee:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003df2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df8:	3306      	adds	r3, #6
 8003dfa:	69b8      	ldr	r0, [r7, #24]
 8003dfc:	4403      	add	r3, r0
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	b2dd      	uxtb	r5, r3
 8003e02:	f04f 0600 	mov.w	r6, #0
 8003e06:	f04f 0800 	mov.w	r8, #0
 8003e0a:	f04f 0900 	mov.w	r9, #0
 8003e0e:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8003e12:	f04f 0800 	mov.w	r8, #0
 8003e16:	ea48 0301 	orr.w	r3, r8, r1
 8003e1a:	ea49 0402 	orr.w	r4, r9, r2
 8003e1e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003e22:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e28:	3307      	adds	r3, #7
 8003e2a:	69b8      	ldr	r0, [r7, #24]
 8003e2c:	4403      	add	r3, r0
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	b2dd      	uxtb	r5, r3
 8003e32:	f04f 0600 	mov.w	r6, #0
 8003e36:	f04f 0800 	mov.w	r8, #0
 8003e3a:	f04f 0900 	mov.w	r9, #0
 8003e3e:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8003e42:	f04f 0800 	mov.w	r8, #0
 8003e46:	ea48 0301 	orr.w	r3, r8, r1
 8003e4a:	ea49 0402 	orr.w	r4, r9, r2
 8003e4e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->w = u_w.real;
 8003e52:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	e9c2 3408 	strd	r3, r4, [r2, #32]
      offset += sizeof(this->w);
 8003e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e5e:	3308      	adds	r3, #8
 8003e60:	647b      	str	r3, [r7, #68]	; 0x44
     return offset;
 8003e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8003e64:	4618      	mov	r0, r3
 8003e66:	3748      	adds	r7, #72	; 0x48
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e6e:	4770      	bx	lr

08003e70 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	4b02      	ldr	r3, [pc, #8]	; (8003e84 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x14>)
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr
 8003e84:	0800e53c 	.word	0x0800e53c

08003e88 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	4b02      	ldr	r3, [pc, #8]	; (8003e9c <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x14>)
 8003e92:	4618      	mov	r0, r3
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr
 8003e9c:	0800e558 	.word	0x0800e558

08003ea0 <_ZN13geometry_msgs9TransformC1Ev>:
      typedef geometry_msgs::Vector3 _translation_type;
      _translation_type translation;
      typedef geometry_msgs::Quaternion _rotation_type;
      _rotation_type rotation;

    Transform():
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
      translation(),
      rotation()
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fd fbe4 	bl	8001678 <_ZN3ros3MsgC1Ev>
 8003eb0:	4a08      	ldr	r2, [pc, #32]	; (8003ed4 <_ZN13geometry_msgs9TransformC1Ev+0x34>)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe fbf6 	bl	80026ac <_ZN13geometry_msgs7Vector3C1Ev>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3328      	adds	r3, #40	; 0x28
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fa4b 	bl	8003360 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	0800ec78 	.word	0x0800ec78

08003ed8 <_ZNK13geometry_msgs9Transform9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
      offset += this->translation.serialize(outbuffer + offset);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f103 0008 	add.w	r0, r3, #8
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f7fe fc02 	bl	80026fc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4413      	add	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.serialize(outbuffer + offset);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	f7ff fa55 	bl	80033bc <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8003f12:	4602      	mov	r2, r0
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
      return offset;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
    }
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <_ZN13geometry_msgs9Transform11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
      offset += this->translation.deserialize(inbuffer + offset);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f103 0008 	add.w	r0, r3, #8
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	f7fe fd54 	bl	80029ec <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4413      	add	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.deserialize(inbuffer + offset);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	4413      	add	r3, r2
 8003f58:	4619      	mov	r1, r3
 8003f5a:	f7ff fc20 	bl	800379e <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
     return offset;
 8003f66:	68fb      	ldr	r3, [r7, #12]
    }
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <_ZN13geometry_msgs9Transform7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Transform"; };
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	4b02      	ldr	r3, [pc, #8]	; (8003f84 <_ZN13geometry_msgs9Transform7getTypeEv+0x14>)
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr
 8003f84:	0800e57c 	.word	0x0800e57c

08003f88 <_ZN13geometry_msgs9Transform6getMD5Ev>:
    const char * getMD5(){ return "ac9eff44abf714214112b05d54a3cf9b"; };
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	4b02      	ldr	r3, [pc, #8]	; (8003f9c <_ZN13geometry_msgs9Transform6getMD5Ev+0x14>)
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr
 8003f9c:	0800e594 	.word	0x0800e594

08003fa0 <_ZN13geometry_msgs16TransformStampedC1Ev>:
      typedef const char* _child_frame_id_type;
      _child_frame_id_type child_frame_id;
      typedef geometry_msgs::Transform _transform_type;
      _transform_type transform;

    TransformStamped():
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      transform()
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fd fb64 	bl	8001678 <_ZN3ros3MsgC1Ev>
 8003fb0:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <_ZN13geometry_msgs16TransformStampedC1Ev+0x3c>)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff f840 	bl	8003040 <_ZN8std_msgs6HeaderC1Ev>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a07      	ldr	r2, [pc, #28]	; (8003fe0 <_ZN13geometry_msgs16TransformStampedC1Ev+0x40>)
 8003fc4:	619a      	str	r2, [r3, #24]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3320      	adds	r3, #32
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff ff68 	bl	8003ea0 <_ZN13geometry_msgs9TransformC1Ev>
    {
    }
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	0800ec60 	.word	0x0800ec60
 8003fe0:	0800e3d0 	.word	0x0800e3d0

08003fe4 <_ZNK13geometry_msgs16TransformStamped9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	1d18      	adds	r0, r3, #4
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	f7ff f83f 	bl	8003080 <_ZNK8std_msgs6Header9serializeEPh>
 8004002:	4602      	mov	r2, r0
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fc f89e 	bl	8000150 <strlen>
 8004014:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	4413      	add	r3, r2
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	4618      	mov	r0, r3
 8004020:	f001 fcb4 	bl	800598c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	3304      	adds	r3, #4
 8004028:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	18d0      	adds	r0, r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	4619      	mov	r1, r3
 8004038:	f009 f9a6 	bl	800d388 <memcpy>
      offset += length_child_frame_id;
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4413      	add	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
      offset += this->transform.serialize(outbuffer + offset);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f103 0020 	add.w	r0, r3, #32
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	4413      	add	r3, r2
 8004050:	4619      	mov	r1, r3
 8004052:	f7ff ff41 	bl	8003ed8 <_ZNK13geometry_msgs9Transform9serializeEPh>
 8004056:	4602      	mov	r2, r0
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4413      	add	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
      return offset;
 800405e:	68fb      	ldr	r3, [r7, #12]
    }
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	1d18      	adds	r0, r3, #4
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	4413      	add	r3, r2
 8004080:	4619      	mov	r1, r3
 8004082:	f7ff f895 	bl	80031b0 <_ZN8std_msgs6Header11deserializeEPh>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	4413      	add	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	441a      	add	r2, r3
 8004094:	f107 030c 	add.w	r3, r7, #12
 8004098:	4611      	mov	r1, r2
 800409a:	4618      	mov	r0, r3
 800409c:	f001 fc93 	bl	80059c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	3304      	adds	r3, #4
 80040a4:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d20c      	bcs.n	80040d0 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	441a      	add	r2, r3
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	3b01      	subs	r3, #1
 80040c0:	6839      	ldr	r1, [r7, #0]
 80040c2:	440b      	add	r3, r1
 80040c4:	7812      	ldrb	r2, [r2, #0]
 80040c6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	3301      	adds	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	e7ec      	b.n	80040aa <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4413      	add	r3, r2
 80040d6:	3b01      	subs	r3, #1
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	4413      	add	r3, r2
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	441a      	add	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4413      	add	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
      offset += this->transform.deserialize(inbuffer + offset);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f103 0020 	add.w	r0, r3, #32
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	4413      	add	r3, r2
 8004100:	4619      	mov	r1, r3
 8004102:	f7ff ff0f 	bl	8003f24 <_ZN13geometry_msgs9Transform11deserializeEPh>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4413      	add	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
     return offset;
 800410e:	693b      	ldr	r3, [r7, #16]
    }
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <_ZN13geometry_msgs16TransformStamped7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TransformStamped"; };
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	4b02      	ldr	r3, [pc, #8]	; (800412c <_ZN13geometry_msgs16TransformStamped7getTypeEv+0x14>)
 8004122:	4618      	mov	r0, r3
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr
 800412c:	0800e5b8 	.word	0x0800e5b8

08004130 <_ZN13geometry_msgs16TransformStamped6getMD5Ev>:
    const char * getMD5(){ return "b5764a33bfeb3588febc2682852579b0"; };
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	4b02      	ldr	r3, [pc, #8]	; (8004144 <_ZN13geometry_msgs16TransformStamped6getMD5Ev+0x14>)
 800413a:	4618      	mov	r0, r3
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr
 8004144:	0800e5d8 	.word	0x0800e5d8

08004148 <_ZN2tf9tfMessageC1Ev>:
      uint32_t transforms_length;
      typedef geometry_msgs::TransformStamped _transforms_type;
      _transforms_type st_transforms;
      _transforms_type * transforms;

    tfMessage():
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
      transforms_length(0), transforms(NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4618      	mov	r0, r3
 8004154:	f7fd fa90 	bl	8001678 <_ZN3ros3MsgC1Ev>
 8004158:	4a09      	ldr	r2, [pc, #36]	; (8004180 <_ZN2tf9tfMessageC1Ev+0x38>)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	605a      	str	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3308      	adds	r3, #8
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff ff19 	bl	8003fa0 <_ZN13geometry_msgs16TransformStampedC1Ev>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	679a      	str	r2, [r3, #120]	; 0x78
    {
    }
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	0800ec48 	.word	0x0800ec48

08004184 <_ZNK2tf9tfMessage9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->transforms_length >> (8 * 0)) & 0xFF;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6859      	ldr	r1, [r3, #4]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	4413      	add	r3, r2
 800419c:	b2ca      	uxtb	r2, r1
 800419e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->transforms_length >> (8 * 1)) & 0xFF;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	0a19      	lsrs	r1, r3, #8
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3301      	adds	r3, #1
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	4413      	add	r3, r2
 80041ae:	b2ca      	uxtb	r2, r1
 80041b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->transforms_length >> (8 * 2)) & 0xFF;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	0c19      	lsrs	r1, r3, #16
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3302      	adds	r3, #2
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	4413      	add	r3, r2
 80041c0:	b2ca      	uxtb	r2, r1
 80041c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->transforms_length >> (8 * 3)) & 0xFF;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	0e19      	lsrs	r1, r3, #24
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3303      	adds	r3, #3
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	4413      	add	r3, r2
 80041d2:	b2ca      	uxtb	r2, r1
 80041d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->transforms_length);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3304      	adds	r3, #4
 80041da:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 80041dc:	2300      	movs	r3, #0
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d223      	bcs.n	8004232 <_ZNK2tf9tfMessage9serializeEPh+0xae>
      offset += this->transforms[i].serialize(outbuffer + offset);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	4613      	mov	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	18c8      	adds	r0, r1, r3
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	4613      	mov	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	4613      	mov	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	440b      	add	r3, r1
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	6839      	ldr	r1, [r7, #0]
 800421c:	440a      	add	r2, r1
 800421e:	4611      	mov	r1, r2
 8004220:	4798      	blx	r3
 8004222:	4602      	mov	r2, r0
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	3301      	adds	r3, #1
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	e7d6      	b.n	80041e0 <_ZNK2tf9tfMessage9serializeEPh+0x5c>
      }
      return offset;
 8004232:	68fb      	ldr	r3, [r7, #12]
    }
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <_ZN2tf9tfMessage11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
      uint32_t transforms_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	4413      	add	r3, r2
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	3301      	adds	r3, #1
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	4413      	add	r3, r2
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	021b      	lsls	r3, r3, #8
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	3302      	adds	r3, #2
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	4413      	add	r3, r2
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	041b      	lsls	r3, r3, #16
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	3303      	adds	r3, #3
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	4413      	add	r3, r2
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	061b      	lsls	r3, r3, #24
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->transforms_length);
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	3304      	adds	r3, #4
 800428e:	617b      	str	r3, [r7, #20]
      if(transforms_lengthT > transforms_length)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	429a      	cmp	r2, r3
 8004298:	d90c      	bls.n	80042b4 <_ZN2tf9tfMessage11deserializeEPh+0x78>
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4613      	mov	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	4619      	mov	r1, r3
 80042aa:	f009 f8fd 	bl	800d4a8 <realloc>
 80042ae:	4602      	mov	r2, r0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	679a      	str	r2, [r3, #120]	; 0x78
      transforms_length = transforms_lengthT;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < transforms_length; i++){
 80042ba:	2300      	movs	r3, #0
 80042bc:	613b      	str	r3, [r7, #16]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d21e      	bcs.n	8004306 <_ZN2tf9tfMessage11deserializeEPh+0xca>
      offset += this->st_transforms.deserialize(inbuffer + offset);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f103 0008 	add.w	r0, r3, #8
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	4413      	add	r3, r2
 80042d4:	4619      	mov	r1, r3
 80042d6:	f7ff fec7 	bl	8004068 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>
 80042da:	4602      	mov	r2, r0
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	4413      	add	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4613      	mov	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	18c8      	adds	r0, r1, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3308      	adds	r3, #8
 80042f6:	2270      	movs	r2, #112	; 0x70
 80042f8:	4619      	mov	r1, r3
 80042fa:	f009 f845 	bl	800d388 <memcpy>
      for( uint32_t i = 0; i < transforms_length; i++){
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	3301      	adds	r3, #1
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	e7db      	b.n	80042be <_ZN2tf9tfMessage11deserializeEPh+0x82>
      }
     return offset;
 8004306:	697b      	ldr	r3, [r7, #20]
    }
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <_ZN2tf9tfMessage7getTypeEv>:

    const char * getType(){ return "tf/tfMessage"; };
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	4b02      	ldr	r3, [pc, #8]	; (8004324 <_ZN2tf9tfMessage7getTypeEv+0x14>)
 800431a:	4618      	mov	r0, r3
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	0800e5fc 	.word	0x0800e5fc

08004328 <_ZN2tf9tfMessage6getMD5Ev>:
    const char * getMD5(){ return "94810edda583a504dfda3829e70d7eec"; };
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	4b02      	ldr	r3, [pc, #8]	; (800433c <_ZN2tf9tfMessage6getMD5Ev+0x14>)
 8004332:	4618      	mov	r0, r3
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr
 800433c:	0800e60c 	.word	0x0800e60c

08004340 <_ZN2tf20TransformBroadcasterC1Ev>:
{

class TransformBroadcaster
{
public:
  TransformBroadcaster() : publisher_("/tf", &internal_msg) {}
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fefc 	bl	8004148 <_ZN2tf9tfMessageC1Ev>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	2300      	movs	r3, #0
 800435a:	4904      	ldr	r1, [pc, #16]	; (800436c <_ZN2tf20TransformBroadcasterC1Ev+0x2c>)
 800435c:	f7fe f848 	bl	80023f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	0800e630 	.word	0x0800e630

08004370 <_ZN2tf20TransformBroadcaster4initERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEE>:

  void init(ros::NodeHandle &nh)
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  {
    nh.advertise(publisher_);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3380      	adds	r3, #128	; 0x80
 800437e:	4619      	mov	r1, r3
 8004380:	6838      	ldr	r0, [r7, #0]
 8004382:	f001 fb44 	bl	8005a0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  }
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <_ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE>:

  void sendTransform(geometry_msgs::TransformStamped &transform)
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]
  {
    internal_msg.transforms_length = 1;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	605a      	str	r2, [r3, #4]
    internal_msg.transforms = &transform;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	679a      	str	r2, [r3, #120]	; 0x78
    publisher_.publish(&internal_msg);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3380      	adds	r3, #128	; 0x80
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	4611      	mov	r1, r2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe f835 	bl	800241c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <_ZN2tfL23createQuaternionFromYawEd>:

namespace tf
{

static inline geometry_msgs::Quaternion createQuaternionFromYaw(double yaw)
{
 80043bc:	b590      	push	{r4, r7, lr}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	e9c7 2300 	strd	r2, r3, [r7]
  geometry_msgs::Quaternion q;
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f7fe ffc9 	bl	8003360 <_ZN13geometry_msgs10QuaternionC1Ev>
  q.x = 0;
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	f04f 0400 	mov.w	r4, #0
 80043d8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  q.y = 0;
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	f04f 0400 	mov.w	r4, #0
 80043e6:	e9c2 3404 	strd	r3, r4, [r2, #16]
  q.z = sin(yaw * 0.5);
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	4b13      	ldr	r3, [pc, #76]	; (800443c <_ZN2tfL23createQuaternionFromYawEd+0x80>)
 80043f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043f4:	f7fc f870 	bl	80004d8 <__aeabi_dmul>
 80043f8:	4603      	mov	r3, r0
 80043fa:	460c      	mov	r4, r1
 80043fc:	4618      	mov	r0, r3
 80043fe:	4621      	mov	r1, r4
 8004400:	f007 ffa8 	bl	800c354 <sin>
 8004404:	4603      	mov	r3, r0
 8004406:	460c      	mov	r4, r1
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	e9c2 3406 	strd	r3, r4, [r2, #24]
  q.w = cos(yaw * 0.5);
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	4b0a      	ldr	r3, [pc, #40]	; (800443c <_ZN2tfL23createQuaternionFromYawEd+0x80>)
 8004414:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004418:	f7fc f85e 	bl	80004d8 <__aeabi_dmul>
 800441c:	4603      	mov	r3, r0
 800441e:	460c      	mov	r4, r1
 8004420:	4618      	mov	r0, r3
 8004422:	4621      	mov	r1, r4
 8004424:	f007 ff60 	bl	800c2e8 <cos>
 8004428:	4603      	mov	r3, r0
 800442a:	460c      	mov	r4, r1
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	e9c2 3408 	strd	r3, r4, [r2, #32]
  return q;
 8004432:	bf00      	nop
}
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	bd90      	pop	{r4, r7, pc}
 800443c:	3fe00000 	.word	0x3fe00000

08004440 <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4618      	mov	r0, r3
 800444c:	f7fd f914 	bl	8001678 <_ZN3ros3MsgC1Ev>
 8004450:	4a24      	ldr	r2, [pc, #144]	; (80044e4 <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3304      	adds	r3, #4
 800445a:	4618      	mov	r0, r3
 800445c:	f7fe fdf0 	bl	8003040 <_ZN8std_msgs6HeaderC1Ev>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3318      	adds	r3, #24
 8004464:	4618      	mov	r0, r3
 8004466:	f7fe ff7b 	bl	8003360 <_ZN13geometry_msgs10QuaternionC1Ev>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004470:	2308      	movs	r3, #8
 8004472:	2b00      	cmp	r3, #0
 8004474:	db08      	blt.n	8004488 <_ZN11sensor_msgs3ImuC1Ev+0x48>
 8004476:	f04f 0000 	mov.w	r0, #0
 800447a:	f04f 0100 	mov.w	r1, #0
 800447e:	e9c2 0100 	strd	r0, r1, [r2]
 8004482:	3208      	adds	r2, #8
 8004484:	3b01      	subs	r3, #1
 8004486:	e7f4      	b.n	8004472 <_ZN11sensor_msgs3ImuC1Ev+0x32>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3388      	adds	r3, #136	; 0x88
 800448c:	4618      	mov	r0, r3
 800448e:	f7fe f90d 	bl	80026ac <_ZN13geometry_msgs7Vector3C1Ev>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8004498:	2308      	movs	r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	db08      	blt.n	80044b0 <_ZN11sensor_msgs3ImuC1Ev+0x70>
 800449e:	f04f 0000 	mov.w	r0, #0
 80044a2:	f04f 0100 	mov.w	r1, #0
 80044a6:	e9c2 0100 	strd	r0, r1, [r2]
 80044aa:	3208      	adds	r2, #8
 80044ac:	3b01      	subs	r3, #1
 80044ae:	e7f4      	b.n	800449a <_ZN11sensor_msgs3ImuC1Ev+0x5a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	33f0      	adds	r3, #240	; 0xf0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fe f8f9 	bl	80026ac <_ZN13geometry_msgs7Vector3C1Ev>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f503 7288 	add.w	r2, r3, #272	; 0x110
 80044c0:	2308      	movs	r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	db08      	blt.n	80044d8 <_ZN11sensor_msgs3ImuC1Ev+0x98>
 80044c6:	f04f 0000 	mov.w	r0, #0
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	e9c2 0100 	strd	r0, r1, [r2]
 80044d2:	3208      	adds	r2, #8
 80044d4:	3b01      	subs	r3, #1
 80044d6:	e7f4      	b.n	80044c2 <_ZN11sensor_msgs3ImuC1Ev+0x82>
    {
    }
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	0800ec1c 	.word	0x0800ec1c

080044e8 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80044e8:	b590      	push	{r4, r7, lr}
 80044ea:	b08d      	sub	sp, #52	; 0x34
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80044f2:	2300      	movs	r3, #0
 80044f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->header.serialize(outbuffer + offset);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	1d18      	adds	r0, r3, #4
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	4413      	add	r3, r2
 8004500:	4619      	mov	r1, r3
 8004502:	f7fe fdbd 	bl	8003080 <_ZNK8std_msgs6Header9serializeEPh>
 8004506:	4602      	mov	r2, r0
 8004508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450a:	4413      	add	r3, r2
 800450c:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f103 0018 	add.w	r0, r3, #24
 8004514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	4413      	add	r3, r2
 800451a:	4619      	mov	r1, r3
 800451c:	f7fe ff4e 	bl	80033bc <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8004520:	4602      	mov	r2, r0
 8004522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004524:	4413      	add	r3, r2
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004528:	2300      	movs	r3, #0
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	2b08      	cmp	r3, #8
 8004530:	d87d      	bhi.n	800462e <_ZNK11sensor_msgs3Imu9serializeEPh+0x146>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	3308      	adds	r3, #8
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	4413      	add	r3, r2
 800453c:	cb18      	ldmia	r3, {r3, r4}
 800453e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 8004542:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004548:	6839      	ldr	r1, [r7, #0]
 800454a:	440a      	add	r2, r1
 800454c:	b2db      	uxtb	r3, r3
 800454e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 8004550:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	f04f 0400 	mov.w	r4, #0
 800455c:	0a0b      	lsrs	r3, r1, #8
 800455e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004562:	0a14      	lsrs	r4, r2, #8
 8004564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004566:	3201      	adds	r2, #1
 8004568:	6839      	ldr	r1, [r7, #0]
 800456a:	440a      	add	r2, r1
 800456c:	b2db      	uxtb	r3, r3
 800456e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 8004570:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	f04f 0400 	mov.w	r4, #0
 800457c:	0c0b      	lsrs	r3, r1, #16
 800457e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004582:	0c14      	lsrs	r4, r2, #16
 8004584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004586:	3202      	adds	r2, #2
 8004588:	6839      	ldr	r1, [r7, #0]
 800458a:	440a      	add	r2, r1
 800458c:	b2db      	uxtb	r3, r3
 800458e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 8004590:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	f04f 0400 	mov.w	r4, #0
 800459c:	0e0b      	lsrs	r3, r1, #24
 800459e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80045a2:	0e14      	lsrs	r4, r2, #24
 80045a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045a6:	3203      	adds	r2, #3
 80045a8:	6839      	ldr	r1, [r7, #0]
 80045aa:	440a      	add	r2, r1
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 80045b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	f04f 0400 	mov.w	r4, #0
 80045bc:	0013      	movs	r3, r2
 80045be:	2400      	movs	r4, #0
 80045c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045c2:	3204      	adds	r2, #4
 80045c4:	6839      	ldr	r1, [r7, #0]
 80045c6:	440a      	add	r2, r1
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 80045cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	f04f 0400 	mov.w	r4, #0
 80045d8:	0a13      	lsrs	r3, r2, #8
 80045da:	2400      	movs	r4, #0
 80045dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045de:	3205      	adds	r2, #5
 80045e0:	6839      	ldr	r1, [r7, #0]
 80045e2:	440a      	add	r2, r1
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 80045e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	f04f 0400 	mov.w	r4, #0
 80045f4:	0c13      	lsrs	r3, r2, #16
 80045f6:	2400      	movs	r4, #0
 80045f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045fa:	3206      	adds	r2, #6
 80045fc:	6839      	ldr	r1, [r7, #0]
 80045fe:	440a      	add	r2, r1
 8004600:	b2db      	uxtb	r3, r3
 8004602:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 8004604:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	f04f 0400 	mov.w	r4, #0
 8004610:	0e13      	lsrs	r3, r2, #24
 8004612:	2400      	movs	r4, #0
 8004614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004616:	3207      	adds	r2, #7
 8004618:	6839      	ldr	r1, [r7, #0]
 800461a:	440a      	add	r2, r1
 800461c:	b2db      	uxtb	r3, r3
 800461e:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->orientation_covariance[i]);
 8004620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004622:	3308      	adds	r3, #8
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	3301      	adds	r3, #1
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28
 800462c:	e77e      	b.n	800452c <_ZNK11sensor_msgs3Imu9serializeEPh+0x44>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8004634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	4413      	add	r3, r2
 800463a:	4619      	mov	r1, r3
 800463c:	f7fe f85e 	bl	80026fc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004640:	4602      	mov	r2, r0
 8004642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004644:	4413      	add	r3, r2
 8004646:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004648:	2300      	movs	r3, #0
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	2b08      	cmp	r3, #8
 8004650:	d87d      	bhi.n	800474e <_ZNK11sensor_msgs3Imu9serializeEPh+0x266>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	3315      	adds	r3, #21
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	4413      	add	r3, r2
 800465c:	cb18      	ldmia	r3, {r3, r4}
 800465e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 8004662:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004668:	6839      	ldr	r1, [r7, #0]
 800466a:	440a      	add	r2, r1
 800466c:	b2db      	uxtb	r3, r3
 800466e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 8004670:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	f04f 0400 	mov.w	r4, #0
 800467c:	0a0b      	lsrs	r3, r1, #8
 800467e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004682:	0a14      	lsrs	r4, r2, #8
 8004684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004686:	3201      	adds	r2, #1
 8004688:	6839      	ldr	r1, [r7, #0]
 800468a:	440a      	add	r2, r1
 800468c:	b2db      	uxtb	r3, r3
 800468e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 8004690:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	f04f 0400 	mov.w	r4, #0
 800469c:	0c0b      	lsrs	r3, r1, #16
 800469e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046a2:	0c14      	lsrs	r4, r2, #16
 80046a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046a6:	3202      	adds	r2, #2
 80046a8:	6839      	ldr	r1, [r7, #0]
 80046aa:	440a      	add	r2, r1
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 80046b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	f04f 0400 	mov.w	r4, #0
 80046bc:	0e0b      	lsrs	r3, r1, #24
 80046be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80046c2:	0e14      	lsrs	r4, r2, #24
 80046c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046c6:	3203      	adds	r2, #3
 80046c8:	6839      	ldr	r1, [r7, #0]
 80046ca:	440a      	add	r2, r1
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 80046d0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	f04f 0400 	mov.w	r4, #0
 80046dc:	0013      	movs	r3, r2
 80046de:	2400      	movs	r4, #0
 80046e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046e2:	3204      	adds	r2, #4
 80046e4:	6839      	ldr	r1, [r7, #0]
 80046e6:	440a      	add	r2, r1
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 80046ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	f04f 0400 	mov.w	r4, #0
 80046f8:	0a13      	lsrs	r3, r2, #8
 80046fa:	2400      	movs	r4, #0
 80046fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046fe:	3205      	adds	r2, #5
 8004700:	6839      	ldr	r1, [r7, #0]
 8004702:	440a      	add	r2, r1
 8004704:	b2db      	uxtb	r3, r3
 8004706:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 8004708:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	f04f 0400 	mov.w	r4, #0
 8004714:	0c13      	lsrs	r3, r2, #16
 8004716:	2400      	movs	r4, #0
 8004718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800471a:	3206      	adds	r2, #6
 800471c:	6839      	ldr	r1, [r7, #0]
 800471e:	440a      	add	r2, r1
 8004720:	b2db      	uxtb	r3, r3
 8004722:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 8004724:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	f04f 0400 	mov.w	r4, #0
 8004730:	0e13      	lsrs	r3, r2, #24
 8004732:	2400      	movs	r4, #0
 8004734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004736:	3207      	adds	r2, #7
 8004738:	6839      	ldr	r1, [r7, #0]
 800473a:	440a      	add	r2, r1
 800473c:	b2db      	uxtb	r3, r3
 800473e:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	3308      	adds	r3, #8
 8004744:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	3301      	adds	r3, #1
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
 800474c:	e77e      	b.n	800464c <_ZNK11sensor_msgs3Imu9serializeEPh+0x164>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8004754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	4413      	add	r3, r2
 800475a:	4619      	mov	r1, r3
 800475c:	f7fd ffce 	bl	80026fc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004760:	4602      	mov	r2, r0
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	4413      	add	r3, r2
 8004766:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004768:	2300      	movs	r3, #0
 800476a:	623b      	str	r3, [r7, #32]
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	2b08      	cmp	r3, #8
 8004770:	d87d      	bhi.n	800486e <_ZNK11sensor_msgs3Imu9serializeEPh+0x386>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	3322      	adds	r3, #34	; 0x22
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	4413      	add	r3, r2
 800477c:	cb18      	ldmia	r3, {r3, r4}
 800477e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 8004782:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004788:	6839      	ldr	r1, [r7, #0]
 800478a:	440a      	add	r2, r1
 800478c:	b2db      	uxtb	r3, r3
 800478e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 8004790:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	f04f 0400 	mov.w	r4, #0
 800479c:	0a0b      	lsrs	r3, r1, #8
 800479e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80047a2:	0a14      	lsrs	r4, r2, #8
 80047a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a6:	3201      	adds	r2, #1
 80047a8:	6839      	ldr	r1, [r7, #0]
 80047aa:	440a      	add	r2, r1
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 80047b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	f04f 0400 	mov.w	r4, #0
 80047bc:	0c0b      	lsrs	r3, r1, #16
 80047be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047c2:	0c14      	lsrs	r4, r2, #16
 80047c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047c6:	3202      	adds	r2, #2
 80047c8:	6839      	ldr	r1, [r7, #0]
 80047ca:	440a      	add	r2, r1
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 80047d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	f04f 0400 	mov.w	r4, #0
 80047dc:	0e0b      	lsrs	r3, r1, #24
 80047de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80047e2:	0e14      	lsrs	r4, r2, #24
 80047e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047e6:	3203      	adds	r2, #3
 80047e8:	6839      	ldr	r1, [r7, #0]
 80047ea:	440a      	add	r2, r1
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 80047f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	f04f 0400 	mov.w	r4, #0
 80047fc:	0013      	movs	r3, r2
 80047fe:	2400      	movs	r4, #0
 8004800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004802:	3204      	adds	r2, #4
 8004804:	6839      	ldr	r1, [r7, #0]
 8004806:	440a      	add	r2, r1
 8004808:	b2db      	uxtb	r3, r3
 800480a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 800480c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	f04f 0400 	mov.w	r4, #0
 8004818:	0a13      	lsrs	r3, r2, #8
 800481a:	2400      	movs	r4, #0
 800481c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800481e:	3205      	adds	r2, #5
 8004820:	6839      	ldr	r1, [r7, #0]
 8004822:	440a      	add	r2, r1
 8004824:	b2db      	uxtb	r3, r3
 8004826:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 8004828:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	f04f 0400 	mov.w	r4, #0
 8004834:	0c13      	lsrs	r3, r2, #16
 8004836:	2400      	movs	r4, #0
 8004838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800483a:	3206      	adds	r2, #6
 800483c:	6839      	ldr	r1, [r7, #0]
 800483e:	440a      	add	r2, r1
 8004840:	b2db      	uxtb	r3, r3
 8004842:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 8004844:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	f04f 0400 	mov.w	r4, #0
 8004850:	0e13      	lsrs	r3, r2, #24
 8004852:	2400      	movs	r4, #0
 8004854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004856:	3207      	adds	r2, #7
 8004858:	6839      	ldr	r1, [r7, #0]
 800485a:	440a      	add	r2, r1
 800485c:	b2db      	uxtb	r3, r3
 800485e:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8004860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004862:	3308      	adds	r3, #8
 8004864:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	3301      	adds	r3, #1
 800486a:	623b      	str	r3, [r7, #32]
 800486c:	e77e      	b.n	800476c <_ZNK11sensor_msgs3Imu9serializeEPh+0x284>
      }
      return offset;
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004870:	4618      	mov	r0, r3
 8004872:	3734      	adds	r7, #52	; 0x34
 8004874:	46bd      	mov	sp, r7
 8004876:	bd90      	pop	{r4, r7, pc}

08004878 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487c:	b091      	sub	sp, #68	; 0x44
 800487e:	af00      	add	r7, sp, #0
 8004880:	6178      	str	r0, [r7, #20]
 8004882:	6139      	str	r1, [r7, #16]
    {
      int offset = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	63fb      	str	r3, [r7, #60]	; 0x3c
      offset += this->header.deserialize(inbuffer + offset);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	1d18      	adds	r0, r3, #4
 800488c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4413      	add	r3, r2
 8004892:	4619      	mov	r1, r3
 8004894:	f7fe fc8c 	bl	80031b0 <_ZN8std_msgs6Header11deserializeEPh>
 8004898:	4602      	mov	r2, r0
 800489a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800489c:	4413      	add	r3, r2
 800489e:	63fb      	str	r3, [r7, #60]	; 0x3c
      offset += this->orientation.deserialize(inbuffer + offset);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f103 0018 	add.w	r0, r3, #24
 80048a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4413      	add	r3, r2
 80048ac:	4619      	mov	r1, r3
 80048ae:	f7fe ff76 	bl	800379e <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 80048b2:	4602      	mov	r2, r0
 80048b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b6:	4413      	add	r3, r2
 80048b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 80048ba:	2300      	movs	r3, #0
 80048bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80048be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	f200 80dd 	bhi.w	8004a80 <_ZN11sensor_msgs3Imu11deserializeEPh+0x208>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	f04f 0400 	mov.w	r4, #0
 80048ce:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80048d2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80048d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d8:	6938      	ldr	r0, [r7, #16]
 80048da:	4403      	add	r3, r0
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	b2dd      	uxtb	r5, r3
 80048e0:	f04f 0600 	mov.w	r6, #0
 80048e4:	ea45 0301 	orr.w	r3, r5, r1
 80048e8:	ea46 0402 	orr.w	r4, r6, r2
 80048ec:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80048f0:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 80048f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f6:	3301      	adds	r3, #1
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4413      	add	r3, r2
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	b2d9      	uxtb	r1, r3
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	f04f 0400 	mov.w	r4, #0
 800490c:	0214      	lsls	r4, r2, #8
 800490e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004912:	020b      	lsls	r3, r1, #8
 8004914:	ea45 0503 	orr.w	r5, r5, r3
 8004918:	ea46 0604 	orr.w	r6, r6, r4
 800491c:	462b      	mov	r3, r5
 800491e:	4634      	mov	r4, r6
 8004920:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004924:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8004928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492a:	3302      	adds	r3, #2
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4413      	add	r3, r2
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	b2d9      	uxtb	r1, r3
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	f04f 0400 	mov.w	r4, #0
 8004940:	0414      	lsls	r4, r2, #16
 8004942:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8004946:	040b      	lsls	r3, r1, #16
 8004948:	ea45 0503 	orr.w	r5, r5, r3
 800494c:	ea46 0604 	orr.w	r6, r6, r4
 8004950:	462b      	mov	r3, r5
 8004952:	4634      	mov	r4, r6
 8004954:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004958:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800495c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800495e:	3303      	adds	r3, #3
 8004960:	6938      	ldr	r0, [r7, #16]
 8004962:	4403      	add	r3, r0
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	f04f 0400 	mov.w	r4, #0
 800496c:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8004970:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8004974:	ea41 030a 	orr.w	r3, r1, sl
 8004978:	ea42 040b 	orr.w	r4, r2, fp
 800497c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004980:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004986:	3304      	adds	r3, #4
 8004988:	6938      	ldr	r0, [r7, #16]
 800498a:	4403      	add	r3, r0
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	461c      	mov	r4, r3
 8004990:	b2e4      	uxtb	r4, r4
 8004992:	f04f 0500 	mov.w	r5, #0
 8004996:	f04f 0800 	mov.w	r8, #0
 800499a:	f04f 0900 	mov.w	r9, #0
 800499e:	4623      	mov	r3, r4
 80049a0:	001b      	movs	r3, r3
 80049a2:	4699      	mov	r9, r3
 80049a4:	2300      	movs	r3, #0
 80049a6:	4698      	mov	r8, r3
 80049a8:	4643      	mov	r3, r8
 80049aa:	464c      	mov	r4, r9
 80049ac:	ea43 0301 	orr.w	r3, r3, r1
 80049b0:	ea44 0402 	orr.w	r4, r4, r2
 80049b4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80049b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80049bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049be:	3305      	adds	r3, #5
 80049c0:	6938      	ldr	r0, [r7, #16]
 80049c2:	4403      	add	r3, r0
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	461c      	mov	r4, r3
 80049c8:	b2e4      	uxtb	r4, r4
 80049ca:	f04f 0500 	mov.w	r5, #0
 80049ce:	f04f 0800 	mov.w	r8, #0
 80049d2:	f04f 0900 	mov.w	r9, #0
 80049d6:	4623      	mov	r3, r4
 80049d8:	021b      	lsls	r3, r3, #8
 80049da:	4699      	mov	r9, r3
 80049dc:	2300      	movs	r3, #0
 80049de:	4698      	mov	r8, r3
 80049e0:	4643      	mov	r3, r8
 80049e2:	464c      	mov	r4, r9
 80049e4:	ea43 0301 	orr.w	r3, r3, r1
 80049e8:	ea44 0402 	orr.w	r4, r4, r2
 80049ec:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80049f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80049f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f6:	3306      	adds	r3, #6
 80049f8:	6938      	ldr	r0, [r7, #16]
 80049fa:	4403      	add	r3, r0
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	461c      	mov	r4, r3
 8004a00:	b2e4      	uxtb	r4, r4
 8004a02:	f04f 0500 	mov.w	r5, #0
 8004a06:	f04f 0800 	mov.w	r8, #0
 8004a0a:	f04f 0900 	mov.w	r9, #0
 8004a0e:	4623      	mov	r3, r4
 8004a10:	041b      	lsls	r3, r3, #16
 8004a12:	4699      	mov	r9, r3
 8004a14:	2300      	movs	r3, #0
 8004a16:	4698      	mov	r8, r3
 8004a18:	4643      	mov	r3, r8
 8004a1a:	464c      	mov	r4, r9
 8004a1c:	ea43 0301 	orr.w	r3, r3, r1
 8004a20:	ea44 0402 	orr.w	r4, r4, r2
 8004a24:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004a28:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a2e:	3307      	adds	r3, #7
 8004a30:	6938      	ldr	r0, [r7, #16]
 8004a32:	4403      	add	r3, r0
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	461c      	mov	r4, r3
 8004a38:	b2e4      	uxtb	r4, r4
 8004a3a:	f04f 0500 	mov.w	r5, #0
 8004a3e:	f04f 0800 	mov.w	r8, #0
 8004a42:	f04f 0900 	mov.w	r9, #0
 8004a46:	4623      	mov	r3, r4
 8004a48:	061b      	lsls	r3, r3, #24
 8004a4a:	4699      	mov	r9, r3
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4698      	mov	r8, r3
 8004a50:	4643      	mov	r3, r8
 8004a52:	464c      	mov	r4, r9
 8004a54:	ea43 0301 	orr.w	r3, r3, r1
 8004a58:	ea44 0402 	orr.w	r4, r4, r2
 8004a5c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 8004a60:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004a64:	6979      	ldr	r1, [r7, #20]
 8004a66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a68:	3208      	adds	r2, #8
 8004a6a:	00d2      	lsls	r2, r2, #3
 8004a6c:	440a      	add	r2, r1
 8004a6e:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->orientation_covariance[i]);
 8004a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a74:	3308      	adds	r3, #8
 8004a76:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8004a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a7e:	e71e      	b.n	80048be <_ZN11sensor_msgs3Imu11deserializeEPh+0x46>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8004a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f7fd ffad 	bl	80029ec <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004a92:	4602      	mov	r2, r0
 8004a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a96:	4413      	add	r3, r2
 8004a98:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	f200 80ca 	bhi.w	8004c3a <_ZN11sensor_msgs3Imu11deserializeEPh+0x3c2>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	f04f 0400 	mov.w	r4, #0
 8004aae:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004ab2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab8:	6938      	ldr	r0, [r7, #16]
 8004aba:	4403      	add	r3, r0
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	b2dd      	uxtb	r5, r3
 8004ac0:	f04f 0600 	mov.w	r6, #0
 8004ac4:	ea45 0301 	orr.w	r3, r5, r1
 8004ac8:	ea46 0402 	orr.w	r4, r6, r2
 8004acc:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004ad0:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8004ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4413      	add	r3, r2
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	b2d9      	uxtb	r1, r3
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0500 	mov.w	r5, #0
 8004ae8:	f04f 0600 	mov.w	r6, #0
 8004aec:	0216      	lsls	r6, r2, #8
 8004aee:	ea46 6611 	orr.w	r6, r6, r1, lsr #24
 8004af2:	020d      	lsls	r5, r1, #8
 8004af4:	ea45 030a 	orr.w	r3, r5, sl
 8004af8:	ea46 040b 	orr.w	r4, r6, fp
 8004afc:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004b00:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8004b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b06:	3302      	adds	r3, #2
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	b2d9      	uxtb	r1, r3
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	f04f 0500 	mov.w	r5, #0
 8004b18:	f04f 0600 	mov.w	r6, #0
 8004b1c:	0416      	lsls	r6, r2, #16
 8004b1e:	ea46 4611 	orr.w	r6, r6, r1, lsr #16
 8004b22:	040d      	lsls	r5, r1, #16
 8004b24:	ea45 030a 	orr.w	r3, r5, sl
 8004b28:	ea46 040b 	orr.w	r4, r6, fp
 8004b2c:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004b30:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b36:	3303      	adds	r3, #3
 8004b38:	6938      	ldr	r0, [r7, #16]
 8004b3a:	4403      	add	r3, r0
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	f04f 0400 	mov.w	r4, #0
 8004b44:	0a18      	lsrs	r0, r3, #8
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	061b      	lsls	r3, r3, #24
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004b50:	ea43 0301 	orr.w	r3, r3, r1
 8004b54:	ea44 0402 	orr.w	r4, r4, r2
 8004b58:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004b5c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b62:	3304      	adds	r3, #4
 8004b64:	6938      	ldr	r0, [r7, #16]
 8004b66:	4403      	add	r3, r0
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	fa5f fa83 	uxtb.w	sl, r3
 8004b6e:	f04f 0b00 	mov.w	fp, #0
 8004b72:	f04f 0500 	mov.w	r5, #0
 8004b76:	f04f 0600 	mov.w	r6, #0
 8004b7a:	4656      	mov	r6, sl
 8004b7c:	2500      	movs	r5, #0
 8004b7e:	ea45 0301 	orr.w	r3, r5, r1
 8004b82:	ea46 0402 	orr.w	r4, r6, r2
 8004b86:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004b8a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b90:	3305      	adds	r3, #5
 8004b92:	6938      	ldr	r0, [r7, #16]
 8004b94:	4403      	add	r3, r0
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	fa5f fa83 	uxtb.w	sl, r3
 8004b9c:	f04f 0b00 	mov.w	fp, #0
 8004ba0:	f04f 0500 	mov.w	r5, #0
 8004ba4:	f04f 0600 	mov.w	r6, #0
 8004ba8:	ea4f 260a 	mov.w	r6, sl, lsl #8
 8004bac:	2500      	movs	r5, #0
 8004bae:	ea45 0301 	orr.w	r3, r5, r1
 8004bb2:	ea46 0402 	orr.w	r4, r6, r2
 8004bb6:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004bba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc0:	3306      	adds	r3, #6
 8004bc2:	6938      	ldr	r0, [r7, #16]
 8004bc4:	4403      	add	r3, r0
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	fa5f fa83 	uxtb.w	sl, r3
 8004bcc:	f04f 0b00 	mov.w	fp, #0
 8004bd0:	f04f 0500 	mov.w	r5, #0
 8004bd4:	f04f 0600 	mov.w	r6, #0
 8004bd8:	ea4f 460a 	mov.w	r6, sl, lsl #16
 8004bdc:	2500      	movs	r5, #0
 8004bde:	ea45 0301 	orr.w	r3, r5, r1
 8004be2:	ea46 0402 	orr.w	r4, r6, r2
 8004be6:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004bea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf0:	3307      	adds	r3, #7
 8004bf2:	6938      	ldr	r0, [r7, #16]
 8004bf4:	4403      	add	r3, r0
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	fa5f fa83 	uxtb.w	sl, r3
 8004bfc:	f04f 0b00 	mov.w	fp, #0
 8004c00:	f04f 0500 	mov.w	r5, #0
 8004c04:	f04f 0600 	mov.w	r6, #0
 8004c08:	ea4f 660a 	mov.w	r6, sl, lsl #24
 8004c0c:	2500      	movs	r5, #0
 8004c0e:	ea45 0301 	orr.w	r3, r5, r1
 8004c12:	ea46 0402 	orr.w	r4, r6, r2
 8004c16:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 8004c1a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004c1e:	6979      	ldr	r1, [r7, #20]
 8004c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c22:	3215      	adds	r2, #21
 8004c24:	00d2      	lsls	r2, r2, #3
 8004c26:	440a      	add	r2, r1
 8004c28:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8004c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c2e:	3308      	adds	r3, #8
 8004c30:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8004c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c34:	3301      	adds	r3, #1
 8004c36:	637b      	str	r3, [r7, #52]	; 0x34
 8004c38:	e731      	b.n	8004a9e <_ZN11sensor_msgs3Imu11deserializeEPh+0x226>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8004c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4413      	add	r3, r2
 8004c46:	4619      	mov	r1, r3
 8004c48:	f7fd fed0 	bl	80029ec <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c50:	4413      	add	r3, r2
 8004c52:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8004c54:	2300      	movs	r3, #0
 8004c56:	633b      	str	r3, [r7, #48]	; 0x30
 8004c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	f200 80ca 	bhi.w	8004df4 <_ZN11sensor_msgs3Imu11deserializeEPh+0x57c>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	f04f 0400 	mov.w	r4, #0
 8004c68:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004c6c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c72:	6938      	ldr	r0, [r7, #16]
 8004c74:	4403      	add	r3, r0
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	b2dd      	uxtb	r5, r3
 8004c7a:	f04f 0600 	mov.w	r6, #0
 8004c7e:	ea45 0301 	orr.w	r3, r5, r1
 8004c82:	ea46 0402 	orr.w	r4, r6, r2
 8004c86:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004c8a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c90:	3301      	adds	r3, #1
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4413      	add	r3, r2
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	b2d9      	uxtb	r1, r3
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0500 	mov.w	r5, #0
 8004ca2:	f04f 0600 	mov.w	r6, #0
 8004ca6:	0216      	lsls	r6, r2, #8
 8004ca8:	ea46 6611 	orr.w	r6, r6, r1, lsr #24
 8004cac:	020d      	lsls	r5, r1, #8
 8004cae:	ea45 0308 	orr.w	r3, r5, r8
 8004cb2:	ea46 0409 	orr.w	r4, r6, r9
 8004cb6:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004cba:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc0:	3302      	adds	r3, #2
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	b2d9      	uxtb	r1, r3
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	f04f 0500 	mov.w	r5, #0
 8004cd2:	f04f 0600 	mov.w	r6, #0
 8004cd6:	0416      	lsls	r6, r2, #16
 8004cd8:	ea46 4611 	orr.w	r6, r6, r1, lsr #16
 8004cdc:	040d      	lsls	r5, r1, #16
 8004cde:	ea45 0308 	orr.w	r3, r5, r8
 8004ce2:	ea46 0409 	orr.w	r4, r6, r9
 8004ce6:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004cea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf0:	3303      	adds	r3, #3
 8004cf2:	6938      	ldr	r0, [r7, #16]
 8004cf4:	4403      	add	r3, r0
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	f04f 0400 	mov.w	r4, #0
 8004cfe:	0a18      	lsrs	r0, r3, #8
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	061b      	lsls	r3, r3, #24
 8004d04:	603b      	str	r3, [r7, #0]
 8004d06:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004d0a:	ea43 0301 	orr.w	r3, r3, r1
 8004d0e:	ea44 0402 	orr.w	r4, r4, r2
 8004d12:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004d16:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	6938      	ldr	r0, [r7, #16]
 8004d20:	4403      	add	r3, r0
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	fa5f f883 	uxtb.w	r8, r3
 8004d28:	f04f 0900 	mov.w	r9, #0
 8004d2c:	f04f 0500 	mov.w	r5, #0
 8004d30:	f04f 0600 	mov.w	r6, #0
 8004d34:	4646      	mov	r6, r8
 8004d36:	2500      	movs	r5, #0
 8004d38:	ea45 0301 	orr.w	r3, r5, r1
 8004d3c:	ea46 0402 	orr.w	r4, r6, r2
 8004d40:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004d44:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d4a:	3305      	adds	r3, #5
 8004d4c:	6938      	ldr	r0, [r7, #16]
 8004d4e:	4403      	add	r3, r0
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	fa5f f883 	uxtb.w	r8, r3
 8004d56:	f04f 0900 	mov.w	r9, #0
 8004d5a:	f04f 0500 	mov.w	r5, #0
 8004d5e:	f04f 0600 	mov.w	r6, #0
 8004d62:	ea4f 2608 	mov.w	r6, r8, lsl #8
 8004d66:	2500      	movs	r5, #0
 8004d68:	ea45 0301 	orr.w	r3, r5, r1
 8004d6c:	ea46 0402 	orr.w	r4, r6, r2
 8004d70:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004d74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d7a:	3306      	adds	r3, #6
 8004d7c:	6938      	ldr	r0, [r7, #16]
 8004d7e:	4403      	add	r3, r0
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	fa5f f883 	uxtb.w	r8, r3
 8004d86:	f04f 0900 	mov.w	r9, #0
 8004d8a:	f04f 0500 	mov.w	r5, #0
 8004d8e:	f04f 0600 	mov.w	r6, #0
 8004d92:	ea4f 4608 	mov.w	r6, r8, lsl #16
 8004d96:	2500      	movs	r5, #0
 8004d98:	ea45 0301 	orr.w	r3, r5, r1
 8004d9c:	ea46 0402 	orr.w	r4, r6, r2
 8004da0:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004da4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004daa:	3307      	adds	r3, #7
 8004dac:	6938      	ldr	r0, [r7, #16]
 8004dae:	4403      	add	r3, r0
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	fa5f f883 	uxtb.w	r8, r3
 8004db6:	f04f 0900 	mov.w	r9, #0
 8004dba:	f04f 0500 	mov.w	r5, #0
 8004dbe:	f04f 0600 	mov.w	r6, #0
 8004dc2:	ea4f 6608 	mov.w	r6, r8, lsl #24
 8004dc6:	2500      	movs	r5, #0
 8004dc8:	ea45 0301 	orr.w	r3, r5, r1
 8004dcc:	ea46 0402 	orr.w	r4, r6, r2
 8004dd0:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 8004dd4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004dd8:	6979      	ldr	r1, [r7, #20]
 8004dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ddc:	3222      	adds	r2, #34	; 0x22
 8004dde:	00d2      	lsls	r2, r2, #3
 8004de0:	440a      	add	r2, r1
 8004de2:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8004de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de8:	3308      	adds	r3, #8
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	3301      	adds	r3, #1
 8004df0:	633b      	str	r3, [r7, #48]	; 0x30
 8004df2:	e731      	b.n	8004c58 <_ZN11sensor_msgs3Imu11deserializeEPh+0x3e0>
      }
     return offset;
 8004df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8004df6:	4618      	mov	r0, r3
 8004df8:	3744      	adds	r7, #68	; 0x44
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004e00 <_ZN11sensor_msgs3Imu7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Imu"; };
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	4b02      	ldr	r3, [pc, #8]	; (8004e14 <_ZN11sensor_msgs3Imu7getTypeEv+0x14>)
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr
 8004e14:	0800e634 	.word	0x0800e634

08004e18 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    const char * getMD5(){ return "6a62c6daae103f4ff57a132d6f95cec2"; };
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	4b02      	ldr	r3, [pc, #8]	; (8004e2c <_ZN11sensor_msgs3Imu6getMD5Ev+0x14>)
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr
 8004e2c:	0800e644 	.word	0x0800e644

08004e30 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8004e38:	4a03      	ldr	r2, [pc, #12]	; (8004e48 <bno055_assignI2C+0x18>)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6013      	str	r3, [r2, #0]
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr
 8004e48:	20000188 	.word	0x20000188

08004e4c <bno055_delay>:

void bno055_delay(int time) {
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f002 fc30 	bl	80076bc <HAL_Delay>
#endif
}
 8004e5c:	bf00      	nop
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	460a      	mov	r2, r1
 8004e6e:	71fb      	strb	r3, [r7, #7]
 8004e70:	4613      	mov	r3, r2
 8004e72:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	733b      	strb	r3, [r7, #12]
 8004e78:	79bb      	ldrb	r3, [r7, #6]
 8004e7a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8004e7c:	4b5a      	ldr	r3, [pc, #360]	; (8004fe8 <bno055_writeData+0x184>)
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	f107 020c 	add.w	r2, r7, #12
 8004e84:	230a      	movs	r3, #10
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	2302      	movs	r3, #2
 8004e8a:	2150      	movs	r1, #80	; 0x50
 8004e8c:	f003 fa86 	bl	800839c <HAL_I2C_Master_Transmit>
 8004e90:	4603      	mov	r3, r0
 8004e92:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 80a0 	beq.w	8004fdc <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8004e9c:	7dfb      	ldrb	r3, [r7, #23]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d103      	bne.n	8004eaa <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8004ea2:	4852      	ldr	r0, [pc, #328]	; (8004fec <bno055_writeData+0x188>)
 8004ea4:	f008 faf8 	bl	800d498 <puts>
 8004ea8:	e012      	b.n	8004ed0 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8004eaa:	7dfb      	ldrb	r3, [r7, #23]
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d103      	bne.n	8004eb8 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8004eb0:	484f      	ldr	r0, [pc, #316]	; (8004ff0 <bno055_writeData+0x18c>)
 8004eb2:	f008 faf1 	bl	800d498 <puts>
 8004eb6:	e00b      	b.n	8004ed0 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d103      	bne.n	8004ec6 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8004ebe:	484d      	ldr	r0, [pc, #308]	; (8004ff4 <bno055_writeData+0x190>)
 8004ec0:	f008 faea 	bl	800d498 <puts>
 8004ec4:	e004      	b.n	8004ed0 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8004ec6:	7dfb      	ldrb	r3, [r7, #23]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	484b      	ldr	r0, [pc, #300]	; (8004ff8 <bno055_writeData+0x194>)
 8004ecc:	f008 fa70 	bl	800d3b0 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8004ed0:	4b45      	ldr	r3, [pc, #276]	; (8004fe8 <bno055_writeData+0x184>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f003 ff91 	bl	8008dfc <HAL_I2C_GetError>
 8004eda:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d07e      	beq.n	8004fe0 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d103      	bne.n	8004ef0 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8004ee8:	4844      	ldr	r0, [pc, #272]	; (8004ffc <bno055_writeData+0x198>)
 8004eea:	f008 fad5 	bl	800d498 <puts>
 8004eee:	e021      	b.n	8004f34 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d103      	bne.n	8004efe <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8004ef6:	4842      	ldr	r0, [pc, #264]	; (8005000 <bno055_writeData+0x19c>)
 8004ef8:	f008 face 	bl	800d498 <puts>
 8004efc:	e01a      	b.n	8004f34 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d103      	bne.n	8004f0c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8004f04:	483f      	ldr	r0, [pc, #252]	; (8005004 <bno055_writeData+0x1a0>)
 8004f06:	f008 fac7 	bl	800d498 <puts>
 8004f0a:	e013      	b.n	8004f34 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d103      	bne.n	8004f1a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8004f12:	483d      	ldr	r0, [pc, #244]	; (8005008 <bno055_writeData+0x1a4>)
 8004f14:	f008 fac0 	bl	800d498 <puts>
 8004f18:	e00c      	b.n	8004f34 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d103      	bne.n	8004f28 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8004f20:	483a      	ldr	r0, [pc, #232]	; (800500c <bno055_writeData+0x1a8>)
 8004f22:	f008 fab9 	bl	800d498 <puts>
 8004f26:	e005      	b.n	8004f34 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	d102      	bne.n	8004f34 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8004f2e:	4838      	ldr	r0, [pc, #224]	; (8005010 <bno055_writeData+0x1ac>)
 8004f30:	f008 fab2 	bl	800d498 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8004f34:	4b2c      	ldr	r3, [pc, #176]	; (8004fe8 <bno055_writeData+0x184>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f003 ff52 	bl	8008de2 <HAL_I2C_GetState>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d103      	bne.n	8004f50 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8004f48:	4832      	ldr	r0, [pc, #200]	; (8005014 <bno055_writeData+0x1b0>)
 8004f4a:	f008 faa5 	bl	800d498 <puts>
 8004f4e:	e048      	b.n	8004fe2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	2b20      	cmp	r3, #32
 8004f54:	d103      	bne.n	8004f5e <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8004f56:	482f      	ldr	r0, [pc, #188]	; (8005014 <bno055_writeData+0x1b0>)
 8004f58:	f008 fa9e 	bl	800d498 <puts>
 8004f5c:	e041      	b.n	8004fe2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2b24      	cmp	r3, #36	; 0x24
 8004f62:	d103      	bne.n	8004f6c <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8004f64:	482c      	ldr	r0, [pc, #176]	; (8005018 <bno055_writeData+0x1b4>)
 8004f66:	f008 fa97 	bl	800d498 <puts>
 8004f6a:	e03a      	b.n	8004fe2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	2b21      	cmp	r3, #33	; 0x21
 8004f70:	d103      	bne.n	8004f7a <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8004f72:	482a      	ldr	r0, [pc, #168]	; (800501c <bno055_writeData+0x1b8>)
 8004f74:	f008 fa90 	bl	800d498 <puts>
 8004f78:	e033      	b.n	8004fe2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
 8004f7c:	2b22      	cmp	r3, #34	; 0x22
 8004f7e:	d103      	bne.n	8004f88 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8004f80:	4827      	ldr	r0, [pc, #156]	; (8005020 <bno055_writeData+0x1bc>)
 8004f82:	f008 fa89 	bl	800d498 <puts>
 8004f86:	e02c      	b.n	8004fe2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	2b28      	cmp	r3, #40	; 0x28
 8004f8c:	d103      	bne.n	8004f96 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8004f8e:	4825      	ldr	r0, [pc, #148]	; (8005024 <bno055_writeData+0x1c0>)
 8004f90:	f008 fa82 	bl	800d498 <puts>
 8004f94:	e025      	b.n	8004fe2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
 8004f98:	2b29      	cmp	r3, #41	; 0x29
 8004f9a:	d103      	bne.n	8004fa4 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8004f9c:	4822      	ldr	r0, [pc, #136]	; (8005028 <bno055_writeData+0x1c4>)
 8004f9e:	f008 fa7b 	bl	800d498 <puts>
 8004fa2:	e01e      	b.n	8004fe2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8004fa8:	d103      	bne.n	8004fb2 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8004faa:	4820      	ldr	r0, [pc, #128]	; (800502c <bno055_writeData+0x1c8>)
 8004fac:	f008 fa74 	bl	800d498 <puts>
 8004fb0:	e017      	b.n	8004fe2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	2b60      	cmp	r3, #96	; 0x60
 8004fb6:	d103      	bne.n	8004fc0 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8004fb8:	481d      	ldr	r0, [pc, #116]	; (8005030 <bno055_writeData+0x1cc>)
 8004fba:	f008 fa6d 	bl	800d498 <puts>
 8004fbe:	e010      	b.n	8004fe2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	2ba0      	cmp	r3, #160	; 0xa0
 8004fc4:	d103      	bne.n	8004fce <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8004fc6:	481b      	ldr	r0, [pc, #108]	; (8005034 <bno055_writeData+0x1d0>)
 8004fc8:	f008 fa66 	bl	800d498 <puts>
 8004fcc:	e009      	b.n	8004fe2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
 8004fd0:	2be0      	cmp	r3, #224	; 0xe0
 8004fd2:	d106      	bne.n	8004fe2 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8004fd4:	4818      	ldr	r0, [pc, #96]	; (8005038 <bno055_writeData+0x1d4>)
 8004fd6:	f008 fa5f 	bl	800d498 <puts>
 8004fda:	e002      	b.n	8004fe2 <bno055_writeData+0x17e>
    return;
 8004fdc:	bf00      	nop
 8004fde:	e000      	b.n	8004fe2 <bno055_writeData+0x17e>
    return;
 8004fe0:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	20000188 	.word	0x20000188
 8004fec:	0800e668 	.word	0x0800e668
 8004ff0:	0800e68c 	.word	0x0800e68c
 8004ff4:	0800e6b4 	.word	0x0800e6b4
 8004ff8:	0800e6d8 	.word	0x0800e6d8
 8004ffc:	0800e6f0 	.word	0x0800e6f0
 8005000:	0800e704 	.word	0x0800e704
 8005004:	0800e718 	.word	0x0800e718
 8005008:	0800e72c 	.word	0x0800e72c
 800500c:	0800e740 	.word	0x0800e740
 8005010:	0800e754 	.word	0x0800e754
 8005014:	0800e76c 	.word	0x0800e76c
 8005018:	0800e784 	.word	0x0800e784
 800501c:	0800e798 	.word	0x0800e798
 8005020:	0800e7b0 	.word	0x0800e7b0
 8005024:	0800e7c8 	.word	0x0800e7c8
 8005028:	0800e7e0 	.word	0x0800e7e0
 800502c:	0800e800 	.word	0x0800e800
 8005030:	0800e820 	.word	0x0800e820
 8005034:	0800e838 	.word	0x0800e838
 8005038:	0800e850 	.word	0x0800e850

0800503c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af02      	add	r7, sp, #8
 8005042:	4603      	mov	r3, r0
 8005044:	6039      	str	r1, [r7, #0]
 8005046:	71fb      	strb	r3, [r7, #7]
 8005048:	4613      	mov	r3, r2
 800504a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 800504c:	4b0b      	ldr	r3, [pc, #44]	; (800507c <bno055_readData+0x40>)
 800504e:	6818      	ldr	r0, [r3, #0]
 8005050:	1dfa      	adds	r2, r7, #7
 8005052:	2364      	movs	r3, #100	; 0x64
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	2301      	movs	r3, #1
 8005058:	2150      	movs	r1, #80	; 0x50
 800505a:	f003 f99f 	bl	800839c <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800505e:	4b07      	ldr	r3, [pc, #28]	; (800507c <bno055_readData+0x40>)
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	79bb      	ldrb	r3, [r7, #6]
 8005064:	b29a      	uxth	r2, r3
 8005066:	2364      	movs	r3, #100	; 0x64
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	4613      	mov	r3, r2
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	2150      	movs	r1, #80	; 0x50
 8005070:	f003 fa92 	bl	8008598 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8005074:	bf00      	nop
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	20000188 	.word	0x20000188

08005080 <HAL_UART_TxCpltCallback>:
char log_msg[256];
float _roverBase_width =0.75;
float _wheelRadius = 0.06;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a07      	ldr	r2, [pc, #28]	; (80050a8 <HAL_UART_TxCpltCallback+0x28>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d106      	bne.n	800509e <HAL_UART_TxCpltCallback+0x1e>
	{
  nh.getHardware()->flush();
 8005090:	4806      	ldr	r0, [pc, #24]	; (80050ac <HAL_UART_TxCpltCallback+0x2c>)
 8005092:	f000 fdaf 	bl	8005bf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8005096:	4603      	mov	r3, r0
 8005098:	4618      	mov	r0, r3
 800509a:	f7fd fa57 	bl	800254c <_ZN13STM32Hardware5flushEv>
	}
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20000f8c 	.word	0x20000f8c
 80050ac:	2000018c 	.word	0x2000018c

080050b0 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE>:

/*--------------/cmd_vel callBack function------------*/
void cmd_velCallBack(const geometry_msgs::Twist &velInfo)
{
 80050b0:	b5b0      	push	{r4, r5, r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 float lin_x = velInfo.linear.x;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f103 0410 	add.w	r4, r3, #16
 80050be:	e9d4 3400 	ldrd	r3, r4, [r4]
 80050c2:	4618      	mov	r0, r3
 80050c4:	4621      	mov	r1, r4
 80050c6:	f7fb fcc9 	bl	8000a5c <__aeabi_d2f>
 80050ca:	4603      	mov	r3, r0
 80050cc:	61fb      	str	r3, [r7, #28]
 float ang_z = velInfo.angular.z;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80050d4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80050d8:	4618      	mov	r0, r3
 80050da:	4621      	mov	r1, r4
 80050dc:	f7fb fcbe 	bl	8000a5c <__aeabi_d2f>
 80050e0:	4603      	mov	r3, r0
 80050e2:	61bb      	str	r3, [r7, #24]



 float leftWheelSpeed = lin_x - ((_roverBase_width/2)*ang_z); // linear vel
 80050e4:	4b4c      	ldr	r3, [pc, #304]	; (8005218 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x168>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fb fec7 	bl	8000e80 <__aeabi_fdiv>
 80050f2:	4603      	mov	r3, r0
 80050f4:	69b9      	ldr	r1, [r7, #24]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fb fe0e 	bl	8000d18 <__aeabi_fmul>
 80050fc:	4603      	mov	r3, r0
 80050fe:	4619      	mov	r1, r3
 8005100:	69f8      	ldr	r0, [r7, #28]
 8005102:	f7fb fcff 	bl	8000b04 <__aeabi_fsub>
 8005106:	4603      	mov	r3, r0
 8005108:	60fb      	str	r3, [r7, #12]
 float rightWheelSpeed = lin_x + ((_roverBase_width/2)*ang_z);// linear vel
 800510a:	4b43      	ldr	r3, [pc, #268]	; (8005218 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x168>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005112:	4618      	mov	r0, r3
 8005114:	f7fb feb4 	bl	8000e80 <__aeabi_fdiv>
 8005118:	4603      	mov	r3, r0
 800511a:	69b9      	ldr	r1, [r7, #24]
 800511c:	4618      	mov	r0, r3
 800511e:	f7fb fdfb 	bl	8000d18 <__aeabi_fmul>
 8005122:	4603      	mov	r3, r0
 8005124:	69f9      	ldr	r1, [r7, #28]
 8005126:	4618      	mov	r0, r3
 8005128:	f7fb fcee 	bl	8000b08 <__addsf3>
 800512c:	4603      	mov	r3, r0
 800512e:	60bb      	str	r3, [r7, #8]

 int leftRpm_reg_val = ((leftWheelSpeed)/(0.10472*_wheelRadius))/0.23;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4618      	mov	r0, r3
 8005134:	f7fb f978 	bl	8000428 <__aeabi_f2d>
 8005138:	4604      	mov	r4, r0
 800513a:	460d      	mov	r5, r1
 800513c:	4b37      	ldr	r3, [pc, #220]	; (800521c <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x16c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f7fb f971 	bl	8000428 <__aeabi_f2d>
 8005146:	a330      	add	r3, pc, #192	; (adr r3, 8005208 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x158>)
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	f7fb f9c4 	bl	80004d8 <__aeabi_dmul>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4620      	mov	r0, r4
 8005156:	4629      	mov	r1, r5
 8005158:	f7fb fae8 	bl	800072c <__aeabi_ddiv>
 800515c:	4603      	mov	r3, r0
 800515e:	460c      	mov	r4, r1
 8005160:	4618      	mov	r0, r3
 8005162:	4621      	mov	r1, r4
 8005164:	a32a      	add	r3, pc, #168	; (adr r3, 8005210 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x160>)
 8005166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516a:	f7fb fadf 	bl	800072c <__aeabi_ddiv>
 800516e:	4603      	mov	r3, r0
 8005170:	460c      	mov	r4, r1
 8005172:	4618      	mov	r0, r3
 8005174:	4621      	mov	r1, r4
 8005176:	f7fb fc49 	bl	8000a0c <__aeabi_d2iz>
 800517a:	4603      	mov	r3, r0
 800517c:	617b      	str	r3, [r7, #20]
 int righttRpm_reg_val = ((rightWheelSpeed)/(0.10472*_wheelRadius))/0.23;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	4618      	mov	r0, r3
 8005182:	f7fb f951 	bl	8000428 <__aeabi_f2d>
 8005186:	4604      	mov	r4, r0
 8005188:	460d      	mov	r5, r1
 800518a:	4b24      	ldr	r3, [pc, #144]	; (800521c <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x16c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f7fb f94a 	bl	8000428 <__aeabi_f2d>
 8005194:	a31c      	add	r3, pc, #112	; (adr r3, 8005208 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x158>)
 8005196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519a:	f7fb f99d 	bl	80004d8 <__aeabi_dmul>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4620      	mov	r0, r4
 80051a4:	4629      	mov	r1, r5
 80051a6:	f7fb fac1 	bl	800072c <__aeabi_ddiv>
 80051aa:	4603      	mov	r3, r0
 80051ac:	460c      	mov	r4, r1
 80051ae:	4618      	mov	r0, r3
 80051b0:	4621      	mov	r1, r4
 80051b2:	a317      	add	r3, pc, #92	; (adr r3, 8005210 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x160>)
 80051b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b8:	f7fb fab8 	bl	800072c <__aeabi_ddiv>
 80051bc:	4603      	mov	r3, r0
 80051be:	460c      	mov	r4, r1
 80051c0:	4618      	mov	r0, r3
 80051c2:	4621      	mov	r1, r4
 80051c4:	f7fb fc22 	bl	8000a0c <__aeabi_d2iz>
 80051c8:	4603      	mov	r3, r0
 80051ca:	613b      	str	r3, [r7, #16]


 xl430_writeToAddress(2, leftRpm_reg_val, &GOAL_VELOCITY, &REG_WR);
 80051cc:	4b14      	ldr	r3, [pc, #80]	; (8005220 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x170>)
 80051ce:	4a15      	ldr	r2, [pc, #84]	; (8005224 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x174>)
 80051d0:	6979      	ldr	r1, [r7, #20]
 80051d2:	2002      	movs	r0, #2
 80051d4:	f002 f8ba 	bl	800734c <xl430_writeToAddress>
 HAL_Delay(4);
 80051d8:	2004      	movs	r0, #4
 80051da:	f002 fa6f 	bl	80076bc <HAL_Delay>

 xl430_writeToAddress(1, righttRpm_reg_val, &GOAL_VELOCITY, &REG_WR);
 80051de:	4b10      	ldr	r3, [pc, #64]	; (8005220 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x170>)
 80051e0:	4a10      	ldr	r2, [pc, #64]	; (8005224 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x174>)
 80051e2:	6939      	ldr	r1, [r7, #16]
 80051e4:	2001      	movs	r0, #1
 80051e6:	f002 f8b1 	bl	800734c <xl430_writeToAddress>
 HAL_Delay(4);
 80051ea:	2004      	movs	r0, #4
 80051ec:	f002 fa66 	bl	80076bc <HAL_Delay>

 xl430_Action();
 80051f0:	f002 f94c 	bl	800748c <xl430_Action>
 HAL_Delay(4);
 80051f4:	2004      	movs	r0, #4
 80051f6:	f002 fa61 	bl	80076bc <HAL_Delay>


}
 80051fa:	bf00      	nop
 80051fc:	3720      	adds	r7, #32
 80051fe:	46bd      	mov	sp, r7
 8005200:	bdb0      	pop	{r4, r5, r7, pc}
 8005202:	bf00      	nop
 8005204:	f3af 8000 	nop.w
 8005208:	0f3cb3e5 	.word	0x0f3cb3e5
 800520c:	3fbaceee 	.word	0x3fbaceee
 8005210:	d70a3d71 	.word	0xd70a3d71
 8005214:	3fcd70a3 	.word	0x3fcd70a3
 8005218:	20000028 	.word	0x20000028
 800521c:	2000002c 	.word	0x2000002c
 8005220:	0800ebf4 	.word	0x0800ebf4
 8005224:	0800ebf8 	.word	0x0800ebf8

08005228 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8005230:	4805      	ldr	r0, [pc, #20]	; (8005248 <HAL_UART_RxCpltCallback+0x20>)
 8005232:	f000 fcdf 	bl	8005bf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8005236:	4603      	mov	r3, r0
 8005238:	4618      	mov	r0, r3
 800523a:	f7fd f946 	bl	80024ca <_ZN13STM32Hardware10reset_rbufEv>
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	2000018c 	.word	0x2000018c

0800524c <setup>:

void setup(void)
{
 800524c:	b590      	push	{r4, r7, lr}
 800524e:	b085      	sub	sp, #20
 8005250:	af02      	add	r7, sp, #8
	nh.initNode();
 8005252:	4857      	ldr	r0, [pc, #348]	; (80053b0 <setup+0x164>)
 8005254:	f000 fcd9 	bl	8005c0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	while(!nh.connected())
 8005258:	4855      	ldr	r0, [pc, #340]	; (80053b0 <setup+0x164>)
 800525a:	f000 fcf3 	bl	8005c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 800525e:	4603      	mov	r3, r0
 8005260:	f083 0301 	eor.w	r3, r3, #1
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <setup+0x26>
	 {
	   nh.spinOnce();
 800526a:	4851      	ldr	r0, [pc, #324]	; (80053b0 <setup+0x164>)
 800526c:	f000 fcf6 	bl	8005c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	while(!nh.connected())
 8005270:	e7f2      	b.n	8005258 <setup+0xc>
	 }
	 nh.loginfo("stm32 Connected");
 8005272:	4950      	ldr	r1, [pc, #320]	; (80053b4 <setup+0x168>)
 8005274:	484e      	ldr	r0, [pc, #312]	; (80053b0 <setup+0x164>)
 8005276:	f000 fecd 	bl	8006014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>

	 nh.loginfo("pinging ID 02..");
 800527a:	494f      	ldr	r1, [pc, #316]	; (80053b8 <setup+0x16c>)
 800527c:	484c      	ldr	r0, [pc, #304]	; (80053b0 <setup+0x164>)
 800527e:	f000 fec9 	bl	8006014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
	 while(!xl430_ping(02))
 8005282:	2002      	movs	r0, #2
 8005284:	f002 f822 	bl	80072cc <xl430_ping>
 8005288:	4603      	mov	r3, r0
 800528a:	f083 0301 	eor.w	r3, r3, #1
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d007      	beq.n	80052a4 <setup+0x58>
	  {
	    nh.loginfo("[ID 02] ping Fails");
 8005294:	4949      	ldr	r1, [pc, #292]	; (80053bc <setup+0x170>)
 8005296:	4846      	ldr	r0, [pc, #280]	; (80053b0 <setup+0x164>)
 8005298:	f000 febc 	bl	8006014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
	    HAL_Delay(5);
 800529c:	2005      	movs	r0, #5
 800529e:	f002 fa0d 	bl	80076bc <HAL_Delay>
	 while(!xl430_ping(02))
 80052a2:	e7ee      	b.n	8005282 <setup+0x36>
	  }
	 nh.loginfo("[ID 02] ping Success !");
 80052a4:	4946      	ldr	r1, [pc, #280]	; (80053c0 <setup+0x174>)
 80052a6:	4842      	ldr	r0, [pc, #264]	; (80053b0 <setup+0x164>)
 80052a8:	f000 feb4 	bl	8006014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
	   HAL_Delay(5);
 80052ac:	2005      	movs	r0, #5
 80052ae:	f002 fa05 	bl	80076bc <HAL_Delay>
	nh.loginfo("pinging ID 01..");
 80052b2:	4944      	ldr	r1, [pc, #272]	; (80053c4 <setup+0x178>)
 80052b4:	483e      	ldr	r0, [pc, #248]	; (80053b0 <setup+0x164>)
 80052b6:	f000 fead 	bl	8006014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
	 while(!xl430_ping(01))
 80052ba:	2001      	movs	r0, #1
 80052bc:	f002 f806 	bl	80072cc <xl430_ping>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f083 0301 	eor.w	r3, r3, #1
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d007      	beq.n	80052dc <setup+0x90>
	  {
	   nh.loginfo("[ID 01] ping Fails");
 80052cc:	493e      	ldr	r1, [pc, #248]	; (80053c8 <setup+0x17c>)
 80052ce:	4838      	ldr	r0, [pc, #224]	; (80053b0 <setup+0x164>)
 80052d0:	f000 fea0 	bl	8006014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
	    HAL_Delay(5);
 80052d4:	2005      	movs	r0, #5
 80052d6:	f002 f9f1 	bl	80076bc <HAL_Delay>
	 while(!xl430_ping(01))
 80052da:	e7ee      	b.n	80052ba <setup+0x6e>
	  }
	nh.loginfo("[ID 01] ping Success !");
 80052dc:	493b      	ldr	r1, [pc, #236]	; (80053cc <setup+0x180>)
 80052de:	4834      	ldr	r0, [pc, #208]	; (80053b0 <setup+0x164>)
 80052e0:	f000 fe98 	bl	8006014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>

	 while(! nh.advertise(imu))
 80052e4:	493a      	ldr	r1, [pc, #232]	; (80053d0 <setup+0x184>)
 80052e6:	4832      	ldr	r0, [pc, #200]	; (80053b0 <setup+0x164>)
 80052e8:	f000 fb91 	bl	8005a0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f083 0301 	eor.w	r3, r3, #1
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <setup+0xb4>
	{
		nh.spinOnce();
 80052f8:	482d      	ldr	r0, [pc, #180]	; (80053b0 <setup+0x164>)
 80052fa:	f000 fcaf 	bl	8005c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	 while(! nh.advertise(imu))
 80052fe:	e7f1      	b.n	80052e4 <setup+0x98>
	}
	 odom_broadcaster.init(nh);
 8005300:	492b      	ldr	r1, [pc, #172]	; (80053b0 <setup+0x164>)
 8005302:	4834      	ldr	r0, [pc, #208]	; (80053d4 <setup+0x188>)
 8005304:	f7ff f834 	bl	8004370 <_ZN2tf20TransformBroadcaster4initERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEE>
	 nh.subscribe(_sub);
 8005308:	4933      	ldr	r1, [pc, #204]	; (80053d8 <setup+0x18c>)
 800530a:	4829      	ldr	r0, [pc, #164]	; (80053b0 <setup+0x164>)
 800530c:	f000 fe90 	bl	8006030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
	 nh.negotiateTopics();
 8005310:	4827      	ldr	r0, [pc, #156]	; (80053b0 <setup+0x164>)
 8005312:	f000 feb7 	bl	8006084 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>


	 if(!nh.getParam("base_width", &_roverBase_width))
 8005316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	2301      	movs	r3, #1
 800531e:	4a2f      	ldr	r2, [pc, #188]	; (80053dc <setup+0x190>)
 8005320:	492f      	ldr	r1, [pc, #188]	; (80053e0 <setup+0x194>)
 8005322:	4823      	ldr	r0, [pc, #140]	; (80053b0 <setup+0x164>)
 8005324:	f000 ff8e 	bl	8006244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii>
 8005328:	4603      	mov	r3, r0
 800532a:	f083 0301 	eor.w	r3, r3, #1
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <setup+0xee>
	 {
		 _roverBase_width=0.2;
 8005334:	4b29      	ldr	r3, [pc, #164]	; (80053dc <setup+0x190>)
 8005336:	4a2b      	ldr	r2, [pc, #172]	; (80053e4 <setup+0x198>)
 8005338:	601a      	str	r2, [r3, #0]

	 }
	 if(!nh.getParam("wheel_radius",&_wheelRadius))
 800533a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	2301      	movs	r3, #1
 8005342:	4a29      	ldr	r2, [pc, #164]	; (80053e8 <setup+0x19c>)
 8005344:	4929      	ldr	r1, [pc, #164]	; (80053ec <setup+0x1a0>)
 8005346:	481a      	ldr	r0, [pc, #104]	; (80053b0 <setup+0x164>)
 8005348:	f000 ff7c 	bl	8006244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii>
 800534c:	4603      	mov	r3, r0
 800534e:	f083 0301 	eor.w	r3, r3, #1
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <setup+0x112>
	 {
		 _wheelRadius = 0.06;
 8005358:	4b23      	ldr	r3, [pc, #140]	; (80053e8 <setup+0x19c>)
 800535a:	4a25      	ldr	r2, [pc, #148]	; (80053f0 <setup+0x1a4>)
 800535c:	601a      	str	r2, [r3, #0]
	 }
	 xl430_writeToAddress(0xFE, 1, &TORQUE_ENABLE,&WRITE);
 800535e:	4b25      	ldr	r3, [pc, #148]	; (80053f4 <setup+0x1a8>)
 8005360:	4a25      	ldr	r2, [pc, #148]	; (80053f8 <setup+0x1ac>)
 8005362:	2101      	movs	r1, #1
 8005364:	20fe      	movs	r0, #254	; 0xfe
 8005366:	f001 fff1 	bl	800734c <xl430_writeToAddress>



	  bno055_assignI2C(&hi2c1);
 800536a:	4824      	ldr	r0, [pc, #144]	; (80053fc <setup+0x1b0>)
 800536c:	f7ff fd60 	bl	8004e30 <bno055_assignI2C>
	  bno055_setup();
 8005370:	f7fb fe62 	bl	8001038 <bno055_setup>
	  bno055_setOperationModeNDOF();
 8005374:	f7fb fe4d 	bl	8001012 <bno055_setOperationModeNDOF>

     //update the time parameters
	 current_time= nh.now();
 8005378:	4c21      	ldr	r4, [pc, #132]	; (8005400 <setup+0x1b4>)
 800537a:	463b      	mov	r3, r7
 800537c:	490c      	ldr	r1, [pc, #48]	; (80053b0 <setup+0x164>)
 800537e:	4618      	mov	r0, r3
 8005380:	f000 ff98 	bl	80062b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 8005384:	4622      	mov	r2, r4
 8005386:	463b      	mov	r3, r7
 8005388:	e893 0003 	ldmia.w	r3, {r0, r1}
 800538c:	e882 0003 	stmia.w	r2, {r0, r1}
	 last_time = nh.now();
 8005390:	4c1c      	ldr	r4, [pc, #112]	; (8005404 <setup+0x1b8>)
 8005392:	463b      	mov	r3, r7
 8005394:	4906      	ldr	r1, [pc, #24]	; (80053b0 <setup+0x164>)
 8005396:	4618      	mov	r0, r3
 8005398:	f000 ff8c 	bl	80062b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 800539c:	4622      	mov	r2, r4
 800539e:	463b      	mov	r3, r7
 80053a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80053a4:	e882 0003 	stmia.w	r2, {r0, r1}

}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd90      	pop	{r4, r7, pc}
 80053b0:	2000018c 	.word	0x2000018c
 80053b4:	0800e868 	.word	0x0800e868
 80053b8:	0800e878 	.word	0x0800e878
 80053bc:	0800e888 	.word	0x0800e888
 80053c0:	0800e89c 	.word	0x0800e89c
 80053c4:	0800e8b4 	.word	0x0800e8b4
 80053c8:	0800e8c4 	.word	0x0800e8c4
 80053cc:	0800e8d8 	.word	0x0800e8d8
 80053d0:	20000c40 	.word	0x20000c40
 80053d4:	20000d00 	.word	0x20000d00
 80053d8:	20000c58 	.word	0x20000c58
 80053dc:	20000028 	.word	0x20000028
 80053e0:	0800e8f0 	.word	0x0800e8f0
 80053e4:	3e4ccccd 	.word	0x3e4ccccd
 80053e8:	2000002c 	.word	0x2000002c
 80053ec:	0800e8fc 	.word	0x0800e8fc
 80053f0:	3d75c28f 	.word	0x3d75c28f
 80053f4:	0800ebf3 	.word	0x0800ebf3
 80053f8:	0800ebf6 	.word	0x0800ebf6
 80053fc:	20000e6c 	.word	0x20000e6c
 8005400:	20000cf0 	.word	0x20000cf0
 8005404:	20000cf8 	.word	0x20000cf8

08005408 <_ZN3ros3MsgaSERKS0_>:
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4618      	mov	r0, r3
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr

0800541e <_ZN13geometry_msgs10QuaternionaSERKS0_>:
  class Quaternion : public ros::Msg
 800541e:	b590      	push	{r4, r7, lr}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	4611      	mov	r1, r2
 800542e:	4618      	mov	r0, r3
 8005430:	f7ff ffea 	bl	8005408 <_ZN3ros3MsgaSERKS0_>
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	f103 0408 	add.w	r4, r3, #8
 800543a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	f103 0410 	add.w	r4, r3, #16
 800544a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	f103 0418 	add.w	r4, r3, #24
 800545a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	f103 0420 	add.w	r4, r3, #32
 800546a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	bd90      	pop	{r4, r7, pc}
	...

08005480 <setup_dummy>:
	  }
}*/


void setup_dummy(void)
{
 8005480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005482:	b0bb      	sub	sp, #236	; 0xec
 8005484:	af00      	add	r7, sp, #0
	last_time = current_time;
 8005486:	4bba      	ldr	r3, [pc, #744]	; (8005770 <setup_dummy+0x2f0>)
 8005488:	4aba      	ldr	r2, [pc, #744]	; (8005774 <setup_dummy+0x2f4>)
 800548a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800548e:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8005492:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005496:	48b8      	ldr	r0, [pc, #736]	; (8005778 <setup_dummy+0x2f8>)
 8005498:	f002 fe2e 	bl	80080f8 <HAL_GPIO_TogglePin>
	HAL_Delay(5);
 800549c:	2005      	movs	r0, #5
 800549e:	f002 f90d 	bl	80076bc <HAL_Delay>
	xl430_syncRead(&PRESENT_VELOCITY, servo_ID,uint8_t(2));
 80054a2:	2202      	movs	r2, #2
 80054a4:	49b5      	ldr	r1, [pc, #724]	; (800577c <setup_dummy+0x2fc>)
 80054a6:	48b6      	ldr	r0, [pc, #728]	; (8005780 <setup_dummy+0x300>)
 80054a8:	f002 f814 	bl	80074d4 <xl430_syncRead>
	HAL_Delay(5);
 80054ac:	2005      	movs	r0, #5
 80054ae:	f002 f905 	bl	80076bc <HAL_Delay>

	xl430_readBroadcastBuffer(2, __speedData);
 80054b2:	49b4      	ldr	r1, [pc, #720]	; (8005784 <setup_dummy+0x304>)
 80054b4:	2002      	movs	r0, #2
 80054b6:	f001 fdd3 	bl	8007060 <xl430_readBroadcastBuffer>
	HAL_Delay(25);
 80054ba:	2019      	movs	r0, #25
 80054bc:	f002 f8fe 	bl	80076bc <HAL_Delay>

	// validate the speed data and update
	if(__speedData[0].crc_check && __speedData[1].crc_check)
 80054c0:	4bb0      	ldr	r3, [pc, #704]	; (8005784 <setup_dummy+0x304>)
 80054c2:	7b1b      	ldrb	r3, [r3, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00b      	beq.n	80054e0 <setup_dummy+0x60>
 80054c8:	4bae      	ldr	r3, [pc, #696]	; (8005784 <setup_dummy+0x304>)
 80054ca:	7f1b      	ldrb	r3, [r3, #28]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d007      	beq.n	80054e0 <setup_dummy+0x60>
	{
		leftSpeed_regval = __speedData[0].data;
 80054d0:	4bac      	ldr	r3, [pc, #688]	; (8005784 <setup_dummy+0x304>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	4aac      	ldr	r2, [pc, #688]	; (8005788 <setup_dummy+0x308>)
 80054d6:	6013      	str	r3, [r2, #0]
		rightSpeed_regval = __speedData[1].data;
 80054d8:	4baa      	ldr	r3, [pc, #680]	; (8005784 <setup_dummy+0x304>)
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	4aab      	ldr	r2, [pc, #684]	; (800578c <setup_dummy+0x30c>)
 80054de:	6013      	str	r3, [r2, #0]
	}

	// ----Beginning of the calculation and relative position update-----
	float l_wheelSpeed_ = ((leftSpeed_regval * 0.23) / 60)
 80054e0:	4ba9      	ldr	r3, [pc, #676]	; (8005788 <setup_dummy+0x308>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fa ff8d 	bl	8000404 <__aeabi_i2d>
 80054ea:	a39d      	add	r3, pc, #628	; (adr r3, 8005760 <setup_dummy+0x2e0>)
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	f7fa fff2 	bl	80004d8 <__aeabi_dmul>
 80054f4:	4603      	mov	r3, r0
 80054f6:	460c      	mov	r4, r1
 80054f8:	4618      	mov	r0, r3
 80054fa:	4621      	mov	r1, r4
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	4ba3      	ldr	r3, [pc, #652]	; (8005790 <setup_dummy+0x310>)
 8005502:	f7fb f913 	bl	800072c <__aeabi_ddiv>
 8005506:	4603      	mov	r3, r0
 8005508:	460c      	mov	r4, r1
 800550a:	4625      	mov	r5, r4
 800550c:	461c      	mov	r4, r3
			* (_wheelRadius * 6.2831);
 800550e:	4ba1      	ldr	r3, [pc, #644]	; (8005794 <setup_dummy+0x314>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f7fa ff88 	bl	8000428 <__aeabi_f2d>
 8005518:	a393      	add	r3, pc, #588	; (adr r3, 8005768 <setup_dummy+0x2e8>)
 800551a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551e:	f7fa ffdb 	bl	80004d8 <__aeabi_dmul>
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	4620      	mov	r0, r4
 8005528:	4629      	mov	r1, r5
 800552a:	f7fa ffd5 	bl	80004d8 <__aeabi_dmul>
 800552e:	4603      	mov	r3, r0
 8005530:	460c      	mov	r4, r1
	float l_wheelSpeed_ = ((leftSpeed_regval * 0.23) / 60)
 8005532:	4618      	mov	r0, r3
 8005534:	4621      	mov	r1, r4
 8005536:	f7fb fa91 	bl	8000a5c <__aeabi_d2f>
 800553a:	4603      	mov	r3, r0
 800553c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	float r_wheelSpeed_ = ((rightSpeed_regval * 0.23) / 60)
 8005540:	4b92      	ldr	r3, [pc, #584]	; (800578c <setup_dummy+0x30c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4618      	mov	r0, r3
 8005546:	f7fa ff5d 	bl	8000404 <__aeabi_i2d>
 800554a:	a385      	add	r3, pc, #532	; (adr r3, 8005760 <setup_dummy+0x2e0>)
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	f7fa ffc2 	bl	80004d8 <__aeabi_dmul>
 8005554:	4603      	mov	r3, r0
 8005556:	460c      	mov	r4, r1
 8005558:	4618      	mov	r0, r3
 800555a:	4621      	mov	r1, r4
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	4b8b      	ldr	r3, [pc, #556]	; (8005790 <setup_dummy+0x310>)
 8005562:	f7fb f8e3 	bl	800072c <__aeabi_ddiv>
 8005566:	4603      	mov	r3, r0
 8005568:	460c      	mov	r4, r1
 800556a:	4625      	mov	r5, r4
 800556c:	461c      	mov	r4, r3
			* (_wheelRadius * 6.2831);
 800556e:	4b89      	ldr	r3, [pc, #548]	; (8005794 <setup_dummy+0x314>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f7fa ff58 	bl	8000428 <__aeabi_f2d>
 8005578:	a37b      	add	r3, pc, #492	; (adr r3, 8005768 <setup_dummy+0x2e8>)
 800557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557e:	f7fa ffab 	bl	80004d8 <__aeabi_dmul>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4620      	mov	r0, r4
 8005588:	4629      	mov	r1, r5
 800558a:	f7fa ffa5 	bl	80004d8 <__aeabi_dmul>
 800558e:	4603      	mov	r3, r0
 8005590:	460c      	mov	r4, r1
	float r_wheelSpeed_ = ((rightSpeed_regval * 0.23) / 60)
 8005592:	4618      	mov	r0, r3
 8005594:	4621      	mov	r1, r4
 8005596:	f7fb fa61 	bl	8000a5c <__aeabi_d2f>
 800559a:	4603      	mov	r3, r0
 800559c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	vth = (r_wheelSpeed_ - l_wheelSpeed_) / _roverBase_width;
 80055a0:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80055a4:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80055a8:	f7fb faac 	bl	8000b04 <__aeabi_fsub>
 80055ac:	4603      	mov	r3, r0
 80055ae:	461a      	mov	r2, r3
 80055b0:	4b79      	ldr	r3, [pc, #484]	; (8005798 <setup_dummy+0x318>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4619      	mov	r1, r3
 80055b6:	4610      	mov	r0, r2
 80055b8:	f7fb fc62 	bl	8000e80 <__aeabi_fdiv>
 80055bc:	4603      	mov	r3, r0
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fa ff32 	bl	8000428 <__aeabi_f2d>
 80055c4:	4603      	mov	r3, r0
 80055c6:	460c      	mov	r4, r1
 80055c8:	4a74      	ldr	r2, [pc, #464]	; (800579c <setup_dummy+0x31c>)
 80055ca:	e9c2 3400 	strd	r3, r4, [r2]
	vx = (l_wheelSpeed_ + r_wheelSpeed_) / 2;
 80055ce:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80055d2:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80055d6:	f7fb fa97 	bl	8000b08 <__addsf3>
 80055da:	4603      	mov	r3, r0
 80055dc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fb fc4d 	bl	8000e80 <__aeabi_fdiv>
 80055e6:	4603      	mov	r3, r0
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fa ff1d 	bl	8000428 <__aeabi_f2d>
 80055ee:	4603      	mov	r3, r0
 80055f0:	460c      	mov	r4, r1
 80055f2:	4a6b      	ldr	r2, [pc, #428]	; (80057a0 <setup_dummy+0x320>)
 80055f4:	e9c2 3400 	strd	r3, r4, [r2]

	current_time = nh.now();
 80055f8:	4c5e      	ldr	r4, [pc, #376]	; (8005774 <setup_dummy+0x2f4>)
 80055fa:	f107 0320 	add.w	r3, r7, #32
 80055fe:	4969      	ldr	r1, [pc, #420]	; (80057a4 <setup_dummy+0x324>)
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fe57 	bl	80062b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 8005606:	4622      	mov	r2, r4
 8005608:	f107 0320 	add.w	r3, r7, #32
 800560c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005610:	e882 0003 	stmia.w	r2, {r0, r1}

	double dt = (current_time.toSec() - last_time.toSec()); // time difference
 8005614:	4857      	ldr	r0, [pc, #348]	; (8005774 <setup_dummy+0x2f4>)
 8005616:	f7fc f807 	bl	8001628 <_ZNK3ros4Time5toSecEv>
 800561a:	4604      	mov	r4, r0
 800561c:	460d      	mov	r5, r1
 800561e:	4854      	ldr	r0, [pc, #336]	; (8005770 <setup_dummy+0x2f0>)
 8005620:	f7fc f802 	bl	8001628 <_ZNK3ros4Time5toSecEv>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4620      	mov	r0, r4
 800562a:	4629      	mov	r1, r5
 800562c:	f7fa fd9c 	bl	8000168 <__aeabi_dsub>
 8005630:	4603      	mov	r3, r0
 8005632:	460c      	mov	r4, r1
 8005634:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	double delta_x = (vx * cos(th) - vy * sin(th)) * dt;  	//x distance
 8005638:	4b5b      	ldr	r3, [pc, #364]	; (80057a8 <setup_dummy+0x328>)
 800563a:	cb18      	ldmia	r3, {r3, r4}
 800563c:	4618      	mov	r0, r3
 800563e:	4621      	mov	r1, r4
 8005640:	f006 fe52 	bl	800c2e8 <cos>
 8005644:	4b56      	ldr	r3, [pc, #344]	; (80057a0 <setup_dummy+0x320>)
 8005646:	cb18      	ldmia	r3, {r3, r4}
 8005648:	461a      	mov	r2, r3
 800564a:	4623      	mov	r3, r4
 800564c:	f7fa ff44 	bl	80004d8 <__aeabi_dmul>
 8005650:	4603      	mov	r3, r0
 8005652:	460c      	mov	r4, r1
 8005654:	461d      	mov	r5, r3
 8005656:	4626      	mov	r6, r4
 8005658:	4b53      	ldr	r3, [pc, #332]	; (80057a8 <setup_dummy+0x328>)
 800565a:	cb18      	ldmia	r3, {r3, r4}
 800565c:	4618      	mov	r0, r3
 800565e:	4621      	mov	r1, r4
 8005660:	f006 fe78 	bl	800c354 <sin>
 8005664:	4b51      	ldr	r3, [pc, #324]	; (80057ac <setup_dummy+0x32c>)
 8005666:	cb18      	ldmia	r3, {r3, r4}
 8005668:	461a      	mov	r2, r3
 800566a:	4623      	mov	r3, r4
 800566c:	f7fa ff34 	bl	80004d8 <__aeabi_dmul>
 8005670:	4603      	mov	r3, r0
 8005672:	460c      	mov	r4, r1
 8005674:	461a      	mov	r2, r3
 8005676:	4623      	mov	r3, r4
 8005678:	4628      	mov	r0, r5
 800567a:	4631      	mov	r1, r6
 800567c:	f7fa fd74 	bl	8000168 <__aeabi_dsub>
 8005680:	4603      	mov	r3, r0
 8005682:	460c      	mov	r4, r1
 8005684:	461a      	mov	r2, r3
 8005686:	4623      	mov	r3, r4
 8005688:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800568c:	f7fa ff24 	bl	80004d8 <__aeabi_dmul>
 8005690:	4603      	mov	r3, r0
 8005692:	460c      	mov	r4, r1
 8005694:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	double delta_y = (vx * sin(th) + vy * cos(th)) * dt;  	//y distance
 8005698:	4b43      	ldr	r3, [pc, #268]	; (80057a8 <setup_dummy+0x328>)
 800569a:	cb18      	ldmia	r3, {r3, r4}
 800569c:	4618      	mov	r0, r3
 800569e:	4621      	mov	r1, r4
 80056a0:	f006 fe58 	bl	800c354 <sin>
 80056a4:	4b3e      	ldr	r3, [pc, #248]	; (80057a0 <setup_dummy+0x320>)
 80056a6:	cb18      	ldmia	r3, {r3, r4}
 80056a8:	461a      	mov	r2, r3
 80056aa:	4623      	mov	r3, r4
 80056ac:	f7fa ff14 	bl	80004d8 <__aeabi_dmul>
 80056b0:	4603      	mov	r3, r0
 80056b2:	460c      	mov	r4, r1
 80056b4:	461d      	mov	r5, r3
 80056b6:	4626      	mov	r6, r4
 80056b8:	4b3b      	ldr	r3, [pc, #236]	; (80057a8 <setup_dummy+0x328>)
 80056ba:	cb18      	ldmia	r3, {r3, r4}
 80056bc:	4618      	mov	r0, r3
 80056be:	4621      	mov	r1, r4
 80056c0:	f006 fe12 	bl	800c2e8 <cos>
 80056c4:	4b39      	ldr	r3, [pc, #228]	; (80057ac <setup_dummy+0x32c>)
 80056c6:	cb18      	ldmia	r3, {r3, r4}
 80056c8:	461a      	mov	r2, r3
 80056ca:	4623      	mov	r3, r4
 80056cc:	f7fa ff04 	bl	80004d8 <__aeabi_dmul>
 80056d0:	4603      	mov	r3, r0
 80056d2:	460c      	mov	r4, r1
 80056d4:	461a      	mov	r2, r3
 80056d6:	4623      	mov	r3, r4
 80056d8:	4628      	mov	r0, r5
 80056da:	4631      	mov	r1, r6
 80056dc:	f7fa fd46 	bl	800016c <__adddf3>
 80056e0:	4603      	mov	r3, r0
 80056e2:	460c      	mov	r4, r1
 80056e4:	461a      	mov	r2, r3
 80056e6:	4623      	mov	r3, r4
 80056e8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80056ec:	f7fa fef4 	bl	80004d8 <__aeabi_dmul>
 80056f0:	4603      	mov	r3, r0
 80056f2:	460c      	mov	r4, r1
 80056f4:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	double delta_th = vth * dt;                           	//Angular distance
 80056f8:	4b28      	ldr	r3, [pc, #160]	; (800579c <setup_dummy+0x31c>)
 80056fa:	cb18      	ldmia	r3, {r3, r4}
 80056fc:	461a      	mov	r2, r3
 80056fe:	4623      	mov	r3, r4
 8005700:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005704:	f7fa fee8 	bl	80004d8 <__aeabi_dmul>
 8005708:	4603      	mov	r3, r0
 800570a:	460c      	mov	r4, r1
 800570c:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0

	x += delta_x;
 8005710:	4b27      	ldr	r3, [pc, #156]	; (80057b0 <setup_dummy+0x330>)
 8005712:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005716:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800571a:	f7fa fd27 	bl	800016c <__adddf3>
 800571e:	4603      	mov	r3, r0
 8005720:	460c      	mov	r4, r1
 8005722:	4a23      	ldr	r2, [pc, #140]	; (80057b0 <setup_dummy+0x330>)
 8005724:	e9c2 3400 	strd	r3, r4, [r2]
	y += delta_y;
 8005728:	4b22      	ldr	r3, [pc, #136]	; (80057b4 <setup_dummy+0x334>)
 800572a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800572e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8005732:	f7fa fd1b 	bl	800016c <__adddf3>
 8005736:	4603      	mov	r3, r0
 8005738:	460c      	mov	r4, r1
 800573a:	4a1e      	ldr	r2, [pc, #120]	; (80057b4 <setup_dummy+0x334>)
 800573c:	e9c2 3400 	strd	r3, r4, [r2]
	th += delta_th;
 8005740:	4b19      	ldr	r3, [pc, #100]	; (80057a8 <setup_dummy+0x328>)
 8005742:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005746:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800574a:	f7fa fd0f 	bl	800016c <__adddf3>
 800574e:	4603      	mov	r3, r0
 8005750:	460c      	mov	r4, r1
 8005752:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <setup_dummy+0x328>)
 8005754:	e9c2 3400 	strd	r3, r4, [r2]
 8005758:	e02e      	b.n	80057b8 <setup_dummy+0x338>
 800575a:	bf00      	nop
 800575c:	f3af 8000 	nop.w
 8005760:	d70a3d71 	.word	0xd70a3d71
 8005764:	3fcd70a3 	.word	0x3fcd70a3
 8005768:	f765fd8b 	.word	0xf765fd8b
 800576c:	401921e4 	.word	0x401921e4
 8005770:	20000cf8 	.word	0x20000cf8
 8005774:	20000cf0 	.word	0x20000cf0
 8005778:	40011000 	.word	0x40011000
 800577c:	0800ebf0 	.word	0x0800ebf0
 8005780:	0800ebfa 	.word	0x0800ebfa
 8005784:	20000ac8 	.word	0x20000ac8
 8005788:	20000cb8 	.word	0x20000cb8
 800578c:	20000cbc 	.word	0x20000cbc
 8005790:	404e0000 	.word	0x404e0000
 8005794:	2000002c 	.word	0x2000002c
 8005798:	20000028 	.word	0x20000028
 800579c:	20000ce8 	.word	0x20000ce8
 80057a0:	20000cd8 	.word	0x20000cd8
 80057a4:	2000018c 	.word	0x2000018c
 80057a8:	20000cd0 	.word	0x20000cd0
 80057ac:	20000ce0 	.word	0x20000ce0
 80057b0:	20000cc0 	.word	0x20000cc0
 80057b4:	20000cc8 	.word	0x20000cc8
	// ----End of the calculation and relative position update-----

	//since all odometry is 6DOF we'll need a quaternion created from yaw
	geometry_msgs::Quaternion odom_quat = tf::createQuaternionFromYaw(th);
 80057b8:	4b66      	ldr	r3, [pc, #408]	; (8005954 <setup_dummy+0x4d4>)
 80057ba:	cb18      	ldmia	r3, {r3, r4}
 80057bc:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80057c0:	461a      	mov	r2, r3
 80057c2:	4623      	mov	r3, r4
 80057c4:	4608      	mov	r0, r1
 80057c6:	f7fe fdf9 	bl	80043bc <_ZN2tfL23createQuaternionFromYawEd>

	//first, we'll publish the transform over tf
	geometry_msgs::TransformStamped odom_trans;
 80057ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fe fbe6 	bl	8003fa0 <_ZN13geometry_msgs16TransformStampedC1Ev>
	odom_trans.header.stamp = nh.now();
 80057d4:	f107 0320 	add.w	r3, r7, #32
 80057d8:	495f      	ldr	r1, [pc, #380]	; (8005958 <setup_dummy+0x4d8>)
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fd6a 	bl	80062b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 80057e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80057e4:	f107 0220 	add.w	r2, r7, #32
 80057e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057ec:	e883 0003 	stmia.w	r3, {r0, r1}
	odom_trans.header.frame_id = odom;
 80057f0:	4b5a      	ldr	r3, [pc, #360]	; (800595c <setup_dummy+0x4dc>)
 80057f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	odom_trans.child_frame_id = base_link;
 80057f4:	4b5a      	ldr	r3, [pc, #360]	; (8005960 <setup_dummy+0x4e0>)
 80057f6:	643b      	str	r3, [r7, #64]	; 0x40

	odom_trans.transform.translation.x = x;
 80057f8:	4b5a      	ldr	r3, [pc, #360]	; (8005964 <setup_dummy+0x4e4>)
 80057fa:	cb18      	ldmia	r3, {r3, r4}
 80057fc:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	odom_trans.transform.translation.y = y;
 8005800:	4b59      	ldr	r3, [pc, #356]	; (8005968 <setup_dummy+0x4e8>)
 8005802:	cb18      	ldmia	r3, {r3, r4}
 8005804:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	odom_trans.transform.translation.z = 0.0;
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	f04f 0400 	mov.w	r4, #0
 8005810:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	odom_trans.transform.rotation = odom_quat;
 8005814:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8005818:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800581c:	3348      	adds	r3, #72	; 0x48
 800581e:	4611      	mov	r1, r2
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff fdfc 	bl	800541e <_ZN13geometry_msgs10QuaternionaSERKS0_>

	odom_broadcaster.sendTransform(odom_trans);
 8005826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800582a:	4619      	mov	r1, r3
 800582c:	484f      	ldr	r0, [pc, #316]	; (800596c <setup_dummy+0x4ec>)
 800582e:	f7fe fdae 	bl	800438e <_ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE>


	//imu publishing

	  imu_msg.header.stamp = nh.now();
 8005832:	4c4f      	ldr	r4, [pc, #316]	; (8005970 <setup_dummy+0x4f0>)
 8005834:	f107 0320 	add.w	r3, r7, #32
 8005838:	4947      	ldr	r1, [pc, #284]	; (8005958 <setup_dummy+0x4d8>)
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fd3a 	bl	80062b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 8005840:	f104 030c 	add.w	r3, r4, #12
 8005844:	f107 0220 	add.w	r2, r7, #32
 8005848:	e892 0003 	ldmia.w	r2, {r0, r1}
 800584c:	e883 0003 	stmia.w	r3, {r0, r1}
	  imu_msg.header.frame_id= imu_id;
 8005850:	4b47      	ldr	r3, [pc, #284]	; (8005970 <setup_dummy+0x4f0>)
 8005852:	4a48      	ldr	r2, [pc, #288]	; (8005974 <setup_dummy+0x4f4>)
 8005854:	615a      	str	r2, [r3, #20]

	  v = bno055_getVectorGyroscope();
 8005856:	4c48      	ldr	r4, [pc, #288]	; (8005978 <setup_dummy+0x4f8>)
 8005858:	463b      	mov	r3, r7
 800585a:	4618      	mov	r0, r3
 800585c:	f7fb fd2c 	bl	80012b8 <bno055_getVectorGyroscope>
 8005860:	4625      	mov	r5, r4
 8005862:	463c      	mov	r4, r7
 8005864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005868:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800586c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	  HAL_Delay(5);
 8005870:	2005      	movs	r0, #5
 8005872:	f001 ff23 	bl	80076bc <HAL_Delay>
	  v1 = bno055_getVectorLinearAccel();
 8005876:	4c41      	ldr	r4, [pc, #260]	; (800597c <setup_dummy+0x4fc>)
 8005878:	463b      	mov	r3, r7
 800587a:	4618      	mov	r0, r3
 800587c:	f7fb fd29 	bl	80012d2 <bno055_getVectorLinearAccel>
 8005880:	4625      	mov	r5, r4
 8005882:	463c      	mov	r4, r7
 8005884:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005886:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005888:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800588c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	  imu_msg.angular_velocity.x= v.x;
 8005890:	4b39      	ldr	r3, [pc, #228]	; (8005978 <setup_dummy+0x4f8>)
 8005892:	f103 0408 	add.w	r4, r3, #8
 8005896:	e9d4 3400 	ldrd	r3, r4, [r4]
 800589a:	4a35      	ldr	r2, [pc, #212]	; (8005970 <setup_dummy+0x4f0>)
 800589c:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	  imu_msg.angular_velocity.y= v.y;
 80058a0:	4b35      	ldr	r3, [pc, #212]	; (8005978 <setup_dummy+0x4f8>)
 80058a2:	f103 0410 	add.w	r4, r3, #16
 80058a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80058aa:	4a31      	ldr	r2, [pc, #196]	; (8005970 <setup_dummy+0x4f0>)
 80058ac:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	  imu_msg.angular_velocity.z= v.z;
 80058b0:	4b31      	ldr	r3, [pc, #196]	; (8005978 <setup_dummy+0x4f8>)
 80058b2:	f103 0418 	add.w	r4, r3, #24
 80058b6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80058ba:	4a2d      	ldr	r2, [pc, #180]	; (8005970 <setup_dummy+0x4f0>)
 80058bc:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

	  v1 = bno055_getVectorLinearAccel();
 80058c0:	4c2e      	ldr	r4, [pc, #184]	; (800597c <setup_dummy+0x4fc>)
 80058c2:	463b      	mov	r3, r7
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fb fd04 	bl	80012d2 <bno055_getVectorLinearAccel>
 80058ca:	4625      	mov	r5, r4
 80058cc:	463c      	mov	r4, r7
 80058ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80058d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	  imu_msg.linear_acceleration.x= v1.x;
 80058da:	4b28      	ldr	r3, [pc, #160]	; (800597c <setup_dummy+0x4fc>)
 80058dc:	f103 0408 	add.w	r4, r3, #8
 80058e0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80058e4:	4a22      	ldr	r2, [pc, #136]	; (8005970 <setup_dummy+0x4f0>)
 80058e6:	e9c2 343e 	strd	r3, r4, [r2, #248]	; 0xf8
	  imu_msg.linear_acceleration.y= v1.y;
 80058ea:	4b24      	ldr	r3, [pc, #144]	; (800597c <setup_dummy+0x4fc>)
 80058ec:	f103 0410 	add.w	r4, r3, #16
 80058f0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80058f4:	4a1e      	ldr	r2, [pc, #120]	; (8005970 <setup_dummy+0x4f0>)
 80058f6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80058fa:	e9c2 3400 	strd	r3, r4, [r2]
	  imu_msg.linear_acceleration.z= v1.z;
 80058fe:	4b1f      	ldr	r3, [pc, #124]	; (800597c <setup_dummy+0x4fc>)
 8005900:	f103 0418 	add.w	r4, r3, #24
 8005904:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005908:	4a19      	ldr	r2, [pc, #100]	; (8005970 <setup_dummy+0x4f0>)
 800590a:	f502 7284 	add.w	r2, r2, #264	; 0x108
 800590e:	e9c2 3400 	strd	r3, r4, [r2]
	{
		sprintf(log_msg+3*i," %02X",_rxData.data[i]);
	}
	nh.loginfo(log_msg);*/

	imu.publish( &imu_msg );
 8005912:	4917      	ldr	r1, [pc, #92]	; (8005970 <setup_dummy+0x4f0>)
 8005914:	481a      	ldr	r0, [pc, #104]	; (8005980 <setup_dummy+0x500>)
 8005916:	f7fc fd81 	bl	800241c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	nh.spinOnce();
 800591a:	480f      	ldr	r0, [pc, #60]	; (8005958 <setup_dummy+0x4d8>)
 800591c:	f000 f99e 	bl	8005c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	if(!nh.connected())
 8005920:	480d      	ldr	r0, [pc, #52]	; (8005958 <setup_dummy+0x4d8>)
 8005922:	f000 f98f 	bl	8005c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8005926:	4603      	mov	r3, r0
 8005928:	f083 0301 	eor.w	r3, r3, #1
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d008      	beq.n	8005944 <setup_dummy+0x4c4>
	{
		HAL_Delay(5);
 8005932:	2005      	movs	r0, #5
 8005934:	f001 fec2 	bl	80076bc <HAL_Delay>
		xl430_writeToAddress(0xFE, 0, &TORQUE_ENABLE,&WRITE);
 8005938:	4b12      	ldr	r3, [pc, #72]	; (8005984 <setup_dummy+0x504>)
 800593a:	4a13      	ldr	r2, [pc, #76]	; (8005988 <setup_dummy+0x508>)
 800593c:	2100      	movs	r1, #0
 800593e:	20fe      	movs	r0, #254	; 0xfe
 8005940:	f001 fd04 	bl	800734c <xl430_writeToAddress>
	}
	HAL_Delay(100);
 8005944:	2064      	movs	r0, #100	; 0x64
 8005946:	f001 feb9 	bl	80076bc <HAL_Delay>



}
 800594a:	bf00      	nop
 800594c:	37ec      	adds	r7, #236	; 0xec
 800594e:	46bd      	mov	sp, r7
 8005950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005952:	bf00      	nop
 8005954:	20000cd0 	.word	0x20000cd0
 8005958:	2000018c 	.word	0x2000018c
 800595c:	20000018 	.word	0x20000018
 8005960:	2000000c 	.word	0x2000000c
 8005964:	20000cc0 	.word	0x20000cc0
 8005968:	20000cc8 	.word	0x20000cc8
 800596c:	20000d00 	.word	0x20000d00
 8005970:	20000ae8 	.word	0x20000ae8
 8005974:	20000020 	.word	0x20000020
 8005978:	20000d98 	.word	0x20000d98
 800597c:	20000db8 	.word	0x20000db8
 8005980:	20000c40 	.word	0x20000c40
 8005984:	0800ebf3 	.word	0x0800ebf3
 8005988:	0800ebf6 	.word	0x0800ebf6

0800598c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8005996:	2300      	movs	r3, #0
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b03      	cmp	r3, #3
 800599e:	d80d      	bhi.n	80059bc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	fa22 f103 	lsr.w	r1, r2, r3
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	b2ca      	uxtb	r2, r1
 80059b2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3301      	adds	r3, #1
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	e7ee      	b.n	800599a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80059bc:	bf00      	nop
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr

080059c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80059c6:	b480      	push	{r7}
 80059c8:	b085      	sub	sp, #20
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b03      	cmp	r3, #3
 80059de:	d811      	bhi.n	8005a04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6839      	ldr	r1, [r7, #0]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	440a      	add	r2, r1
 80059ea:	7812      	ldrb	r2, [r2, #0]
 80059ec:	4611      	mov	r1, r2
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	00d2      	lsls	r2, r2, #3
 80059f2:	fa01 f202 	lsl.w	r2, r1, r2
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3301      	adds	r3, #1
 8005a00:	60fb      	str	r3, [r7, #12]
 8005a02:	e7ea      	b.n	80059da <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8005a04:	bf00      	nop
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bc80      	pop	{r7}
 8005a0c:	4770      	bx	lr

08005a0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8005a0e:	b480      	push	{r7}
 8005a10:	b085      	sub	sp, #20
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b18      	cmp	r3, #24
 8005a20:	dc1e      	bgt.n	8005a60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d111      	bne.n	8005a58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	60da      	str	r2, [r3, #12]
        return true;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e004      	b.n	8005a62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	e7dd      	b.n	8005a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8005a60:	2300      	movs	r3, #0
  }
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bc80      	pop	{r7}
 8005a6a:	4770      	bx	lr

08005a6c <_ZN3ros15NodeHandleBase_C1Ev>:
class NodeHandleBase_
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	4a04      	ldr	r2, [pc, #16]	; (8005a88 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bc80      	pop	{r7}
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	0800ed08 	.word	0x0800ed08

08005a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
  NodeHandle_() : configured_(false)
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7ff ffe8 	bl	8005a6c <_ZN3ros15NodeHandleBase_C1Ev>
 8005a9c:	4a3a      	ldr	r2, [pc, #232]	; (8005b88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fc fce8 	bl	800247c <_ZN13STM32HardwareC1Ev>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fc f9da 	bl	8001e74 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	2b18      	cmp	r3, #24
 8005ac8:	d80b      	bhi.n	8005ae2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	3301      	adds	r3, #1
 8005ade:	617b      	str	r3, [r7, #20]
 8005ae0:	e7f0      	b.n	8005ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	613b      	str	r3, [r7, #16]
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b18      	cmp	r3, #24
 8005aea:	d80a      	bhi.n	8005b02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005af4:	2100      	movs	r1, #0
 8005af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	3301      	adds	r3, #1
 8005afe:	613b      	str	r3, [r7, #16]
 8005b00:	e7f1      	b.n	8005ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8005b02:	2300      	movs	r3, #0
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b0c:	d20a      	bcs.n	8005b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4413      	add	r3, r2
 8005b14:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005b18:	2200      	movs	r2, #0
 8005b1a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	e7f0      	b.n	8005b06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8005b24:	2300      	movs	r3, #0
 8005b26:	60bb      	str	r3, [r7, #8]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b2e:	d20a      	bcs.n	8005b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	4413      	add	r3, r2
 8005b36:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	3301      	adds	r3, #1
 8005b42:	60bb      	str	r3, [r7, #8]
 8005b44:	e7f0      	b.n	8005b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>
    req_param_resp.ints_length = 0;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    spin_timeout_ = 0;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	0800ec34 	.word	0x0800ec34

08005b8c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	4a04      	ldr	r2, [pc, #16]	; (8005ba8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bc80      	pop	{r7}
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	0800ecf0 	.word	0x0800ecf0

08005bac <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff ffe5 	bl	8005b8c <_ZN3ros11Subscriber_C1Ev>
 8005bc2:	4a0b      	ldr	r2, [pc, #44]	; (8005bf0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3310      	adds	r3, #16
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fd f9b7 	bl	8002f40 <_ZN13geometry_msgs5TwistC1Ev>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	659a      	str	r2, [r3, #88]	; 0x58
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	609a      	str	r2, [r3, #8]
  };
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	0800ec04 	.word	0x0800ec04

08005bf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
    return &hardware_;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3304      	adds	r3, #4
  }
 8005c00:	4618      	mov	r0, r3
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bc80      	pop	{r7}
 8005c08:	4770      	bx	lr

08005c0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b082      	sub	sp, #8
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	3304      	adds	r3, #4
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fc fc4c 	bl	80024b4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8005c3c:	bf00      	nop
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
    return configured_;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr

08005c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3304      	adds	r3, #4
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fc fd13 	bl	8002694 <_ZN13STM32Hardware4timeEv>
 8005c6e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d903      	bls.n	8005c8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d009      	beq.n	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d903      	bls.n	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d014      	beq.n	8005cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fc fcec 	bl	8002694 <_ZN13STM32Hardware4timeEv>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	1ad2      	subs	r2, r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	bf8c      	ite	hi
 8005ccc:	2301      	movhi	r3, #1
 8005cce:	2300      	movls	r3, #0
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8005cd6:	f06f 0301 	mvn.w	r3, #1
 8005cda:	e197      	b.n	800600c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7fc fc05 	bl	80024f0 <_ZN13STM32Hardware4readEv>
 8005ce6:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f2c0 8177 	blt.w	8005fde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	441a      	add	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005d06:	2b07      	cmp	r3, #7
 8005d08:	d11e      	bne.n	8005d48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8005d10:	1c59      	adds	r1, r3, #1
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	b2d1      	uxtb	r1, r2
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	4413      	add	r3, r2
 8005d20:	460a      	mov	r2, r1
 8005d22:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8005d2c:	1e5a      	subs	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1b4      	bne.n	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2208      	movs	r2, #8
 8005d42:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005d46:	e7af      	b.n	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d128      	bne.n	8005da4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2bff      	cmp	r3, #255	; 0xff
 8005d56:	d10d      	bne.n	8005d74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f103 0214 	add.w	r2, r3, #20
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8005d72:	e799      	b.n	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fc fc8b 	bl	8002694 <_ZN13STM32Hardware4timeEv>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	bf8c      	ite	hi
 8005d8c:	2301      	movhi	r3, #1
 8005d8e:	2300      	movls	r3, #0
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d088      	beq.n	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8005d9e:	f06f 0301 	mvn.w	r3, #1
 8005da2:	e133      	b.n	800600c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d11b      	bne.n	8005de6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2bfe      	cmp	r3, #254	; 0xfe
 8005db2:	d107      	bne.n	8005dc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005dc2:	e771      	b.n	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8005dd2:	f083 0301 	eor.w	r3, r3, #1
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f43f af65 	beq.w	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 faa4 	bl	800632c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8005de4:	e760      	b.n	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d113      	bne.n	8005e18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8005e16:	e747      	b.n	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005e1e:	2b03      	cmp	r3, #3
 8005e20:	d110      	bne.n	8005e44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	441a      	add	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005e42:	e731      	b.n	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d116      	bne.n	8005e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8005e54:	425a      	negs	r2, r3
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	bf58      	it	pl
 8005e5c:	4253      	negpl	r3, r2
 8005e5e:	2bff      	cmp	r3, #255	; 0xff
 8005e60:	d107      	bne.n	8005e72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005e70:	e71a      	b.n	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005e7a:	e715      	b.n	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005e82:	2b05      	cmp	r3, #5
 8005e84:	d10f      	bne.n	8005ea6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8005ea4:	e700      	b.n	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005eac:	2b06      	cmp	r3, #6
 8005eae:	d117      	bne.n	8005ee0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	021b      	lsls	r3, r3, #8
 8005eba:	441a      	add	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2207      	movs	r2, #7
 8005ec6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f47f aee9 	bne.w	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2208      	movs	r2, #8
 8005eda:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005ede:	e6e3      	b.n	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005ee6:	2b08      	cmp	r3, #8
 8005ee8:	f47f aede 	bne.w	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8005efa:	425a      	negs	r2, r3
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	bf58      	it	pl
 8005f02:	4253      	negpl	r3, r2
 8005f04:	2bff      	cmp	r3, #255	; 0xff
 8005f06:	f47f aecf 	bne.w	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d110      	bne.n	8005f36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fa09 	bl	800632c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f8b2 	bl	8006084 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8005f30:	f04f 33ff 	mov.w	r3, #4294967295
 8005f34:	e06a      	b.n	800600c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005f3c:	2b0a      	cmp	r3, #10
 8005f3e:	d107      	bne.n	8005f50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005f46:	4619      	mov	r1, r3
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fa0d 	bl	8006368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8005f4e:	e6ab      	b.n	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005f56:	2b06      	cmp	r3, #6
 8005f58:	d10e      	bne.n	8005f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005f66:	4619      	mov	r1, r3
 8005f68:	4610      	mov	r0, r2
 8005f6a:	f7fc f8b8 	bl	80020de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8005f76:	e697      	b.n	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005f7e:	2b0b      	cmp	r3, #11
 8005f80:	d104      	bne.n	8005f8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8005f8a:	e68d      	b.n	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005f92:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f43f ae81 	beq.w	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005fac:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005fb6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005fc0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8005fd8:	4611      	mov	r1, r2
 8005fda:	4798      	blx	r3
    while (true)
 8005fdc:	e664      	b.n	8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8005fde:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00f      	beq.n	800600a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d906      	bls.n	800600a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f995 	bl	800632c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 800600a:	2300      	movs	r3, #0
  }
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>:
public:
  void logdebug(const char* msg)
  {
    log(rosserial_msgs::Log::ROSDEBUG, msg);
  }
  void loginfo(const char * msg)
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::INFO, msg);
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	2101      	movs	r1, #1
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f9ec 	bl	8006400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8006028:	bf00      	nop
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b18      	cmp	r3, #24
 8006042:	dc19      	bgt.n	8006078 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	f202 2222 	addw	r2, r2, #546	; 0x222
 800604c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10d      	bne.n	8006070 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800605e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	605a      	str	r2, [r3, #4]
        return true;
 800606c:	2301      	movs	r3, #1
 800606e:	e004      	b.n	800607a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3301      	adds	r3, #1
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	e7e2      	b.n	800603e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
    return false;
 8006078:	2300      	movs	r3, #0
  }
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	bc80      	pop	{r7}
 8006082:	4770      	bx	lr

08006084 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 8006084:	b590      	push	{r4, r7, lr}
 8006086:	b08b      	sub	sp, #44	; 0x2c
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 800608c:	f107 030c 	add.w	r3, r7, #12
 8006090:	4618      	mov	r0, r3
 8006092:	f7fb fbeb 	bl	800186c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8006096:	2300      	movs	r3, #0
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	2b18      	cmp	r3, #24
 800609e:	dc63      	bgt.n	8006168 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
      if (publishers[i] != 0) // non-empty slot
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d056      	beq.n	8006160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
        ti.topic_id = publishers[i]->id_;
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	6859      	ldr	r1, [r3, #4]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3308      	adds	r3, #8
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4608      	mov	r0, r1
 8006100:	4798      	blx	r3
 8006102:	4603      	mov	r3, r0
 8006104:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	6859      	ldr	r1, [r3, #4]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	330c      	adds	r3, #12
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4608      	mov	r0, r1
 800612e:	4798      	blx	r3
 8006130:	4603      	mov	r3, r0
 8006132:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8006134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006138:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681c      	ldr	r4, [r3, #0]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	4618      	mov	r0, r3
 8006150:	f7fc f978 	bl	8002444 <_ZN3ros9Publisher15getEndpointTypeEv>
 8006154:	4601      	mov	r1, r0
 8006156:	f107 030c 	add.w	r3, r7, #12
 800615a:	461a      	mov	r2, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	3301      	adds	r3, #1
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
 8006166:	e798      	b.n	800609a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8006168:	2300      	movs	r3, #0
 800616a:	627b      	str	r3, [r7, #36]	; 0x24
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	2b18      	cmp	r3, #24
 8006170:	dc5f      	bgt.n	8006232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
      if (subscribers[i] != 0) // non-empty slot
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006176:	f202 2222 	addw	r2, r2, #546	; 0x222
 800617a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d053      	beq.n	800622a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
        ti.topic_id = subscribers[i]->id_;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006186:	f202 2222 	addw	r2, r2, #546	; 0x222
 800618a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	b29b      	uxth	r3, r3
 8006192:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006198:	f202 2222 	addw	r2, r2, #546	; 0x222
 800619c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80061ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80061b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3308      	adds	r3, #8
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4608      	mov	r0, r1
 80061c4:	4798      	blx	r3
 80061c6:	4603      	mov	r3, r0
 80061c8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ce:	f202 2222 	addw	r2, r2, #546	; 0x222
 80061d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061da:	f202 2222 	addw	r2, r2, #546	; 0x222
 80061de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	330c      	adds	r3, #12
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4608      	mov	r0, r1
 80061ea:	4798      	blx	r3
 80061ec:	4603      	mov	r3, r0
 80061ee:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80061f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061f4:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681c      	ldr	r4, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006200:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006204:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800620c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3304      	adds	r3, #4
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4608      	mov	r0, r1
 800621c:	4798      	blx	r3
 800621e:	4601      	mov	r1, r0
 8006220:	f107 030c 	add.w	r3, r7, #12
 8006224:	461a      	mov	r2, r3
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	3301      	adds	r3, #1
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
 8006230:	e79c      	b.n	800616c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
    configured_ = true;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 800623a:	bf00      	nop
 800623c:	372c      	adds	r7, #44	; 0x2c
 800623e:	46bd      	mov	sp, r7
 8006240:	bd90      	pop	{r4, r7, pc}
	...

08006244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii>:
        logwarn("Failed to get param: length mismatch");
      }
    }
    return false;
  }
  bool getParam(const char* name, float* param, int length = 1, int timeout = 1000)
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]
  {
    if (requestParam(name, timeout))
 8006252:	6a3a      	ldr	r2, [r7, #32]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f980 	bl	800655c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d021      	beq.n	80062a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii+0x62>
    {
      if (length == req_param_resp.floats_length)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f8d3 2924 	ldr.w	r2, [r3, #2340]	; 0x924
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	429a      	cmp	r2, r3
 800626c:	d117      	bne.n	800629e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii+0x5a>
      {
        //copy it over
        for (int i = 0; i < length; i++)
 800626e:	2300      	movs	r3, #0
 8006270:	617b      	str	r3, [r7, #20]
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	da0f      	bge.n	800629a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii+0x56>
          param[i] = req_param_resp.floats[i];
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f8d3 292c 	ldr.w	r2, [r3, #2348]	; 0x92c
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	441a      	add	r2, r3
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	440b      	add	r3, r1
 800628e:	6812      	ldr	r2, [r2, #0]
 8006290:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < length; i++)
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	3301      	adds	r3, #1
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	e7eb      	b.n	8006272 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii+0x2e>
        return true;
 800629a:	2301      	movs	r3, #1
 800629c:	e004      	b.n	80062a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii+0x64>
      }
      else
      {
        logwarn("Failed to get param: length mismatch");
 800629e:	4904      	ldr	r1, [pc, #16]	; (80062b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii+0x6c>)
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f9a3 	bl	80065ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7logwarnEPKc>
      }
    }
    return false;
 80062a6:	2300      	movs	r3, #0
  }
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	0800e90c 	.word	0x0800e90c

080062b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>:
  Time now()
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	3304      	adds	r3, #4
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fc f9e6 	bl	8002694 <_ZN13STM32Hardware4timeEv>
 80062c8:	60f8      	str	r0, [r7, #12]
    Time current_time;
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7fb f99a 	bl	8001604 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4a14      	ldr	r2, [pc, #80]	; (8006324 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 80062d4:	fba2 2303 	umull	r2, r3, r2, r3
 80062d8:	099a      	lsrs	r2, r3, #6
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80062e0:	441a      	add	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	4b0e      	ldr	r3, [pc, #56]	; (8006324 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 80062ea:	fba3 1302 	umull	r1, r3, r3, r2
 80062ee:	099b      	lsrs	r3, r3, #6
 80062f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80062f4:	fb01 f303 	mul.w	r3, r1, r3
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	4a0b      	ldr	r2, [pc, #44]	; (8006328 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x74>)
 80062fc:	fb02 f203 	mul.w	r2, r2, r3
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8006306:	441a      	add	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3304      	adds	r3, #4
 8006310:	4619      	mov	r1, r3
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fdd8 	bl	8006ec8 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8006318:	bf00      	nop
  }
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	10624dd3 	.word	0x10624dd3
 8006328:	000f4240 	.word	0x000f4240

0800632c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8006334:	f107 030c 	add.w	r3, r7, #12
 8006338:	4618      	mov	r0, r3
 800633a:	f7fb f9ad 	bl	8001698 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f107 020c 	add.w	r2, r7, #12
 8006348:	210a      	movs	r1, #10
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	4798      	blx	r3
    rt_time = hardware_.time();
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	3304      	adds	r3, #4
 8006352:	4618      	mov	r0, r3
 8006354:	f7fc f99e 	bl	8002694 <_ZN13STM32Hardware4timeEv>
 8006358:	4602      	mov	r2, r0
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8006360:	bf00      	nop
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8006372:	f107 0308 	add.w	r3, r7, #8
 8006376:	4618      	mov	r0, r3
 8006378:	f7fb f98e 	bl	8001698 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3304      	adds	r3, #4
 8006380:	4618      	mov	r0, r3
 8006382:	f7fc f987 	bl	8002694 <_ZN13STM32Hardware4timeEv>
 8006386:	4602      	mov	r2, r0
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8006392:	f107 0308 	add.w	r3, r7, #8
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	4618      	mov	r0, r3
 800639a:	f7fb f9ec 	bl	8001776 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	4915      	ldr	r1, [pc, #84]	; (80063f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80063a4:	fba1 1303 	umull	r1, r3, r1, r3
 80063a8:	099b      	lsrs	r3, r3, #6
 80063aa:	4413      	add	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80063ae:	6939      	ldr	r1, [r7, #16]
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4b11      	ldr	r3, [pc, #68]	; (80063f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80063b4:	fba3 0302 	umull	r0, r3, r3, r2
 80063b8:	099b      	lsrs	r3, r3, #6
 80063ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80063be:	fb00 f303 	mul.w	r3, r0, r3
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	4a0d      	ldr	r2, [pc, #52]	; (80063fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80063c6:	fb02 f303 	mul.w	r3, r2, r3
 80063ca:	440b      	add	r3, r1
 80063cc:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80063ce:	f107 0308 	add.w	r3, r7, #8
 80063d2:	3304      	adds	r3, #4
 80063d4:	4619      	mov	r1, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f916 	bl	8006608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3304      	adds	r3, #4
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fc f957 	bl	8002694 <_ZN13STM32Hardware4timeEv>
 80063e6:	4602      	mov	r2, r0
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80063ee:	bf00      	nop
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	10624dd3 	.word	0x10624dd3
 80063fc:	000f4240 	.word	0x000f4240

08006400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8006400:	b580      	push	{r7, lr}
 8006402:	b088      	sub	sp, #32
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	460b      	mov	r3, r1
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800640e:	f107 0314 	add.w	r3, r7, #20
 8006412:	4618      	mov	r0, r3
 8006414:	f7fb fbea 	bl	8001bec <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8006418:	7afb      	ldrb	r3, [r7, #11]
 800641a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f107 0214 	add.w	r2, r7, #20
 800642a:	2107      	movs	r1, #7
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	4798      	blx	r3
  }
 8006430:	bf00      	nop
 8006432:	3720      	adds	r7, #32
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg)
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b63      	cmp	r3, #99	; 0x63
 8006448:	dd09      	ble.n	800645e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8006450:	f083 0301 	eor.w	r3, r3, #1
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800645a:	2300      	movs	r3, #0
 800645c:	e077      	b.n	800654e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    int l = msg->serialize(message_out + 7);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800646a:	3207      	adds	r2, #7
 800646c:	4611      	mov	r1, r2
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	4798      	blx	r3
 8006472:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	22ff      	movs	r2, #255	; 0xff
 8006478:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	22fe      	movs	r2, #254	; 0xfe
 8006480:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	b2da      	uxtb	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	b29b      	uxth	r3, r3
 8006492:	121b      	asrs	r3, r3, #8
 8006494:	b2da      	uxtb	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80064a8:	4413      	add	r3, r2
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	43db      	mvns	r3, r3
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	b21b      	sxth	r3, r3
 80064c4:	121b      	asrs	r3, r3, #8
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
    int chk = 0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80064d2:	2305      	movs	r3, #5
 80064d4:	61bb      	str	r3, [r7, #24]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	3307      	adds	r3, #7
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	429a      	cmp	r2, r3
 80064de:	da0d      	bge.n	80064fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	4413      	add	r3, r2
 80064e6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	461a      	mov	r2, r3
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	4413      	add	r3, r2
 80064f2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	3301      	adds	r3, #1
 80064f8:	61bb      	str	r3, [r7, #24]
 80064fa:	e7ec      	b.n	80064d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	3307      	adds	r3, #7
 8006500:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	425a      	negs	r2, r3
 8006506:	b2db      	uxtb	r3, r3
 8006508:	b2d2      	uxtb	r2, r2
 800650a:	bf58      	it	pl
 800650c:	4253      	negpl	r3, r2
 800650e:	b2da      	uxtb	r2, r3
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	1c59      	adds	r1, r3, #1
 8006514:	6179      	str	r1, [r7, #20]
 8006516:	43d2      	mvns	r2, r2
 8006518:	b2d1      	uxtb	r1, r2
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4413      	add	r3, r2
 800651e:	460a      	mov	r2, r1
 8006520:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    if (l <= OUTPUT_SIZE)
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800652a:	dc0a      	bgt.n	8006542 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
      hardware_.write(message_out, l);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	1d18      	adds	r0, r3, #4
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4619      	mov	r1, r3
 800653a:	f7fc f865 	bl	8002608 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	e005      	b.n	800654e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
      logerror("Message from device dropped: message larger than buffer.");
 8006542:	4905      	ldr	r1, [pc, #20]	; (8006558 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f89f 	bl	8006688 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800654a:	f04f 33ff 	mov.w	r3, #4294967295
  }
 800654e:	4618      	mov	r0, r3
 8006550:	3720      	adds	r7, #32
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	0800e934 	.word	0x0800e934

0800655c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci>:
  bool requestParam(const char * name, int time_out =  1000)
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
    param_recieved = false;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
    rosserial_msgs::RequestParamRequest req;
 8006570:	f107 0314 	add.w	r3, r7, #20
 8006574:	4618      	mov	r0, r3
 8006576:	f7fb fbe5 	bl	8001d44 <_ZN14rosserial_msgs19RequestParamRequestC1Ev>
    req.name  = (char*)name;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	61bb      	str	r3, [r7, #24]
    publish(TopicInfo::ID_PARAMETER_REQUEST, &req);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f107 0214 	add.w	r2, r7, #20
 8006588:	2106      	movs	r1, #6
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	4798      	blx	r3
    uint32_t end_time = hardware_.time() + time_out;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3304      	adds	r3, #4
 8006592:	4618      	mov	r0, r3
 8006594:	f7fc f87e 	bl	8002694 <_ZN13STM32Hardware4timeEv>
 8006598:	4602      	mov	r2, r0
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4413      	add	r3, r2
 800659e:	61fb      	str	r3, [r7, #28]
    while (!param_recieved)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d119      	bne.n	80065de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci+0x82>
      spinOnce();
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3304      	adds	r3, #4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	4798      	blx	r3
      if (hardware_.time() > end_time)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	3304      	adds	r3, #4
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fc f86a 	bl	8002694 <_ZN13STM32Hardware4timeEv>
 80065c0:	4602      	mov	r2, r0
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	4293      	cmp	r3, r2
 80065c6:	bf34      	ite	cc
 80065c8:	2301      	movcc	r3, #1
 80065ca:	2300      	movcs	r3, #0
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0e6      	beq.n	80065a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci+0x44>
        logwarn("Failed to get param: timeout expired");
 80065d2:	4905      	ldr	r1, [pc, #20]	; (80065e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci+0x8c>)
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 f809 	bl	80065ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7logwarnEPKc>
        return false;
 80065da:	2300      	movs	r3, #0
 80065dc:	e000      	b.n	80065e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci+0x84>
    return true;
 80065de:	2301      	movs	r3, #1
  }
 80065e0:	4618      	mov	r0, r3
 80065e2:	3720      	adds	r7, #32
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	0800e970 	.word	0x0800e970

080065ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7logwarnEPKc>:
  void logwarn(const char *msg)
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
    log(rosserial_msgs::Log::WARN, msg);
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	2102      	movs	r1, #2
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff ff00 	bl	8006400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8006600:	bf00      	nop
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3304      	adds	r3, #4
 8006616:	4618      	mov	r0, r3
 8006618:	f7fc f83c 	bl	8002694 <_ZN13STM32Hardware4timeEv>
 800661c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4915      	ldr	r1, [pc, #84]	; (800667c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8006626:	fba1 1303 	umull	r1, r3, r1, r3
 800662a:	099b      	lsrs	r3, r3, #6
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	1e5a      	subs	r2, r3, #1
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	6859      	ldr	r1, [r3, #4]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	4b0f      	ldr	r3, [pc, #60]	; (800667c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800663e:	fba3 0302 	umull	r0, r3, r3, r2
 8006642:	099b      	lsrs	r3, r3, #6
 8006644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006648:	fb00 f303 	mul.w	r3, r0, r3
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	4a0c      	ldr	r2, [pc, #48]	; (8006680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8006650:	fb02 f303 	mul.w	r3, r2, r3
 8006654:	1aca      	subs	r2, r1, r3
 8006656:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8006658:	4413      	add	r3, r2
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800666c:	4619      	mov	r1, r3
 800666e:	4610      	mov	r0, r2
 8006670:	f000 fc2a 	bl	8006ec8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8006674:	bf00      	nop
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	10624dd3 	.word	0x10624dd3
 8006680:	000f4240 	.word	0x000f4240
 8006684:	3b9aca00 	.word	0x3b9aca00

08006688 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  void logerror(const char*msg)
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
    log(rosserial_msgs::Log::ERROR, msg);
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	2103      	movs	r1, #3
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff feb2 	bl	8006400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800669c:	bf00      	nop
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <_Z41__static_initialization_and_destruction_0ii>:
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d11f      	bne.n	80066f4 <_Z41__static_initialization_and_destruction_0ii+0x50>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d11a      	bne.n	80066f4 <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;
 80066be:	480f      	ldr	r0, [pc, #60]	; (80066fc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80066c0:	f7ff f9e4 	bl	8005a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
sensor_msgs::Imu imu_msg;
 80066c4:	480e      	ldr	r0, [pc, #56]	; (8006700 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80066c6:	f7fd febb 	bl	8004440 <_ZN11sensor_msgs3ImuC1Ev>
ros::Publisher imu("imu", &imu_msg);
 80066ca:	2300      	movs	r3, #0
 80066cc:	4a0c      	ldr	r2, [pc, #48]	; (8006700 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80066ce:	490d      	ldr	r1, [pc, #52]	; (8006704 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80066d0:	480d      	ldr	r0, [pc, #52]	; (8006708 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80066d2:	f7fb fe8d 	bl	80023f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> _sub("/cmd_vel", &cmd_velCallBack);
 80066d6:	2301      	movs	r3, #1
 80066d8:	4a0c      	ldr	r2, [pc, #48]	; (800670c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80066da:	490d      	ldr	r1, [pc, #52]	; (8006710 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80066dc:	480d      	ldr	r0, [pc, #52]	; (8006714 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80066de:	f7ff fa65 	bl	8005bac <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Time current_time;
 80066e2:	480d      	ldr	r0, [pc, #52]	; (8006718 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80066e4:	f7fa ff8e 	bl	8001604 <_ZN3ros4TimeC1Ev>
ros::Time last_time;
 80066e8:	480c      	ldr	r0, [pc, #48]	; (800671c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80066ea:	f7fa ff8b 	bl	8001604 <_ZN3ros4TimeC1Ev>
tf::TransformBroadcaster odom_broadcaster;
 80066ee:	480c      	ldr	r0, [pc, #48]	; (8006720 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80066f0:	f7fd fe26 	bl	8004340 <_ZN2tf20TransformBroadcasterC1Ev>
}
 80066f4:	bf00      	nop
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	2000018c 	.word	0x2000018c
 8006700:	20000ae8 	.word	0x20000ae8
 8006704:	0800e998 	.word	0x0800e998
 8006708:	20000c40 	.word	0x20000c40
 800670c:	080050b1 	.word	0x080050b1
 8006710:	0800e99c 	.word	0x0800e99c
 8006714:	20000c58 	.word	0x20000c58
 8006718:	20000cf0 	.word	0x20000cf0
 800671c:	20000cf8 	.word	0x20000cf8
 8006720:	20000d00 	.word	0x20000d00

08006724 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3310      	adds	r3, #16
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	4618      	mov	r0, r3
 8006736:	f7fc fc45 	bl	8002fc4 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	3210      	adds	r2, #16
 8006742:	4610      	mov	r0, r2
 8006744:	4798      	blx	r3
  }
 8006746:	bf00      	nop
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 800675a:	4618      	mov	r0, r3
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	bc80      	pop	{r7}
 8006762:	4770      	bx	lr

08006764 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3310      	adds	r3, #16
 8006770:	4618      	mov	r0, r3
 8006772:	f7fc fc4d 	bl	8003010 <_ZN13geometry_msgs5Twist7getTypeEv>
 8006776:	4603      	mov	r3, r0
  }
 8006778:	4618      	mov	r0, r3
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3310      	adds	r3, #16
 800678c:	4618      	mov	r0, r3
 800678e:	f7fc fc4b 	bl	8003028 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8006792:	4603      	mov	r3, r0
  }
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <_GLOBAL__sub_I__huart>:
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
 80067a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80067a4:	2001      	movs	r0, #1
 80067a6:	f7ff ff7d 	bl	80066a4 <_Z41__static_initialization_and_destruction_0ii>
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80067b2:	4b15      	ldr	r3, [pc, #84]	; (8006808 <HAL_MspInit+0x5c>)
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	4a14      	ldr	r2, [pc, #80]	; (8006808 <HAL_MspInit+0x5c>)
 80067b8:	f043 0301 	orr.w	r3, r3, #1
 80067bc:	6193      	str	r3, [r2, #24]
 80067be:	4b12      	ldr	r3, [pc, #72]	; (8006808 <HAL_MspInit+0x5c>)
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	60bb      	str	r3, [r7, #8]
 80067c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80067ca:	4b0f      	ldr	r3, [pc, #60]	; (8006808 <HAL_MspInit+0x5c>)
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	4a0e      	ldr	r2, [pc, #56]	; (8006808 <HAL_MspInit+0x5c>)
 80067d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067d4:	61d3      	str	r3, [r2, #28]
 80067d6:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <HAL_MspInit+0x5c>)
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067de:	607b      	str	r3, [r7, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80067e2:	4b0a      	ldr	r3, [pc, #40]	; (800680c <HAL_MspInit+0x60>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	4a04      	ldr	r2, [pc, #16]	; (800680c <HAL_MspInit+0x60>)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80067fe:	bf00      	nop
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	bc80      	pop	{r7}
 8006806:	4770      	bx	lr
 8006808:	40021000 	.word	0x40021000
 800680c:	40010000 	.word	0x40010000

08006810 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b088      	sub	sp, #32
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006818:	f107 0310 	add.w	r3, r7, #16
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]
 8006820:	605a      	str	r2, [r3, #4]
 8006822:	609a      	str	r2, [r3, #8]
 8006824:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a19      	ldr	r2, [pc, #100]	; (8006890 <HAL_I2C_MspInit+0x80>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d12b      	bne.n	8006888 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006830:	4b18      	ldr	r3, [pc, #96]	; (8006894 <HAL_I2C_MspInit+0x84>)
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	4a17      	ldr	r2, [pc, #92]	; (8006894 <HAL_I2C_MspInit+0x84>)
 8006836:	f043 0308 	orr.w	r3, r3, #8
 800683a:	6193      	str	r3, [r2, #24]
 800683c:	4b15      	ldr	r3, [pc, #84]	; (8006894 <HAL_I2C_MspInit+0x84>)
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	f003 0308 	and.w	r3, r3, #8
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006848:	23c0      	movs	r3, #192	; 0xc0
 800684a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800684c:	2312      	movs	r3, #18
 800684e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006850:	2303      	movs	r3, #3
 8006852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006854:	f107 0310 	add.w	r3, r7, #16
 8006858:	4619      	mov	r1, r3
 800685a:	480f      	ldr	r0, [pc, #60]	; (8006898 <HAL_I2C_MspInit+0x88>)
 800685c:	f001 fada 	bl	8007e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006860:	4b0c      	ldr	r3, [pc, #48]	; (8006894 <HAL_I2C_MspInit+0x84>)
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	4a0b      	ldr	r2, [pc, #44]	; (8006894 <HAL_I2C_MspInit+0x84>)
 8006866:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800686a:	61d3      	str	r3, [r2, #28]
 800686c:	4b09      	ldr	r3, [pc, #36]	; (8006894 <HAL_I2C_MspInit+0x84>)
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006874:	60bb      	str	r3, [r7, #8]
 8006876:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8006878:	2200      	movs	r2, #0
 800687a:	2100      	movs	r1, #0
 800687c:	201f      	movs	r0, #31
 800687e:	f000 fff4 	bl	800786a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006882:	201f      	movs	r0, #31
 8006884:	f001 f80d 	bl	80078a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006888:	bf00      	nop
 800688a:	3720      	adds	r7, #32
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	40005400 	.word	0x40005400
 8006894:	40021000 	.word	0x40021000
 8006898:	40010c00 	.word	0x40010c00

0800689c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b08a      	sub	sp, #40	; 0x28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068a4:	f107 0318 	add.w	r3, r7, #24
 80068a8:	2200      	movs	r2, #0
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	605a      	str	r2, [r3, #4]
 80068ae:	609a      	str	r2, [r3, #8]
 80068b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a88      	ldr	r2, [pc, #544]	; (8006ad8 <HAL_UART_MspInit+0x23c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	f040 8089 	bne.w	80069d0 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80068be:	4b87      	ldr	r3, [pc, #540]	; (8006adc <HAL_UART_MspInit+0x240>)
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	4a86      	ldr	r2, [pc, #536]	; (8006adc <HAL_UART_MspInit+0x240>)
 80068c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068c8:	6193      	str	r3, [r2, #24]
 80068ca:	4b84      	ldr	r3, [pc, #528]	; (8006adc <HAL_UART_MspInit+0x240>)
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068d6:	4b81      	ldr	r3, [pc, #516]	; (8006adc <HAL_UART_MspInit+0x240>)
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	4a80      	ldr	r2, [pc, #512]	; (8006adc <HAL_UART_MspInit+0x240>)
 80068dc:	f043 0304 	orr.w	r3, r3, #4
 80068e0:	6193      	str	r3, [r2, #24]
 80068e2:	4b7e      	ldr	r3, [pc, #504]	; (8006adc <HAL_UART_MspInit+0x240>)
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	f003 0304 	and.w	r3, r3, #4
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80068ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068f4:	2302      	movs	r3, #2
 80068f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80068f8:	2303      	movs	r3, #3
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068fc:	f107 0318 	add.w	r3, r7, #24
 8006900:	4619      	mov	r1, r3
 8006902:	4877      	ldr	r0, [pc, #476]	; (8006ae0 <HAL_UART_MspInit+0x244>)
 8006904:	f001 fa86 	bl	8007e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800690c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800690e:	2300      	movs	r3, #0
 8006910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006912:	2300      	movs	r3, #0
 8006914:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006916:	f107 0318 	add.w	r3, r7, #24
 800691a:	4619      	mov	r1, r3
 800691c:	4870      	ldr	r0, [pc, #448]	; (8006ae0 <HAL_UART_MspInit+0x244>)
 800691e:	f001 fa79 	bl	8007e14 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006922:	4b70      	ldr	r3, [pc, #448]	; (8006ae4 <HAL_UART_MspInit+0x248>)
 8006924:	4a70      	ldr	r2, [pc, #448]	; (8006ae8 <HAL_UART_MspInit+0x24c>)
 8006926:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006928:	4b6e      	ldr	r3, [pc, #440]	; (8006ae4 <HAL_UART_MspInit+0x248>)
 800692a:	2200      	movs	r2, #0
 800692c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800692e:	4b6d      	ldr	r3, [pc, #436]	; (8006ae4 <HAL_UART_MspInit+0x248>)
 8006930:	2200      	movs	r2, #0
 8006932:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006934:	4b6b      	ldr	r3, [pc, #428]	; (8006ae4 <HAL_UART_MspInit+0x248>)
 8006936:	2280      	movs	r2, #128	; 0x80
 8006938:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800693a:	4b6a      	ldr	r3, [pc, #424]	; (8006ae4 <HAL_UART_MspInit+0x248>)
 800693c:	2200      	movs	r2, #0
 800693e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006940:	4b68      	ldr	r3, [pc, #416]	; (8006ae4 <HAL_UART_MspInit+0x248>)
 8006942:	2200      	movs	r2, #0
 8006944:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006946:	4b67      	ldr	r3, [pc, #412]	; (8006ae4 <HAL_UART_MspInit+0x248>)
 8006948:	2220      	movs	r2, #32
 800694a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800694c:	4b65      	ldr	r3, [pc, #404]	; (8006ae4 <HAL_UART_MspInit+0x248>)
 800694e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006952:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006954:	4863      	ldr	r0, [pc, #396]	; (8006ae4 <HAL_UART_MspInit+0x248>)
 8006956:	f000 ffb3 	bl	80078c0 <HAL_DMA_Init>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8006960:	f7fa fe4c 	bl	80015fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a5f      	ldr	r2, [pc, #380]	; (8006ae4 <HAL_UART_MspInit+0x248>)
 8006968:	635a      	str	r2, [r3, #52]	; 0x34
 800696a:	4a5e      	ldr	r2, [pc, #376]	; (8006ae4 <HAL_UART_MspInit+0x248>)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8006970:	4b5e      	ldr	r3, [pc, #376]	; (8006aec <HAL_UART_MspInit+0x250>)
 8006972:	4a5f      	ldr	r2, [pc, #380]	; (8006af0 <HAL_UART_MspInit+0x254>)
 8006974:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006976:	4b5d      	ldr	r3, [pc, #372]	; (8006aec <HAL_UART_MspInit+0x250>)
 8006978:	2210      	movs	r2, #16
 800697a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800697c:	4b5b      	ldr	r3, [pc, #364]	; (8006aec <HAL_UART_MspInit+0x250>)
 800697e:	2200      	movs	r2, #0
 8006980:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006982:	4b5a      	ldr	r3, [pc, #360]	; (8006aec <HAL_UART_MspInit+0x250>)
 8006984:	2280      	movs	r2, #128	; 0x80
 8006986:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006988:	4b58      	ldr	r3, [pc, #352]	; (8006aec <HAL_UART_MspInit+0x250>)
 800698a:	2200      	movs	r2, #0
 800698c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800698e:	4b57      	ldr	r3, [pc, #348]	; (8006aec <HAL_UART_MspInit+0x250>)
 8006990:	2200      	movs	r2, #0
 8006992:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006994:	4b55      	ldr	r3, [pc, #340]	; (8006aec <HAL_UART_MspInit+0x250>)
 8006996:	2200      	movs	r2, #0
 8006998:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800699a:	4b54      	ldr	r3, [pc, #336]	; (8006aec <HAL_UART_MspInit+0x250>)
 800699c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80069a0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80069a2:	4852      	ldr	r0, [pc, #328]	; (8006aec <HAL_UART_MspInit+0x250>)
 80069a4:	f000 ff8c 	bl	80078c0 <HAL_DMA_Init>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80069ae:	f7fa fe25 	bl	80015fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a4d      	ldr	r2, [pc, #308]	; (8006aec <HAL_UART_MspInit+0x250>)
 80069b6:	631a      	str	r2, [r3, #48]	; 0x30
 80069b8:	4a4c      	ldr	r2, [pc, #304]	; (8006aec <HAL_UART_MspInit+0x250>)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80069be:	2200      	movs	r2, #0
 80069c0:	2100      	movs	r1, #0
 80069c2:	2025      	movs	r0, #37	; 0x25
 80069c4:	f000 ff51 	bl	800786a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80069c8:	2025      	movs	r0, #37	; 0x25
 80069ca:	f000 ff6a 	bl	80078a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80069ce:	e07f      	b.n	8006ad0 <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART3)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a47      	ldr	r2, [pc, #284]	; (8006af4 <HAL_UART_MspInit+0x258>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d17a      	bne.n	8006ad0 <HAL_UART_MspInit+0x234>
    __HAL_RCC_USART3_CLK_ENABLE();
 80069da:	4b40      	ldr	r3, [pc, #256]	; (8006adc <HAL_UART_MspInit+0x240>)
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	4a3f      	ldr	r2, [pc, #252]	; (8006adc <HAL_UART_MspInit+0x240>)
 80069e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069e4:	61d3      	str	r3, [r2, #28]
 80069e6:	4b3d      	ldr	r3, [pc, #244]	; (8006adc <HAL_UART_MspInit+0x240>)
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069f2:	4b3a      	ldr	r3, [pc, #232]	; (8006adc <HAL_UART_MspInit+0x240>)
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	4a39      	ldr	r2, [pc, #228]	; (8006adc <HAL_UART_MspInit+0x240>)
 80069f8:	f043 0308 	orr.w	r3, r3, #8
 80069fc:	6193      	str	r3, [r2, #24]
 80069fe:	4b37      	ldr	r3, [pc, #220]	; (8006adc <HAL_UART_MspInit+0x240>)
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	f003 0308 	and.w	r3, r3, #8
 8006a06:	60bb      	str	r3, [r7, #8]
 8006a08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a10:	2312      	movs	r3, #18
 8006a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a14:	2303      	movs	r3, #3
 8006a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a18:	f107 0318 	add.w	r3, r7, #24
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4836      	ldr	r0, [pc, #216]	; (8006af8 <HAL_UART_MspInit+0x25c>)
 8006a20:	f001 f9f8 	bl	8007e14 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8006a24:	4b35      	ldr	r3, [pc, #212]	; (8006afc <HAL_UART_MspInit+0x260>)
 8006a26:	4a36      	ldr	r2, [pc, #216]	; (8006b00 <HAL_UART_MspInit+0x264>)
 8006a28:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a2a:	4b34      	ldr	r3, [pc, #208]	; (8006afc <HAL_UART_MspInit+0x260>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a30:	4b32      	ldr	r3, [pc, #200]	; (8006afc <HAL_UART_MspInit+0x260>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006a36:	4b31      	ldr	r3, [pc, #196]	; (8006afc <HAL_UART_MspInit+0x260>)
 8006a38:	2280      	movs	r2, #128	; 0x80
 8006a3a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a3c:	4b2f      	ldr	r3, [pc, #188]	; (8006afc <HAL_UART_MspInit+0x260>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a42:	4b2e      	ldr	r3, [pc, #184]	; (8006afc <HAL_UART_MspInit+0x260>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8006a48:	4b2c      	ldr	r3, [pc, #176]	; (8006afc <HAL_UART_MspInit+0x260>)
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006a4e:	4b2b      	ldr	r3, [pc, #172]	; (8006afc <HAL_UART_MspInit+0x260>)
 8006a50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a54:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006a56:	4829      	ldr	r0, [pc, #164]	; (8006afc <HAL_UART_MspInit+0x260>)
 8006a58:	f000 ff32 	bl	80078c0 <HAL_DMA_Init>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8006a62:	f7fa fdcb 	bl	80015fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a24      	ldr	r2, [pc, #144]	; (8006afc <HAL_UART_MspInit+0x260>)
 8006a6a:	635a      	str	r2, [r3, #52]	; 0x34
 8006a6c:	4a23      	ldr	r2, [pc, #140]	; (8006afc <HAL_UART_MspInit+0x260>)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8006a72:	4b24      	ldr	r3, [pc, #144]	; (8006b04 <HAL_UART_MspInit+0x268>)
 8006a74:	4a24      	ldr	r2, [pc, #144]	; (8006b08 <HAL_UART_MspInit+0x26c>)
 8006a76:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a78:	4b22      	ldr	r3, [pc, #136]	; (8006b04 <HAL_UART_MspInit+0x268>)
 8006a7a:	2210      	movs	r2, #16
 8006a7c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a7e:	4b21      	ldr	r3, [pc, #132]	; (8006b04 <HAL_UART_MspInit+0x268>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a84:	4b1f      	ldr	r3, [pc, #124]	; (8006b04 <HAL_UART_MspInit+0x268>)
 8006a86:	2280      	movs	r2, #128	; 0x80
 8006a88:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a8a:	4b1e      	ldr	r3, [pc, #120]	; (8006b04 <HAL_UART_MspInit+0x268>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a90:	4b1c      	ldr	r3, [pc, #112]	; (8006b04 <HAL_UART_MspInit+0x268>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006a96:	4b1b      	ldr	r3, [pc, #108]	; (8006b04 <HAL_UART_MspInit+0x268>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006a9c:	4b19      	ldr	r3, [pc, #100]	; (8006b04 <HAL_UART_MspInit+0x268>)
 8006a9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006aa2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006aa4:	4817      	ldr	r0, [pc, #92]	; (8006b04 <HAL_UART_MspInit+0x268>)
 8006aa6:	f000 ff0b 	bl	80078c0 <HAL_DMA_Init>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8006ab0:	f7fa fda4 	bl	80015fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a13      	ldr	r2, [pc, #76]	; (8006b04 <HAL_UART_MspInit+0x268>)
 8006ab8:	631a      	str	r2, [r3, #48]	; 0x30
 8006aba:	4a12      	ldr	r2, [pc, #72]	; (8006b04 <HAL_UART_MspInit+0x268>)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	2027      	movs	r0, #39	; 0x27
 8006ac6:	f000 fed0 	bl	800786a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006aca:	2027      	movs	r0, #39	; 0x27
 8006acc:	f000 fee9 	bl	80078a2 <HAL_NVIC_EnableIRQ>
}
 8006ad0:	bf00      	nop
 8006ad2:	3728      	adds	r7, #40	; 0x28
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	40013800 	.word	0x40013800
 8006adc:	40021000 	.word	0x40021000
 8006ae0:	40010800 	.word	0x40010800
 8006ae4:	20000f48 	.word	0x20000f48
 8006ae8:	40020058 	.word	0x40020058
 8006aec:	20000f04 	.word	0x20000f04
 8006af0:	40020044 	.word	0x40020044
 8006af4:	40004800 	.word	0x40004800
 8006af8:	40010c00 	.word	0x40010c00
 8006afc:	20000de8 	.word	0x20000de8
 8006b00:	40020030 	.word	0x40020030
 8006b04:	20000ec0 	.word	0x20000ec0
 8006b08:	4002001c 	.word	0x4002001c

08006b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08c      	sub	sp, #48	; 0x30
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	6879      	ldr	r1, [r7, #4]
 8006b20:	2019      	movs	r0, #25
 8006b22:	f000 fea2 	bl	800786a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8006b26:	2019      	movs	r0, #25
 8006b28:	f000 febb 	bl	80078a2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006b2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ba8 <HAL_InitTick+0x9c>)
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	4a1d      	ldr	r2, [pc, #116]	; (8006ba8 <HAL_InitTick+0x9c>)
 8006b32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006b36:	6193      	str	r3, [r2, #24]
 8006b38:	4b1b      	ldr	r3, [pc, #108]	; (8006ba8 <HAL_InitTick+0x9c>)
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006b44:	f107 0210 	add.w	r2, r7, #16
 8006b48:	f107 0314 	add.w	r3, r7, #20
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f004 fa56 	bl	800b000 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006b54:	f004 fa40 	bl	800afd8 <HAL_RCC_GetPCLK2Freq>
 8006b58:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5c:	4a13      	ldr	r2, [pc, #76]	; (8006bac <HAL_InitTick+0xa0>)
 8006b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b62:	0c9b      	lsrs	r3, r3, #18
 8006b64:	3b01      	subs	r3, #1
 8006b66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006b68:	4b11      	ldr	r3, [pc, #68]	; (8006bb0 <HAL_InitTick+0xa4>)
 8006b6a:	4a12      	ldr	r2, [pc, #72]	; (8006bb4 <HAL_InitTick+0xa8>)
 8006b6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8006b6e:	4b10      	ldr	r3, [pc, #64]	; (8006bb0 <HAL_InitTick+0xa4>)
 8006b70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006b74:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8006b76:	4a0e      	ldr	r2, [pc, #56]	; (8006bb0 <HAL_InitTick+0xa4>)
 8006b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8006b7c:	4b0c      	ldr	r3, [pc, #48]	; (8006bb0 <HAL_InitTick+0xa4>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b82:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <HAL_InitTick+0xa4>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8006b88:	4809      	ldr	r0, [pc, #36]	; (8006bb0 <HAL_InitTick+0xa4>)
 8006b8a:	f004 fa87 	bl	800b09c <HAL_TIM_Base_Init>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d104      	bne.n	8006b9e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8006b94:	4806      	ldr	r0, [pc, #24]	; (8006bb0 <HAL_InitTick+0xa4>)
 8006b96:	f004 fad9 	bl	800b14c <HAL_TIM_Base_Start_IT>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	e000      	b.n	8006ba0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3730      	adds	r7, #48	; 0x30
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	40021000 	.word	0x40021000
 8006bac:	431bde83 	.word	0x431bde83
 8006bb0:	20000fcc 	.word	0x20000fcc
 8006bb4:	40012c00 	.word	0x40012c00

08006bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006bbc:	e7fe      	b.n	8006bbc <NMI_Handler+0x4>

08006bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006bc2:	e7fe      	b.n	8006bc2 <HardFault_Handler+0x4>

08006bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006bc8:	e7fe      	b.n	8006bc8 <MemManage_Handler+0x4>

08006bca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006bce:	e7fe      	b.n	8006bce <BusFault_Handler+0x4>

08006bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006bd4:	e7fe      	b.n	8006bd4 <UsageFault_Handler+0x4>

08006bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006bda:	bf00      	nop
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bc80      	pop	{r7}
 8006be0:	4770      	bx	lr

08006be2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006be2:	b480      	push	{r7}
 8006be4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006be6:	bf00      	nop
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr

08006bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006bf2:	bf00      	nop
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bc80      	pop	{r7}
 8006bf8:	4770      	bx	lr

08006bfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006bfe:	bf00      	nop
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bc80      	pop	{r7}
 8006c04:	4770      	bx	lr
	...

08006c08 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006c0c:	4802      	ldr	r0, [pc, #8]	; (8006c18 <DMA1_Channel2_IRQHandler+0x10>)
 8006c0e:	f000 ffc1 	bl	8007b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006c12:	bf00      	nop
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20000ec0 	.word	0x20000ec0

08006c1c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */


  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006c20:	4802      	ldr	r0, [pc, #8]	; (8006c2c <DMA1_Channel3_IRQHandler+0x10>)
 8006c22:	f000 ffb7 	bl	8007b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8006c26:	bf00      	nop
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20000de8 	.word	0x20000de8

08006c30 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006c34:	4802      	ldr	r0, [pc, #8]	; (8006c40 <DMA1_Channel4_IRQHandler+0x10>)
 8006c36:	f000 ffad 	bl	8007b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006c3a:	bf00      	nop
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	20000f04 	.word	0x20000f04

08006c44 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006c48:	4802      	ldr	r0, [pc, #8]	; (8006c54 <DMA1_Channel5_IRQHandler+0x10>)
 8006c4a:	f000 ffa3 	bl	8007b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006c4e:	bf00      	nop
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20000f48 	.word	0x20000f48

08006c58 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006c5c:	4802      	ldr	r0, [pc, #8]	; (8006c68 <TIM1_UP_IRQHandler+0x10>)
 8006c5e:	f004 fac7 	bl	800b1f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8006c62:	bf00      	nop
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20000fcc 	.word	0x20000fcc

08006c6c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006c70:	4802      	ldr	r0, [pc, #8]	; (8006c7c <I2C1_EV_IRQHandler+0x10>)
 8006c72:	f001 feeb 	bl	8008a4c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006c76:	bf00      	nop
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000e6c 	.word	0x20000e6c

08006c80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006c84:	4802      	ldr	r0, [pc, #8]	; (8006c90 <USART1_IRQHandler+0x10>)
 8006c86:	f004 fecf 	bl	800ba28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006c8a:	bf00      	nop
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	20000f8c 	.word	0x20000f8c

08006c94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006c9a:	4821      	ldr	r0, [pc, #132]	; (8006d20 <USART3_IRQHandler+0x8c>)
 8006c9c:	f004 fec4 	bl	800ba28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
	if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET) {
 8006ca0:	4b1f      	ldr	r3, [pc, #124]	; (8006d20 <USART3_IRQHandler+0x8c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0320 	and.w	r3, r3, #32
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d034      	beq.n	8006d18 <USART3_IRQHandler+0x84>
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8006cae:	2300      	movs	r3, #0
 8006cb0:	607b      	str	r3, [r7, #4]
 8006cb2:	4b1b      	ldr	r3, [pc, #108]	; (8006d20 <USART3_IRQHandler+0x8c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	607b      	str	r3, [r7, #4]
 8006cba:	4b19      	ldr	r3, [pc, #100]	; (8006d20 <USART3_IRQHandler+0x8c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	607b      	str	r3, [r7, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
		count++;
 8006cc4:	4b17      	ldr	r3, [pc, #92]	; (8006d24 <USART3_IRQHandler+0x90>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	4a16      	ldr	r2, [pc, #88]	; (8006d24 <USART3_IRQHandler+0x90>)
 8006ccc:	6013      	str	r3, [r2, #0]
		if(count == _expected_return_msgs)
 8006cce:	4b16      	ldr	r3, [pc, #88]	; (8006d28 <USART3_IRQHandler+0x94>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	4b13      	ldr	r3, [pc, #76]	; (8006d24 <USART3_IRQHandler+0x90>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d11d      	bne.n	8006d18 <USART3_IRQHandler+0x84>
		{
		HAL_UART_DMAStop(&huart3) ;
 8006cdc:	4810      	ldr	r0, [pc, #64]	; (8006d20 <USART3_IRQHandler+0x8c>)
 8006cde:	f004 fe47 	bl	800b970 <HAL_UART_DMAStop>

		_data.dataSize  = MAX_DATA_LENGTH - __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 8006ce2:	4b12      	ldr	r3, [pc, #72]	; (8006d2c <USART3_IRQHandler+0x98>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	4b0f      	ldr	r3, [pc, #60]	; (8006d30 <USART3_IRQHandler+0x9c>)
 8006cf2:	801a      	strh	r2, [r3, #0]
		memcpy(_data.data,rx_buffer,_data.dataSize);
 8006cf4:	4b0e      	ldr	r3, [pc, #56]	; (8006d30 <USART3_IRQHandler+0x9c>)
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	490e      	ldr	r1, [pc, #56]	; (8006d34 <USART3_IRQHandler+0xa0>)
 8006cfc:	480e      	ldr	r0, [pc, #56]	; (8006d38 <USART3_IRQHandler+0xa4>)
 8006cfe:	f006 fb43 	bl	800d388 <memcpy>
		xl430_setRxData(&_data);
 8006d02:	480b      	ldr	r0, [pc, #44]	; (8006d30 <USART3_IRQHandler+0x9c>)
 8006d04:	f000 fc66 	bl	80075d4 <xl430_setRxData>
		HAL_UART_Receive_DMA(&huart3, rx_buffer, 64);
 8006d08:	2240      	movs	r2, #64	; 0x40
 8006d0a:	490a      	ldr	r1, [pc, #40]	; (8006d34 <USART3_IRQHandler+0xa0>)
 8006d0c:	4804      	ldr	r0, [pc, #16]	; (8006d20 <USART3_IRQHandler+0x8c>)
 8006d0e:	f004 fdaf 	bl	800b870 <HAL_UART_Receive_DMA>
		count =0;
 8006d12:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <USART3_IRQHandler+0x90>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]
		}
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8006d18:	bf00      	nop
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	20000e2c 	.word	0x20000e2c
 8006d24:	20000dd8 	.word	0x20000dd8
 8006d28:	20000034 	.word	0x20000034
 8006d2c:	20000de8 	.word	0x20000de8
 8006d30:	20001014 	.word	0x20001014
 8006d34:	20000104 	.word	0x20000104
 8006d38:	20001016 	.word	0x20001016

08006d3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
	return 1;
 8006d40:	2301      	movs	r3, #1
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bc80      	pop	{r7}
 8006d48:	4770      	bx	lr

08006d4a <_kill>:

int _kill(int pid, int sig)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006d54:	f006 faee 	bl	800d334 <__errno>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	2316      	movs	r3, #22
 8006d5c:	6013      	str	r3, [r2, #0]
	return -1;
 8006d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <_exit>:

void _exit (int status)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b082      	sub	sp, #8
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006d72:	f04f 31ff 	mov.w	r1, #4294967295
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7ff ffe7 	bl	8006d4a <_kill>
	while (1) {}		/* Make sure we hang here */
 8006d7c:	e7fe      	b.n	8006d7c <_exit+0x12>

08006d7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b086      	sub	sp, #24
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	617b      	str	r3, [r7, #20]
 8006d8e:	e00a      	b.n	8006da6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006d90:	f3af 8000 	nop.w
 8006d94:	4601      	mov	r1, r0
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	1c5a      	adds	r2, r3, #1
 8006d9a:	60ba      	str	r2, [r7, #8]
 8006d9c:	b2ca      	uxtb	r2, r1
 8006d9e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	3301      	adds	r3, #1
 8006da4:	617b      	str	r3, [r7, #20]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	dbf0      	blt.n	8006d90 <_read+0x12>
	}

return len;
 8006dae:	687b      	ldr	r3, [r7, #4]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	617b      	str	r3, [r7, #20]
 8006dc8:	e009      	b.n	8006dde <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	1c5a      	adds	r2, r3, #1
 8006dce:	60ba      	str	r2, [r7, #8]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	dbf1      	blt.n	8006dca <_write+0x12>
	}
	return len;
 8006de6:	687b      	ldr	r3, [r7, #4]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <_close>:

int _close(int file)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
	return -1;
 8006df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bc80      	pop	{r7}
 8006e04:	4770      	bx	lr

08006e06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006e16:	605a      	str	r2, [r3, #4]
	return 0;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bc80      	pop	{r7}
 8006e22:	4770      	bx	lr

08006e24 <_isatty>:

int _isatty(int file)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
	return 1;
 8006e2c:	2301      	movs	r3, #1
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bc80      	pop	{r7}
 8006e36:	4770      	bx	lr

08006e38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
	return 0;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bc80      	pop	{r7}
 8006e4e:	4770      	bx	lr

08006e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006e58:	4a14      	ldr	r2, [pc, #80]	; (8006eac <_sbrk+0x5c>)
 8006e5a:	4b15      	ldr	r3, [pc, #84]	; (8006eb0 <_sbrk+0x60>)
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006e64:	4b13      	ldr	r3, [pc, #76]	; (8006eb4 <_sbrk+0x64>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d102      	bne.n	8006e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006e6c:	4b11      	ldr	r3, [pc, #68]	; (8006eb4 <_sbrk+0x64>)
 8006e6e:	4a12      	ldr	r2, [pc, #72]	; (8006eb8 <_sbrk+0x68>)
 8006e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006e72:	4b10      	ldr	r3, [pc, #64]	; (8006eb4 <_sbrk+0x64>)
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4413      	add	r3, r2
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d207      	bcs.n	8006e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006e80:	f006 fa58 	bl	800d334 <__errno>
 8006e84:	4602      	mov	r2, r0
 8006e86:	230c      	movs	r3, #12
 8006e88:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8006e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e8e:	e009      	b.n	8006ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006e90:	4b08      	ldr	r3, [pc, #32]	; (8006eb4 <_sbrk+0x64>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006e96:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <_sbrk+0x64>)
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	4a05      	ldr	r2, [pc, #20]	; (8006eb4 <_sbrk+0x64>)
 8006ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	20005000 	.word	0x20005000
 8006eb0:	00000400 	.word	0x00000400
 8006eb4:	20000ddc 	.word	0x20000ddc
 8006eb8:	20001060 	.word	0x20001060

08006ebc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006ec0:	bf00      	nop
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bc80      	pop	{r7}
 8006ec6:	4770      	bx	lr

08006ec8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	0a5a      	lsrs	r2, r3, #9
 8006ed8:	490f      	ldr	r1, [pc, #60]	; (8006f18 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006eda:	fba1 1202 	umull	r1, r2, r1, r2
 8006ede:	09d2      	lsrs	r2, r2, #7
 8006ee0:	490e      	ldr	r1, [pc, #56]	; (8006f1c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8006ee2:	fb01 f202 	mul.w	r2, r1, r2
 8006ee6:	1a9b      	subs	r3, r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	0a5b      	lsrs	r3, r3, #9
 8006ef0:	4a09      	ldr	r2, [pc, #36]	; (8006f18 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef6:	09db      	lsrs	r3, r3, #7
 8006ef8:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	441a      	add	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	601a      	str	r2, [r3, #0]
}
 8006f0c:	bf00      	nop
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bc80      	pop	{r7}
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	00044b83 	.word	0x00044b83
 8006f1c:	3b9aca00 	.word	0x3b9aca00

08006f20 <xl430_int>:

extern uint8_t rx_buffer[64];
uint8_t _expected_return_msgs =1;

void xl430_int(UART_HandleTypeDef *huart)
{
 8006f20:	b5b0      	push	{r4, r5, r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
	_huart = *huart;
 8006f28:	4a0c      	ldr	r2, [pc, #48]	; (8006f5c <xl430_int+0x3c>)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4614      	mov	r4, r2
 8006f2e:	461d      	mov	r5, r3
 8006f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006f40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Receive_DMA(&_huart, rx_buffer, 64);
 8006f44:	2240      	movs	r2, #64	; 0x40
 8006f46:	4906      	ldr	r1, [pc, #24]	; (8006f60 <xl430_int+0x40>)
 8006f48:	4804      	ldr	r0, [pc, #16]	; (8006f5c <xl430_int+0x3c>)
 8006f4a:	f004 fc91 	bl	800b870 <HAL_UART_Receive_DMA>
	HAL_HalfDuplex_EnableReceiver(&_huart);
 8006f4e:	4803      	ldr	r0, [pc, #12]	; (8006f5c <xl430_int+0x3c>)
 8006f50:	f004 feb8 	bl	800bcc4 <HAL_HalfDuplex_EnableReceiver>
}
 8006f54:	bf00      	nop
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8006f5c:	200000c4 	.word	0x200000c4
 8006f60:	20000104 	.word	0x20000104

08006f64 <xl430_writebuffer>:

void xl430_writebuffer(uint8_t * dataBuf,uint16_t data_length)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	807b      	strh	r3, [r7, #2]
	HAL_HalfDuplex_EnableTransmitter(&_huart);
 8006f70:	4807      	ldr	r0, [pc, #28]	; (8006f90 <xl430_writebuffer+0x2c>)
 8006f72:	f004 fe74 	bl	800bc5e <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&_huart, dataBuf, data_length, 100);
 8006f76:	887a      	ldrh	r2, [r7, #2]
 8006f78:	2364      	movs	r3, #100	; 0x64
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	4804      	ldr	r0, [pc, #16]	; (8006f90 <xl430_writebuffer+0x2c>)
 8006f7e:	f004 fb79 	bl	800b674 <HAL_UART_Transmit>
	HAL_HalfDuplex_EnableReceiver(&_huart);
 8006f82:	4803      	ldr	r0, [pc, #12]	; (8006f90 <xl430_writebuffer+0x2c>)
 8006f84:	f004 fe9e 	bl	800bcc4 <HAL_HalfDuplex_EnableReceiver>

}
 8006f88:	bf00      	nop
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	200000c4 	.word	0x200000c4

08006f94 <xl430_readbuffer>:

/*not work for broadcast*/
struct prsRxData xl430_readbuffer()
{
 8006f94:	b590      	push	{r4, r7, lr}
 8006f96:	b089      	sub	sp, #36	; 0x24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
	struct prsRxData _retData;
	_retData.id 		= _rxData.data[4];
 8006f9c:	4b2e      	ldr	r3, [pc, #184]	; (8007058 <xl430_readbuffer+0xc4>)
 8006f9e:	799b      	ldrb	r3, [r3, #6]
 8006fa0:	733b      	strb	r3, [r7, #12]
	_retData.errorFlag 	= _rxData.data[8];
 8006fa2:	4b2d      	ldr	r3, [pc, #180]	; (8007058 <xl430_readbuffer+0xc4>)
 8006fa4:	7a9b      	ldrb	r3, [r3, #10]
 8006fa6:	737b      	strb	r3, [r7, #13]
	_retData.crc_rx 	= _rxData.data[_rxData.dataSize-2] | (_rxData.data[_rxData.dataSize-1] <<8);
 8006fa8:	4b2b      	ldr	r3, [pc, #172]	; (8007058 <xl430_readbuffer+0xc4>)
 8006faa:	881b      	ldrh	r3, [r3, #0]
 8006fac:	3b02      	subs	r3, #2
 8006fae:	4a2a      	ldr	r2, [pc, #168]	; (8007058 <xl430_readbuffer+0xc4>)
 8006fb0:	4413      	add	r3, r2
 8006fb2:	789b      	ldrb	r3, [r3, #2]
 8006fb4:	b21a      	sxth	r2, r3
 8006fb6:	4b28      	ldr	r3, [pc, #160]	; (8007058 <xl430_readbuffer+0xc4>)
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	4926      	ldr	r1, [pc, #152]	; (8007058 <xl430_readbuffer+0xc4>)
 8006fbe:	440b      	add	r3, r1
 8006fc0:	789b      	ldrb	r3, [r3, #2]
 8006fc2:	021b      	lsls	r3, r3, #8
 8006fc4:	b21b      	sxth	r3, r3
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	b21b      	sxth	r3, r3
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	81fb      	strh	r3, [r7, #14]
	_retData.crc_cal 	= update_crc(0, _rxData.data, _rxData.dataSize-2);
 8006fce:	4b22      	ldr	r3, [pc, #136]	; (8007058 <xl430_readbuffer+0xc4>)
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	3b02      	subs	r3, #2
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	4920      	ldr	r1, [pc, #128]	; (800705c <xl430_readbuffer+0xc8>)
 8006fda:	2000      	movs	r0, #0
 8006fdc:	f000 f928 	bl	8007230 <update_crc>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	823b      	strh	r3, [r7, #16]
	_retData.dat_len 	= _rxData.data[5] | (_rxData.data[6] <<8);
 8006fe4:	4b1c      	ldr	r3, [pc, #112]	; (8007058 <xl430_readbuffer+0xc4>)
 8006fe6:	79db      	ldrb	r3, [r3, #7]
 8006fe8:	b21a      	sxth	r2, r3
 8006fea:	4b1b      	ldr	r3, [pc, #108]	; (8007058 <xl430_readbuffer+0xc4>)
 8006fec:	7a1b      	ldrb	r3, [r3, #8]
 8006fee:	021b      	lsls	r3, r3, #8
 8006ff0:	b21b      	sxth	r3, r3
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	b21b      	sxth	r3, r3
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	827b      	strh	r3, [r7, #18]
	_retData.data = 0;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	617b      	str	r3, [r7, #20]
	if(_retData.crc_cal == _retData.crc_rx)
 8006ffe:	8a3a      	ldrh	r2, [r7, #16]
 8007000:	89fb      	ldrh	r3, [r7, #14]
 8007002:	429a      	cmp	r2, r3
 8007004:	d102      	bne.n	800700c <xl430_readbuffer+0x78>
	{
		_retData.crc_check = true;
 8007006:	2301      	movs	r3, #1
 8007008:	763b      	strb	r3, [r7, #24]
 800700a:	e001      	b.n	8007010 <xl430_readbuffer+0x7c>
	}
	else
	{
		_retData.crc_check = false;
 800700c:	2300      	movs	r3, #0
 800700e:	763b      	strb	r3, [r7, #24]
	}

	for(uint16_t n =0; n<_retData.dat_len-4;n++)
 8007010:	2300      	movs	r3, #0
 8007012:	83fb      	strh	r3, [r7, #30]
 8007014:	e00f      	b.n	8007036 <xl430_readbuffer+0xa2>
	{
		_retData.data = _retData.data | (_rxData.data[9+n] <<8*n);
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	8bfb      	ldrh	r3, [r7, #30]
 800701a:	3309      	adds	r3, #9
 800701c:	490e      	ldr	r1, [pc, #56]	; (8007058 <xl430_readbuffer+0xc4>)
 800701e:	440b      	add	r3, r1
 8007020:	789b      	ldrb	r3, [r3, #2]
 8007022:	4619      	mov	r1, r3
 8007024:	8bfb      	ldrh	r3, [r7, #30]
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	fa01 f303 	lsl.w	r3, r1, r3
 800702c:	4313      	orrs	r3, r2
 800702e:	617b      	str	r3, [r7, #20]
	for(uint16_t n =0; n<_retData.dat_len-4;n++)
 8007030:	8bfb      	ldrh	r3, [r7, #30]
 8007032:	3301      	adds	r3, #1
 8007034:	83fb      	strh	r3, [r7, #30]
 8007036:	8bfa      	ldrh	r2, [r7, #30]
 8007038:	8a7b      	ldrh	r3, [r7, #18]
 800703a:	3b04      	subs	r3, #4
 800703c:	429a      	cmp	r2, r3
 800703e:	dbea      	blt.n	8007016 <xl430_readbuffer+0x82>
	}

	return _retData;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	461c      	mov	r4, r3
 8007044:	f107 030c 	add.w	r3, r7, #12
 8007048:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800704a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	3724      	adds	r7, #36	; 0x24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd90      	pop	{r4, r7, pc}
 8007056:	bf00      	nop
 8007058:	20000144 	.word	0x20000144
 800705c:	20000146 	.word	0x20000146

08007060 <xl430_readBroadcastBuffer>:

void xl430_readBroadcastBuffer(uint8_t numOf_IDs, struct prsRxData *_rxDataArr)
{
 8007060:	b590      	push	{r4, r7, lr}
 8007062:	b099      	sub	sp, #100	; 0x64
 8007064:	af00      	add	r7, sp, #0
 8007066:	4603      	mov	r3, r0
 8007068:	6039      	str	r1, [r7, #0]
 800706a:	71fb      	strb	r3, [r7, #7]
	struct prsRxData _retData;
	uint16_t partialDataLen = _rxData.dataSize/numOf_IDs;
 800706c:	4b6e      	ldr	r3, [pc, #440]	; (8007228 <xl430_readBroadcastBuffer+0x1c8>)
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	461a      	mov	r2, r3
 8007072:	79fb      	ldrb	r3, [r7, #7]
 8007074:	fb92 f3f3 	sdiv	r3, r2, r3
 8007078:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint8_t __dataBucket[64];

	 memcpy (__dataBucket,_rxData.data,_rxData.dataSize);
 800707c:	4b6a      	ldr	r3, [pc, #424]	; (8007228 <xl430_readBroadcastBuffer+0x1c8>)
 800707e:	881b      	ldrh	r3, [r3, #0]
 8007080:	461a      	mov	r2, r3
 8007082:	f107 0308 	add.w	r3, r7, #8
 8007086:	4969      	ldr	r1, [pc, #420]	; (800722c <xl430_readBroadcastBuffer+0x1cc>)
 8007088:	4618      	mov	r0, r3
 800708a:	f006 f97d 	bl	800d388 <memcpy>

	for(uint8_t i =0; i <numOf_IDs;i++ )
 800708e:	2300      	movs	r3, #0
 8007090:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007094:	e0be      	b.n	8007214 <xl430_readBroadcastBuffer+0x1b4>
	{
	_retData.id 		= __dataBucket[4+(partialDataLen*i)];
 8007096:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800709a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800709e:	fb02 f303 	mul.w	r3, r2, r3
 80070a2:	3304      	adds	r3, #4
 80070a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80070a8:	4413      	add	r3, r2
 80070aa:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80070ae:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	_retData.errorFlag 	= __dataBucket[8+(partialDataLen*i)];
 80070b2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80070b6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80070ba:	fb02 f303 	mul.w	r3, r2, r3
 80070be:	3308      	adds	r3, #8
 80070c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80070c4:	4413      	add	r3, r2
 80070c6:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80070ca:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	/* need to double check math and logic*/
	_retData.crc_rx 	= __dataBucket[partialDataLen-2+(partialDataLen*i)] | (__dataBucket[partialDataLen-1+(partialDataLen*i)] <<8);
 80070ce:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80070d2:	1e9a      	subs	r2, r3, #2
 80070d4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80070d8:	f897 105f 	ldrb.w	r1, [r7, #95]	; 0x5f
 80070dc:	fb01 f303 	mul.w	r3, r1, r3
 80070e0:	4413      	add	r3, r2
 80070e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80070e6:	4413      	add	r3, r2
 80070e8:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80070ec:	b21a      	sxth	r2, r3
 80070ee:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80070f2:	1e59      	subs	r1, r3, #1
 80070f4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80070f8:	f897 005f 	ldrb.w	r0, [r7, #95]	; 0x5f
 80070fc:	fb00 f303 	mul.w	r3, r0, r3
 8007100:	440b      	add	r3, r1
 8007102:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8007106:	440b      	add	r3, r1
 8007108:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 800710c:	021b      	lsls	r3, r3, #8
 800710e:	b21b      	sxth	r3, r3
 8007110:	4313      	orrs	r3, r2
 8007112:	b21b      	sxth	r3, r3
 8007114:	b29b      	uxth	r3, r3
 8007116:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	_retData.crc_cal 	= update_crc(0, __dataBucket+(partialDataLen*i), partialDataLen-2);
 800711a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800711e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8007122:	fb02 f303 	mul.w	r3, r2, r3
 8007126:	461a      	mov	r2, r3
 8007128:	f107 0308 	add.w	r3, r7, #8
 800712c:	1899      	adds	r1, r3, r2
 800712e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007132:	3b02      	subs	r3, #2
 8007134:	b29b      	uxth	r3, r3
 8007136:	461a      	mov	r2, r3
 8007138:	2000      	movs	r0, #0
 800713a:	f000 f879 	bl	8007230 <update_crc>
 800713e:	4603      	mov	r3, r0
 8007140:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	_retData.dat_len 	= __dataBucket[5+(partialDataLen*i)] | (__dataBucket[6+(partialDataLen*i)] <<8);
 8007144:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007148:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800714c:	fb02 f303 	mul.w	r3, r2, r3
 8007150:	3305      	adds	r3, #5
 8007152:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007156:	4413      	add	r3, r2
 8007158:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 800715c:	b21a      	sxth	r2, r3
 800715e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007162:	f897 105f 	ldrb.w	r1, [r7, #95]	; 0x5f
 8007166:	fb01 f303 	mul.w	r3, r1, r3
 800716a:	3306      	adds	r3, #6
 800716c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8007170:	440b      	add	r3, r1
 8007172:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8007176:	021b      	lsls	r3, r3, #8
 8007178:	b21b      	sxth	r3, r3
 800717a:	4313      	orrs	r3, r2
 800717c:	b21b      	sxth	r3, r3
 800717e:	b29b      	uxth	r3, r3
 8007180:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	_retData.data = 0;
 8007184:	2300      	movs	r3, #0
 8007186:	653b      	str	r3, [r7, #80]	; 0x50
	/*-------------------------*/

	if(_retData.crc_cal == _retData.crc_rx)
 8007188:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800718c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007190:	429a      	cmp	r2, r3
 8007192:	d103      	bne.n	800719c <xl430_readBroadcastBuffer+0x13c>
	{
		_retData.crc_check = true;
 8007194:	2301      	movs	r3, #1
 8007196:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800719a:	e002      	b.n	80071a2 <xl430_readBroadcastBuffer+0x142>
	}
	else
	{
		_retData.crc_check = false;
 800719c:	2300      	movs	r3, #0
 800719e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	}

	for(uint16_t n =0; n<_retData.dat_len-4;n++)
 80071a2:	2300      	movs	r3, #0
 80071a4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80071a8:	e01d      	b.n	80071e6 <xl430_readBroadcastBuffer+0x186>
	{
		_retData.data = _retData.data | (__dataBucket[9+n+((partialDataLen*i))] <<8*n);
 80071aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071ac:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80071b0:	f103 0109 	add.w	r1, r3, #9
 80071b4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80071b8:	f897 005f 	ldrb.w	r0, [r7, #95]	; 0x5f
 80071bc:	fb00 f303 	mul.w	r3, r0, r3
 80071c0:	440b      	add	r3, r1
 80071c2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80071c6:	440b      	add	r3, r1
 80071c8:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80071cc:	4619      	mov	r1, r3
 80071ce:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80071d2:	00db      	lsls	r3, r3, #3
 80071d4:	fa01 f303 	lsl.w	r3, r1, r3
 80071d8:	4313      	orrs	r3, r2
 80071da:	653b      	str	r3, [r7, #80]	; 0x50
	for(uint16_t n =0; n<_retData.dat_len-4;n++)
 80071dc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80071e0:	3301      	adds	r3, #1
 80071e2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80071e6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80071ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071ee:	3b04      	subs	r3, #4
 80071f0:	429a      	cmp	r2, r3
 80071f2:	dbda      	blt.n	80071aa <xl430_readBroadcastBuffer+0x14a>
	}
	_rxDataArr[i] = _retData ;
 80071f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071f8:	011b      	lsls	r3, r3, #4
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	4413      	add	r3, r2
 80071fe:	461c      	mov	r4, r3
 8007200:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007204:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007206:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(uint8_t i =0; i <numOf_IDs;i++ )
 800720a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800720e:	3301      	adds	r3, #1
 8007210:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007214:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8007218:	79fb      	ldrb	r3, [r7, #7]
 800721a:	429a      	cmp	r2, r3
 800721c:	f4ff af3b 	bcc.w	8007096 <xl430_readBroadcastBuffer+0x36>
	}//end of for loop



}
 8007220:	bf00      	nop
 8007222:	3764      	adds	r7, #100	; 0x64
 8007224:	46bd      	mov	sp, r7
 8007226:	bd90      	pop	{r4, r7, pc}
 8007228:	20000144 	.word	0x20000144
 800722c:	20000146 	.word	0x20000146

08007230 <update_crc>:

uint16_t update_crc(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8007236:	af00      	add	r7, sp, #0
 8007238:	463b      	mov	r3, r7
 800723a:	6019      	str	r1, [r3, #0]
 800723c:	4611      	mov	r1, r2
 800723e:	1dbb      	adds	r3, r7, #6
 8007240:	4602      	mov	r2, r0
 8007242:	801a      	strh	r2, [r3, #0]
 8007244:	1d3b      	adds	r3, r7, #4
 8007246:	460a      	mov	r2, r1
 8007248:	801a      	strh	r2, [r3, #0]
    uint16_t i, j;
    uint16_t crc_table[256] = {
 800724a:	f107 030c 	add.w	r3, r7, #12
 800724e:	4a1e      	ldr	r2, [pc, #120]	; (80072c8 <update_crc+0x98>)
 8007250:	4618      	mov	r0, r3
 8007252:	4611      	mov	r1, r2
 8007254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007258:	461a      	mov	r2, r3
 800725a:	f006 f895 	bl	800d388 <memcpy>
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
    };

    for(j = 0; j < data_blk_size; j++)
 800725e:	2300      	movs	r3, #0
 8007260:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8007264:	e023      	b.n	80072ae <update_crc+0x7e>
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8007266:	1dbb      	adds	r3, r7, #6
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	b29a      	uxth	r2, r3
 800726e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8007272:	4639      	mov	r1, r7
 8007274:	6809      	ldr	r1, [r1, #0]
 8007276:	440b      	add	r3, r1
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	4053      	eors	r3, r2
 800727e:	b29b      	uxth	r3, r3
 8007280:	b2db      	uxtb	r3, r3
 8007282:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
        crc_accum = (crc_accum << 8) ^ crc_table[i];
 8007286:	1dbb      	adds	r3, r7, #6
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	021b      	lsls	r3, r3, #8
 800728c:	b21a      	sxth	r2, r3
 800728e:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8007292:	f107 030c 	add.w	r3, r7, #12
 8007296:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800729a:	b21b      	sxth	r3, r3
 800729c:	4053      	eors	r3, r2
 800729e:	b21a      	sxth	r2, r3
 80072a0:	1dbb      	adds	r3, r7, #6
 80072a2:	801a      	strh	r2, [r3, #0]
    for(j = 0; j < data_blk_size; j++)
 80072a4:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80072a8:	3301      	adds	r3, #1
 80072aa:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 80072ae:	1d3b      	adds	r3, r7, #4
 80072b0:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d3d5      	bcc.n	8007266 <update_crc+0x36>
    }

    return crc_accum;
 80072ba:	1dbb      	adds	r3, r7, #6
 80072bc:	881b      	ldrh	r3, [r3, #0]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	0800e9a8 	.word	0x0800e9a8

080072cc <xl430_ping>:


/*---------api functions----------*/
bool xl430_ping(uint8_t ID)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08a      	sub	sp, #40	; 0x28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	4603      	mov	r3, r0
 80072d4:	71fb      	strb	r3, [r7, #7]
	uint8_t __buffer[10] = {0xFF,0xFF,0xFD,0x00,0X00,0x03,0x00,0x01,0x00,0x00};
 80072d6:	4a1b      	ldr	r2, [pc, #108]	; (8007344 <xl430_ping+0x78>)
 80072d8:	f107 031c 	add.w	r3, r7, #28
 80072dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80072de:	c303      	stmia	r3!, {r0, r1}
 80072e0:	801a      	strh	r2, [r3, #0]
	__buffer[4] = ID;
 80072e2:	79fb      	ldrb	r3, [r7, #7]
 80072e4:	f887 3020 	strb.w	r3, [r7, #32]
	uint16_t crc =update_crc(0,__buffer,8);
 80072e8:	f107 031c 	add.w	r3, r7, #28
 80072ec:	2208      	movs	r2, #8
 80072ee:	4619      	mov	r1, r3
 80072f0:	2000      	movs	r0, #0
 80072f2:	f7ff ff9d 	bl	8007230 <update_crc>
 80072f6:	4603      	mov	r3, r0
 80072f8:	84fb      	strh	r3, [r7, #38]	; 0x26
	__buffer[9] = (crc>>8) & 0x00FF;
 80072fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072fc:	0a1b      	lsrs	r3, r3, #8
 80072fe:	b29b      	uxth	r3, r3
 8007300:	b2db      	uxtb	r3, r3
 8007302:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	__buffer[8] = (crc & 0x00FF);
 8007306:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007308:	b2db      	uxtb	r3, r3
 800730a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	_expected_return_msgs = 1;
 800730e:	4b0e      	ldr	r3, [pc, #56]	; (8007348 <xl430_ping+0x7c>)
 8007310:	2201      	movs	r2, #1
 8007312:	701a      	strb	r2, [r3, #0]
	xl430_writebuffer(__buffer,10);
 8007314:	f107 031c 	add.w	r3, r7, #28
 8007318:	210a      	movs	r1, #10
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff fe22 	bl	8006f64 <xl430_writebuffer>

	struct prsRxData _data;
	_data = xl430_readbuffer();
 8007320:	f107 030c 	add.w	r3, r7, #12
 8007324:	4618      	mov	r0, r3
 8007326:	f7ff fe35 	bl	8006f94 <xl430_readbuffer>

		if(_data.crc_check && (!_data.errorFlag))
 800732a:	7e3b      	ldrb	r3, [r7, #24]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d004      	beq.n	800733a <xl430_ping+0x6e>
 8007330:	7b7b      	ldrb	r3, [r7, #13]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <xl430_ping+0x6e>
		{
			return true;
 8007336:	2301      	movs	r3, #1
 8007338:	e000      	b.n	800733c <xl430_ping+0x70>
		}
		else
		{
			return false;
 800733a:	2300      	movs	r3, #0
		}


}
 800733c:	4618      	mov	r0, r3
 800733e:	3728      	adds	r7, #40	; 0x28
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	0800eba8 	.word	0x0800eba8
 8007348:	20000034 	.word	0x20000034

0800734c <xl430_writeToAddress>:

void xl430_writeToAddress(uint8_t Id ,int tx_data,const uint16_t *address,const uint8_t *__inst)
{
 800734c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800734e:	b08b      	sub	sp, #44	; 0x2c
 8007350:	af00      	add	r7, sp, #0
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	607a      	str	r2, [r7, #4]
 8007356:	603b      	str	r3, [r7, #0]
 8007358:	4603      	mov	r3, r0
 800735a:	73fb      	strb	r3, [r7, #15]
 800735c:	466b      	mov	r3, sp
 800735e:	461e      	mov	r6, r3
	  uint16_t mem_size=12;
 8007360:	230c      	movs	r3, #12
 8007362:	84fb      	strh	r3, [r7, #38]	; 0x26
	  uint16_t crc;
	  char crc_[2];
	  uint8_t data_size =4;
 8007364:	2304      	movs	r3, #4
 8007366:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	  uint8_t data_array[4];



	  data_array[0] = tx_data & 0x000000FF;
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	b2db      	uxtb	r3, r3
 800736e:	753b      	strb	r3, [r7, #20]
	  data_array[1] = (tx_data>>8) & 0x000000FF;
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	121b      	asrs	r3, r3, #8
 8007374:	b2db      	uxtb	r3, r3
 8007376:	757b      	strb	r3, [r7, #21]
	  data_array[2] = (tx_data>>16) & 0x000000FF;
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	141b      	asrs	r3, r3, #16
 800737c:	b2db      	uxtb	r3, r3
 800737e:	75bb      	strb	r3, [r7, #22]
	  data_array[3] = (tx_data>>24) & 0x000000FF;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	0e1b      	lsrs	r3, r3, #24
 8007384:	b2db      	uxtb	r3, r3
 8007386:	75fb      	strb	r3, [r7, #23]

	  mem_size += data_size;
 8007388:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800738c:	b29a      	uxth	r2, r3
 800738e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007390:	4413      	add	r3, r2
 8007392:	84fb      	strh	r3, [r7, #38]	; 0x26
	  uint8_t m_tx_buffer [mem_size];
 8007394:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 8007396:	462b      	mov	r3, r5
 8007398:	3b01      	subs	r3, #1
 800739a:	623b      	str	r3, [r7, #32]
 800739c:	b2a9      	uxth	r1, r5
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	f04f 0400 	mov.w	r4, #0
 80073aa:	00d4      	lsls	r4, r2, #3
 80073ac:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80073b0:	00cb      	lsls	r3, r1, #3
 80073b2:	b2a9      	uxth	r1, r5
 80073b4:	f04f 0200 	mov.w	r2, #0
 80073b8:	f04f 0300 	mov.w	r3, #0
 80073bc:	f04f 0400 	mov.w	r4, #0
 80073c0:	00d4      	lsls	r4, r2, #3
 80073c2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80073c6:	00cb      	lsls	r3, r1, #3
 80073c8:	462b      	mov	r3, r5
 80073ca:	3307      	adds	r3, #7
 80073cc:	08db      	lsrs	r3, r3, #3
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	ebad 0d03 	sub.w	sp, sp, r3
 80073d4:	466b      	mov	r3, sp
 80073d6:	3300      	adds	r3, #0
 80073d8:	61fb      	str	r3, [r7, #28]
	  uint16_t m_len =data_size+5;
 80073da:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3305      	adds	r3, #5
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	827b      	strh	r3, [r7, #18]


	  memcpy (m_tx_buffer,header,6);
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	2206      	movs	r2, #6
 80073ea:	4926      	ldr	r1, [pc, #152]	; (8007484 <xl430_writeToAddress+0x138>)
 80073ec:	4618      	mov	r0, r3
 80073ee:	f005 ffcb 	bl	800d388 <memcpy>
	  memcpy (m_tx_buffer+sizeof(header),&Id,1);
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	3304      	adds	r3, #4
 80073f6:	7bfa      	ldrb	r2, [r7, #15]
 80073f8:	701a      	strb	r2, [r3, #0]
	  memcpy (m_tx_buffer+sizeof(header)+1,&m_len,2);
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	3305      	adds	r3, #5
 80073fe:	8a7a      	ldrh	r2, [r7, #18]
 8007400:	801a      	strh	r2, [r3, #0]
	  memcpy (m_tx_buffer+sizeof(header)+3,__inst,1);
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	3307      	adds	r3, #7
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	7812      	ldrb	r2, [r2, #0]
 800740a:	701a      	strb	r2, [r3, #0]
	  memcpy (m_tx_buffer+sizeof(header)+4,address,2);
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	3308      	adds	r3, #8
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	8812      	ldrh	r2, [r2, #0]
 8007414:	b292      	uxth	r2, r2
 8007416:	801a      	strh	r2, [r3, #0]
	  memcpy (m_tx_buffer+sizeof(header)+6,data_array,data_size);
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	330a      	adds	r3, #10
 800741c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8007420:	f107 0114 	add.w	r1, r7, #20
 8007424:	4618      	mov	r0, r3
 8007426:	f005 ffaf 	bl	800d388 <memcpy>

	  crc = update_crc(0,m_tx_buffer,mem_size -2);
 800742a:	69f9      	ldr	r1, [r7, #28]
 800742c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800742e:	3b02      	subs	r3, #2
 8007430:	b29b      	uxth	r3, r3
 8007432:	461a      	mov	r2, r3
 8007434:	2000      	movs	r0, #0
 8007436:	f7ff fefb 	bl	8007230 <update_crc>
 800743a:	4603      	mov	r3, r0
 800743c:	837b      	strh	r3, [r7, #26]
	  crc_[0]=crc & 0x00FF;
 800743e:	8b7b      	ldrh	r3, [r7, #26]
 8007440:	b2db      	uxtb	r3, r3
 8007442:	763b      	strb	r3, [r7, #24]
	  crc_[1]=(crc>>8) & 0x00FF;
 8007444:	8b7b      	ldrh	r3, [r7, #26]
 8007446:	0a1b      	lsrs	r3, r3, #8
 8007448:	b29b      	uxth	r3, r3
 800744a:	b2db      	uxtb	r3, r3
 800744c:	767b      	strb	r3, [r7, #25]
	  memcpy (m_tx_buffer+sizeof(header)+6+data_size,crc_,2);
 800744e:	69fa      	ldr	r2, [r7, #28]
 8007450:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007454:	330a      	adds	r3, #10
 8007456:	4413      	add	r3, r2
 8007458:	8b3a      	ldrh	r2, [r7, #24]
 800745a:	801a      	strh	r2, [r3, #0]


	  if(Id == 0xFE)
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	2bfe      	cmp	r3, #254	; 0xfe
 8007460:	d103      	bne.n	800746a <xl430_writeToAddress+0x11e>
	  {
		  _expected_return_msgs = 2;
 8007462:	4b09      	ldr	r3, [pc, #36]	; (8007488 <xl430_writeToAddress+0x13c>)
 8007464:	2202      	movs	r2, #2
 8007466:	701a      	strb	r2, [r3, #0]
 8007468:	e002      	b.n	8007470 <xl430_writeToAddress+0x124>
	  }
	  else
	  {
		  _expected_return_msgs = 1;
 800746a:	4b07      	ldr	r3, [pc, #28]	; (8007488 <xl430_writeToAddress+0x13c>)
 800746c:	2201      	movs	r2, #1
 800746e:	701a      	strb	r2, [r3, #0]
	  }
	    xl430_writebuffer(m_tx_buffer,sizeof(m_tx_buffer));
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	4629      	mov	r1, r5
 8007474:	4618      	mov	r0, r3
 8007476:	f7ff fd75 	bl	8006f64 <xl430_writebuffer>
 800747a:	46b5      	mov	sp, r6



}
 800747c:	bf00      	nop
 800747e:	372c      	adds	r7, #44	; 0x2c
 8007480:	46bd      	mov	sp, r7
 8007482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007484:	0800edbc 	.word	0x0800edbc
 8007488:	20000034 	.word	0x20000034

0800748c <xl430_Action>:

void xl430_Action()
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
  uint8_t _dataArr[]={0xFF,0xFF,0xFD,0x00,0xFE,0x03,0x00,0x05,0x00,0x00};
 8007492:	4a0e      	ldr	r2, [pc, #56]	; (80074cc <xl430_Action+0x40>)
 8007494:	1d3b      	adds	r3, r7, #4
 8007496:	ca07      	ldmia	r2, {r0, r1, r2}
 8007498:	c303      	stmia	r3!, {r0, r1}
 800749a:	801a      	strh	r2, [r3, #0]
  uint16_t crc;
  crc = update_crc(0,_dataArr,8);
 800749c:	1d3b      	adds	r3, r7, #4
 800749e:	2208      	movs	r2, #8
 80074a0:	4619      	mov	r1, r3
 80074a2:	2000      	movs	r0, #0
 80074a4:	f7ff fec4 	bl	8007230 <update_crc>
 80074a8:	4603      	mov	r3, r0
 80074aa:	807b      	strh	r3, [r7, #2]
  memcpy (_dataArr+8,&crc,2);
 80074ac:	1d3b      	adds	r3, r7, #4
 80074ae:	3308      	adds	r3, #8
 80074b0:	887a      	ldrh	r2, [r7, #2]
 80074b2:	801a      	strh	r2, [r3, #0]
  _expected_return_msgs=1;
 80074b4:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <xl430_Action+0x44>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	701a      	strb	r2, [r3, #0]
  xl430_writebuffer(_dataArr,10);
 80074ba:	1d3b      	adds	r3, r7, #4
 80074bc:	210a      	movs	r1, #10
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff fd50 	bl	8006f64 <xl430_writebuffer>

}
 80074c4:	bf00      	nop
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	0800ebb4 	.word	0x0800ebb4
 80074d0:	20000034 	.word	0x20000034

080074d4 <xl430_syncRead>:



void xl430_syncRead(const uint16_t *address,const uint8_t *ID_array, uint8_t sizeofArray)
{
 80074d4:	b5b0      	push	{r4, r5, r7, lr}
 80074d6:	b08a      	sub	sp, #40	; 0x28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	4613      	mov	r3, r2
 80074e0:	71fb      	strb	r3, [r7, #7]
 80074e2:	466b      	mov	r3, sp
 80074e4:	461d      	mov	r5, r3
  uint16_t mem_size=14+sizeofArray;
 80074e6:	79fb      	ldrb	r3, [r7, #7]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	330e      	adds	r3, #14
 80074ec:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t crc;
  uint16_t data_length = 4;
 80074ee:	2304      	movs	r3, #4
 80074f0:	833b      	strh	r3, [r7, #24]

  uint8_t m_tx_buffer [mem_size];
 80074f2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80074f4:	4603      	mov	r3, r0
 80074f6:	3b01      	subs	r3, #1
 80074f8:	623b      	str	r3, [r7, #32]
 80074fa:	b281      	uxth	r1, r0
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	f04f 0300 	mov.w	r3, #0
 8007504:	f04f 0400 	mov.w	r4, #0
 8007508:	00d4      	lsls	r4, r2, #3
 800750a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800750e:	00cb      	lsls	r3, r1, #3
 8007510:	b281      	uxth	r1, r0
 8007512:	f04f 0200 	mov.w	r2, #0
 8007516:	f04f 0300 	mov.w	r3, #0
 800751a:	f04f 0400 	mov.w	r4, #0
 800751e:	00d4      	lsls	r4, r2, #3
 8007520:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007524:	00cb      	lsls	r3, r1, #3
 8007526:	4603      	mov	r3, r0
 8007528:	3307      	adds	r3, #7
 800752a:	08db      	lsrs	r3, r3, #3
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	ebad 0d03 	sub.w	sp, sp, r3
 8007532:	466b      	mov	r3, sp
 8007534:	3300      	adds	r3, #0
 8007536:	61fb      	str	r3, [r7, #28]
  uint16_t m_len =7+sizeofArray;
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	b29b      	uxth	r3, r3
 800753c:	3307      	adds	r3, #7
 800753e:	b29b      	uxth	r3, r3
 8007540:	82fb      	strh	r3, [r7, #22]

  memcpy (m_tx_buffer,header,6);
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	2206      	movs	r2, #6
 8007546:	4920      	ldr	r1, [pc, #128]	; (80075c8 <xl430_syncRead+0xf4>)
 8007548:	4618      	mov	r0, r3
 800754a:	f005 ff1d 	bl	800d388 <memcpy>
  memcpy (m_tx_buffer+sizeof(header),servo_ID+2,1); //broadcast ID
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	3304      	adds	r3, #4
 8007552:	4a1e      	ldr	r2, [pc, #120]	; (80075cc <xl430_syncRead+0xf8>)
 8007554:	7812      	ldrb	r2, [r2, #0]
 8007556:	701a      	strb	r2, [r3, #0]
  memcpy (m_tx_buffer+sizeof(header)+1,&m_len,2);
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	3305      	adds	r3, #5
 800755c:	8afa      	ldrh	r2, [r7, #22]
 800755e:	801a      	strh	r2, [r3, #0]
  memcpy (m_tx_buffer+sizeof(header)+3,&SYNC_RD,1);
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	3307      	adds	r3, #7
 8007564:	2282      	movs	r2, #130	; 0x82
 8007566:	701a      	strb	r2, [r3, #0]
  memcpy (m_tx_buffer+sizeof(header)+4,address,2);
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	3308      	adds	r3, #8
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	8812      	ldrh	r2, [r2, #0]
 8007570:	b292      	uxth	r2, r2
 8007572:	801a      	strh	r2, [r3, #0]
  memcpy (m_tx_buffer+sizeof(header)+6,&data_length,2);
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	330a      	adds	r3, #10
 8007578:	8b3a      	ldrh	r2, [r7, #24]
 800757a:	801a      	strh	r2, [r3, #0]
  memcpy (m_tx_buffer+sizeof(header)+8,ID_array,sizeofArray);
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	330c      	adds	r3, #12
 8007580:	79fa      	ldrb	r2, [r7, #7]
 8007582:	68b9      	ldr	r1, [r7, #8]
 8007584:	4618      	mov	r0, r3
 8007586:	f005 feff 	bl	800d388 <memcpy>
  crc = update_crc(0,m_tx_buffer,mem_size -2);
 800758a:	69f9      	ldr	r1, [r7, #28]
 800758c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800758e:	3b02      	subs	r3, #2
 8007590:	b29b      	uxth	r3, r3
 8007592:	461a      	mov	r2, r3
 8007594:	2000      	movs	r0, #0
 8007596:	f7ff fe4b 	bl	8007230 <update_crc>
 800759a:	4603      	mov	r3, r0
 800759c:	837b      	strh	r3, [r7, #26]
  memcpy (m_tx_buffer+mem_size-2,&crc,2);
 800759e:	69fa      	ldr	r2, [r7, #28]
 80075a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80075a2:	3b02      	subs	r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	8b7a      	ldrh	r2, [r7, #26]
 80075a8:	801a      	strh	r2, [r3, #0]
 _expected_return_msgs = 2;
 80075aa:	4b09      	ldr	r3, [pc, #36]	; (80075d0 <xl430_syncRead+0xfc>)
 80075ac:	2202      	movs	r2, #2
 80075ae:	701a      	strb	r2, [r3, #0]
 xl430_writebuffer(m_tx_buffer, mem_size);
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80075b4:	4611      	mov	r1, r2
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7ff fcd4 	bl	8006f64 <xl430_writebuffer>
 80075bc:	46ad      	mov	sp, r5
}
 80075be:	bf00      	nop
 80075c0:	3728      	adds	r7, #40	; 0x28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bdb0      	pop	{r4, r5, r7, pc}
 80075c6:	bf00      	nop
 80075c8:	0800edbc 	.word	0x0800edbc
 80075cc:	0800edc2 	.word	0x0800edc2
 80075d0:	20000034 	.word	0x20000034

080075d4 <xl430_setRxData>:




void xl430_setRxData(struct rxData *data)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
	_rxData = *data;
 80075dc:	4a09      	ldr	r2, [pc, #36]	; (8007604 <xl430_setRxData+0x30>)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4610      	mov	r0, r2
 80075e2:	4619      	mov	r1, r3
 80075e4:	2342      	movs	r3, #66	; 0x42
 80075e6:	461a      	mov	r2, r3
 80075e8:	f005 fece 	bl	800d388 <memcpy>
	memset(rx_buffer,0,data->dataSize);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	461a      	mov	r2, r3
 80075f2:	2100      	movs	r1, #0
 80075f4:	4804      	ldr	r0, [pc, #16]	; (8007608 <xl430_setRxData+0x34>)
 80075f6:	f005 fed2 	bl	800d39e <memset>
}
 80075fa:	bf00      	nop
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	20000144 	.word	0x20000144
 8007608:	20000104 	.word	0x20000104

0800760c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800760c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800760e:	e003      	b.n	8007618 <LoopCopyDataInit>

08007610 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007610:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8007612:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007614:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007616:	3104      	adds	r1, #4

08007618 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007618:	480a      	ldr	r0, [pc, #40]	; (8007644 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800761a:	4b0b      	ldr	r3, [pc, #44]	; (8007648 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800761c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800761e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007620:	d3f6      	bcc.n	8007610 <CopyDataInit>
  ldr r2, =_sbss
 8007622:	4a0a      	ldr	r2, [pc, #40]	; (800764c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007624:	e002      	b.n	800762c <LoopFillZerobss>

08007626 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007626:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007628:	f842 3b04 	str.w	r3, [r2], #4

0800762c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800762c:	4b08      	ldr	r3, [pc, #32]	; (8007650 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800762e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007630:	d3f9      	bcc.n	8007626 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007632:	f7ff fc43 	bl	8006ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007636:	f005 fe83 	bl	800d340 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800763a:	f7f9 fe57 	bl	80012ec <main>
  bx lr
 800763e:	4770      	bx	lr
  ldr r3, =_sidata
 8007640:	0800f044 	.word	0x0800f044
  ldr r0, =_sdata
 8007644:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007648:	200000a8 	.word	0x200000a8
  ldr r2, =_sbss
 800764c:	200000a8 	.word	0x200000a8
  ldr r3, = _ebss
 8007650:	20001060 	.word	0x20001060

08007654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007654:	e7fe      	b.n	8007654 <ADC1_2_IRQHandler>
	...

08007658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800765c:	4b08      	ldr	r3, [pc, #32]	; (8007680 <HAL_Init+0x28>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a07      	ldr	r2, [pc, #28]	; (8007680 <HAL_Init+0x28>)
 8007662:	f043 0310 	orr.w	r3, r3, #16
 8007666:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007668:	2003      	movs	r0, #3
 800766a:	f000 f8f3 	bl	8007854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800766e:	2000      	movs	r0, #0
 8007670:	f7ff fa4c 	bl	8006b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007674:	f7ff f89a 	bl	80067ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	40022000 	.word	0x40022000

08007684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007684:	b480      	push	{r7}
 8007686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007688:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <HAL_IncTick+0x1c>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	461a      	mov	r2, r3
 800768e:	4b05      	ldr	r3, [pc, #20]	; (80076a4 <HAL_IncTick+0x20>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4413      	add	r3, r2
 8007694:	4a03      	ldr	r2, [pc, #12]	; (80076a4 <HAL_IncTick+0x20>)
 8007696:	6013      	str	r3, [r2, #0]
}
 8007698:	bf00      	nop
 800769a:	46bd      	mov	sp, r7
 800769c:	bc80      	pop	{r7}
 800769e:	4770      	bx	lr
 80076a0:	2000003c 	.word	0x2000003c
 80076a4:	20001058 	.word	0x20001058

080076a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
  return uwTick;
 80076ac:	4b02      	ldr	r3, [pc, #8]	; (80076b8 <HAL_GetTick+0x10>)
 80076ae:	681b      	ldr	r3, [r3, #0]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bc80      	pop	{r7}
 80076b6:	4770      	bx	lr
 80076b8:	20001058 	.word	0x20001058

080076bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80076c4:	f7ff fff0 	bl	80076a8 <HAL_GetTick>
 80076c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d4:	d005      	beq.n	80076e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80076d6:	4b09      	ldr	r3, [pc, #36]	; (80076fc <HAL_Delay+0x40>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4413      	add	r3, r2
 80076e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80076e2:	bf00      	nop
 80076e4:	f7ff ffe0 	bl	80076a8 <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d8f7      	bhi.n	80076e4 <HAL_Delay+0x28>
  {
  }
}
 80076f4:	bf00      	nop
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	2000003c 	.word	0x2000003c

08007700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f003 0307 	and.w	r3, r3, #7
 800770e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007710:	4b0c      	ldr	r3, [pc, #48]	; (8007744 <__NVIC_SetPriorityGrouping+0x44>)
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800771c:	4013      	ands	r3, r2
 800771e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800772c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007732:	4a04      	ldr	r2, [pc, #16]	; (8007744 <__NVIC_SetPriorityGrouping+0x44>)
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	60d3      	str	r3, [r2, #12]
}
 8007738:	bf00      	nop
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	bc80      	pop	{r7}
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	e000ed00 	.word	0xe000ed00

08007748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800774c:	4b04      	ldr	r3, [pc, #16]	; (8007760 <__NVIC_GetPriorityGrouping+0x18>)
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	0a1b      	lsrs	r3, r3, #8
 8007752:	f003 0307 	and.w	r3, r3, #7
}
 8007756:	4618      	mov	r0, r3
 8007758:	46bd      	mov	sp, r7
 800775a:	bc80      	pop	{r7}
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	e000ed00 	.word	0xe000ed00

08007764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	4603      	mov	r3, r0
 800776c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800776e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007772:	2b00      	cmp	r3, #0
 8007774:	db0b      	blt.n	800778e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	f003 021f 	and.w	r2, r3, #31
 800777c:	4906      	ldr	r1, [pc, #24]	; (8007798 <__NVIC_EnableIRQ+0x34>)
 800777e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007782:	095b      	lsrs	r3, r3, #5
 8007784:	2001      	movs	r0, #1
 8007786:	fa00 f202 	lsl.w	r2, r0, r2
 800778a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	bc80      	pop	{r7}
 8007796:	4770      	bx	lr
 8007798:	e000e100 	.word	0xe000e100

0800779c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	4603      	mov	r3, r0
 80077a4:	6039      	str	r1, [r7, #0]
 80077a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	db0a      	blt.n	80077c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	490c      	ldr	r1, [pc, #48]	; (80077e8 <__NVIC_SetPriority+0x4c>)
 80077b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077ba:	0112      	lsls	r2, r2, #4
 80077bc:	b2d2      	uxtb	r2, r2
 80077be:	440b      	add	r3, r1
 80077c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80077c4:	e00a      	b.n	80077dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	4908      	ldr	r1, [pc, #32]	; (80077ec <__NVIC_SetPriority+0x50>)
 80077cc:	79fb      	ldrb	r3, [r7, #7]
 80077ce:	f003 030f 	and.w	r3, r3, #15
 80077d2:	3b04      	subs	r3, #4
 80077d4:	0112      	lsls	r2, r2, #4
 80077d6:	b2d2      	uxtb	r2, r2
 80077d8:	440b      	add	r3, r1
 80077da:	761a      	strb	r2, [r3, #24]
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bc80      	pop	{r7}
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	e000e100 	.word	0xe000e100
 80077ec:	e000ed00 	.word	0xe000ed00

080077f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b089      	sub	sp, #36	; 0x24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f003 0307 	and.w	r3, r3, #7
 8007802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	f1c3 0307 	rsb	r3, r3, #7
 800780a:	2b04      	cmp	r3, #4
 800780c:	bf28      	it	cs
 800780e:	2304      	movcs	r3, #4
 8007810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	3304      	adds	r3, #4
 8007816:	2b06      	cmp	r3, #6
 8007818:	d902      	bls.n	8007820 <NVIC_EncodePriority+0x30>
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	3b03      	subs	r3, #3
 800781e:	e000      	b.n	8007822 <NVIC_EncodePriority+0x32>
 8007820:	2300      	movs	r3, #0
 8007822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007824:	f04f 32ff 	mov.w	r2, #4294967295
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	fa02 f303 	lsl.w	r3, r2, r3
 800782e:	43da      	mvns	r2, r3
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	401a      	ands	r2, r3
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007838:	f04f 31ff 	mov.w	r1, #4294967295
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	fa01 f303 	lsl.w	r3, r1, r3
 8007842:	43d9      	mvns	r1, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007848:	4313      	orrs	r3, r2
         );
}
 800784a:	4618      	mov	r0, r3
 800784c:	3724      	adds	r7, #36	; 0x24
 800784e:	46bd      	mov	sp, r7
 8007850:	bc80      	pop	{r7}
 8007852:	4770      	bx	lr

08007854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7ff ff4f 	bl	8007700 <__NVIC_SetPriorityGrouping>
}
 8007862:	bf00      	nop
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800786a:	b580      	push	{r7, lr}
 800786c:	b086      	sub	sp, #24
 800786e:	af00      	add	r7, sp, #0
 8007870:	4603      	mov	r3, r0
 8007872:	60b9      	str	r1, [r7, #8]
 8007874:	607a      	str	r2, [r7, #4]
 8007876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007878:	2300      	movs	r3, #0
 800787a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800787c:	f7ff ff64 	bl	8007748 <__NVIC_GetPriorityGrouping>
 8007880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	68b9      	ldr	r1, [r7, #8]
 8007886:	6978      	ldr	r0, [r7, #20]
 8007888:	f7ff ffb2 	bl	80077f0 <NVIC_EncodePriority>
 800788c:	4602      	mov	r2, r0
 800788e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007892:	4611      	mov	r1, r2
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff ff81 	bl	800779c <__NVIC_SetPriority>
}
 800789a:	bf00      	nop
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b082      	sub	sp, #8
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	4603      	mov	r3, r0
 80078aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80078ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7ff ff57 	bl	8007764 <__NVIC_EnableIRQ>
}
 80078b6:	bf00      	nop
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
	...

080078c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e043      	b.n	800795e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	461a      	mov	r2, r3
 80078dc:	4b22      	ldr	r3, [pc, #136]	; (8007968 <HAL_DMA_Init+0xa8>)
 80078de:	4413      	add	r3, r2
 80078e0:	4a22      	ldr	r2, [pc, #136]	; (800796c <HAL_DMA_Init+0xac>)
 80078e2:	fba2 2303 	umull	r2, r3, r2, r3
 80078e6:	091b      	lsrs	r3, r3, #4
 80078e8:	009a      	lsls	r2, r3, #2
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a1f      	ldr	r2, [pc, #124]	; (8007970 <HAL_DMA_Init+0xb0>)
 80078f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2202      	movs	r2, #2
 80078f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800790a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800790e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007918:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007924:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007930:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	4313      	orrs	r3, r2
 800793c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	bc80      	pop	{r7}
 8007966:	4770      	bx	lr
 8007968:	bffdfff8 	.word	0xbffdfff8
 800796c:	cccccccd 	.word	0xcccccccd
 8007970:	40020000 	.word	0x40020000

08007974 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <HAL_DMA_Start_IT+0x20>
 8007990:	2302      	movs	r3, #2
 8007992:	e04a      	b.n	8007a2a <HAL_DMA_Start_IT+0xb6>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d13a      	bne.n	8007a1c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2202      	movs	r2, #2
 80079aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0201 	bic.w	r2, r2, #1
 80079c2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	68b9      	ldr	r1, [r7, #8]
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f000 f9f4 	bl	8007db8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d008      	beq.n	80079ea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f042 020e 	orr.w	r2, r2, #14
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	e00f      	b.n	8007a0a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f022 0204 	bic.w	r2, r2, #4
 80079f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f042 020a 	orr.w	r2, r2, #10
 8007a08:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f042 0201 	orr.w	r2, r2, #1
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	e005      	b.n	8007a28 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007a24:	2302      	movs	r3, #2
 8007a26:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3718      	adds	r7, #24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b085      	sub	sp, #20
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d008      	beq.n	8007a5a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2204      	movs	r2, #4
 8007a4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e020      	b.n	8007a9c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 020e 	bic.w	r2, r2, #14
 8007a68:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f022 0201 	bic.w	r2, r2, #1
 8007a78:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a82:	2101      	movs	r1, #1
 8007a84:	fa01 f202 	lsl.w	r2, r1, r2
 8007a88:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bc80      	pop	{r7}
 8007aa4:	4770      	bx	lr
	...

08007aa8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d005      	beq.n	8007aca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2204      	movs	r2, #4
 8007ac2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	73fb      	strb	r3, [r7, #15]
 8007ac8:	e051      	b.n	8007b6e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 020e 	bic.w	r2, r2, #14
 8007ad8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0201 	bic.w	r2, r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a22      	ldr	r2, [pc, #136]	; (8007b78 <HAL_DMA_Abort_IT+0xd0>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d029      	beq.n	8007b48 <HAL_DMA_Abort_IT+0xa0>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a20      	ldr	r2, [pc, #128]	; (8007b7c <HAL_DMA_Abort_IT+0xd4>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d022      	beq.n	8007b44 <HAL_DMA_Abort_IT+0x9c>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a1f      	ldr	r2, [pc, #124]	; (8007b80 <HAL_DMA_Abort_IT+0xd8>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d01a      	beq.n	8007b3e <HAL_DMA_Abort_IT+0x96>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a1d      	ldr	r2, [pc, #116]	; (8007b84 <HAL_DMA_Abort_IT+0xdc>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d012      	beq.n	8007b38 <HAL_DMA_Abort_IT+0x90>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a1c      	ldr	r2, [pc, #112]	; (8007b88 <HAL_DMA_Abort_IT+0xe0>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d00a      	beq.n	8007b32 <HAL_DMA_Abort_IT+0x8a>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a1a      	ldr	r2, [pc, #104]	; (8007b8c <HAL_DMA_Abort_IT+0xe4>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d102      	bne.n	8007b2c <HAL_DMA_Abort_IT+0x84>
 8007b26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007b2a:	e00e      	b.n	8007b4a <HAL_DMA_Abort_IT+0xa2>
 8007b2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b30:	e00b      	b.n	8007b4a <HAL_DMA_Abort_IT+0xa2>
 8007b32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b36:	e008      	b.n	8007b4a <HAL_DMA_Abort_IT+0xa2>
 8007b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b3c:	e005      	b.n	8007b4a <HAL_DMA_Abort_IT+0xa2>
 8007b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b42:	e002      	b.n	8007b4a <HAL_DMA_Abort_IT+0xa2>
 8007b44:	2310      	movs	r3, #16
 8007b46:	e000      	b.n	8007b4a <HAL_DMA_Abort_IT+0xa2>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	4a11      	ldr	r2, [pc, #68]	; (8007b90 <HAL_DMA_Abort_IT+0xe8>)
 8007b4c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	4798      	blx	r3
    } 
  }
  return status;
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	40020008 	.word	0x40020008
 8007b7c:	4002001c 	.word	0x4002001c
 8007b80:	40020030 	.word	0x40020030
 8007b84:	40020044 	.word	0x40020044
 8007b88:	40020058 	.word	0x40020058
 8007b8c:	4002006c 	.word	0x4002006c
 8007b90:	40020000 	.word	0x40020000

08007b94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb0:	2204      	movs	r2, #4
 8007bb2:	409a      	lsls	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d04f      	beq.n	8007c5c <HAL_DMA_IRQHandler+0xc8>
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f003 0304 	and.w	r3, r3, #4
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d04a      	beq.n	8007c5c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0320 	and.w	r3, r3, #32
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d107      	bne.n	8007be4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f022 0204 	bic.w	r2, r2, #4
 8007be2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a66      	ldr	r2, [pc, #408]	; (8007d84 <HAL_DMA_IRQHandler+0x1f0>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d029      	beq.n	8007c42 <HAL_DMA_IRQHandler+0xae>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a65      	ldr	r2, [pc, #404]	; (8007d88 <HAL_DMA_IRQHandler+0x1f4>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d022      	beq.n	8007c3e <HAL_DMA_IRQHandler+0xaa>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a63      	ldr	r2, [pc, #396]	; (8007d8c <HAL_DMA_IRQHandler+0x1f8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d01a      	beq.n	8007c38 <HAL_DMA_IRQHandler+0xa4>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a62      	ldr	r2, [pc, #392]	; (8007d90 <HAL_DMA_IRQHandler+0x1fc>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d012      	beq.n	8007c32 <HAL_DMA_IRQHandler+0x9e>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a60      	ldr	r2, [pc, #384]	; (8007d94 <HAL_DMA_IRQHandler+0x200>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d00a      	beq.n	8007c2c <HAL_DMA_IRQHandler+0x98>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a5f      	ldr	r2, [pc, #380]	; (8007d98 <HAL_DMA_IRQHandler+0x204>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d102      	bne.n	8007c26 <HAL_DMA_IRQHandler+0x92>
 8007c20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007c24:	e00e      	b.n	8007c44 <HAL_DMA_IRQHandler+0xb0>
 8007c26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007c2a:	e00b      	b.n	8007c44 <HAL_DMA_IRQHandler+0xb0>
 8007c2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007c30:	e008      	b.n	8007c44 <HAL_DMA_IRQHandler+0xb0>
 8007c32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c36:	e005      	b.n	8007c44 <HAL_DMA_IRQHandler+0xb0>
 8007c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c3c:	e002      	b.n	8007c44 <HAL_DMA_IRQHandler+0xb0>
 8007c3e:	2340      	movs	r3, #64	; 0x40
 8007c40:	e000      	b.n	8007c44 <HAL_DMA_IRQHandler+0xb0>
 8007c42:	2304      	movs	r3, #4
 8007c44:	4a55      	ldr	r2, [pc, #340]	; (8007d9c <HAL_DMA_IRQHandler+0x208>)
 8007c46:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 8094 	beq.w	8007d7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8007c5a:	e08e      	b.n	8007d7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c60:	2202      	movs	r2, #2
 8007c62:	409a      	lsls	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	4013      	ands	r3, r2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d056      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x186>
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d051      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0320 	and.w	r3, r3, #32
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10b      	bne.n	8007c9c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 020a 	bic.w	r2, r2, #10
 8007c92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a38      	ldr	r2, [pc, #224]	; (8007d84 <HAL_DMA_IRQHandler+0x1f0>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d029      	beq.n	8007cfa <HAL_DMA_IRQHandler+0x166>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a37      	ldr	r2, [pc, #220]	; (8007d88 <HAL_DMA_IRQHandler+0x1f4>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d022      	beq.n	8007cf6 <HAL_DMA_IRQHandler+0x162>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a35      	ldr	r2, [pc, #212]	; (8007d8c <HAL_DMA_IRQHandler+0x1f8>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d01a      	beq.n	8007cf0 <HAL_DMA_IRQHandler+0x15c>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a34      	ldr	r2, [pc, #208]	; (8007d90 <HAL_DMA_IRQHandler+0x1fc>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d012      	beq.n	8007cea <HAL_DMA_IRQHandler+0x156>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a32      	ldr	r2, [pc, #200]	; (8007d94 <HAL_DMA_IRQHandler+0x200>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d00a      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x150>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a31      	ldr	r2, [pc, #196]	; (8007d98 <HAL_DMA_IRQHandler+0x204>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d102      	bne.n	8007cde <HAL_DMA_IRQHandler+0x14a>
 8007cd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007cdc:	e00e      	b.n	8007cfc <HAL_DMA_IRQHandler+0x168>
 8007cde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ce2:	e00b      	b.n	8007cfc <HAL_DMA_IRQHandler+0x168>
 8007ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ce8:	e008      	b.n	8007cfc <HAL_DMA_IRQHandler+0x168>
 8007cea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cee:	e005      	b.n	8007cfc <HAL_DMA_IRQHandler+0x168>
 8007cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cf4:	e002      	b.n	8007cfc <HAL_DMA_IRQHandler+0x168>
 8007cf6:	2320      	movs	r3, #32
 8007cf8:	e000      	b.n	8007cfc <HAL_DMA_IRQHandler+0x168>
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	4a27      	ldr	r2, [pc, #156]	; (8007d9c <HAL_DMA_IRQHandler+0x208>)
 8007cfe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d034      	beq.n	8007d7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007d18:	e02f      	b.n	8007d7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1e:	2208      	movs	r2, #8
 8007d20:	409a      	lsls	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4013      	ands	r3, r2
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d028      	beq.n	8007d7c <HAL_DMA_IRQHandler+0x1e8>
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f003 0308 	and.w	r3, r3, #8
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d023      	beq.n	8007d7c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 020e 	bic.w	r2, r2, #14
 8007d42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8007d52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d004      	beq.n	8007d7c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	4798      	blx	r3
    }
  }
  return;
 8007d7a:	bf00      	nop
 8007d7c:	bf00      	nop
}
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	40020008 	.word	0x40020008
 8007d88:	4002001c 	.word	0x4002001c
 8007d8c:	40020030 	.word	0x40020030
 8007d90:	40020044 	.word	0x40020044
 8007d94:	40020058 	.word	0x40020058
 8007d98:	4002006c 	.word	0x4002006c
 8007d9c:	40020000 	.word	0x40020000

08007da0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bc80      	pop	{r7}
 8007db6:	4770      	bx	lr

08007db8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dce:	2101      	movs	r1, #1
 8007dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8007dd4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2b10      	cmp	r3, #16
 8007de4:	d108      	bne.n	8007df8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007df6:	e007      	b.n	8007e08 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	60da      	str	r2, [r3, #12]
}
 8007e08:	bf00      	nop
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bc80      	pop	{r7}
 8007e10:	4770      	bx	lr
	...

08007e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b08b      	sub	sp, #44	; 0x2c
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007e22:	2300      	movs	r3, #0
 8007e24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007e26:	e127      	b.n	8008078 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007e28:	2201      	movs	r2, #1
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	69fa      	ldr	r2, [r7, #28]
 8007e38:	4013      	ands	r3, r2
 8007e3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	f040 8116 	bne.w	8008072 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	2b12      	cmp	r3, #18
 8007e4c:	d034      	beq.n	8007eb8 <HAL_GPIO_Init+0xa4>
 8007e4e:	2b12      	cmp	r3, #18
 8007e50:	d80d      	bhi.n	8007e6e <HAL_GPIO_Init+0x5a>
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d02b      	beq.n	8007eae <HAL_GPIO_Init+0x9a>
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d804      	bhi.n	8007e64 <HAL_GPIO_Init+0x50>
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d031      	beq.n	8007ec2 <HAL_GPIO_Init+0xae>
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d01c      	beq.n	8007e9c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007e62:	e048      	b.n	8007ef6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d043      	beq.n	8007ef0 <HAL_GPIO_Init+0xdc>
 8007e68:	2b11      	cmp	r3, #17
 8007e6a:	d01b      	beq.n	8007ea4 <HAL_GPIO_Init+0x90>
          break;
 8007e6c:	e043      	b.n	8007ef6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8007e6e:	4a89      	ldr	r2, [pc, #548]	; (8008094 <HAL_GPIO_Init+0x280>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d026      	beq.n	8007ec2 <HAL_GPIO_Init+0xae>
 8007e74:	4a87      	ldr	r2, [pc, #540]	; (8008094 <HAL_GPIO_Init+0x280>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d806      	bhi.n	8007e88 <HAL_GPIO_Init+0x74>
 8007e7a:	4a87      	ldr	r2, [pc, #540]	; (8008098 <HAL_GPIO_Init+0x284>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d020      	beq.n	8007ec2 <HAL_GPIO_Init+0xae>
 8007e80:	4a86      	ldr	r2, [pc, #536]	; (800809c <HAL_GPIO_Init+0x288>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d01d      	beq.n	8007ec2 <HAL_GPIO_Init+0xae>
          break;
 8007e86:	e036      	b.n	8007ef6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8007e88:	4a85      	ldr	r2, [pc, #532]	; (80080a0 <HAL_GPIO_Init+0x28c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d019      	beq.n	8007ec2 <HAL_GPIO_Init+0xae>
 8007e8e:	4a85      	ldr	r2, [pc, #532]	; (80080a4 <HAL_GPIO_Init+0x290>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d016      	beq.n	8007ec2 <HAL_GPIO_Init+0xae>
 8007e94:	4a84      	ldr	r2, [pc, #528]	; (80080a8 <HAL_GPIO_Init+0x294>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d013      	beq.n	8007ec2 <HAL_GPIO_Init+0xae>
          break;
 8007e9a:	e02c      	b.n	8007ef6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	623b      	str	r3, [r7, #32]
          break;
 8007ea2:	e028      	b.n	8007ef6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	623b      	str	r3, [r7, #32]
          break;
 8007eac:	e023      	b.n	8007ef6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	623b      	str	r3, [r7, #32]
          break;
 8007eb6:	e01e      	b.n	8007ef6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	330c      	adds	r3, #12
 8007ebe:	623b      	str	r3, [r7, #32]
          break;
 8007ec0:	e019      	b.n	8007ef6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d102      	bne.n	8007ed0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007eca:	2304      	movs	r3, #4
 8007ecc:	623b      	str	r3, [r7, #32]
          break;
 8007ece:	e012      	b.n	8007ef6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d105      	bne.n	8007ee4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007ed8:	2308      	movs	r3, #8
 8007eda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	69fa      	ldr	r2, [r7, #28]
 8007ee0:	611a      	str	r2, [r3, #16]
          break;
 8007ee2:	e008      	b.n	8007ef6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007ee4:	2308      	movs	r3, #8
 8007ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	69fa      	ldr	r2, [r7, #28]
 8007eec:	615a      	str	r2, [r3, #20]
          break;
 8007eee:	e002      	b.n	8007ef6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	623b      	str	r3, [r7, #32]
          break;
 8007ef4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	2bff      	cmp	r3, #255	; 0xff
 8007efa:	d801      	bhi.n	8007f00 <HAL_GPIO_Init+0xec>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	e001      	b.n	8007f04 <HAL_GPIO_Init+0xf0>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	3304      	adds	r3, #4
 8007f04:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	2bff      	cmp	r3, #255	; 0xff
 8007f0a:	d802      	bhi.n	8007f12 <HAL_GPIO_Init+0xfe>
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	e002      	b.n	8007f18 <HAL_GPIO_Init+0x104>
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	3b08      	subs	r3, #8
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	210f      	movs	r1, #15
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	fa01 f303 	lsl.w	r3, r1, r3
 8007f26:	43db      	mvns	r3, r3
 8007f28:	401a      	ands	r2, r3
 8007f2a:	6a39      	ldr	r1, [r7, #32]
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f32:	431a      	orrs	r2, r3
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f000 8096 	beq.w	8008072 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007f46:	4b59      	ldr	r3, [pc, #356]	; (80080ac <HAL_GPIO_Init+0x298>)
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	4a58      	ldr	r2, [pc, #352]	; (80080ac <HAL_GPIO_Init+0x298>)
 8007f4c:	f043 0301 	orr.w	r3, r3, #1
 8007f50:	6193      	str	r3, [r2, #24]
 8007f52:	4b56      	ldr	r3, [pc, #344]	; (80080ac <HAL_GPIO_Init+0x298>)
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	60bb      	str	r3, [r7, #8]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007f5e:	4a54      	ldr	r2, [pc, #336]	; (80080b0 <HAL_GPIO_Init+0x29c>)
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	089b      	lsrs	r3, r3, #2
 8007f64:	3302      	adds	r3, #2
 8007f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f6a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	f003 0303 	and.w	r3, r3, #3
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	220f      	movs	r2, #15
 8007f76:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7a:	43db      	mvns	r3, r3
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	4013      	ands	r3, r2
 8007f80:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a4b      	ldr	r2, [pc, #300]	; (80080b4 <HAL_GPIO_Init+0x2a0>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d013      	beq.n	8007fb2 <HAL_GPIO_Init+0x19e>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a4a      	ldr	r2, [pc, #296]	; (80080b8 <HAL_GPIO_Init+0x2a4>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d00d      	beq.n	8007fae <HAL_GPIO_Init+0x19a>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a49      	ldr	r2, [pc, #292]	; (80080bc <HAL_GPIO_Init+0x2a8>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d007      	beq.n	8007faa <HAL_GPIO_Init+0x196>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a48      	ldr	r2, [pc, #288]	; (80080c0 <HAL_GPIO_Init+0x2ac>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d101      	bne.n	8007fa6 <HAL_GPIO_Init+0x192>
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e006      	b.n	8007fb4 <HAL_GPIO_Init+0x1a0>
 8007fa6:	2304      	movs	r3, #4
 8007fa8:	e004      	b.n	8007fb4 <HAL_GPIO_Init+0x1a0>
 8007faa:	2302      	movs	r3, #2
 8007fac:	e002      	b.n	8007fb4 <HAL_GPIO_Init+0x1a0>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e000      	b.n	8007fb4 <HAL_GPIO_Init+0x1a0>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb6:	f002 0203 	and.w	r2, r2, #3
 8007fba:	0092      	lsls	r2, r2, #2
 8007fbc:	4093      	lsls	r3, r2
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007fc4:	493a      	ldr	r1, [pc, #232]	; (80080b0 <HAL_GPIO_Init+0x29c>)
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	089b      	lsrs	r3, r3, #2
 8007fca:	3302      	adds	r3, #2
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d006      	beq.n	8007fec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007fde:	4b39      	ldr	r3, [pc, #228]	; (80080c4 <HAL_GPIO_Init+0x2b0>)
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	4938      	ldr	r1, [pc, #224]	; (80080c4 <HAL_GPIO_Init+0x2b0>)
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	600b      	str	r3, [r1, #0]
 8007fea:	e006      	b.n	8007ffa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007fec:	4b35      	ldr	r3, [pc, #212]	; (80080c4 <HAL_GPIO_Init+0x2b0>)
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	43db      	mvns	r3, r3
 8007ff4:	4933      	ldr	r1, [pc, #204]	; (80080c4 <HAL_GPIO_Init+0x2b0>)
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d006      	beq.n	8008014 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008006:	4b2f      	ldr	r3, [pc, #188]	; (80080c4 <HAL_GPIO_Init+0x2b0>)
 8008008:	685a      	ldr	r2, [r3, #4]
 800800a:	492e      	ldr	r1, [pc, #184]	; (80080c4 <HAL_GPIO_Init+0x2b0>)
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	4313      	orrs	r3, r2
 8008010:	604b      	str	r3, [r1, #4]
 8008012:	e006      	b.n	8008022 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008014:	4b2b      	ldr	r3, [pc, #172]	; (80080c4 <HAL_GPIO_Init+0x2b0>)
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	43db      	mvns	r3, r3
 800801c:	4929      	ldr	r1, [pc, #164]	; (80080c4 <HAL_GPIO_Init+0x2b0>)
 800801e:	4013      	ands	r3, r2
 8008020:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d006      	beq.n	800803c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800802e:	4b25      	ldr	r3, [pc, #148]	; (80080c4 <HAL_GPIO_Init+0x2b0>)
 8008030:	689a      	ldr	r2, [r3, #8]
 8008032:	4924      	ldr	r1, [pc, #144]	; (80080c4 <HAL_GPIO_Init+0x2b0>)
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	4313      	orrs	r3, r2
 8008038:	608b      	str	r3, [r1, #8]
 800803a:	e006      	b.n	800804a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800803c:	4b21      	ldr	r3, [pc, #132]	; (80080c4 <HAL_GPIO_Init+0x2b0>)
 800803e:	689a      	ldr	r2, [r3, #8]
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	43db      	mvns	r3, r3
 8008044:	491f      	ldr	r1, [pc, #124]	; (80080c4 <HAL_GPIO_Init+0x2b0>)
 8008046:	4013      	ands	r3, r2
 8008048:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d006      	beq.n	8008064 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008056:	4b1b      	ldr	r3, [pc, #108]	; (80080c4 <HAL_GPIO_Init+0x2b0>)
 8008058:	68da      	ldr	r2, [r3, #12]
 800805a:	491a      	ldr	r1, [pc, #104]	; (80080c4 <HAL_GPIO_Init+0x2b0>)
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	4313      	orrs	r3, r2
 8008060:	60cb      	str	r3, [r1, #12]
 8008062:	e006      	b.n	8008072 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008064:	4b17      	ldr	r3, [pc, #92]	; (80080c4 <HAL_GPIO_Init+0x2b0>)
 8008066:	68da      	ldr	r2, [r3, #12]
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	43db      	mvns	r3, r3
 800806c:	4915      	ldr	r1, [pc, #84]	; (80080c4 <HAL_GPIO_Init+0x2b0>)
 800806e:	4013      	ands	r3, r2
 8008070:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	3301      	adds	r3, #1
 8008076:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	fa22 f303 	lsr.w	r3, r2, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	f47f aed0 	bne.w	8007e28 <HAL_GPIO_Init+0x14>
  }
}
 8008088:	bf00      	nop
 800808a:	372c      	adds	r7, #44	; 0x2c
 800808c:	46bd      	mov	sp, r7
 800808e:	bc80      	pop	{r7}
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	10210000 	.word	0x10210000
 8008098:	10110000 	.word	0x10110000
 800809c:	10120000 	.word	0x10120000
 80080a0:	10310000 	.word	0x10310000
 80080a4:	10320000 	.word	0x10320000
 80080a8:	10220000 	.word	0x10220000
 80080ac:	40021000 	.word	0x40021000
 80080b0:	40010000 	.word	0x40010000
 80080b4:	40010800 	.word	0x40010800
 80080b8:	40010c00 	.word	0x40010c00
 80080bc:	40011000 	.word	0x40011000
 80080c0:	40011400 	.word	0x40011400
 80080c4:	40010400 	.word	0x40010400

080080c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	460b      	mov	r3, r1
 80080d2:	807b      	strh	r3, [r7, #2]
 80080d4:	4613      	mov	r3, r2
 80080d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80080d8:	787b      	ldrb	r3, [r7, #1]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080de:	887a      	ldrh	r2, [r7, #2]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80080e4:	e003      	b.n	80080ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80080e6:	887b      	ldrh	r3, [r7, #2]
 80080e8:	041a      	lsls	r2, r3, #16
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	611a      	str	r2, [r3, #16]
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bc80      	pop	{r7}
 80080f6:	4770      	bx	lr

080080f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	460b      	mov	r3, r1
 8008102:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800810a:	887a      	ldrh	r2, [r7, #2]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	4013      	ands	r3, r2
 8008110:	041a      	lsls	r2, r3, #16
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	43d9      	mvns	r1, r3
 8008116:	887b      	ldrh	r3, [r7, #2]
 8008118:	400b      	ands	r3, r1
 800811a:	431a      	orrs	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	611a      	str	r2, [r3, #16]
}
 8008120:	bf00      	nop
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	bc80      	pop	{r7}
 8008128:	4770      	bx	lr
	...

0800812c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e11f      	b.n	800837e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d106      	bne.n	8008158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7fe fb5c 	bl	8006810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2224      	movs	r2, #36	; 0x24
 800815c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f022 0201 	bic.w	r2, r2, #1
 800816e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800817e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800818e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008190:	f002 ff0e 	bl	800afb0 <HAL_RCC_GetPCLK1Freq>
 8008194:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	4a7b      	ldr	r2, [pc, #492]	; (8008388 <HAL_I2C_Init+0x25c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d807      	bhi.n	80081b0 <HAL_I2C_Init+0x84>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4a7a      	ldr	r2, [pc, #488]	; (800838c <HAL_I2C_Init+0x260>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	bf94      	ite	ls
 80081a8:	2301      	movls	r3, #1
 80081aa:	2300      	movhi	r3, #0
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	e006      	b.n	80081be <HAL_I2C_Init+0x92>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4a77      	ldr	r2, [pc, #476]	; (8008390 <HAL_I2C_Init+0x264>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	bf94      	ite	ls
 80081b8:	2301      	movls	r3, #1
 80081ba:	2300      	movhi	r3, #0
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e0db      	b.n	800837e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	4a72      	ldr	r2, [pc, #456]	; (8008394 <HAL_I2C_Init+0x268>)
 80081ca:	fba2 2303 	umull	r2, r3, r2, r3
 80081ce:	0c9b      	lsrs	r3, r3, #18
 80081d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	430a      	orrs	r2, r1
 80081e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	6a1b      	ldr	r3, [r3, #32]
 80081ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	4a64      	ldr	r2, [pc, #400]	; (8008388 <HAL_I2C_Init+0x25c>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d802      	bhi.n	8008200 <HAL_I2C_Init+0xd4>
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	3301      	adds	r3, #1
 80081fe:	e009      	b.n	8008214 <HAL_I2C_Init+0xe8>
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008206:	fb02 f303 	mul.w	r3, r2, r3
 800820a:	4a63      	ldr	r2, [pc, #396]	; (8008398 <HAL_I2C_Init+0x26c>)
 800820c:	fba2 2303 	umull	r2, r3, r2, r3
 8008210:	099b      	lsrs	r3, r3, #6
 8008212:	3301      	adds	r3, #1
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	6812      	ldr	r2, [r2, #0]
 8008218:	430b      	orrs	r3, r1
 800821a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008226:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	4956      	ldr	r1, [pc, #344]	; (8008388 <HAL_I2C_Init+0x25c>)
 8008230:	428b      	cmp	r3, r1
 8008232:	d80d      	bhi.n	8008250 <HAL_I2C_Init+0x124>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	1e59      	subs	r1, r3, #1
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008242:	3301      	adds	r3, #1
 8008244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008248:	2b04      	cmp	r3, #4
 800824a:	bf38      	it	cc
 800824c:	2304      	movcc	r3, #4
 800824e:	e04f      	b.n	80082f0 <HAL_I2C_Init+0x1c4>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d111      	bne.n	800827c <HAL_I2C_Init+0x150>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	1e58      	subs	r0, r3, #1
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6859      	ldr	r1, [r3, #4]
 8008260:	460b      	mov	r3, r1
 8008262:	005b      	lsls	r3, r3, #1
 8008264:	440b      	add	r3, r1
 8008266:	fbb0 f3f3 	udiv	r3, r0, r3
 800826a:	3301      	adds	r3, #1
 800826c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008270:	2b00      	cmp	r3, #0
 8008272:	bf0c      	ite	eq
 8008274:	2301      	moveq	r3, #1
 8008276:	2300      	movne	r3, #0
 8008278:	b2db      	uxtb	r3, r3
 800827a:	e012      	b.n	80082a2 <HAL_I2C_Init+0x176>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	1e58      	subs	r0, r3, #1
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6859      	ldr	r1, [r3, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	440b      	add	r3, r1
 800828a:	0099      	lsls	r1, r3, #2
 800828c:	440b      	add	r3, r1
 800828e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008292:	3301      	adds	r3, #1
 8008294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008298:	2b00      	cmp	r3, #0
 800829a:	bf0c      	ite	eq
 800829c:	2301      	moveq	r3, #1
 800829e:	2300      	movne	r3, #0
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <HAL_I2C_Init+0x17e>
 80082a6:	2301      	movs	r3, #1
 80082a8:	e022      	b.n	80082f0 <HAL_I2C_Init+0x1c4>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10e      	bne.n	80082d0 <HAL_I2C_Init+0x1a4>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	1e58      	subs	r0, r3, #1
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6859      	ldr	r1, [r3, #4]
 80082ba:	460b      	mov	r3, r1
 80082bc:	005b      	lsls	r3, r3, #1
 80082be:	440b      	add	r3, r1
 80082c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80082c4:	3301      	adds	r3, #1
 80082c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ce:	e00f      	b.n	80082f0 <HAL_I2C_Init+0x1c4>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	1e58      	subs	r0, r3, #1
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6859      	ldr	r1, [r3, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	440b      	add	r3, r1
 80082de:	0099      	lsls	r1, r3, #2
 80082e0:	440b      	add	r3, r1
 80082e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80082e6:	3301      	adds	r3, #1
 80082e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082f0:	6879      	ldr	r1, [r7, #4]
 80082f2:	6809      	ldr	r1, [r1, #0]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	69da      	ldr	r2, [r3, #28]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	431a      	orrs	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	430a      	orrs	r2, r1
 8008312:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800831e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	6911      	ldr	r1, [r2, #16]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	68d2      	ldr	r2, [r2, #12]
 800832a:	4311      	orrs	r1, r2
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	6812      	ldr	r2, [r2, #0]
 8008330:	430b      	orrs	r3, r1
 8008332:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	695a      	ldr	r2, [r3, #20]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	431a      	orrs	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	430a      	orrs	r2, r1
 800834e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f042 0201 	orr.w	r2, r2, #1
 800835e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2220      	movs	r2, #32
 800836a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	000186a0 	.word	0x000186a0
 800838c:	001e847f 	.word	0x001e847f
 8008390:	003d08ff 	.word	0x003d08ff
 8008394:	431bde83 	.word	0x431bde83
 8008398:	10624dd3 	.word	0x10624dd3

0800839c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b088      	sub	sp, #32
 80083a0:	af02      	add	r7, sp, #8
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	607a      	str	r2, [r7, #4]
 80083a6:	461a      	mov	r2, r3
 80083a8:	460b      	mov	r3, r1
 80083aa:	817b      	strh	r3, [r7, #10]
 80083ac:	4613      	mov	r3, r2
 80083ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80083b0:	f7ff f97a 	bl	80076a8 <HAL_GetTick>
 80083b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b20      	cmp	r3, #32
 80083c0:	f040 80e0 	bne.w	8008584 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	2319      	movs	r3, #25
 80083ca:	2201      	movs	r2, #1
 80083cc:	4970      	ldr	r1, [pc, #448]	; (8008590 <HAL_I2C_Master_Transmit+0x1f4>)
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f001 fff0 	bl	800a3b4 <I2C_WaitOnFlagUntilTimeout>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80083da:	2302      	movs	r3, #2
 80083dc:	e0d3      	b.n	8008586 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d101      	bne.n	80083ec <HAL_I2C_Master_Transmit+0x50>
 80083e8:	2302      	movs	r3, #2
 80083ea:	e0cc      	b.n	8008586 <HAL_I2C_Master_Transmit+0x1ea>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d007      	beq.n	8008412 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f042 0201 	orr.w	r2, r2, #1
 8008410:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008420:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2221      	movs	r2, #33	; 0x21
 8008426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2210      	movs	r2, #16
 800842e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	893a      	ldrh	r2, [r7, #8]
 8008442:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008448:	b29a      	uxth	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	4a50      	ldr	r2, [pc, #320]	; (8008594 <HAL_I2C_Master_Transmit+0x1f8>)
 8008452:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008454:	8979      	ldrh	r1, [r7, #10]
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	6a3a      	ldr	r2, [r7, #32]
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f001 fdb2 	bl	8009fc4 <I2C_MasterRequestWrite>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d001      	beq.n	800846a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e08d      	b.n	8008586 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800846a:	2300      	movs	r3, #0
 800846c:	613b      	str	r3, [r7, #16]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	613b      	str	r3, [r7, #16]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	613b      	str	r3, [r7, #16]
 800847e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008480:	e066      	b.n	8008550 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008482:	697a      	ldr	r2, [r7, #20]
 8008484:	6a39      	ldr	r1, [r7, #32]
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f002 f86a 	bl	800a560 <I2C_WaitOnTXEFlagUntilTimeout>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00d      	beq.n	80084ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008496:	2b04      	cmp	r3, #4
 8008498:	d107      	bne.n	80084aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e06b      	b.n	8008586 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b2:	781a      	ldrb	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	1c5a      	adds	r2, r3, #1
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	3b01      	subs	r3, #1
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084d6:	3b01      	subs	r3, #1
 80084d8:	b29a      	uxth	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	f003 0304 	and.w	r3, r3, #4
 80084e8:	2b04      	cmp	r3, #4
 80084ea:	d11b      	bne.n	8008524 <HAL_I2C_Master_Transmit+0x188>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d017      	beq.n	8008524 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	781a      	ldrb	r2, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	1c5a      	adds	r2, r3, #1
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800850e:	b29b      	uxth	r3, r3
 8008510:	3b01      	subs	r3, #1
 8008512:	b29a      	uxth	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800851c:	3b01      	subs	r3, #1
 800851e:	b29a      	uxth	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	6a39      	ldr	r1, [r7, #32]
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f002 f85a 	bl	800a5e2 <I2C_WaitOnBTFFlagUntilTimeout>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00d      	beq.n	8008550 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008538:	2b04      	cmp	r3, #4
 800853a:	d107      	bne.n	800854c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800854a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e01a      	b.n	8008586 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008554:	2b00      	cmp	r3, #0
 8008556:	d194      	bne.n	8008482 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008566:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2220      	movs	r2, #32
 800856c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	e000      	b.n	8008586 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008584:	2302      	movs	r3, #2
  }
}
 8008586:	4618      	mov	r0, r3
 8008588:	3718      	adds	r7, #24
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	00100002 	.word	0x00100002
 8008594:	ffff0000 	.word	0xffff0000

08008598 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b08c      	sub	sp, #48	; 0x30
 800859c:	af02      	add	r7, sp, #8
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	607a      	str	r2, [r7, #4]
 80085a2:	461a      	mov	r2, r3
 80085a4:	460b      	mov	r3, r1
 80085a6:	817b      	strh	r3, [r7, #10]
 80085a8:	4613      	mov	r3, r2
 80085aa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80085ac:	2300      	movs	r3, #0
 80085ae:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80085b0:	f7ff f87a 	bl	80076a8 <HAL_GetTick>
 80085b4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b20      	cmp	r3, #32
 80085c0:	f040 8238 	bne.w	8008a34 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	2319      	movs	r3, #25
 80085ca:	2201      	movs	r2, #1
 80085cc:	497e      	ldr	r1, [pc, #504]	; (80087c8 <HAL_I2C_Master_Receive+0x230>)
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f001 fef0 	bl	800a3b4 <I2C_WaitOnFlagUntilTimeout>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80085da:	2302      	movs	r3, #2
 80085dc:	e22b      	b.n	8008a36 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d101      	bne.n	80085ec <HAL_I2C_Master_Receive+0x54>
 80085e8:	2302      	movs	r3, #2
 80085ea:	e224      	b.n	8008a36 <HAL_I2C_Master_Receive+0x49e>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d007      	beq.n	8008612 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f042 0201 	orr.w	r2, r2, #1
 8008610:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008620:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2222      	movs	r2, #34	; 0x22
 8008626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2210      	movs	r2, #16
 800862e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	893a      	ldrh	r2, [r7, #8]
 8008642:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008648:	b29a      	uxth	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	4a5e      	ldr	r2, [pc, #376]	; (80087cc <HAL_I2C_Master_Receive+0x234>)
 8008652:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008654:	8979      	ldrh	r1, [r7, #10]
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f001 fd34 	bl	800a0c8 <I2C_MasterRequestRead>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e1e5      	b.n	8008a36 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800866e:	2b00      	cmp	r3, #0
 8008670:	d113      	bne.n	800869a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008672:	2300      	movs	r3, #0
 8008674:	61fb      	str	r3, [r7, #28]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	61fb      	str	r3, [r7, #28]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	61fb      	str	r3, [r7, #28]
 8008686:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008696:	601a      	str	r2, [r3, #0]
 8008698:	e1b9      	b.n	8008a0e <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d11d      	bne.n	80086de <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086b0:	601a      	str	r2, [r3, #0]
 80086b2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086b4:	2300      	movs	r3, #0
 80086b6:	61bb      	str	r3, [r7, #24]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	61bb      	str	r3, [r7, #24]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	61bb      	str	r3, [r7, #24]
 80086c8:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80086da:	b662      	cpsie	i
 80086dc:	e197      	b.n	8008a0e <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d11d      	bne.n	8008722 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80086f6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086f8:	2300      	movs	r3, #0
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	617b      	str	r3, [r7, #20]
 800870c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800871c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800871e:	b662      	cpsie	i
 8008720:	e175      	b.n	8008a0e <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008730:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008732:	2300      	movs	r3, #0
 8008734:	613b      	str	r3, [r7, #16]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	695b      	ldr	r3, [r3, #20]
 800873c:	613b      	str	r3, [r7, #16]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	613b      	str	r3, [r7, #16]
 8008746:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008748:	e161      	b.n	8008a0e <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800874e:	2b03      	cmp	r3, #3
 8008750:	f200 811a 	bhi.w	8008988 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008758:	2b01      	cmp	r3, #1
 800875a:	d123      	bne.n	80087a4 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800875c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800875e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f001 ffb1 	bl	800a6c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e162      	b.n	8008a36 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	691a      	ldr	r2, [r3, #16]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877a:	b2d2      	uxtb	r2, r2
 800877c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008782:	1c5a      	adds	r2, r3, #1
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800878c:	3b01      	subs	r3, #1
 800878e:	b29a      	uxth	r2, r3
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008798:	b29b      	uxth	r3, r3
 800879a:	3b01      	subs	r3, #1
 800879c:	b29a      	uxth	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80087a2:	e134      	b.n	8008a0e <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d150      	bne.n	800884e <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b2:	2200      	movs	r2, #0
 80087b4:	4906      	ldr	r1, [pc, #24]	; (80087d0 <HAL_I2C_Master_Receive+0x238>)
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f001 fdfc 	bl	800a3b4 <I2C_WaitOnFlagUntilTimeout>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d008      	beq.n	80087d4 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e137      	b.n	8008a36 <HAL_I2C_Master_Receive+0x49e>
 80087c6:	bf00      	nop
 80087c8:	00100002 	.word	0x00100002
 80087cc:	ffff0000 	.word	0xffff0000
 80087d0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80087d4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087e4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	691a      	ldr	r2, [r3, #16]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f0:	b2d2      	uxtb	r2, r2
 80087f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	1c5a      	adds	r2, r3, #1
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008802:	3b01      	subs	r3, #1
 8008804:	b29a      	uxth	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800880e:	b29b      	uxth	r3, r3
 8008810:	3b01      	subs	r3, #1
 8008812:	b29a      	uxth	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008818:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	691a      	ldr	r2, [r3, #16]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008824:	b2d2      	uxtb	r2, r2
 8008826:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882c:	1c5a      	adds	r2, r3, #1
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008836:	3b01      	subs	r3, #1
 8008838:	b29a      	uxth	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008842:	b29b      	uxth	r3, r3
 8008844:	3b01      	subs	r3, #1
 8008846:	b29a      	uxth	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800884c:	e0df      	b.n	8008a0e <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008854:	2200      	movs	r2, #0
 8008856:	497a      	ldr	r1, [pc, #488]	; (8008a40 <HAL_I2C_Master_Receive+0x4a8>)
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f001 fdab 	bl	800a3b4 <I2C_WaitOnFlagUntilTimeout>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e0e6      	b.n	8008a36 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008876:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008878:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	691a      	ldr	r2, [r3, #16]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008884:	b2d2      	uxtb	r2, r2
 8008886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	1c5a      	adds	r2, r3, #1
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008896:	3b01      	subs	r3, #1
 8008898:	b29a      	uxth	r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	3b01      	subs	r3, #1
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80088ac:	4b65      	ldr	r3, [pc, #404]	; (8008a44 <HAL_I2C_Master_Receive+0x4ac>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	08db      	lsrs	r3, r3, #3
 80088b2:	4a65      	ldr	r2, [pc, #404]	; (8008a48 <HAL_I2C_Master_Receive+0x4b0>)
 80088b4:	fba2 2303 	umull	r2, r3, r2, r3
 80088b8:	0a1a      	lsrs	r2, r3, #8
 80088ba:	4613      	mov	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	00da      	lsls	r2, r3, #3
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80088c6:	6a3b      	ldr	r3, [r7, #32]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d117      	bne.n	8008902 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2220      	movs	r2, #32
 80088dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ec:	f043 0220 	orr.w	r2, r3, #32
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80088f4:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e099      	b.n	8008a36 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	695b      	ldr	r3, [r3, #20]
 8008908:	f003 0304 	and.w	r3, r3, #4
 800890c:	2b04      	cmp	r3, #4
 800890e:	d1da      	bne.n	80088c6 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800891e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	691a      	ldr	r2, [r3, #16]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892a:	b2d2      	uxtb	r2, r2
 800892c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008932:	1c5a      	adds	r2, r3, #1
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800893c:	3b01      	subs	r3, #1
 800893e:	b29a      	uxth	r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008948:	b29b      	uxth	r3, r3
 800894a:	3b01      	subs	r3, #1
 800894c:	b29a      	uxth	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008952:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	691a      	ldr	r2, [r3, #16]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895e:	b2d2      	uxtb	r2, r2
 8008960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008966:	1c5a      	adds	r2, r3, #1
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008970:	3b01      	subs	r3, #1
 8008972:	b29a      	uxth	r2, r3
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800897c:	b29b      	uxth	r3, r3
 800897e:	3b01      	subs	r3, #1
 8008980:	b29a      	uxth	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008986:	e042      	b.n	8008a0e <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800898a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f001 fe9b 	bl	800a6c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d001      	beq.n	800899c <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e04c      	b.n	8008a36 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	691a      	ldr	r2, [r3, #16]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a6:	b2d2      	uxtb	r2, r2
 80089a8:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ae:	1c5a      	adds	r2, r3, #1
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089b8:	3b01      	subs	r3, #1
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	3b01      	subs	r3, #1
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	695b      	ldr	r3, [r3, #20]
 80089d4:	f003 0304 	and.w	r3, r3, #4
 80089d8:	2b04      	cmp	r3, #4
 80089da:	d118      	bne.n	8008a0e <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	691a      	ldr	r2, [r3, #16]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e6:	b2d2      	uxtb	r2, r2
 80089e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ee:	1c5a      	adds	r2, r3, #1
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f8:	3b01      	subs	r3, #1
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	3b01      	subs	r3, #1
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f47f ae99 	bne.w	800874a <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	e000      	b.n	8008a36 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8008a34:	2302      	movs	r3, #2
  }
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3728      	adds	r7, #40	; 0x28
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	00010004 	.word	0x00010004
 8008a44:	20000030 	.word	0x20000030
 8008a48:	14f8b589 	.word	0x14f8b589

08008a4c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b088      	sub	sp, #32
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008a54:	2300      	movs	r3, #0
 8008a56:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a64:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a6c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a74:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
 8008a78:	2b10      	cmp	r3, #16
 8008a7a:	d003      	beq.n	8008a84 <HAL_I2C_EV_IRQHandler+0x38>
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
 8008a7e:	2b40      	cmp	r3, #64	; 0x40
 8008a80:	f040 80bd 	bne.w	8008bfe <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	695b      	ldr	r3, [r3, #20]
 8008a92:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10d      	bne.n	8008aba <HAL_I2C_EV_IRQHandler+0x6e>
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008aa4:	d003      	beq.n	8008aae <HAL_I2C_EV_IRQHandler+0x62>
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008aac:	d101      	bne.n	8008ab2 <HAL_I2C_EV_IRQHandler+0x66>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e000      	b.n	8008ab4 <HAL_I2C_EV_IRQHandler+0x68>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	f000 812e 	beq.w	8008d16 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00c      	beq.n	8008ade <HAL_I2C_EV_IRQHandler+0x92>
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	0a5b      	lsrs	r3, r3, #9
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d006      	beq.n	8008ade <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f001 fe7d 	bl	800a7d0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fcc9 	bl	800946e <I2C_Master_SB>
 8008adc:	e08e      	b.n	8008bfc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	08db      	lsrs	r3, r3, #3
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d009      	beq.n	8008afe <HAL_I2C_EV_IRQHandler+0xb2>
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	0a5b      	lsrs	r3, r3, #9
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fd3e 	bl	8009578 <I2C_Master_ADD10>
 8008afc:	e07e      	b.n	8008bfc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	085b      	lsrs	r3, r3, #1
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d009      	beq.n	8008b1e <HAL_I2C_EV_IRQHandler+0xd2>
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	0a5b      	lsrs	r3, r3, #9
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d003      	beq.n	8008b1e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fd57 	bl	80095ca <I2C_Master_ADDR>
 8008b1c:	e06e      	b.n	8008bfc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	089b      	lsrs	r3, r3, #2
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d037      	beq.n	8008b9a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b38:	f000 80ef 	beq.w	8008d1a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	09db      	lsrs	r3, r3, #7
 8008b40:	f003 0301 	and.w	r3, r3, #1
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00f      	beq.n	8008b68 <HAL_I2C_EV_IRQHandler+0x11c>
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	0a9b      	lsrs	r3, r3, #10
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d009      	beq.n	8008b68 <HAL_I2C_EV_IRQHandler+0x11c>
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	089b      	lsrs	r3, r3, #2
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d103      	bne.n	8008b68 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f956 	bl	8008e12 <I2C_MasterTransmit_TXE>
 8008b66:	e049      	b.n	8008bfc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	089b      	lsrs	r3, r3, #2
 8008b6c:	f003 0301 	and.w	r3, r3, #1
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 80d2 	beq.w	8008d1a <HAL_I2C_EV_IRQHandler+0x2ce>
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	0a5b      	lsrs	r3, r3, #9
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f000 80cb 	beq.w	8008d1a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	2b10      	cmp	r3, #16
 8008b88:	d103      	bne.n	8008b92 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f9dd 	bl	8008f4a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b90:	e0c3      	b.n	8008d1a <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fa41 	bl	800901a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b98:	e0bf      	b.n	8008d1a <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ba8:	f000 80b7 	beq.w	8008d1a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	099b      	lsrs	r3, r3, #6
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00f      	beq.n	8008bd8 <HAL_I2C_EV_IRQHandler+0x18c>
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	0a9b      	lsrs	r3, r3, #10
 8008bbc:	f003 0301 	and.w	r3, r3, #1
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d009      	beq.n	8008bd8 <HAL_I2C_EV_IRQHandler+0x18c>
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	089b      	lsrs	r3, r3, #2
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d103      	bne.n	8008bd8 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fab1 	bl	8009138 <I2C_MasterReceive_RXNE>
 8008bd6:	e011      	b.n	8008bfc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	089b      	lsrs	r3, r3, #2
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 809a 	beq.w	8008d1a <HAL_I2C_EV_IRQHandler+0x2ce>
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	0a5b      	lsrs	r3, r3, #9
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f000 8093 	beq.w	8008d1a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fb50 	bl	800929a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008bfa:	e08e      	b.n	8008d1a <HAL_I2C_EV_IRQHandler+0x2ce>
 8008bfc:	e08d      	b.n	8008d1a <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d004      	beq.n	8008c10 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	61fb      	str	r3, [r7, #28]
 8008c0e:	e007      	b.n	8008c20 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	085b      	lsrs	r3, r3, #1
 8008c24:	f003 0301 	and.w	r3, r3, #1
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d012      	beq.n	8008c52 <HAL_I2C_EV_IRQHandler+0x206>
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	0a5b      	lsrs	r3, r3, #9
 8008c30:	f003 0301 	and.w	r3, r3, #1
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00c      	beq.n	8008c52 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d003      	beq.n	8008c48 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008c48:	69b9      	ldr	r1, [r7, #24]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 ff14 	bl	8009a78 <I2C_Slave_ADDR>
 8008c50:	e066      	b.n	8008d20 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	091b      	lsrs	r3, r3, #4
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d009      	beq.n	8008c72 <HAL_I2C_EV_IRQHandler+0x226>
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	0a5b      	lsrs	r3, r3, #9
 8008c62:	f003 0301 	and.w	r3, r3, #1
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 ff48 	bl	8009b00 <I2C_Slave_STOPF>
 8008c70:	e056      	b.n	8008d20 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008c72:	7bbb      	ldrb	r3, [r7, #14]
 8008c74:	2b21      	cmp	r3, #33	; 0x21
 8008c76:	d002      	beq.n	8008c7e <HAL_I2C_EV_IRQHandler+0x232>
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
 8008c7a:	2b29      	cmp	r3, #41	; 0x29
 8008c7c:	d125      	bne.n	8008cca <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	09db      	lsrs	r3, r3, #7
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00f      	beq.n	8008caa <HAL_I2C_EV_IRQHandler+0x25e>
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	0a9b      	lsrs	r3, r3, #10
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d009      	beq.n	8008caa <HAL_I2C_EV_IRQHandler+0x25e>
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	089b      	lsrs	r3, r3, #2
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d103      	bne.n	8008caa <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fe2c 	bl	8009900 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008ca8:	e039      	b.n	8008d1e <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	089b      	lsrs	r3, r3, #2
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d033      	beq.n	8008d1e <HAL_I2C_EV_IRQHandler+0x2d2>
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	0a5b      	lsrs	r3, r3, #9
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d02d      	beq.n	8008d1e <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fe59 	bl	800997a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008cc8:	e029      	b.n	8008d1e <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	099b      	lsrs	r3, r3, #6
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00f      	beq.n	8008cf6 <HAL_I2C_EV_IRQHandler+0x2aa>
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	0a9b      	lsrs	r3, r3, #10
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d009      	beq.n	8008cf6 <HAL_I2C_EV_IRQHandler+0x2aa>
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	089b      	lsrs	r3, r3, #2
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d103      	bne.n	8008cf6 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fe63 	bl	80099ba <I2C_SlaveReceive_RXNE>
 8008cf4:	e014      	b.n	8008d20 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	089b      	lsrs	r3, r3, #2
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00e      	beq.n	8008d20 <HAL_I2C_EV_IRQHandler+0x2d4>
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	0a5b      	lsrs	r3, r3, #9
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d008      	beq.n	8008d20 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fe91 	bl	8009a36 <I2C_SlaveReceive_BTF>
 8008d14:	e004      	b.n	8008d20 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8008d16:	bf00      	nop
 8008d18:	e002      	b.n	8008d20 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d1a:	bf00      	nop
 8008d1c:	e000      	b.n	8008d20 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008d1e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008d20:	3720      	adds	r7, #32
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d26:	b480      	push	{r7}
 8008d28:	b083      	sub	sp, #12
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008d2e:	bf00      	nop
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bc80      	pop	{r7}
 8008d36:	4770      	bx	lr

08008d38 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bc80      	pop	{r7}
 8008d48:	4770      	bx	lr

08008d4a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b083      	sub	sp, #12
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008d52:	bf00      	nop
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bc80      	pop	{r7}
 8008d5a:	4770      	bx	lr

08008d5c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bc80      	pop	{r7}
 8008d6c:	4770      	bx	lr

08008d6e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b083      	sub	sp, #12
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	460b      	mov	r3, r1
 8008d78:	70fb      	strb	r3, [r7, #3]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008d7e:	bf00      	nop
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bc80      	pop	{r7}
 8008d86:	4770      	bx	lr

08008d88 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bc80      	pop	{r7}
 8008d98:	4770      	bx	lr

08008d9a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008da2:	bf00      	nop
 8008da4:	370c      	adds	r7, #12
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bc80      	pop	{r7}
 8008daa:	4770      	bx	lr

08008dac <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bc80      	pop	{r7}
 8008dbc:	4770      	bx	lr

08008dbe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b083      	sub	sp, #12
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008dc6:	bf00      	nop
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bc80      	pop	{r7}
 8008dce:	4770      	bx	lr

08008dd0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bc80      	pop	{r7}
 8008de0:	4770      	bx	lr

08008de2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b083      	sub	sp, #12
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008df0:	b2db      	uxtb	r3, r3
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bc80      	pop	{r7}
 8008dfa:	4770      	bx	lr

08008dfc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bc80      	pop	{r7}
 8008e10:	4770      	bx	lr

08008e12 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b084      	sub	sp, #16
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e20:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e28:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d150      	bne.n	8008eda <I2C_MasterTransmit_TXE+0xc8>
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
 8008e3a:	2b21      	cmp	r3, #33	; 0x21
 8008e3c:	d14d      	bne.n	8008eda <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2b08      	cmp	r3, #8
 8008e42:	d01d      	beq.n	8008e80 <I2C_MasterTransmit_TXE+0x6e>
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	2b20      	cmp	r3, #32
 8008e48:	d01a      	beq.n	8008e80 <I2C_MasterTransmit_TXE+0x6e>
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e50:	d016      	beq.n	8008e80 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	685a      	ldr	r2, [r3, #4]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008e60:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2211      	movs	r2, #17
 8008e66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2220      	movs	r2, #32
 8008e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7ff ff54 	bl	8008d26 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008e7e:	e060      	b.n	8008f42 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685a      	ldr	r2, [r3, #4]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008e8e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e9e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2220      	movs	r2, #32
 8008eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	2b40      	cmp	r3, #64	; 0x40
 8008eb8:	d107      	bne.n	8008eca <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff ff69 	bl	8008d9a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008ec8:	e03b      	b.n	8008f42 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7ff ff27 	bl	8008d26 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008ed8:	e033      	b.n	8008f42 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
 8008edc:	2b21      	cmp	r3, #33	; 0x21
 8008ede:	d005      	beq.n	8008eec <I2C_MasterTransmit_TXE+0xda>
 8008ee0:	7bbb      	ldrb	r3, [r7, #14]
 8008ee2:	2b40      	cmp	r3, #64	; 0x40
 8008ee4:	d12d      	bne.n	8008f42 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
 8008ee8:	2b22      	cmp	r3, #34	; 0x22
 8008eea:	d12a      	bne.n	8008f42 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d108      	bne.n	8008f08 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f04:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008f06:	e01c      	b.n	8008f42 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	2b40      	cmp	r3, #64	; 0x40
 8008f12:	d103      	bne.n	8008f1c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f880 	bl	800901a <I2C_MemoryTransmit_TXE_BTF>
}
 8008f1a:	e012      	b.n	8008f42 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f20:	781a      	ldrb	r2, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2c:	1c5a      	adds	r2, r3, #1
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	b29a      	uxth	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008f40:	e7ff      	b.n	8008f42 <I2C_MasterTransmit_TXE+0x130>
 8008f42:	bf00      	nop
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f56:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2b21      	cmp	r3, #33	; 0x21
 8008f62:	d156      	bne.n	8009012 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d012      	beq.n	8008f94 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f72:	781a      	ldrb	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7e:	1c5a      	adds	r2, r3, #1
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008f92:	e03e      	b.n	8009012 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2b08      	cmp	r3, #8
 8008f98:	d01d      	beq.n	8008fd6 <I2C_MasterTransmit_BTF+0x8c>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2b20      	cmp	r3, #32
 8008f9e:	d01a      	beq.n	8008fd6 <I2C_MasterTransmit_BTF+0x8c>
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008fa6:	d016      	beq.n	8008fd6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008fb6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2211      	movs	r2, #17
 8008fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2220      	movs	r2, #32
 8008fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7ff fea9 	bl	8008d26 <HAL_I2C_MasterTxCpltCallback>
}
 8008fd4:	e01d      	b.n	8009012 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008fe4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ff4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2220      	movs	r2, #32
 8009000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7ff fe8a 	bl	8008d26 <HAL_I2C_MasterTxCpltCallback>
}
 8009012:	bf00      	nop
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b084      	sub	sp, #16
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009028:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800902e:	2b00      	cmp	r3, #0
 8009030:	d11d      	bne.n	800906e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009036:	2b01      	cmp	r3, #1
 8009038:	d10b      	bne.n	8009052 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800903e:	b2da      	uxtb	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800904a:	1c9a      	adds	r2, r3, #2
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8009050:	e06e      	b.n	8009130 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009056:	b29b      	uxth	r3, r3
 8009058:	121b      	asrs	r3, r3, #8
 800905a:	b2da      	uxtb	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800906c:	e060      	b.n	8009130 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009072:	2b01      	cmp	r3, #1
 8009074:	d10b      	bne.n	800908e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800907a:	b2da      	uxtb	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009086:	1c5a      	adds	r2, r3, #1
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800908c:	e050      	b.n	8009130 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009092:	2b02      	cmp	r3, #2
 8009094:	d14c      	bne.n	8009130 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	2b22      	cmp	r3, #34	; 0x22
 800909a:	d108      	bne.n	80090ae <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090aa:	601a      	str	r2, [r3, #0]
}
 80090ac:	e040      	b.n	8009130 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d015      	beq.n	80090e4 <I2C_MemoryTransmit_TXE_BTF+0xca>
 80090b8:	7bfb      	ldrb	r3, [r7, #15]
 80090ba:	2b21      	cmp	r3, #33	; 0x21
 80090bc:	d112      	bne.n	80090e4 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c2:	781a      	ldrb	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ce:	1c5a      	adds	r2, r3, #1
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090d8:	b29b      	uxth	r3, r3
 80090da:	3b01      	subs	r3, #1
 80090dc:	b29a      	uxth	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80090e2:	e025      	b.n	8009130 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d120      	bne.n	8009130 <I2C_MemoryTransmit_TXE_BTF+0x116>
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
 80090f0:	2b21      	cmp	r3, #33	; 0x21
 80090f2:	d11d      	bne.n	8009130 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	685a      	ldr	r2, [r3, #4]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009102:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009112:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2220      	movs	r2, #32
 800911e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f7ff fe35 	bl	8008d9a <HAL_I2C_MemTxCpltCallback>
}
 8009130:	bf00      	nop
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b22      	cmp	r3, #34	; 0x22
 800914a:	f040 80a2 	bne.w	8009292 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009152:	b29b      	uxth	r3, r3
 8009154:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2b03      	cmp	r3, #3
 800915a:	d921      	bls.n	80091a0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	691a      	ldr	r2, [r3, #16]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009166:	b2d2      	uxtb	r2, r2
 8009168:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916e:	1c5a      	adds	r2, r3, #1
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009178:	b29b      	uxth	r3, r3
 800917a:	3b01      	subs	r3, #1
 800917c:	b29a      	uxth	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009186:	b29b      	uxth	r3, r3
 8009188:	2b03      	cmp	r3, #3
 800918a:	f040 8082 	bne.w	8009292 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800919c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800919e:	e078      	b.n	8009292 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d074      	beq.n	8009292 <I2C_MasterReceive_RXNE+0x15a>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d002      	beq.n	80091b4 <I2C_MasterReceive_RXNE+0x7c>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d16e      	bne.n	8009292 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f001 fa55 	bl	800a664 <I2C_WaitOnSTOPRequestThroughIT>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d142      	bne.n	8009246 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091ce:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80091de:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	691a      	ldr	r2, [r3, #16]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ea:	b2d2      	uxtb	r2, r2
 80091ec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f2:	1c5a      	adds	r2, r3, #1
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	3b01      	subs	r3, #1
 8009200:	b29a      	uxth	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2220      	movs	r2, #32
 800920a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b40      	cmp	r3, #64	; 0x40
 8009218:	d10a      	bne.n	8009230 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7ff fdbf 	bl	8008dac <HAL_I2C_MemRxCpltCallback>
}
 800922e:	e030      	b.n	8009292 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2212      	movs	r2, #18
 800923c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f7ff fd7a 	bl	8008d38 <HAL_I2C_MasterRxCpltCallback>
}
 8009244:	e025      	b.n	8009292 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	685a      	ldr	r2, [r3, #4]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009254:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	691a      	ldr	r2, [r3, #16]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009260:	b2d2      	uxtb	r2, r2
 8009262:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009268:	1c5a      	adds	r2, r3, #1
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009272:	b29b      	uxth	r3, r3
 8009274:	3b01      	subs	r3, #1
 8009276:	b29a      	uxth	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2220      	movs	r2, #32
 8009280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7ff fd96 	bl	8008dbe <HAL_I2C_ErrorCallback>
}
 8009292:	bf00      	nop
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b084      	sub	sp, #16
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	2b04      	cmp	r3, #4
 80092b0:	d11b      	bne.n	80092ea <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092c0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	691a      	ldr	r2, [r3, #16]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092cc:	b2d2      	uxtb	r2, r2
 80092ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d4:	1c5a      	adds	r2, r3, #1
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092de:	b29b      	uxth	r3, r3
 80092e0:	3b01      	subs	r3, #1
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80092e8:	e0bd      	b.n	8009466 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	2b03      	cmp	r3, #3
 80092f2:	d129      	bne.n	8009348 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	685a      	ldr	r2, [r3, #4]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009302:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2b04      	cmp	r3, #4
 8009308:	d00a      	beq.n	8009320 <I2C_MasterReceive_BTF+0x86>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2b02      	cmp	r3, #2
 800930e:	d007      	beq.n	8009320 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800931e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	691a      	ldr	r2, [r3, #16]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932a:	b2d2      	uxtb	r2, r2
 800932c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800933c:	b29b      	uxth	r3, r3
 800933e:	3b01      	subs	r3, #1
 8009340:	b29a      	uxth	r2, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009346:	e08e      	b.n	8009466 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800934c:	b29b      	uxth	r3, r3
 800934e:	2b02      	cmp	r3, #2
 8009350:	d176      	bne.n	8009440 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d002      	beq.n	800935e <I2C_MasterReceive_BTF+0xc4>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2b10      	cmp	r3, #16
 800935c:	d108      	bne.n	8009370 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800936c:	601a      	str	r2, [r3, #0]
 800936e:	e019      	b.n	80093a4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2b04      	cmp	r3, #4
 8009374:	d002      	beq.n	800937c <I2C_MasterReceive_BTF+0xe2>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2b02      	cmp	r3, #2
 800937a:	d108      	bne.n	800938e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	e00a      	b.n	80093a4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2b10      	cmp	r3, #16
 8009392:	d007      	beq.n	80093a4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093a2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	691a      	ldr	r2, [r3, #16]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ae:	b2d2      	uxtb	r2, r2
 80093b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b6:	1c5a      	adds	r2, r3, #1
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	3b01      	subs	r3, #1
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	691a      	ldr	r2, [r3, #16]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d4:	b2d2      	uxtb	r2, r2
 80093d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093dc:	1c5a      	adds	r2, r3, #1
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	3b01      	subs	r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80093fe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2220      	movs	r2, #32
 8009404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800940e:	b2db      	uxtb	r3, r3
 8009410:	2b40      	cmp	r3, #64	; 0x40
 8009412:	d10a      	bne.n	800942a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f7ff fcc2 	bl	8008dac <HAL_I2C_MemRxCpltCallback>
}
 8009428:	e01d      	b.n	8009466 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2212      	movs	r2, #18
 8009436:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7ff fc7d 	bl	8008d38 <HAL_I2C_MasterRxCpltCallback>
}
 800943e:	e012      	b.n	8009466 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	691a      	ldr	r2, [r3, #16]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944a:	b2d2      	uxtb	r2, r2
 800944c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009452:	1c5a      	adds	r2, r3, #1
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800945c:	b29b      	uxth	r3, r3
 800945e:	3b01      	subs	r3, #1
 8009460:	b29a      	uxth	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009466:	bf00      	nop
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800946e:	b480      	push	{r7}
 8009470:	b083      	sub	sp, #12
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b40      	cmp	r3, #64	; 0x40
 8009480:	d117      	bne.n	80094b2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009486:	2b00      	cmp	r3, #0
 8009488:	d109      	bne.n	800949e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800948e:	b2db      	uxtb	r3, r3
 8009490:	461a      	mov	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800949a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800949c:	e067      	b.n	800956e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	f043 0301 	orr.w	r3, r3, #1
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	611a      	str	r2, [r3, #16]
}
 80094b0:	e05d      	b.n	800956e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094ba:	d133      	bne.n	8009524 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	2b21      	cmp	r3, #33	; 0x21
 80094c6:	d109      	bne.n	80094dc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	461a      	mov	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80094d8:	611a      	str	r2, [r3, #16]
 80094da:	e008      	b.n	80094ee <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	f043 0301 	orr.w	r3, r3, #1
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d004      	beq.n	8009500 <I2C_Master_SB+0x92>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d108      	bne.n	8009512 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009504:	2b00      	cmp	r3, #0
 8009506:	d032      	beq.n	800956e <I2C_Master_SB+0x100>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950e:	2b00      	cmp	r3, #0
 8009510:	d02d      	beq.n	800956e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	685a      	ldr	r2, [r3, #4]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009520:	605a      	str	r2, [r3, #4]
}
 8009522:	e024      	b.n	800956e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10e      	bne.n	800954a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009530:	b29b      	uxth	r3, r3
 8009532:	11db      	asrs	r3, r3, #7
 8009534:	b2db      	uxtb	r3, r3
 8009536:	f003 0306 	and.w	r3, r3, #6
 800953a:	b2db      	uxtb	r3, r3
 800953c:	f063 030f 	orn	r3, r3, #15
 8009540:	b2da      	uxtb	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	611a      	str	r2, [r3, #16]
}
 8009548:	e011      	b.n	800956e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800954e:	2b01      	cmp	r3, #1
 8009550:	d10d      	bne.n	800956e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009556:	b29b      	uxth	r3, r3
 8009558:	11db      	asrs	r3, r3, #7
 800955a:	b2db      	uxtb	r3, r3
 800955c:	f003 0306 	and.w	r3, r3, #6
 8009560:	b2db      	uxtb	r3, r3
 8009562:	f063 030e 	orn	r3, r3, #14
 8009566:	b2da      	uxtb	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	611a      	str	r2, [r3, #16]
}
 800956e:	bf00      	nop
 8009570:	370c      	adds	r7, #12
 8009572:	46bd      	mov	sp, r7
 8009574:	bc80      	pop	{r7}
 8009576:	4770      	bx	lr

08009578 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009584:	b2da      	uxtb	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009590:	2b00      	cmp	r3, #0
 8009592:	d103      	bne.n	800959c <I2C_Master_ADD10+0x24>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009598:	2b00      	cmp	r3, #0
 800959a:	d011      	beq.n	80095c0 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d104      	bne.n	80095b0 <I2C_Master_ADD10+0x38>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d007      	beq.n	80095c0 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	685a      	ldr	r2, [r3, #4]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095be:	605a      	str	r2, [r3, #4]
    }
  }
}
 80095c0:	bf00      	nop
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bc80      	pop	{r7}
 80095c8:	4770      	bx	lr

080095ca <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80095ca:	b480      	push	{r7}
 80095cc:	b091      	sub	sp, #68	; 0x44
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2b22      	cmp	r3, #34	; 0x22
 80095f2:	f040 8174 	bne.w	80098de <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d10f      	bne.n	800961e <I2C_Master_ADDR+0x54>
 80095fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009602:	2b40      	cmp	r3, #64	; 0x40
 8009604:	d10b      	bne.n	800961e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009606:	2300      	movs	r3, #0
 8009608:	633b      	str	r3, [r7, #48]	; 0x30
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	695b      	ldr	r3, [r3, #20]
 8009610:	633b      	str	r3, [r7, #48]	; 0x30
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	633b      	str	r3, [r7, #48]	; 0x30
 800961a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961c:	e16b      	b.n	80098f6 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009622:	2b00      	cmp	r3, #0
 8009624:	d11d      	bne.n	8009662 <I2C_Master_ADDR+0x98>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800962e:	d118      	bne.n	8009662 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009630:	2300      	movs	r3, #0
 8009632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	699b      	ldr	r3, [r3, #24]
 8009642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009644:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009654:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800965a:	1c5a      	adds	r2, r3, #1
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	651a      	str	r2, [r3, #80]	; 0x50
 8009660:	e149      	b.n	80098f6 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009666:	b29b      	uxth	r3, r3
 8009668:	2b00      	cmp	r3, #0
 800966a:	d113      	bne.n	8009694 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800966c:	2300      	movs	r3, #0
 800966e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	62bb      	str	r3, [r7, #40]	; 0x28
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009680:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009690:	601a      	str	r2, [r3, #0]
 8009692:	e120      	b.n	80098d6 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009698:	b29b      	uxth	r3, r3
 800969a:	2b01      	cmp	r3, #1
 800969c:	f040 808a 	bne.w	80097b4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80096a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80096a6:	d137      	bne.n	8009718 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096b6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096c6:	d113      	bne.n	80096f0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096d6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096d8:	2300      	movs	r3, #0
 80096da:	627b      	str	r3, [r7, #36]	; 0x24
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	695b      	ldr	r3, [r3, #20]
 80096e2:	627b      	str	r3, [r7, #36]	; 0x24
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	627b      	str	r3, [r7, #36]	; 0x24
 80096ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ee:	e0f2      	b.n	80098d6 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096f0:	2300      	movs	r3, #0
 80096f2:	623b      	str	r3, [r7, #32]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	695b      	ldr	r3, [r3, #20]
 80096fa:	623b      	str	r3, [r7, #32]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	623b      	str	r3, [r7, #32]
 8009704:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009714:	601a      	str	r2, [r3, #0]
 8009716:	e0de      	b.n	80098d6 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971a:	2b08      	cmp	r3, #8
 800971c:	d02e      	beq.n	800977c <I2C_Master_ADDR+0x1b2>
 800971e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009720:	2b20      	cmp	r3, #32
 8009722:	d02b      	beq.n	800977c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009726:	2b12      	cmp	r3, #18
 8009728:	d102      	bne.n	8009730 <I2C_Master_ADDR+0x166>
 800972a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972c:	2b01      	cmp	r3, #1
 800972e:	d125      	bne.n	800977c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009732:	2b04      	cmp	r3, #4
 8009734:	d00e      	beq.n	8009754 <I2C_Master_ADDR+0x18a>
 8009736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009738:	2b02      	cmp	r3, #2
 800973a:	d00b      	beq.n	8009754 <I2C_Master_ADDR+0x18a>
 800973c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973e:	2b10      	cmp	r3, #16
 8009740:	d008      	beq.n	8009754 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009750:	601a      	str	r2, [r3, #0]
 8009752:	e007      	b.n	8009764 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009762:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009764:	2300      	movs	r3, #0
 8009766:	61fb      	str	r3, [r7, #28]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	61fb      	str	r3, [r7, #28]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	61fb      	str	r3, [r7, #28]
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	e0ac      	b.n	80098d6 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800978a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800978c:	2300      	movs	r3, #0
 800978e:	61bb      	str	r3, [r7, #24]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	61bb      	str	r3, [r7, #24]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	61bb      	str	r3, [r7, #24]
 80097a0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	e090      	b.n	80098d6 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d158      	bne.n	8009870 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80097be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c0:	2b04      	cmp	r3, #4
 80097c2:	d021      	beq.n	8009808 <I2C_Master_ADDR+0x23e>
 80097c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d01e      	beq.n	8009808 <I2C_Master_ADDR+0x23e>
 80097ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097cc:	2b10      	cmp	r3, #16
 80097ce:	d01b      	beq.n	8009808 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097de:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097e0:	2300      	movs	r3, #0
 80097e2:	617b      	str	r3, [r7, #20]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	695b      	ldr	r3, [r3, #20]
 80097ea:	617b      	str	r3, [r7, #20]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	617b      	str	r3, [r7, #20]
 80097f4:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009804:	601a      	str	r2, [r3, #0]
 8009806:	e012      	b.n	800982e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009816:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009818:	2300      	movs	r3, #0
 800981a:	613b      	str	r3, [r7, #16]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	695b      	ldr	r3, [r3, #20]
 8009822:	613b      	str	r3, [r7, #16]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	613b      	str	r3, [r7, #16]
 800982c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800983c:	d14b      	bne.n	80098d6 <I2C_Master_ADDR+0x30c>
 800983e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009840:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009844:	d00b      	beq.n	800985e <I2C_Master_ADDR+0x294>
 8009846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009848:	2b01      	cmp	r3, #1
 800984a:	d008      	beq.n	800985e <I2C_Master_ADDR+0x294>
 800984c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984e:	2b08      	cmp	r3, #8
 8009850:	d005      	beq.n	800985e <I2C_Master_ADDR+0x294>
 8009852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009854:	2b10      	cmp	r3, #16
 8009856:	d002      	beq.n	800985e <I2C_Master_ADDR+0x294>
 8009858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985a:	2b20      	cmp	r3, #32
 800985c:	d13b      	bne.n	80098d6 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	685a      	ldr	r2, [r3, #4]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800986c:	605a      	str	r2, [r3, #4]
 800986e:	e032      	b.n	80098d6 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800987e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800988a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800988e:	d117      	bne.n	80098c0 <I2C_Master_ADDR+0x2f6>
 8009890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009892:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009896:	d00b      	beq.n	80098b0 <I2C_Master_ADDR+0x2e6>
 8009898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989a:	2b01      	cmp	r3, #1
 800989c:	d008      	beq.n	80098b0 <I2C_Master_ADDR+0x2e6>
 800989e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a0:	2b08      	cmp	r3, #8
 80098a2:	d005      	beq.n	80098b0 <I2C_Master_ADDR+0x2e6>
 80098a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a6:	2b10      	cmp	r3, #16
 80098a8:	d002      	beq.n	80098b0 <I2C_Master_ADDR+0x2e6>
 80098aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ac:	2b20      	cmp	r3, #32
 80098ae:	d107      	bne.n	80098c0 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	685a      	ldr	r2, [r3, #4]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80098be:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098c0:	2300      	movs	r3, #0
 80098c2:	60fb      	str	r3, [r7, #12]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	60fb      	str	r3, [r7, #12]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	60fb      	str	r3, [r7, #12]
 80098d4:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80098dc:	e00b      	b.n	80098f6 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098de:	2300      	movs	r3, #0
 80098e0:	60bb      	str	r3, [r7, #8]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	695b      	ldr	r3, [r3, #20]
 80098e8:	60bb      	str	r3, [r7, #8]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	60bb      	str	r3, [r7, #8]
 80098f2:	68bb      	ldr	r3, [r7, #8]
}
 80098f4:	e7ff      	b.n	80098f6 <I2C_Master_ADDR+0x32c>
 80098f6:	bf00      	nop
 80098f8:	3744      	adds	r7, #68	; 0x44
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bc80      	pop	{r7}
 80098fe:	4770      	bx	lr

08009900 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800990e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009914:	b29b      	uxth	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d02b      	beq.n	8009972 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991e:	781a      	ldrb	r2, [r3, #0]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992a:	1c5a      	adds	r2, r3, #1
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009934:	b29b      	uxth	r3, r3
 8009936:	3b01      	subs	r3, #1
 8009938:	b29a      	uxth	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009942:	b29b      	uxth	r3, r3
 8009944:	2b00      	cmp	r3, #0
 8009946:	d114      	bne.n	8009972 <I2C_SlaveTransmit_TXE+0x72>
 8009948:	7bfb      	ldrb	r3, [r7, #15]
 800994a:	2b29      	cmp	r3, #41	; 0x29
 800994c:	d111      	bne.n	8009972 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800995c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2221      	movs	r2, #33	; 0x21
 8009962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2228      	movs	r2, #40	; 0x28
 8009968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7ff f9ec 	bl	8008d4a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009972:	bf00      	nop
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800997a:	b480      	push	{r7}
 800997c:	b083      	sub	sp, #12
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009986:	b29b      	uxth	r3, r3
 8009988:	2b00      	cmp	r3, #0
 800998a:	d011      	beq.n	80099b0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009990:	781a      	ldrb	r2, [r3, #0]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999c:	1c5a      	adds	r2, r3, #1
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	3b01      	subs	r3, #1
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bc80      	pop	{r7}
 80099b8:	4770      	bx	lr

080099ba <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099c8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d02c      	beq.n	8009a2e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	691a      	ldr	r2, [r3, #16]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099de:	b2d2      	uxtb	r2, r2
 80099e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e6:	1c5a      	adds	r2, r3, #1
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	3b01      	subs	r3, #1
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d114      	bne.n	8009a2e <I2C_SlaveReceive_RXNE+0x74>
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
 8009a06:	2b2a      	cmp	r3, #42	; 0x2a
 8009a08:	d111      	bne.n	8009a2e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	685a      	ldr	r2, [r3, #4]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a18:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2222      	movs	r2, #34	; 0x22
 8009a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2228      	movs	r2, #40	; 0x28
 8009a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7ff f997 	bl	8008d5c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009a2e:	bf00      	nop
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009a36:	b480      	push	{r7}
 8009a38:	b083      	sub	sp, #12
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d012      	beq.n	8009a6e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	691a      	ldr	r2, [r3, #16]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a52:	b2d2      	uxtb	r2, r2
 8009a54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5a:	1c5a      	adds	r2, r3, #1
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	3b01      	subs	r3, #1
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009a6e:	bf00      	nop
 8009a70:	370c      	adds	r7, #12
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bc80      	pop	{r7}
 8009a76:	4770      	bx	lr

08009a78 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009a82:	2300      	movs	r3, #0
 8009a84:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a92:	2b28      	cmp	r3, #40	; 0x28
 8009a94:	d127      	bne.n	8009ae6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	685a      	ldr	r2, [r3, #4]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009aa4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	089b      	lsrs	r3, r3, #2
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d101      	bne.n	8009ab6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	09db      	lsrs	r3, r3, #7
 8009aba:	f003 0301 	and.w	r3, r3, #1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d103      	bne.n	8009aca <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	81bb      	strh	r3, [r7, #12]
 8009ac8:	e002      	b.n	8009ad0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009ad8:	89ba      	ldrh	r2, [r7, #12]
 8009ada:	7bfb      	ldrb	r3, [r7, #15]
 8009adc:	4619      	mov	r1, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f7ff f945 	bl	8008d6e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009ae4:	e008      	b.n	8009af8 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f06f 0202 	mvn.w	r2, #2
 8009aee:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009af8:	bf00      	nop
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b0e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	685a      	ldr	r2, [r3, #4]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009b1e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009b20:	2300      	movs	r3, #0
 8009b22:	60bb      	str	r3, [r7, #8]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	60bb      	str	r3, [r7, #8]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f042 0201 	orr.w	r2, r2, #1
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b4c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b5c:	d172      	bne.n	8009c44 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
 8009b60:	2b22      	cmp	r3, #34	; 0x22
 8009b62:	d002      	beq.n	8009b6a <I2C_Slave_STOPF+0x6a>
 8009b64:	7bfb      	ldrb	r3, [r7, #15]
 8009b66:	2b2a      	cmp	r3, #42	; 0x2a
 8009b68:	d135      	bne.n	8009bd6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d005      	beq.n	8009b8e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b86:	f043 0204 	orr.w	r2, r3, #4
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	685a      	ldr	r2, [r3, #4]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b9c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fe f8fc 	bl	8007da0 <HAL_DMA_GetState>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d049      	beq.n	8009c42 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb2:	4a69      	ldr	r2, [pc, #420]	; (8009d58 <I2C_Slave_STOPF+0x258>)
 8009bb4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fd ff74 	bl	8007aa8 <HAL_DMA_Abort_IT>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d03d      	beq.n	8009c42 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009bd4:	e035      	b.n	8009c42 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d005      	beq.n	8009bfa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf2:	f043 0204 	orr.w	r2, r3, #4
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	685a      	ldr	r2, [r3, #4]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c08:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fe f8c6 	bl	8007da0 <HAL_DMA_GetState>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d014      	beq.n	8009c44 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c1e:	4a4e      	ldr	r2, [pc, #312]	; (8009d58 <I2C_Slave_STOPF+0x258>)
 8009c20:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7fd ff3e 	bl	8007aa8 <HAL_DMA_Abort_IT>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d008      	beq.n	8009c44 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	4798      	blx	r3
 8009c40:	e000      	b.n	8009c44 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009c42:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d03e      	beq.n	8009ccc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	695b      	ldr	r3, [r3, #20]
 8009c54:	f003 0304 	and.w	r3, r3, #4
 8009c58:	2b04      	cmp	r3, #4
 8009c5a:	d112      	bne.n	8009c82 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	691a      	ldr	r2, [r3, #16]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c66:	b2d2      	uxtb	r2, r2
 8009c68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6e:	1c5a      	adds	r2, r3, #1
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	695b      	ldr	r3, [r3, #20]
 8009c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c8c:	2b40      	cmp	r3, #64	; 0x40
 8009c8e:	d112      	bne.n	8009cb6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	691a      	ldr	r2, [r3, #16]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9a:	b2d2      	uxtb	r2, r2
 8009c9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca2:	1c5a      	adds	r2, r3, #1
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d005      	beq.n	8009ccc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc4:	f043 0204 	orr.w	r2, r3, #4
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d003      	beq.n	8009cdc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f843 	bl	8009d60 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009cda:	e039      	b.n	8009d50 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
 8009cde:	2b2a      	cmp	r3, #42	; 0x2a
 8009ce0:	d109      	bne.n	8009cf6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2228      	movs	r2, #40	; 0x28
 8009cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f7ff f833 	bl	8008d5c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	2b28      	cmp	r3, #40	; 0x28
 8009d00:	d111      	bne.n	8009d26 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a15      	ldr	r2, [pc, #84]	; (8009d5c <I2C_Slave_STOPF+0x25c>)
 8009d06:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2220      	movs	r2, #32
 8009d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7ff f832 	bl	8008d88 <HAL_I2C_ListenCpltCallback>
}
 8009d24:	e014      	b.n	8009d50 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d2a:	2b22      	cmp	r3, #34	; 0x22
 8009d2c:	d002      	beq.n	8009d34 <I2C_Slave_STOPF+0x234>
 8009d2e:	7bfb      	ldrb	r3, [r7, #15]
 8009d30:	2b22      	cmp	r3, #34	; 0x22
 8009d32:	d10d      	bne.n	8009d50 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2220      	movs	r2, #32
 8009d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7ff f806 	bl	8008d5c <HAL_I2C_SlaveRxCpltCallback>
}
 8009d50:	bf00      	nop
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	0800a265 	.word	0x0800a265
 8009d5c:	ffff0000 	.word	0xffff0000

08009d60 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d6e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d76:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009d78:	7bbb      	ldrb	r3, [r7, #14]
 8009d7a:	2b10      	cmp	r3, #16
 8009d7c:	d002      	beq.n	8009d84 <I2C_ITError+0x24>
 8009d7e:	7bbb      	ldrb	r3, [r7, #14]
 8009d80:	2b40      	cmp	r3, #64	; 0x40
 8009d82:	d10a      	bne.n	8009d9a <I2C_ITError+0x3a>
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
 8009d86:	2b22      	cmp	r3, #34	; 0x22
 8009d88:	d107      	bne.n	8009d9a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d98:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009da0:	2b28      	cmp	r3, #40	; 0x28
 8009da2:	d107      	bne.n	8009db4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2228      	movs	r2, #40	; 0x28
 8009dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009db2:	e015      	b.n	8009de0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009dc2:	d00a      	beq.n	8009dda <I2C_ITError+0x7a>
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	2b60      	cmp	r3, #96	; 0x60
 8009dc8:	d007      	beq.n	8009dda <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2220      	movs	r2, #32
 8009dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009dee:	d161      	bne.n	8009eb4 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009dfe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d020      	beq.n	8009e4e <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e10:	4a6a      	ldr	r2, [pc, #424]	; (8009fbc <I2C_ITError+0x25c>)
 8009e12:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7fd fe45 	bl	8007aa8 <HAL_DMA_Abort_IT>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f000 8089 	beq.w	8009f38 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f022 0201 	bic.w	r2, r2, #1
 8009e34:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2220      	movs	r2, #32
 8009e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009e48:	4610      	mov	r0, r2
 8009e4a:	4798      	blx	r3
 8009e4c:	e074      	b.n	8009f38 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e52:	4a5a      	ldr	r2, [pc, #360]	; (8009fbc <I2C_ITError+0x25c>)
 8009e54:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fd fe24 	bl	8007aa8 <HAL_DMA_Abort_IT>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d068      	beq.n	8009f38 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	695b      	ldr	r3, [r3, #20]
 8009e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e70:	2b40      	cmp	r3, #64	; 0x40
 8009e72:	d10b      	bne.n	8009e8c <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	691a      	ldr	r2, [r3, #16]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7e:	b2d2      	uxtb	r2, r2
 8009e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e86:	1c5a      	adds	r2, r3, #1
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f022 0201 	bic.w	r2, r2, #1
 8009e9a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2220      	movs	r2, #32
 8009ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009eae:	4610      	mov	r0, r2
 8009eb0:	4798      	blx	r3
 8009eb2:	e041      	b.n	8009f38 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	2b60      	cmp	r3, #96	; 0x60
 8009ebe:	d125      	bne.n	8009f0c <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2220      	movs	r2, #32
 8009ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	695b      	ldr	r3, [r3, #20]
 8009ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ed8:	2b40      	cmp	r3, #64	; 0x40
 8009eda:	d10b      	bne.n	8009ef4 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	691a      	ldr	r2, [r3, #16]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee6:	b2d2      	uxtb	r2, r2
 8009ee8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eee:	1c5a      	adds	r2, r3, #1
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f022 0201 	bic.w	r2, r2, #1
 8009f02:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f7fe ff63 	bl	8008dd0 <HAL_I2C_AbortCpltCallback>
 8009f0a:	e015      	b.n	8009f38 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	695b      	ldr	r3, [r3, #20]
 8009f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f16:	2b40      	cmp	r3, #64	; 0x40
 8009f18:	d10b      	bne.n	8009f32 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	691a      	ldr	r2, [r3, #16]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f24:	b2d2      	uxtb	r2, r2
 8009f26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2c:	1c5a      	adds	r2, r3, #1
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f7fe ff43 	bl	8008dbe <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3c:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10e      	bne.n	8009f66 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d109      	bne.n	8009f66 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d104      	bne.n	8009f66 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d007      	beq.n	8009f76 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009f74:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f7c:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f82:	f003 0304 	and.w	r3, r3, #4
 8009f86:	2b04      	cmp	r3, #4
 8009f88:	d113      	bne.n	8009fb2 <I2C_ITError+0x252>
 8009f8a:	7bfb      	ldrb	r3, [r7, #15]
 8009f8c:	2b28      	cmp	r3, #40	; 0x28
 8009f8e:	d110      	bne.n	8009fb2 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a0b      	ldr	r2, [pc, #44]	; (8009fc0 <I2C_ITError+0x260>)
 8009f94:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7fe feeb 	bl	8008d88 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009fb2:	bf00      	nop
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	0800a265 	.word	0x0800a265
 8009fc0:	ffff0000 	.word	0xffff0000

08009fc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b088      	sub	sp, #32
 8009fc8:	af02      	add	r7, sp, #8
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	607a      	str	r2, [r7, #4]
 8009fce:	603b      	str	r3, [r7, #0]
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	2b08      	cmp	r3, #8
 8009fde:	d006      	beq.n	8009fee <I2C_MasterRequestWrite+0x2a>
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d003      	beq.n	8009fee <I2C_MasterRequestWrite+0x2a>
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009fec:	d108      	bne.n	800a000 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ffc:	601a      	str	r2, [r3, #0]
 8009ffe:	e00b      	b.n	800a018 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a004:	2b12      	cmp	r3, #18
 800a006:	d107      	bne.n	800a018 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a016:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f000 f9c5 	bl	800a3b4 <I2C_WaitOnFlagUntilTimeout>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00d      	beq.n	800a04c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a03a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a03e:	d103      	bne.n	800a048 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a046:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a048:	2303      	movs	r3, #3
 800a04a:	e035      	b.n	800a0b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	691b      	ldr	r3, [r3, #16]
 800a050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a054:	d108      	bne.n	800a068 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a056:	897b      	ldrh	r3, [r7, #10]
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	461a      	mov	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a064:	611a      	str	r2, [r3, #16]
 800a066:	e01b      	b.n	800a0a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a068:	897b      	ldrh	r3, [r7, #10]
 800a06a:	11db      	asrs	r3, r3, #7
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	f003 0306 	and.w	r3, r3, #6
 800a072:	b2db      	uxtb	r3, r3
 800a074:	f063 030f 	orn	r3, r3, #15
 800a078:	b2da      	uxtb	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	490e      	ldr	r1, [pc, #56]	; (800a0c0 <I2C_MasterRequestWrite+0xfc>)
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f000 f9eb 	bl	800a462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	e010      	b.n	800a0b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a096:	897b      	ldrh	r3, [r7, #10]
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	4907      	ldr	r1, [pc, #28]	; (800a0c4 <I2C_MasterRequestWrite+0x100>)
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f000 f9db 	bl	800a462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e000      	b.n	800a0b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3718      	adds	r7, #24
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	00010008 	.word	0x00010008
 800a0c4:	00010002 	.word	0x00010002

0800a0c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b088      	sub	sp, #32
 800a0cc:	af02      	add	r7, sp, #8
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	607a      	str	r2, [r7, #4]
 800a0d2:	603b      	str	r3, [r7, #0]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a0ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2b08      	cmp	r3, #8
 800a0f2:	d006      	beq.n	800a102 <I2C_MasterRequestRead+0x3a>
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d003      	beq.n	800a102 <I2C_MasterRequestRead+0x3a>
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a100:	d108      	bne.n	800a114 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a110:	601a      	str	r2, [r3, #0]
 800a112:	e00b      	b.n	800a12c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a118:	2b11      	cmp	r3, #17
 800a11a:	d107      	bne.n	800a12c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a12a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f000 f93b 	bl	800a3b4 <I2C_WaitOnFlagUntilTimeout>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00d      	beq.n	800a160 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a14e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a152:	d103      	bne.n	800a15c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a15a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a15c:	2303      	movs	r3, #3
 800a15e:	e079      	b.n	800a254 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a168:	d108      	bne.n	800a17c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a16a:	897b      	ldrh	r3, [r7, #10]
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	f043 0301 	orr.w	r3, r3, #1
 800a172:	b2da      	uxtb	r2, r3
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	611a      	str	r2, [r3, #16]
 800a17a:	e05f      	b.n	800a23c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a17c:	897b      	ldrh	r3, [r7, #10]
 800a17e:	11db      	asrs	r3, r3, #7
 800a180:	b2db      	uxtb	r3, r3
 800a182:	f003 0306 	and.w	r3, r3, #6
 800a186:	b2db      	uxtb	r3, r3
 800a188:	f063 030f 	orn	r3, r3, #15
 800a18c:	b2da      	uxtb	r2, r3
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	4930      	ldr	r1, [pc, #192]	; (800a25c <I2C_MasterRequestRead+0x194>)
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f000 f961 	bl	800a462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d001      	beq.n	800a1aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e054      	b.n	800a254 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a1aa:	897b      	ldrh	r3, [r7, #10]
 800a1ac:	b2da      	uxtb	r2, r3
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	4929      	ldr	r1, [pc, #164]	; (800a260 <I2C_MasterRequestRead+0x198>)
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f000 f951 	bl	800a462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d001      	beq.n	800a1ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e044      	b.n	800a254 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	613b      	str	r3, [r7, #16]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	695b      	ldr	r3, [r3, #20]
 800a1d4:	613b      	str	r3, [r7, #16]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	613b      	str	r3, [r7, #16]
 800a1de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 f8d9 	bl	800a3b4 <I2C_WaitOnFlagUntilTimeout>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00d      	beq.n	800a224 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a216:	d103      	bne.n	800a220 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a21e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a220:	2303      	movs	r3, #3
 800a222:	e017      	b.n	800a254 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a224:	897b      	ldrh	r3, [r7, #10]
 800a226:	11db      	asrs	r3, r3, #7
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	f003 0306 	and.w	r3, r3, #6
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	f063 030e 	orn	r3, r3, #14
 800a234:	b2da      	uxtb	r2, r3
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	4907      	ldr	r1, [pc, #28]	; (800a260 <I2C_MasterRequestRead+0x198>)
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f000 f90d 	bl	800a462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d001      	beq.n	800a252 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e000      	b.n	800a254 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	00010008 	.word	0x00010008
 800a260:	00010002 	.word	0x00010002

0800a264 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a26c:	2300      	movs	r3, #0
 800a26e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a274:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a27c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a27e:	4b4b      	ldr	r3, [pc, #300]	; (800a3ac <I2C_DMAAbort+0x148>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	08db      	lsrs	r3, r3, #3
 800a284:	4a4a      	ldr	r2, [pc, #296]	; (800a3b0 <I2C_DMAAbort+0x14c>)
 800a286:	fba2 2303 	umull	r2, r3, r2, r3
 800a28a:	0a1a      	lsrs	r2, r3, #8
 800a28c:	4613      	mov	r3, r2
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4413      	add	r3, r2
 800a292:	00da      	lsls	r2, r3, #3
 800a294:	1ad3      	subs	r3, r2, r3
 800a296:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d106      	bne.n	800a2ac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a2:	f043 0220 	orr.w	r2, r3, #32
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800a2aa:	e00a      	b.n	800a2c2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2c0:	d0ea      	beq.n	800a298 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d003      	beq.n	800a2d2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d003      	beq.n	800a2e2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2de:	2200      	movs	r2, #0
 800a2e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d003      	beq.n	800a308 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a304:	2200      	movs	r2, #0
 800a306:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d003      	beq.n	800a318 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a314:	2200      	movs	r2, #0
 800a316:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f022 0201 	bic.w	r2, r2, #1
 800a326:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	2b60      	cmp	r3, #96	; 0x60
 800a332:	d10e      	bne.n	800a352 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	2220      	movs	r2, #32
 800a338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	2200      	movs	r2, #0
 800a340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	2200      	movs	r2, #0
 800a348:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a34a:	6978      	ldr	r0, [r7, #20]
 800a34c:	f7fe fd40 	bl	8008dd0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a350:	e027      	b.n	800a3a2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a352:	7cfb      	ldrb	r3, [r7, #19]
 800a354:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a358:	2b28      	cmp	r3, #40	; 0x28
 800a35a:	d117      	bne.n	800a38c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f042 0201 	orr.w	r2, r2, #1
 800a36a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a37a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	2200      	movs	r2, #0
 800a380:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	2228      	movs	r2, #40	; 0x28
 800a386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a38a:	e007      	b.n	800a39c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	2220      	movs	r2, #32
 800a390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	2200      	movs	r2, #0
 800a398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a39c:	6978      	ldr	r0, [r7, #20]
 800a39e:	f7fe fd0e 	bl	8008dbe <HAL_I2C_ErrorCallback>
}
 800a3a2:	bf00      	nop
 800a3a4:	3718      	adds	r7, #24
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	20000030 	.word	0x20000030
 800a3b0:	14f8b589 	.word	0x14f8b589

0800a3b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	603b      	str	r3, [r7, #0]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3c4:	e025      	b.n	800a412 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3cc:	d021      	beq.n	800a412 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3ce:	f7fd f96b 	bl	80076a8 <HAL_GetTick>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	1ad3      	subs	r3, r2, r3
 800a3d8:	683a      	ldr	r2, [r7, #0]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d302      	bcc.n	800a3e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d116      	bne.n	800a412 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2220      	movs	r2, #32
 800a3ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3fe:	f043 0220 	orr.w	r2, r3, #32
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	e023      	b.n	800a45a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	0c1b      	lsrs	r3, r3, #16
 800a416:	b2db      	uxtb	r3, r3
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d10d      	bne.n	800a438 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	43da      	mvns	r2, r3
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	4013      	ands	r3, r2
 800a428:	b29b      	uxth	r3, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	bf0c      	ite	eq
 800a42e:	2301      	moveq	r3, #1
 800a430:	2300      	movne	r3, #0
 800a432:	b2db      	uxtb	r3, r3
 800a434:	461a      	mov	r2, r3
 800a436:	e00c      	b.n	800a452 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	43da      	mvns	r2, r3
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	4013      	ands	r3, r2
 800a444:	b29b      	uxth	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	bf0c      	ite	eq
 800a44a:	2301      	moveq	r3, #1
 800a44c:	2300      	movne	r3, #0
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	461a      	mov	r2, r3
 800a452:	79fb      	ldrb	r3, [r7, #7]
 800a454:	429a      	cmp	r2, r3
 800a456:	d0b6      	beq.n	800a3c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b084      	sub	sp, #16
 800a466:	af00      	add	r7, sp, #0
 800a468:	60f8      	str	r0, [r7, #12]
 800a46a:	60b9      	str	r1, [r7, #8]
 800a46c:	607a      	str	r2, [r7, #4]
 800a46e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a470:	e051      	b.n	800a516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	695b      	ldr	r3, [r3, #20]
 800a478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a47c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a480:	d123      	bne.n	800a4ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a490:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a49a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2220      	movs	r2, #32
 800a4a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b6:	f043 0204 	orr.w	r2, r3, #4
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e046      	b.n	800a558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d0:	d021      	beq.n	800a516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4d2:	f7fd f8e9 	bl	80076a8 <HAL_GetTick>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d302      	bcc.n	800a4e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d116      	bne.n	800a516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2220      	movs	r2, #32
 800a4f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a502:	f043 0220 	orr.w	r2, r3, #32
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a512:	2301      	movs	r3, #1
 800a514:	e020      	b.n	800a558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	0c1b      	lsrs	r3, r3, #16
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d10c      	bne.n	800a53a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	695b      	ldr	r3, [r3, #20]
 800a526:	43da      	mvns	r2, r3
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	4013      	ands	r3, r2
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	bf14      	ite	ne
 800a532:	2301      	movne	r3, #1
 800a534:	2300      	moveq	r3, #0
 800a536:	b2db      	uxtb	r3, r3
 800a538:	e00b      	b.n	800a552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	699b      	ldr	r3, [r3, #24]
 800a540:	43da      	mvns	r2, r3
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	4013      	ands	r3, r2
 800a546:	b29b      	uxth	r3, r3
 800a548:	2b00      	cmp	r3, #0
 800a54a:	bf14      	ite	ne
 800a54c:	2301      	movne	r3, #1
 800a54e:	2300      	moveq	r3, #0
 800a550:	b2db      	uxtb	r3, r3
 800a552:	2b00      	cmp	r3, #0
 800a554:	d18d      	bne.n	800a472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a56c:	e02d      	b.n	800a5ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f000 f900 	bl	800a774 <I2C_IsAcknowledgeFailed>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e02d      	b.n	800a5da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a584:	d021      	beq.n	800a5ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a586:	f7fd f88f 	bl	80076a8 <HAL_GetTick>
 800a58a:	4602      	mov	r2, r0
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	1ad3      	subs	r3, r2, r3
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	429a      	cmp	r2, r3
 800a594:	d302      	bcc.n	800a59c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d116      	bne.n	800a5ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2220      	movs	r2, #32
 800a5a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b6:	f043 0220 	orr.w	r2, r3, #32
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e007      	b.n	800a5da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	695b      	ldr	r3, [r3, #20]
 800a5d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5d4:	2b80      	cmp	r3, #128	; 0x80
 800a5d6:	d1ca      	bne.n	800a56e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b084      	sub	sp, #16
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	60f8      	str	r0, [r7, #12]
 800a5ea:	60b9      	str	r1, [r7, #8]
 800a5ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a5ee:	e02d      	b.n	800a64c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f000 f8bf 	bl	800a774 <I2C_IsAcknowledgeFailed>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d001      	beq.n	800a600 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e02d      	b.n	800a65c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a606:	d021      	beq.n	800a64c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a608:	f7fd f84e 	bl	80076a8 <HAL_GetTick>
 800a60c:	4602      	mov	r2, r0
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	429a      	cmp	r2, r3
 800a616:	d302      	bcc.n	800a61e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d116      	bne.n	800a64c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2220      	movs	r2, #32
 800a628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a638:	f043 0220 	orr.w	r2, r3, #32
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e007      	b.n	800a65c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	f003 0304 	and.w	r3, r3, #4
 800a656:	2b04      	cmp	r3, #4
 800a658:	d1ca      	bne.n	800a5f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a65a:	2300      	movs	r3, #0
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3710      	adds	r7, #16
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a66c:	2300      	movs	r3, #0
 800a66e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800a670:	4b13      	ldr	r3, [pc, #76]	; (800a6c0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	08db      	lsrs	r3, r3, #3
 800a676:	4a13      	ldr	r2, [pc, #76]	; (800a6c4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800a678:	fba2 2303 	umull	r2, r3, r2, r3
 800a67c:	0a1a      	lsrs	r2, r3, #8
 800a67e:	4613      	mov	r3, r2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	3b01      	subs	r3, #1
 800a68a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d107      	bne.n	800a6a2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a696:	f043 0220 	orr.w	r2, r3, #32
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e008      	b.n	800a6b4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6b0:	d0e9      	beq.n	800a686 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3714      	adds	r7, #20
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bc80      	pop	{r7}
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	20000030 	.word	0x20000030
 800a6c4:	14f8b589 	.word	0x14f8b589

0800a6c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a6d4:	e042      	b.n	800a75c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	695b      	ldr	r3, [r3, #20]
 800a6dc:	f003 0310 	and.w	r3, r3, #16
 800a6e0:	2b10      	cmp	r3, #16
 800a6e2:	d119      	bne.n	800a718 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f06f 0210 	mvn.w	r2, #16
 800a6ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2220      	movs	r2, #32
 800a6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	e029      	b.n	800a76c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a718:	f7fc ffc6 	bl	80076a8 <HAL_GetTick>
 800a71c:	4602      	mov	r2, r0
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	429a      	cmp	r2, r3
 800a726:	d302      	bcc.n	800a72e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d116      	bne.n	800a75c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2220      	movs	r2, #32
 800a738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a748:	f043 0220 	orr.w	r2, r3, #32
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	e007      	b.n	800a76c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a766:	2b40      	cmp	r3, #64	; 0x40
 800a768:	d1b5      	bne.n	800a6d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	695b      	ldr	r3, [r3, #20]
 800a782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a78a:	d11b      	bne.n	800a7c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a794:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2220      	movs	r2, #32
 800a7a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b0:	f043 0204 	orr.w	r2, r3, #4
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e000      	b.n	800a7c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	370c      	adds	r7, #12
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bc80      	pop	{r7}
 800a7ce:	4770      	bx	lr

0800a7d0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7dc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a7e0:	d103      	bne.n	800a7ea <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a7e8:	e007      	b.n	800a7fa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ee:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a7f2:	d102      	bne.n	800a7fa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2208      	movs	r2, #8
 800a7f8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a7fa:	bf00      	nop
 800a7fc:	370c      	adds	r7, #12
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bc80      	pop	{r7}
 800a802:	4770      	bx	lr

0800a804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b086      	sub	sp, #24
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d101      	bne.n	800a816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a812:	2301      	movs	r3, #1
 800a814:	e26c      	b.n	800acf0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f003 0301 	and.w	r3, r3, #1
 800a81e:	2b00      	cmp	r3, #0
 800a820:	f000 8087 	beq.w	800a932 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a824:	4b92      	ldr	r3, [pc, #584]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	f003 030c 	and.w	r3, r3, #12
 800a82c:	2b04      	cmp	r3, #4
 800a82e:	d00c      	beq.n	800a84a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a830:	4b8f      	ldr	r3, [pc, #572]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	f003 030c 	and.w	r3, r3, #12
 800a838:	2b08      	cmp	r3, #8
 800a83a:	d112      	bne.n	800a862 <HAL_RCC_OscConfig+0x5e>
 800a83c:	4b8c      	ldr	r3, [pc, #560]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a848:	d10b      	bne.n	800a862 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a84a:	4b89      	ldr	r3, [pc, #548]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a852:	2b00      	cmp	r3, #0
 800a854:	d06c      	beq.n	800a930 <HAL_RCC_OscConfig+0x12c>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d168      	bne.n	800a930 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	e246      	b.n	800acf0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a86a:	d106      	bne.n	800a87a <HAL_RCC_OscConfig+0x76>
 800a86c:	4b80      	ldr	r3, [pc, #512]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a7f      	ldr	r2, [pc, #508]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a876:	6013      	str	r3, [r2, #0]
 800a878:	e02e      	b.n	800a8d8 <HAL_RCC_OscConfig+0xd4>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10c      	bne.n	800a89c <HAL_RCC_OscConfig+0x98>
 800a882:	4b7b      	ldr	r3, [pc, #492]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a7a      	ldr	r2, [pc, #488]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a88c:	6013      	str	r3, [r2, #0]
 800a88e:	4b78      	ldr	r3, [pc, #480]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4a77      	ldr	r2, [pc, #476]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a898:	6013      	str	r3, [r2, #0]
 800a89a:	e01d      	b.n	800a8d8 <HAL_RCC_OscConfig+0xd4>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8a4:	d10c      	bne.n	800a8c0 <HAL_RCC_OscConfig+0xbc>
 800a8a6:	4b72      	ldr	r3, [pc, #456]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a71      	ldr	r2, [pc, #452]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a8ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a8b0:	6013      	str	r3, [r2, #0]
 800a8b2:	4b6f      	ldr	r3, [pc, #444]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a6e      	ldr	r2, [pc, #440]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a8b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8bc:	6013      	str	r3, [r2, #0]
 800a8be:	e00b      	b.n	800a8d8 <HAL_RCC_OscConfig+0xd4>
 800a8c0:	4b6b      	ldr	r3, [pc, #428]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a6a      	ldr	r2, [pc, #424]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a8c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8ca:	6013      	str	r3, [r2, #0]
 800a8cc:	4b68      	ldr	r3, [pc, #416]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a67      	ldr	r2, [pc, #412]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a8d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d013      	beq.n	800a908 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8e0:	f7fc fee2 	bl	80076a8 <HAL_GetTick>
 800a8e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8e6:	e008      	b.n	800a8fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8e8:	f7fc fede 	bl	80076a8 <HAL_GetTick>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	2b64      	cmp	r3, #100	; 0x64
 800a8f4:	d901      	bls.n	800a8fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a8f6:	2303      	movs	r3, #3
 800a8f8:	e1fa      	b.n	800acf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8fa:	4b5d      	ldr	r3, [pc, #372]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a902:	2b00      	cmp	r3, #0
 800a904:	d0f0      	beq.n	800a8e8 <HAL_RCC_OscConfig+0xe4>
 800a906:	e014      	b.n	800a932 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a908:	f7fc fece 	bl	80076a8 <HAL_GetTick>
 800a90c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a90e:	e008      	b.n	800a922 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a910:	f7fc feca 	bl	80076a8 <HAL_GetTick>
 800a914:	4602      	mov	r2, r0
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	1ad3      	subs	r3, r2, r3
 800a91a:	2b64      	cmp	r3, #100	; 0x64
 800a91c:	d901      	bls.n	800a922 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a91e:	2303      	movs	r3, #3
 800a920:	e1e6      	b.n	800acf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a922:	4b53      	ldr	r3, [pc, #332]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d1f0      	bne.n	800a910 <HAL_RCC_OscConfig+0x10c>
 800a92e:	e000      	b.n	800a932 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 0302 	and.w	r3, r3, #2
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d063      	beq.n	800aa06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a93e:	4b4c      	ldr	r3, [pc, #304]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	f003 030c 	and.w	r3, r3, #12
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00b      	beq.n	800a962 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a94a:	4b49      	ldr	r3, [pc, #292]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	f003 030c 	and.w	r3, r3, #12
 800a952:	2b08      	cmp	r3, #8
 800a954:	d11c      	bne.n	800a990 <HAL_RCC_OscConfig+0x18c>
 800a956:	4b46      	ldr	r3, [pc, #280]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d116      	bne.n	800a990 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a962:	4b43      	ldr	r3, [pc, #268]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 0302 	and.w	r3, r3, #2
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d005      	beq.n	800a97a <HAL_RCC_OscConfig+0x176>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	2b01      	cmp	r3, #1
 800a974:	d001      	beq.n	800a97a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e1ba      	b.n	800acf0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a97a:	4b3d      	ldr	r3, [pc, #244]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	00db      	lsls	r3, r3, #3
 800a988:	4939      	ldr	r1, [pc, #228]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a98a:	4313      	orrs	r3, r2
 800a98c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a98e:	e03a      	b.n	800aa06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d020      	beq.n	800a9da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a998:	4b36      	ldr	r3, [pc, #216]	; (800aa74 <HAL_RCC_OscConfig+0x270>)
 800a99a:	2201      	movs	r2, #1
 800a99c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a99e:	f7fc fe83 	bl	80076a8 <HAL_GetTick>
 800a9a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9a4:	e008      	b.n	800a9b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9a6:	f7fc fe7f 	bl	80076a8 <HAL_GetTick>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	1ad3      	subs	r3, r2, r3
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	d901      	bls.n	800a9b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	e19b      	b.n	800acf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9b8:	4b2d      	ldr	r3, [pc, #180]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 0302 	and.w	r3, r3, #2
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d0f0      	beq.n	800a9a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9c4:	4b2a      	ldr	r3, [pc, #168]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	695b      	ldr	r3, [r3, #20]
 800a9d0:	00db      	lsls	r3, r3, #3
 800a9d2:	4927      	ldr	r1, [pc, #156]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	600b      	str	r3, [r1, #0]
 800a9d8:	e015      	b.n	800aa06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a9da:	4b26      	ldr	r3, [pc, #152]	; (800aa74 <HAL_RCC_OscConfig+0x270>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9e0:	f7fc fe62 	bl	80076a8 <HAL_GetTick>
 800a9e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9e6:	e008      	b.n	800a9fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9e8:	f7fc fe5e 	bl	80076a8 <HAL_GetTick>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	d901      	bls.n	800a9fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	e17a      	b.n	800acf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9fa:	4b1d      	ldr	r3, [pc, #116]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 0302 	and.w	r3, r3, #2
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1f0      	bne.n	800a9e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 0308 	and.w	r3, r3, #8
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d03a      	beq.n	800aa88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d019      	beq.n	800aa4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa1a:	4b17      	ldr	r3, [pc, #92]	; (800aa78 <HAL_RCC_OscConfig+0x274>)
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa20:	f7fc fe42 	bl	80076a8 <HAL_GetTick>
 800aa24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa26:	e008      	b.n	800aa3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa28:	f7fc fe3e 	bl	80076a8 <HAL_GetTick>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	1ad3      	subs	r3, r2, r3
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	d901      	bls.n	800aa3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800aa36:	2303      	movs	r3, #3
 800aa38:	e15a      	b.n	800acf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa3a:	4b0d      	ldr	r3, [pc, #52]	; (800aa70 <HAL_RCC_OscConfig+0x26c>)
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3e:	f003 0302 	and.w	r3, r3, #2
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d0f0      	beq.n	800aa28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800aa46:	2001      	movs	r0, #1
 800aa48:	f000 fb0a 	bl	800b060 <RCC_Delay>
 800aa4c:	e01c      	b.n	800aa88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa4e:	4b0a      	ldr	r3, [pc, #40]	; (800aa78 <HAL_RCC_OscConfig+0x274>)
 800aa50:	2200      	movs	r2, #0
 800aa52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa54:	f7fc fe28 	bl	80076a8 <HAL_GetTick>
 800aa58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa5a:	e00f      	b.n	800aa7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa5c:	f7fc fe24 	bl	80076a8 <HAL_GetTick>
 800aa60:	4602      	mov	r2, r0
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	d908      	bls.n	800aa7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aa6a:	2303      	movs	r3, #3
 800aa6c:	e140      	b.n	800acf0 <HAL_RCC_OscConfig+0x4ec>
 800aa6e:	bf00      	nop
 800aa70:	40021000 	.word	0x40021000
 800aa74:	42420000 	.word	0x42420000
 800aa78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa7c:	4b9e      	ldr	r3, [pc, #632]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800aa7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa80:	f003 0302 	and.w	r3, r3, #2
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d1e9      	bne.n	800aa5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f003 0304 	and.w	r3, r3, #4
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f000 80a6 	beq.w	800abe2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa96:	2300      	movs	r3, #0
 800aa98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa9a:	4b97      	ldr	r3, [pc, #604]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800aa9c:	69db      	ldr	r3, [r3, #28]
 800aa9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d10d      	bne.n	800aac2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aaa6:	4b94      	ldr	r3, [pc, #592]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800aaa8:	69db      	ldr	r3, [r3, #28]
 800aaaa:	4a93      	ldr	r2, [pc, #588]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800aaac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aab0:	61d3      	str	r3, [r2, #28]
 800aab2:	4b91      	ldr	r3, [pc, #580]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800aab4:	69db      	ldr	r3, [r3, #28]
 800aab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaba:	60bb      	str	r3, [r7, #8]
 800aabc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aabe:	2301      	movs	r3, #1
 800aac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aac2:	4b8e      	ldr	r3, [pc, #568]	; (800acfc <HAL_RCC_OscConfig+0x4f8>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d118      	bne.n	800ab00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aace:	4b8b      	ldr	r3, [pc, #556]	; (800acfc <HAL_RCC_OscConfig+0x4f8>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a8a      	ldr	r2, [pc, #552]	; (800acfc <HAL_RCC_OscConfig+0x4f8>)
 800aad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aada:	f7fc fde5 	bl	80076a8 <HAL_GetTick>
 800aade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aae0:	e008      	b.n	800aaf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aae2:	f7fc fde1 	bl	80076a8 <HAL_GetTick>
 800aae6:	4602      	mov	r2, r0
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	1ad3      	subs	r3, r2, r3
 800aaec:	2b64      	cmp	r3, #100	; 0x64
 800aaee:	d901      	bls.n	800aaf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	e0fd      	b.n	800acf0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aaf4:	4b81      	ldr	r3, [pc, #516]	; (800acfc <HAL_RCC_OscConfig+0x4f8>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d0f0      	beq.n	800aae2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d106      	bne.n	800ab16 <HAL_RCC_OscConfig+0x312>
 800ab08:	4b7b      	ldr	r3, [pc, #492]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ab0a:	6a1b      	ldr	r3, [r3, #32]
 800ab0c:	4a7a      	ldr	r2, [pc, #488]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ab0e:	f043 0301 	orr.w	r3, r3, #1
 800ab12:	6213      	str	r3, [r2, #32]
 800ab14:	e02d      	b.n	800ab72 <HAL_RCC_OscConfig+0x36e>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d10c      	bne.n	800ab38 <HAL_RCC_OscConfig+0x334>
 800ab1e:	4b76      	ldr	r3, [pc, #472]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	4a75      	ldr	r2, [pc, #468]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ab24:	f023 0301 	bic.w	r3, r3, #1
 800ab28:	6213      	str	r3, [r2, #32]
 800ab2a:	4b73      	ldr	r3, [pc, #460]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	4a72      	ldr	r2, [pc, #456]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ab30:	f023 0304 	bic.w	r3, r3, #4
 800ab34:	6213      	str	r3, [r2, #32]
 800ab36:	e01c      	b.n	800ab72 <HAL_RCC_OscConfig+0x36e>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	2b05      	cmp	r3, #5
 800ab3e:	d10c      	bne.n	800ab5a <HAL_RCC_OscConfig+0x356>
 800ab40:	4b6d      	ldr	r3, [pc, #436]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ab42:	6a1b      	ldr	r3, [r3, #32]
 800ab44:	4a6c      	ldr	r2, [pc, #432]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ab46:	f043 0304 	orr.w	r3, r3, #4
 800ab4a:	6213      	str	r3, [r2, #32]
 800ab4c:	4b6a      	ldr	r3, [pc, #424]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ab4e:	6a1b      	ldr	r3, [r3, #32]
 800ab50:	4a69      	ldr	r2, [pc, #420]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ab52:	f043 0301 	orr.w	r3, r3, #1
 800ab56:	6213      	str	r3, [r2, #32]
 800ab58:	e00b      	b.n	800ab72 <HAL_RCC_OscConfig+0x36e>
 800ab5a:	4b67      	ldr	r3, [pc, #412]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ab5c:	6a1b      	ldr	r3, [r3, #32]
 800ab5e:	4a66      	ldr	r2, [pc, #408]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ab60:	f023 0301 	bic.w	r3, r3, #1
 800ab64:	6213      	str	r3, [r2, #32]
 800ab66:	4b64      	ldr	r3, [pc, #400]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ab68:	6a1b      	ldr	r3, [r3, #32]
 800ab6a:	4a63      	ldr	r2, [pc, #396]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ab6c:	f023 0304 	bic.w	r3, r3, #4
 800ab70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d015      	beq.n	800aba6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab7a:	f7fc fd95 	bl	80076a8 <HAL_GetTick>
 800ab7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab80:	e00a      	b.n	800ab98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab82:	f7fc fd91 	bl	80076a8 <HAL_GetTick>
 800ab86:	4602      	mov	r2, r0
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	1ad3      	subs	r3, r2, r3
 800ab8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d901      	bls.n	800ab98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ab94:	2303      	movs	r3, #3
 800ab96:	e0ab      	b.n	800acf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab98:	4b57      	ldr	r3, [pc, #348]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ab9a:	6a1b      	ldr	r3, [r3, #32]
 800ab9c:	f003 0302 	and.w	r3, r3, #2
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d0ee      	beq.n	800ab82 <HAL_RCC_OscConfig+0x37e>
 800aba4:	e014      	b.n	800abd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aba6:	f7fc fd7f 	bl	80076a8 <HAL_GetTick>
 800abaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abac:	e00a      	b.n	800abc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abae:	f7fc fd7b 	bl	80076a8 <HAL_GetTick>
 800abb2:	4602      	mov	r2, r0
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	1ad3      	subs	r3, r2, r3
 800abb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d901      	bls.n	800abc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800abc0:	2303      	movs	r3, #3
 800abc2:	e095      	b.n	800acf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abc4:	4b4c      	ldr	r3, [pc, #304]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800abc6:	6a1b      	ldr	r3, [r3, #32]
 800abc8:	f003 0302 	and.w	r3, r3, #2
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1ee      	bne.n	800abae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800abd0:	7dfb      	ldrb	r3, [r7, #23]
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d105      	bne.n	800abe2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800abd6:	4b48      	ldr	r3, [pc, #288]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800abd8:	69db      	ldr	r3, [r3, #28]
 800abda:	4a47      	ldr	r2, [pc, #284]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800abdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800abe0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	69db      	ldr	r3, [r3, #28]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f000 8081 	beq.w	800acee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800abec:	4b42      	ldr	r3, [pc, #264]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	f003 030c 	and.w	r3, r3, #12
 800abf4:	2b08      	cmp	r3, #8
 800abf6:	d061      	beq.n	800acbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	69db      	ldr	r3, [r3, #28]
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d146      	bne.n	800ac8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac00:	4b3f      	ldr	r3, [pc, #252]	; (800ad00 <HAL_RCC_OscConfig+0x4fc>)
 800ac02:	2200      	movs	r2, #0
 800ac04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac06:	f7fc fd4f 	bl	80076a8 <HAL_GetTick>
 800ac0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac0c:	e008      	b.n	800ac20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac0e:	f7fc fd4b 	bl	80076a8 <HAL_GetTick>
 800ac12:	4602      	mov	r2, r0
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	d901      	bls.n	800ac20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	e067      	b.n	800acf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac20:	4b35      	ldr	r3, [pc, #212]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1f0      	bne.n	800ac0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a1b      	ldr	r3, [r3, #32]
 800ac30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac34:	d108      	bne.n	800ac48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ac36:	4b30      	ldr	r3, [pc, #192]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	492d      	ldr	r1, [pc, #180]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ac44:	4313      	orrs	r3, r2
 800ac46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac48:	4b2b      	ldr	r3, [pc, #172]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a19      	ldr	r1, [r3, #32]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac58:	430b      	orrs	r3, r1
 800ac5a:	4927      	ldr	r1, [pc, #156]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac60:	4b27      	ldr	r3, [pc, #156]	; (800ad00 <HAL_RCC_OscConfig+0x4fc>)
 800ac62:	2201      	movs	r2, #1
 800ac64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac66:	f7fc fd1f 	bl	80076a8 <HAL_GetTick>
 800ac6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac6c:	e008      	b.n	800ac80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac6e:	f7fc fd1b 	bl	80076a8 <HAL_GetTick>
 800ac72:	4602      	mov	r2, r0
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	1ad3      	subs	r3, r2, r3
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d901      	bls.n	800ac80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ac7c:	2303      	movs	r3, #3
 800ac7e:	e037      	b.n	800acf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac80:	4b1d      	ldr	r3, [pc, #116]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d0f0      	beq.n	800ac6e <HAL_RCC_OscConfig+0x46a>
 800ac8c:	e02f      	b.n	800acee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac8e:	4b1c      	ldr	r3, [pc, #112]	; (800ad00 <HAL_RCC_OscConfig+0x4fc>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac94:	f7fc fd08 	bl	80076a8 <HAL_GetTick>
 800ac98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac9a:	e008      	b.n	800acae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac9c:	f7fc fd04 	bl	80076a8 <HAL_GetTick>
 800aca0:	4602      	mov	r2, r0
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	1ad3      	subs	r3, r2, r3
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d901      	bls.n	800acae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800acaa:	2303      	movs	r3, #3
 800acac:	e020      	b.n	800acf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800acae:	4b12      	ldr	r3, [pc, #72]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1f0      	bne.n	800ac9c <HAL_RCC_OscConfig+0x498>
 800acba:	e018      	b.n	800acee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	69db      	ldr	r3, [r3, #28]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d101      	bne.n	800acc8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	e013      	b.n	800acf0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800acc8:	4b0b      	ldr	r3, [pc, #44]	; (800acf8 <HAL_RCC_OscConfig+0x4f4>)
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a1b      	ldr	r3, [r3, #32]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d106      	bne.n	800acea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d001      	beq.n	800acee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e000      	b.n	800acf0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3718      	adds	r7, #24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	40021000 	.word	0x40021000
 800acfc:	40007000 	.word	0x40007000
 800ad00:	42420060 	.word	0x42420060

0800ad04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d101      	bne.n	800ad18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	e0d0      	b.n	800aeba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad18:	4b6a      	ldr	r3, [pc, #424]	; (800aec4 <HAL_RCC_ClockConfig+0x1c0>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0307 	and.w	r3, r3, #7
 800ad20:	683a      	ldr	r2, [r7, #0]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d910      	bls.n	800ad48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad26:	4b67      	ldr	r3, [pc, #412]	; (800aec4 <HAL_RCC_ClockConfig+0x1c0>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f023 0207 	bic.w	r2, r3, #7
 800ad2e:	4965      	ldr	r1, [pc, #404]	; (800aec4 <HAL_RCC_ClockConfig+0x1c0>)
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad36:	4b63      	ldr	r3, [pc, #396]	; (800aec4 <HAL_RCC_ClockConfig+0x1c0>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f003 0307 	and.w	r3, r3, #7
 800ad3e:	683a      	ldr	r2, [r7, #0]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d001      	beq.n	800ad48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e0b8      	b.n	800aeba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 0302 	and.w	r3, r3, #2
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d020      	beq.n	800ad96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 0304 	and.w	r3, r3, #4
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d005      	beq.n	800ad6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad60:	4b59      	ldr	r3, [pc, #356]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	4a58      	ldr	r2, [pc, #352]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ad66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ad6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f003 0308 	and.w	r3, r3, #8
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d005      	beq.n	800ad84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad78:	4b53      	ldr	r3, [pc, #332]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	4a52      	ldr	r2, [pc, #328]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ad7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ad82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad84:	4b50      	ldr	r3, [pc, #320]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	494d      	ldr	r1, [pc, #308]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ad92:	4313      	orrs	r3, r2
 800ad94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 0301 	and.w	r3, r3, #1
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d040      	beq.n	800ae24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d107      	bne.n	800adba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800adaa:	4b47      	ldr	r3, [pc, #284]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d115      	bne.n	800ade2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	e07f      	b.n	800aeba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d107      	bne.n	800add2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adc2:	4b41      	ldr	r3, [pc, #260]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d109      	bne.n	800ade2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	e073      	b.n	800aeba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800add2:	4b3d      	ldr	r3, [pc, #244]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f003 0302 	and.w	r3, r3, #2
 800adda:	2b00      	cmp	r3, #0
 800addc:	d101      	bne.n	800ade2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	e06b      	b.n	800aeba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ade2:	4b39      	ldr	r3, [pc, #228]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	f023 0203 	bic.w	r2, r3, #3
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	4936      	ldr	r1, [pc, #216]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800adf0:	4313      	orrs	r3, r2
 800adf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800adf4:	f7fc fc58 	bl	80076a8 <HAL_GetTick>
 800adf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adfa:	e00a      	b.n	800ae12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adfc:	f7fc fc54 	bl	80076a8 <HAL_GetTick>
 800ae00:	4602      	mov	r2, r0
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	1ad3      	subs	r3, r2, r3
 800ae06:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d901      	bls.n	800ae12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae0e:	2303      	movs	r3, #3
 800ae10:	e053      	b.n	800aeba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae12:	4b2d      	ldr	r3, [pc, #180]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	f003 020c 	and.w	r2, r3, #12
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d1eb      	bne.n	800adfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae24:	4b27      	ldr	r3, [pc, #156]	; (800aec4 <HAL_RCC_ClockConfig+0x1c0>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 0307 	and.w	r3, r3, #7
 800ae2c:	683a      	ldr	r2, [r7, #0]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d210      	bcs.n	800ae54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae32:	4b24      	ldr	r3, [pc, #144]	; (800aec4 <HAL_RCC_ClockConfig+0x1c0>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f023 0207 	bic.w	r2, r3, #7
 800ae3a:	4922      	ldr	r1, [pc, #136]	; (800aec4 <HAL_RCC_ClockConfig+0x1c0>)
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae42:	4b20      	ldr	r3, [pc, #128]	; (800aec4 <HAL_RCC_ClockConfig+0x1c0>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f003 0307 	and.w	r3, r3, #7
 800ae4a:	683a      	ldr	r2, [r7, #0]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d001      	beq.n	800ae54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ae50:	2301      	movs	r3, #1
 800ae52:	e032      	b.n	800aeba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 0304 	and.w	r3, r3, #4
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d008      	beq.n	800ae72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae60:	4b19      	ldr	r3, [pc, #100]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	4916      	ldr	r1, [pc, #88]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f003 0308 	and.w	r3, r3, #8
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d009      	beq.n	800ae92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ae7e:	4b12      	ldr	r3, [pc, #72]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	691b      	ldr	r3, [r3, #16]
 800ae8a:	00db      	lsls	r3, r3, #3
 800ae8c:	490e      	ldr	r1, [pc, #56]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ae92:	f000 f821 	bl	800aed8 <HAL_RCC_GetSysClockFreq>
 800ae96:	4601      	mov	r1, r0
 800ae98:	4b0b      	ldr	r3, [pc, #44]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	091b      	lsrs	r3, r3, #4
 800ae9e:	f003 030f 	and.w	r3, r3, #15
 800aea2:	4a0a      	ldr	r2, [pc, #40]	; (800aecc <HAL_RCC_ClockConfig+0x1c8>)
 800aea4:	5cd3      	ldrb	r3, [r2, r3]
 800aea6:	fa21 f303 	lsr.w	r3, r1, r3
 800aeaa:	4a09      	ldr	r2, [pc, #36]	; (800aed0 <HAL_RCC_ClockConfig+0x1cc>)
 800aeac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800aeae:	4b09      	ldr	r3, [pc, #36]	; (800aed4 <HAL_RCC_ClockConfig+0x1d0>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fb fe2a 	bl	8006b0c <HAL_InitTick>

  return HAL_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	40022000 	.word	0x40022000
 800aec8:	40021000 	.word	0x40021000
 800aecc:	0800eda4 	.word	0x0800eda4
 800aed0:	20000030 	.word	0x20000030
 800aed4:	20000038 	.word	0x20000038

0800aed8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aed8:	b490      	push	{r4, r7}
 800aeda:	b08a      	sub	sp, #40	; 0x28
 800aedc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800aede:	4b2a      	ldr	r3, [pc, #168]	; (800af88 <HAL_RCC_GetSysClockFreq+0xb0>)
 800aee0:	1d3c      	adds	r4, r7, #4
 800aee2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aee4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800aee8:	4b28      	ldr	r3, [pc, #160]	; (800af8c <HAL_RCC_GetSysClockFreq+0xb4>)
 800aeea:	881b      	ldrh	r3, [r3, #0]
 800aeec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800aeee:	2300      	movs	r3, #0
 800aef0:	61fb      	str	r3, [r7, #28]
 800aef2:	2300      	movs	r3, #0
 800aef4:	61bb      	str	r3, [r7, #24]
 800aef6:	2300      	movs	r3, #0
 800aef8:	627b      	str	r3, [r7, #36]	; 0x24
 800aefa:	2300      	movs	r3, #0
 800aefc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800aefe:	2300      	movs	r3, #0
 800af00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800af02:	4b23      	ldr	r3, [pc, #140]	; (800af90 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800af08:	69fb      	ldr	r3, [r7, #28]
 800af0a:	f003 030c 	and.w	r3, r3, #12
 800af0e:	2b04      	cmp	r3, #4
 800af10:	d002      	beq.n	800af18 <HAL_RCC_GetSysClockFreq+0x40>
 800af12:	2b08      	cmp	r3, #8
 800af14:	d003      	beq.n	800af1e <HAL_RCC_GetSysClockFreq+0x46>
 800af16:	e02d      	b.n	800af74 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800af18:	4b1e      	ldr	r3, [pc, #120]	; (800af94 <HAL_RCC_GetSysClockFreq+0xbc>)
 800af1a:	623b      	str	r3, [r7, #32]
      break;
 800af1c:	e02d      	b.n	800af7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	0c9b      	lsrs	r3, r3, #18
 800af22:	f003 030f 	and.w	r3, r3, #15
 800af26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800af2a:	4413      	add	r3, r2
 800af2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800af30:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d013      	beq.n	800af64 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800af3c:	4b14      	ldr	r3, [pc, #80]	; (800af90 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	0c5b      	lsrs	r3, r3, #17
 800af42:	f003 0301 	and.w	r3, r3, #1
 800af46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800af4a:	4413      	add	r3, r2
 800af4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800af50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	4a0f      	ldr	r2, [pc, #60]	; (800af94 <HAL_RCC_GetSysClockFreq+0xbc>)
 800af56:	fb02 f203 	mul.w	r2, r2, r3
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af60:	627b      	str	r3, [r7, #36]	; 0x24
 800af62:	e004      	b.n	800af6e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	4a0c      	ldr	r2, [pc, #48]	; (800af98 <HAL_RCC_GetSysClockFreq+0xc0>)
 800af68:	fb02 f303 	mul.w	r3, r2, r3
 800af6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800af6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af70:	623b      	str	r3, [r7, #32]
      break;
 800af72:	e002      	b.n	800af7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800af74:	4b07      	ldr	r3, [pc, #28]	; (800af94 <HAL_RCC_GetSysClockFreq+0xbc>)
 800af76:	623b      	str	r3, [r7, #32]
      break;
 800af78:	bf00      	nop
    }
  }
  return sysclockfreq;
 800af7a:	6a3b      	ldr	r3, [r7, #32]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3728      	adds	r7, #40	; 0x28
 800af80:	46bd      	mov	sp, r7
 800af82:	bc90      	pop	{r4, r7}
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	0800ebc0 	.word	0x0800ebc0
 800af8c:	0800ebd0 	.word	0x0800ebd0
 800af90:	40021000 	.word	0x40021000
 800af94:	007a1200 	.word	0x007a1200
 800af98:	003d0900 	.word	0x003d0900

0800af9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af9c:	b480      	push	{r7}
 800af9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800afa0:	4b02      	ldr	r3, [pc, #8]	; (800afac <HAL_RCC_GetHCLKFreq+0x10>)
 800afa2:	681b      	ldr	r3, [r3, #0]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bc80      	pop	{r7}
 800afaa:	4770      	bx	lr
 800afac:	20000030 	.word	0x20000030

0800afb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800afb4:	f7ff fff2 	bl	800af9c <HAL_RCC_GetHCLKFreq>
 800afb8:	4601      	mov	r1, r0
 800afba:	4b05      	ldr	r3, [pc, #20]	; (800afd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	0a1b      	lsrs	r3, r3, #8
 800afc0:	f003 0307 	and.w	r3, r3, #7
 800afc4:	4a03      	ldr	r2, [pc, #12]	; (800afd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800afc6:	5cd3      	ldrb	r3, [r2, r3]
 800afc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800afcc:	4618      	mov	r0, r3
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	40021000 	.word	0x40021000
 800afd4:	0800edb4 	.word	0x0800edb4

0800afd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800afdc:	f7ff ffde 	bl	800af9c <HAL_RCC_GetHCLKFreq>
 800afe0:	4601      	mov	r1, r0
 800afe2:	4b05      	ldr	r3, [pc, #20]	; (800aff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	0adb      	lsrs	r3, r3, #11
 800afe8:	f003 0307 	and.w	r3, r3, #7
 800afec:	4a03      	ldr	r2, [pc, #12]	; (800affc <HAL_RCC_GetPCLK2Freq+0x24>)
 800afee:	5cd3      	ldrb	r3, [r2, r3]
 800aff0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	40021000 	.word	0x40021000
 800affc:	0800edb4 	.word	0x0800edb4

0800b000 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	220f      	movs	r2, #15
 800b00e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b010:	4b11      	ldr	r3, [pc, #68]	; (800b058 <HAL_RCC_GetClockConfig+0x58>)
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	f003 0203 	and.w	r2, r3, #3
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b01c:	4b0e      	ldr	r3, [pc, #56]	; (800b058 <HAL_RCC_GetClockConfig+0x58>)
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b028:	4b0b      	ldr	r3, [pc, #44]	; (800b058 <HAL_RCC_GetClockConfig+0x58>)
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b034:	4b08      	ldr	r3, [pc, #32]	; (800b058 <HAL_RCC_GetClockConfig+0x58>)
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	08db      	lsrs	r3, r3, #3
 800b03a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b042:	4b06      	ldr	r3, [pc, #24]	; (800b05c <HAL_RCC_GetClockConfig+0x5c>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f003 0207 	and.w	r2, r3, #7
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800b04e:	bf00      	nop
 800b050:	370c      	adds	r7, #12
 800b052:	46bd      	mov	sp, r7
 800b054:	bc80      	pop	{r7}
 800b056:	4770      	bx	lr
 800b058:	40021000 	.word	0x40021000
 800b05c:	40022000 	.word	0x40022000

0800b060 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b060:	b480      	push	{r7}
 800b062:	b085      	sub	sp, #20
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b068:	4b0a      	ldr	r3, [pc, #40]	; (800b094 <RCC_Delay+0x34>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a0a      	ldr	r2, [pc, #40]	; (800b098 <RCC_Delay+0x38>)
 800b06e:	fba2 2303 	umull	r2, r3, r2, r3
 800b072:	0a5b      	lsrs	r3, r3, #9
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	fb02 f303 	mul.w	r3, r2, r3
 800b07a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b07c:	bf00      	nop
  }
  while (Delay --);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	1e5a      	subs	r2, r3, #1
 800b082:	60fa      	str	r2, [r7, #12]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d1f9      	bne.n	800b07c <RCC_Delay+0x1c>
}
 800b088:	bf00      	nop
 800b08a:	3714      	adds	r7, #20
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bc80      	pop	{r7}
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	20000030 	.word	0x20000030
 800b098:	10624dd3 	.word	0x10624dd3

0800b09c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d101      	bne.n	800b0ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e041      	b.n	800b132 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d106      	bne.n	800b0c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 f839 	bl	800b13a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2202      	movs	r2, #2
 800b0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	3304      	adds	r3, #4
 800b0d8:	4619      	mov	r1, r3
 800b0da:	4610      	mov	r0, r2
 800b0dc:	f000 f9b4 	bl	800b448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2201      	movs	r2, #1
 800b104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2201      	movs	r2, #1
 800b10c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2201      	movs	r2, #1
 800b114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2201      	movs	r2, #1
 800b124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3708      	adds	r7, #8
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b13a:	b480      	push	{r7}
 800b13c:	b083      	sub	sp, #12
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b142:	bf00      	nop
 800b144:	370c      	adds	r7, #12
 800b146:	46bd      	mov	sp, r7
 800b148:	bc80      	pop	{r7}
 800b14a:	4770      	bx	lr

0800b14c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d001      	beq.n	800b164 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b160:	2301      	movs	r3, #1
 800b162:	e03a      	b.n	800b1da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2202      	movs	r2, #2
 800b168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	68da      	ldr	r2, [r3, #12]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f042 0201 	orr.w	r2, r2, #1
 800b17a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a18      	ldr	r2, [pc, #96]	; (800b1e4 <HAL_TIM_Base_Start_IT+0x98>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d00e      	beq.n	800b1a4 <HAL_TIM_Base_Start_IT+0x58>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b18e:	d009      	beq.n	800b1a4 <HAL_TIM_Base_Start_IT+0x58>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4a14      	ldr	r2, [pc, #80]	; (800b1e8 <HAL_TIM_Base_Start_IT+0x9c>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d004      	beq.n	800b1a4 <HAL_TIM_Base_Start_IT+0x58>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a13      	ldr	r2, [pc, #76]	; (800b1ec <HAL_TIM_Base_Start_IT+0xa0>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d111      	bne.n	800b1c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	f003 0307 	and.w	r3, r3, #7
 800b1ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2b06      	cmp	r3, #6
 800b1b4:	d010      	beq.n	800b1d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f042 0201 	orr.w	r2, r2, #1
 800b1c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1c6:	e007      	b.n	800b1d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f042 0201 	orr.w	r2, r2, #1
 800b1d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3714      	adds	r7, #20
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bc80      	pop	{r7}
 800b1e2:	4770      	bx	lr
 800b1e4:	40012c00 	.word	0x40012c00
 800b1e8:	40000400 	.word	0x40000400
 800b1ec:	40000800 	.word	0x40000800

0800b1f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	f003 0302 	and.w	r3, r3, #2
 800b202:	2b02      	cmp	r3, #2
 800b204:	d122      	bne.n	800b24c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	f003 0302 	and.w	r3, r3, #2
 800b210:	2b02      	cmp	r3, #2
 800b212:	d11b      	bne.n	800b24c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f06f 0202 	mvn.w	r2, #2
 800b21c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2201      	movs	r2, #1
 800b222:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	699b      	ldr	r3, [r3, #24]
 800b22a:	f003 0303 	and.w	r3, r3, #3
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d003      	beq.n	800b23a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f8ed 	bl	800b412 <HAL_TIM_IC_CaptureCallback>
 800b238:	e005      	b.n	800b246 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 f8e0 	bl	800b400 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 f8ef 	bl	800b424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	f003 0304 	and.w	r3, r3, #4
 800b256:	2b04      	cmp	r3, #4
 800b258:	d122      	bne.n	800b2a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	f003 0304 	and.w	r3, r3, #4
 800b264:	2b04      	cmp	r3, #4
 800b266:	d11b      	bne.n	800b2a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f06f 0204 	mvn.w	r2, #4
 800b270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2202      	movs	r2, #2
 800b276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	699b      	ldr	r3, [r3, #24]
 800b27e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b282:	2b00      	cmp	r3, #0
 800b284:	d003      	beq.n	800b28e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 f8c3 	bl	800b412 <HAL_TIM_IC_CaptureCallback>
 800b28c:	e005      	b.n	800b29a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 f8b6 	bl	800b400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 f8c5 	bl	800b424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	f003 0308 	and.w	r3, r3, #8
 800b2aa:	2b08      	cmp	r3, #8
 800b2ac:	d122      	bne.n	800b2f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	f003 0308 	and.w	r3, r3, #8
 800b2b8:	2b08      	cmp	r3, #8
 800b2ba:	d11b      	bne.n	800b2f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f06f 0208 	mvn.w	r2, #8
 800b2c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2204      	movs	r2, #4
 800b2ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	69db      	ldr	r3, [r3, #28]
 800b2d2:	f003 0303 	and.w	r3, r3, #3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d003      	beq.n	800b2e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f899 	bl	800b412 <HAL_TIM_IC_CaptureCallback>
 800b2e0:	e005      	b.n	800b2ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 f88c 	bl	800b400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 f89b 	bl	800b424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	f003 0310 	and.w	r3, r3, #16
 800b2fe:	2b10      	cmp	r3, #16
 800b300:	d122      	bne.n	800b348 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	f003 0310 	and.w	r3, r3, #16
 800b30c:	2b10      	cmp	r3, #16
 800b30e:	d11b      	bne.n	800b348 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f06f 0210 	mvn.w	r2, #16
 800b318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2208      	movs	r2, #8
 800b31e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	69db      	ldr	r3, [r3, #28]
 800b326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d003      	beq.n	800b336 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 f86f 	bl	800b412 <HAL_TIM_IC_CaptureCallback>
 800b334:	e005      	b.n	800b342 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 f862 	bl	800b400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 f871 	bl	800b424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	f003 0301 	and.w	r3, r3, #1
 800b352:	2b01      	cmp	r3, #1
 800b354:	d10e      	bne.n	800b374 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	f003 0301 	and.w	r3, r3, #1
 800b360:	2b01      	cmp	r3, #1
 800b362:	d107      	bne.n	800b374 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f06f 0201 	mvn.w	r2, #1
 800b36c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f7f6 f932 	bl	80015d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b37e:	2b80      	cmp	r3, #128	; 0x80
 800b380:	d10e      	bne.n	800b3a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b38c:	2b80      	cmp	r3, #128	; 0x80
 800b38e:	d107      	bne.n	800b3a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 f8bf 	bl	800b51e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3aa:	2b40      	cmp	r3, #64	; 0x40
 800b3ac:	d10e      	bne.n	800b3cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b8:	2b40      	cmp	r3, #64	; 0x40
 800b3ba:	d107      	bne.n	800b3cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f835 	bl	800b436 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	f003 0320 	and.w	r3, r3, #32
 800b3d6:	2b20      	cmp	r3, #32
 800b3d8:	d10e      	bne.n	800b3f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	f003 0320 	and.w	r3, r3, #32
 800b3e4:	2b20      	cmp	r3, #32
 800b3e6:	d107      	bne.n	800b3f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f06f 0220 	mvn.w	r2, #32
 800b3f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 f88a 	bl	800b50c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b3f8:	bf00      	nop
 800b3fa:	3708      	adds	r7, #8
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bc80      	pop	{r7}
 800b410:	4770      	bx	lr

0800b412 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b412:	b480      	push	{r7}
 800b414:	b083      	sub	sp, #12
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b41a:	bf00      	nop
 800b41c:	370c      	adds	r7, #12
 800b41e:	46bd      	mov	sp, r7
 800b420:	bc80      	pop	{r7}
 800b422:	4770      	bx	lr

0800b424 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b42c:	bf00      	nop
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	bc80      	pop	{r7}
 800b434:	4770      	bx	lr

0800b436 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b436:	b480      	push	{r7}
 800b438:	b083      	sub	sp, #12
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b43e:	bf00      	nop
 800b440:	370c      	adds	r7, #12
 800b442:	46bd      	mov	sp, r7
 800b444:	bc80      	pop	{r7}
 800b446:	4770      	bx	lr

0800b448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	4a29      	ldr	r2, [pc, #164]	; (800b500 <TIM_Base_SetConfig+0xb8>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d00b      	beq.n	800b478 <TIM_Base_SetConfig+0x30>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b466:	d007      	beq.n	800b478 <TIM_Base_SetConfig+0x30>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4a26      	ldr	r2, [pc, #152]	; (800b504 <TIM_Base_SetConfig+0xbc>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d003      	beq.n	800b478 <TIM_Base_SetConfig+0x30>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4a25      	ldr	r2, [pc, #148]	; (800b508 <TIM_Base_SetConfig+0xc0>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d108      	bne.n	800b48a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b47e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	68fa      	ldr	r2, [r7, #12]
 800b486:	4313      	orrs	r3, r2
 800b488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4a1c      	ldr	r2, [pc, #112]	; (800b500 <TIM_Base_SetConfig+0xb8>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d00b      	beq.n	800b4aa <TIM_Base_SetConfig+0x62>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b498:	d007      	beq.n	800b4aa <TIM_Base_SetConfig+0x62>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4a19      	ldr	r2, [pc, #100]	; (800b504 <TIM_Base_SetConfig+0xbc>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d003      	beq.n	800b4aa <TIM_Base_SetConfig+0x62>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	4a18      	ldr	r2, [pc, #96]	; (800b508 <TIM_Base_SetConfig+0xc0>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d108      	bne.n	800b4bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	68fa      	ldr	r2, [r7, #12]
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	695b      	ldr	r3, [r3, #20]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	689a      	ldr	r2, [r3, #8]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	4a07      	ldr	r2, [pc, #28]	; (800b500 <TIM_Base_SetConfig+0xb8>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d103      	bne.n	800b4f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	691a      	ldr	r2, [r3, #16]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	615a      	str	r2, [r3, #20]
}
 800b4f6:	bf00      	nop
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bc80      	pop	{r7}
 800b4fe:	4770      	bx	lr
 800b500:	40012c00 	.word	0x40012c00
 800b504:	40000400 	.word	0x40000400
 800b508:	40000800 	.word	0x40000800

0800b50c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b514:	bf00      	nop
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	bc80      	pop	{r7}
 800b51c:	4770      	bx	lr

0800b51e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b51e:	b480      	push	{r7}
 800b520:	b083      	sub	sp, #12
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b526:	bf00      	nop
 800b528:	370c      	adds	r7, #12
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bc80      	pop	{r7}
 800b52e:	4770      	bx	lr

0800b530 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d101      	bne.n	800b542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	e03f      	b.n	800b5c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d106      	bne.n	800b55c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7fb f9a0 	bl	800689c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2224      	movs	r2, #36	; 0x24
 800b560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	68da      	ldr	r2, [r3, #12]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b572:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 fe13 	bl	800c1a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	691a      	ldr	r2, [r3, #16]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b588:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	695a      	ldr	r2, [r3, #20]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b598:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	68da      	ldr	r2, [r3, #12]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b5a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2220      	movs	r2, #32
 800b5b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2220      	movs	r2, #32
 800b5bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b5c0:	2300      	movs	r3, #0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3708      	adds	r7, #8
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b082      	sub	sp, #8
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d101      	bne.n	800b5dc <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e047      	b.n	800b66c <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d106      	bne.n	800b5f6 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f7fb f953 	bl	800689c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2224      	movs	r2, #36	; 0x24
 800b5fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	68da      	ldr	r2, [r3, #12]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b60c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 fdc6 	bl	800c1a0 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	691a      	ldr	r2, [r3, #16]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b622:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	695a      	ldr	r2, [r3, #20]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800b632:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	695a      	ldr	r2, [r3, #20]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f042 0208 	orr.w	r2, r2, #8
 800b642:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68da      	ldr	r2, [r3, #12]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b652:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2220      	movs	r2, #32
 800b65e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2220      	movs	r2, #32
 800b666:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b08a      	sub	sp, #40	; 0x28
 800b678:	af02      	add	r7, sp, #8
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	603b      	str	r3, [r7, #0]
 800b680:	4613      	mov	r3, r2
 800b682:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b684:	2300      	movs	r3, #0
 800b686:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	2b20      	cmp	r3, #32
 800b692:	d17c      	bne.n	800b78e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d002      	beq.n	800b6a0 <HAL_UART_Transmit+0x2c>
 800b69a:	88fb      	ldrh	r3, [r7, #6]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d101      	bne.n	800b6a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e075      	b.n	800b790 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d101      	bne.n	800b6b2 <HAL_UART_Transmit+0x3e>
 800b6ae:	2302      	movs	r3, #2
 800b6b0:	e06e      	b.n	800b790 <HAL_UART_Transmit+0x11c>
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2221      	movs	r2, #33	; 0x21
 800b6c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800b6c8:	f7fb ffee 	bl	80076a8 <HAL_GetTick>
 800b6cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	88fa      	ldrh	r2, [r7, #6]
 800b6d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	88fa      	ldrh	r2, [r7, #6]
 800b6d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6e2:	d108      	bne.n	800b6f6 <HAL_UART_Transmit+0x82>
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	691b      	ldr	r3, [r3, #16]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d104      	bne.n	800b6f6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	61bb      	str	r3, [r7, #24]
 800b6f4:	e003      	b.n	800b6fe <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2200      	movs	r2, #0
 800b702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800b706:	e02a      	b.n	800b75e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	9300      	str	r3, [sp, #0]
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	2200      	movs	r2, #0
 800b710:	2180      	movs	r1, #128	; 0x80
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f000 fbcc 	bl	800beb0 <UART_WaitOnFlagUntilTimeout>
 800b718:	4603      	mov	r3, r0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d001      	beq.n	800b722 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b71e:	2303      	movs	r3, #3
 800b720:	e036      	b.n	800b790 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d10b      	bne.n	800b740 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	881b      	ldrh	r3, [r3, #0]
 800b72c:	461a      	mov	r2, r3
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b736:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	3302      	adds	r3, #2
 800b73c:	61bb      	str	r3, [r7, #24]
 800b73e:	e007      	b.n	800b750 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	781a      	ldrb	r2, [r3, #0]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b74a:	69fb      	ldr	r3, [r7, #28]
 800b74c:	3301      	adds	r3, #1
 800b74e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b754:	b29b      	uxth	r3, r3
 800b756:	3b01      	subs	r3, #1
 800b758:	b29a      	uxth	r2, r3
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b762:	b29b      	uxth	r3, r3
 800b764:	2b00      	cmp	r3, #0
 800b766:	d1cf      	bne.n	800b708 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	9300      	str	r3, [sp, #0]
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	2200      	movs	r2, #0
 800b770:	2140      	movs	r1, #64	; 0x40
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f000 fb9c 	bl	800beb0 <UART_WaitOnFlagUntilTimeout>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d001      	beq.n	800b782 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b77e:	2303      	movs	r3, #3
 800b780:	e006      	b.n	800b790 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2220      	movs	r2, #32
 800b786:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800b78a:	2300      	movs	r3, #0
 800b78c:	e000      	b.n	800b790 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b78e:	2302      	movs	r3, #2
  }
}
 800b790:	4618      	mov	r0, r3
 800b792:	3720      	adds	r7, #32
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b086      	sub	sp, #24
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	2b20      	cmp	r3, #32
 800b7b0:	d153      	bne.n	800b85a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d002      	beq.n	800b7be <HAL_UART_Transmit_DMA+0x26>
 800b7b8:	88fb      	ldrh	r3, [r7, #6]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d101      	bne.n	800b7c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e04c      	b.n	800b85c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d101      	bne.n	800b7d0 <HAL_UART_Transmit_DMA+0x38>
 800b7cc:	2302      	movs	r3, #2
 800b7ce:	e045      	b.n	800b85c <HAL_UART_Transmit_DMA+0xc4>
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	88fa      	ldrh	r2, [r7, #6]
 800b7e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	88fa      	ldrh	r2, [r7, #6]
 800b7e8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2221      	movs	r2, #33	; 0x21
 800b7f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7fc:	4a19      	ldr	r2, [pc, #100]	; (800b864 <HAL_UART_Transmit_DMA+0xcc>)
 800b7fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b804:	4a18      	ldr	r2, [pc, #96]	; (800b868 <HAL_UART_Transmit_DMA+0xd0>)
 800b806:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b80c:	4a17      	ldr	r2, [pc, #92]	; (800b86c <HAL_UART_Transmit_DMA+0xd4>)
 800b80e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b814:	2200      	movs	r2, #0
 800b816:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800b818:	f107 0308 	add.w	r3, r7, #8
 800b81c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	6819      	ldr	r1, [r3, #0]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	3304      	adds	r3, #4
 800b82c:	461a      	mov	r2, r3
 800b82e:	88fb      	ldrh	r3, [r7, #6]
 800b830:	f7fc f8a0 	bl	8007974 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b83c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2200      	movs	r2, #0
 800b842:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	695a      	ldr	r2, [r3, #20]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b854:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800b856:	2300      	movs	r3, #0
 800b858:	e000      	b.n	800b85c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800b85a:	2302      	movs	r3, #2
  }
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3718      	adds	r7, #24
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	0800bd2b 	.word	0x0800bd2b
 800b868:	0800bd7d 	.word	0x0800bd7d
 800b86c:	0800be1d 	.word	0x0800be1d

0800b870 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b086      	sub	sp, #24
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	4613      	mov	r3, r2
 800b87c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b884:	b2db      	uxtb	r3, r3
 800b886:	2b20      	cmp	r3, #32
 800b888:	d166      	bne.n	800b958 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d002      	beq.n	800b896 <HAL_UART_Receive_DMA+0x26>
 800b890:	88fb      	ldrh	r3, [r7, #6]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d101      	bne.n	800b89a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b896:	2301      	movs	r3, #1
 800b898:	e05f      	b.n	800b95a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d101      	bne.n	800b8a8 <HAL_UART_Receive_DMA+0x38>
 800b8a4:	2302      	movs	r3, #2
 800b8a6:	e058      	b.n	800b95a <HAL_UART_Receive_DMA+0xea>
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800b8b0:	68ba      	ldr	r2, [r7, #8]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	88fa      	ldrh	r2, [r7, #6]
 800b8ba:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2222      	movs	r2, #34	; 0x22
 800b8c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ce:	4a25      	ldr	r2, [pc, #148]	; (800b964 <HAL_UART_Receive_DMA+0xf4>)
 800b8d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8d6:	4a24      	ldr	r2, [pc, #144]	; (800b968 <HAL_UART_Receive_DMA+0xf8>)
 800b8d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8de:	4a23      	ldr	r2, [pc, #140]	; (800b96c <HAL_UART_Receive_DMA+0xfc>)
 800b8e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800b8ea:	f107 0308 	add.w	r3, r7, #8
 800b8ee:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	3304      	adds	r3, #4
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	88fb      	ldrh	r3, [r7, #6]
 800b902:	f7fc f837 	bl	8007974 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800b906:	2300      	movs	r3, #0
 800b908:	613b      	str	r3, [r7, #16]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	613b      	str	r3, [r7, #16]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	613b      	str	r3, [r7, #16]
 800b91a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2200      	movs	r2, #0
 800b920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	68da      	ldr	r2, [r3, #12]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b932:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	695a      	ldr	r2, [r3, #20]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f042 0201 	orr.w	r2, r2, #1
 800b942:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	695a      	ldr	r2, [r3, #20]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b952:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800b954:	2300      	movs	r3, #0
 800b956:	e000      	b.n	800b95a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b958:	2302      	movs	r3, #2
  }
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3718      	adds	r7, #24
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	0800bd99 	.word	0x0800bd99
 800b968:	0800be01 	.word	0x0800be01
 800b96c:	0800be1d 	.word	0x0800be1d

0800b970 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b978:	2300      	movs	r3, #0
 800b97a:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	695b      	ldr	r3, [r3, #20]
 800b982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b986:	2b00      	cmp	r3, #0
 800b988:	bf14      	ite	ne
 800b98a:	2301      	movne	r3, #1
 800b98c:	2300      	moveq	r3, #0
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	2b21      	cmp	r3, #33	; 0x21
 800b99c:	d116      	bne.n	800b9cc <HAL_UART_DMAStop+0x5c>
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d013      	beq.n	800b9cc <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	695a      	ldr	r2, [r3, #20]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b9b2:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d004      	beq.n	800b9c6 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7fc f836 	bl	8007a32 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 fabc 	bl	800bf44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	695b      	ldr	r3, [r3, #20]
 800b9d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	bf14      	ite	ne
 800b9da:	2301      	movne	r3, #1
 800b9dc:	2300      	moveq	r3, #0
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	2b22      	cmp	r3, #34	; 0x22
 800b9ec:	d116      	bne.n	800ba1c <HAL_UART_DMAStop+0xac>
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d013      	beq.n	800ba1c <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	695a      	ldr	r2, [r3, #20]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba02:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d004      	beq.n	800ba16 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7fc f80e 	bl	8007a32 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 faa9 	bl	800bf6e <UART_EndRxTransfer>
  }

  return HAL_OK;
 800ba1c:	2300      	movs	r3, #0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
	...

0800ba28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b088      	sub	sp, #32
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	695b      	ldr	r3, [r3, #20]
 800ba46:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	f003 030f 	and.w	r3, r3, #15
 800ba56:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d10d      	bne.n	800ba7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	f003 0320 	and.w	r3, r3, #32
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d008      	beq.n	800ba7a <HAL_UART_IRQHandler+0x52>
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	f003 0320 	and.w	r3, r3, #32
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d003      	beq.n	800ba7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 fb13 	bl	800c09e <UART_Receive_IT>
      return;
 800ba78:	e0d1      	b.n	800bc1e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f000 80b0 	beq.w	800bbe2 <HAL_UART_IRQHandler+0x1ba>
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f003 0301 	and.w	r3, r3, #1
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d105      	bne.n	800ba98 <HAL_UART_IRQHandler+0x70>
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	f000 80a5 	beq.w	800bbe2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ba98:	69fb      	ldr	r3, [r7, #28]
 800ba9a:	f003 0301 	and.w	r3, r3, #1
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d00a      	beq.n	800bab8 <HAL_UART_IRQHandler+0x90>
 800baa2:	69bb      	ldr	r3, [r7, #24]
 800baa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d005      	beq.n	800bab8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bab0:	f043 0201 	orr.w	r2, r3, #1
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	f003 0304 	and.w	r3, r3, #4
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00a      	beq.n	800bad8 <HAL_UART_IRQHandler+0xb0>
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	f003 0301 	and.w	r3, r3, #1
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d005      	beq.n	800bad8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bad0:	f043 0202 	orr.w	r2, r3, #2
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bad8:	69fb      	ldr	r3, [r7, #28]
 800bada:	f003 0302 	and.w	r3, r3, #2
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00a      	beq.n	800baf8 <HAL_UART_IRQHandler+0xd0>
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	f003 0301 	and.w	r3, r3, #1
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d005      	beq.n	800baf8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baf0:	f043 0204 	orr.w	r2, r3, #4
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800baf8:	69fb      	ldr	r3, [r7, #28]
 800bafa:	f003 0308 	and.w	r3, r3, #8
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00f      	beq.n	800bb22 <HAL_UART_IRQHandler+0xfa>
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	f003 0320 	and.w	r3, r3, #32
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d104      	bne.n	800bb16 <HAL_UART_IRQHandler+0xee>
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	f003 0301 	and.w	r3, r3, #1
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d005      	beq.n	800bb22 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb1a:	f043 0208 	orr.w	r2, r3, #8
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d078      	beq.n	800bc1c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	f003 0320 	and.w	r3, r3, #32
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d007      	beq.n	800bb44 <HAL_UART_IRQHandler+0x11c>
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	f003 0320 	and.w	r3, r3, #32
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d002      	beq.n	800bb44 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 faad 	bl	800c09e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	695b      	ldr	r3, [r3, #20]
 800bb4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	bf14      	ite	ne
 800bb52:	2301      	movne	r3, #1
 800bb54:	2300      	moveq	r3, #0
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb5e:	f003 0308 	and.w	r3, r3, #8
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d102      	bne.n	800bb6c <HAL_UART_IRQHandler+0x144>
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d031      	beq.n	800bbd0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 f9fe 	bl	800bf6e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	695b      	ldr	r3, [r3, #20]
 800bb78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d023      	beq.n	800bbc8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	695a      	ldr	r2, [r3, #20]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb8e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d013      	beq.n	800bbc0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb9c:	4a21      	ldr	r2, [pc, #132]	; (800bc24 <HAL_UART_IRQHandler+0x1fc>)
 800bb9e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7fb ff7f 	bl	8007aa8 <HAL_DMA_Abort_IT>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d016      	beq.n	800bbde <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bbba:	4610      	mov	r0, r2
 800bbbc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbbe:	e00e      	b.n	800bbde <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 f843 	bl	800bc4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbc6:	e00a      	b.n	800bbde <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 f83f 	bl	800bc4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbce:	e006      	b.n	800bbde <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 f83b 	bl	800bc4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800bbdc:	e01e      	b.n	800bc1c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbde:	bf00      	nop
    return;
 800bbe0:	e01c      	b.n	800bc1c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d008      	beq.n	800bbfe <HAL_UART_IRQHandler+0x1d6>
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d003      	beq.n	800bbfe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 f9ea 	bl	800bfd0 <UART_Transmit_IT>
    return;
 800bbfc:	e00f      	b.n	800bc1e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d00a      	beq.n	800bc1e <HAL_UART_IRQHandler+0x1f6>
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d005      	beq.n	800bc1e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 fa2b 	bl	800c06e <UART_EndTransmit_IT>
    return;
 800bc18:	bf00      	nop
 800bc1a:	e000      	b.n	800bc1e <HAL_UART_IRQHandler+0x1f6>
    return;
 800bc1c:	bf00      	nop
  }
}
 800bc1e:	3720      	adds	r7, #32
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	0800bfa9 	.word	0x0800bfa9

0800bc28 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800bc30:	bf00      	nop
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bc80      	pop	{r7}
 800bc38:	4770      	bx	lr

0800bc3a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bc3a:	b480      	push	{r7}
 800bc3c:	b083      	sub	sp, #12
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bc42:	bf00      	nop
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bc80      	pop	{r7}
 800bc4a:	4770      	bx	lr

0800bc4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bc54:	bf00      	nop
 800bc56:	370c      	adds	r7, #12
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bc80      	pop	{r7}
 800bc5c:	4770      	bx	lr

0800bc5e <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800bc5e:	b480      	push	{r7}
 800bc60:	b085      	sub	sp, #20
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800bc66:	2300      	movs	r3, #0
 800bc68:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d101      	bne.n	800bc78 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 800bc74:	2302      	movs	r3, #2
 800bc76:	e020      	b.n	800bcba <HAL_HalfDuplex_EnableTransmitter+0x5c>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2224      	movs	r2, #36	; 0x24
 800bc84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f023 030c 	bic.w	r3, r3, #12
 800bc96:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f043 0308 	orr.w	r3, r3, #8
 800bc9e:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2220      	movs	r2, #32
 800bcac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800bcb8:	2300      	movs	r3, #0
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bc80      	pop	{r7}
 800bcc2:	4770      	bx	lr

0800bcc4 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800bccc:	2300      	movs	r3, #0
 800bcce:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d101      	bne.n	800bcde <HAL_HalfDuplex_EnableReceiver+0x1a>
 800bcda:	2302      	movs	r3, #2
 800bcdc:	e020      	b.n	800bd20 <HAL_HalfDuplex_EnableReceiver+0x5c>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2201      	movs	r2, #1
 800bce2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2224      	movs	r2, #36	; 0x24
 800bcea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	68db      	ldr	r3, [r3, #12]
 800bcf4:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f023 030c 	bic.w	r3, r3, #12
 800bcfc:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f043 0304 	orr.w	r3, r3, #4
 800bd04:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2220      	movs	r2, #32
 800bd12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3714      	adds	r7, #20
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bc80      	pop	{r7}
 800bd28:	4770      	bx	lr

0800bd2a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bd2a:	b580      	push	{r7, lr}
 800bd2c:	b084      	sub	sp, #16
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd36:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f003 0320 	and.w	r3, r3, #32
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d113      	bne.n	800bd6e <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	695a      	ldr	r2, [r3, #20]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd5a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	68da      	ldr	r2, [r3, #12]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd6a:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bd6c:	e002      	b.n	800bd74 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800bd6e:	68f8      	ldr	r0, [r7, #12]
 800bd70:	f7f9 f986 	bl	8005080 <HAL_UART_TxCpltCallback>
}
 800bd74:	bf00      	nop
 800bd76:	3710      	adds	r7, #16
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd88:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bd8a:	68f8      	ldr	r0, [r7, #12]
 800bd8c:	f7ff ff4c 	bl	800bc28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd90:	bf00      	nop
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f003 0320 	and.w	r3, r3, #32
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d11e      	bne.n	800bdf2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	68da      	ldr	r2, [r3, #12]
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bdc8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	695a      	ldr	r2, [r3, #20]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f022 0201 	bic.w	r2, r2, #1
 800bdd8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	695a      	ldr	r2, [r3, #20]
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bde8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2220      	movs	r2, #32
 800bdee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	f7f9 fa18 	bl	8005228 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdf8:	bf00      	nop
 800bdfa:	3710      	adds	r7, #16
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be0c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800be0e:	68f8      	ldr	r0, [r7, #12]
 800be10:	f7ff ff13 	bl	800bc3a <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be14:	bf00      	nop
 800be16:	3710      	adds	r7, #16
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800be24:	2300      	movs	r3, #0
 800be26:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be2c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	695b      	ldr	r3, [r3, #20]
 800be34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be38:	2b00      	cmp	r3, #0
 800be3a:	bf14      	ite	ne
 800be3c:	2301      	movne	r3, #1
 800be3e:	2300      	moveq	r3, #0
 800be40:	b2db      	uxtb	r3, r3
 800be42:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	2b21      	cmp	r3, #33	; 0x21
 800be4e:	d108      	bne.n	800be62 <UART_DMAError+0x46>
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d005      	beq.n	800be62 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	2200      	movs	r2, #0
 800be5a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800be5c:	68b8      	ldr	r0, [r7, #8]
 800be5e:	f000 f871 	bl	800bf44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	695b      	ldr	r3, [r3, #20]
 800be68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	bf14      	ite	ne
 800be70:	2301      	movne	r3, #1
 800be72:	2300      	moveq	r3, #0
 800be74:	b2db      	uxtb	r3, r3
 800be76:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	2b22      	cmp	r3, #34	; 0x22
 800be82:	d108      	bne.n	800be96 <UART_DMAError+0x7a>
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d005      	beq.n	800be96 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	2200      	movs	r2, #0
 800be8e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800be90:	68b8      	ldr	r0, [r7, #8]
 800be92:	f000 f86c 	bl	800bf6e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be9a:	f043 0210 	orr.w	r2, r3, #16
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bea2:	68b8      	ldr	r0, [r7, #8]
 800bea4:	f7ff fed2 	bl	800bc4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bea8:	bf00      	nop
 800beaa:	3710      	adds	r7, #16
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	603b      	str	r3, [r7, #0]
 800bebc:	4613      	mov	r3, r2
 800bebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bec0:	e02c      	b.n	800bf1c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec8:	d028      	beq.n	800bf1c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d007      	beq.n	800bee0 <UART_WaitOnFlagUntilTimeout+0x30>
 800bed0:	f7fb fbea 	bl	80076a8 <HAL_GetTick>
 800bed4:	4602      	mov	r2, r0
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	1ad3      	subs	r3, r2, r3
 800beda:	69ba      	ldr	r2, [r7, #24]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d21d      	bcs.n	800bf1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	68da      	ldr	r2, [r3, #12]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800beee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	695a      	ldr	r2, [r3, #20]
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f022 0201 	bic.w	r2, r2, #1
 800befe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2220      	movs	r2, #32
 800bf04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2220      	movs	r2, #32
 800bf0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2200      	movs	r2, #0
 800bf14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	e00f      	b.n	800bf3c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	4013      	ands	r3, r2
 800bf26:	68ba      	ldr	r2, [r7, #8]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	bf0c      	ite	eq
 800bf2c:	2301      	moveq	r3, #1
 800bf2e:	2300      	movne	r3, #0
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	461a      	mov	r2, r3
 800bf34:	79fb      	ldrb	r3, [r7, #7]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d0c3      	beq.n	800bec2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	68da      	ldr	r2, [r3, #12]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bf5a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2220      	movs	r2, #32
 800bf60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800bf64:	bf00      	nop
 800bf66:	370c      	adds	r7, #12
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bc80      	pop	{r7}
 800bf6c:	4770      	bx	lr

0800bf6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf6e:	b480      	push	{r7}
 800bf70:	b083      	sub	sp, #12
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	68da      	ldr	r2, [r3, #12]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bf84:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	695a      	ldr	r2, [r3, #20]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f022 0201 	bic.w	r2, r2, #1
 800bf94:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2220      	movs	r2, #32
 800bf9a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800bf9e:	bf00      	nop
 800bfa0:	370c      	adds	r7, #12
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bc80      	pop	{r7}
 800bfa6:	4770      	bx	lr

0800bfa8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bfc2:	68f8      	ldr	r0, [r7, #12]
 800bfc4:	f7ff fe42 	bl	800bc4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfc8:	bf00      	nop
 800bfca:	3710      	adds	r7, #16
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b085      	sub	sp, #20
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	2b21      	cmp	r3, #33	; 0x21
 800bfe2:	d13e      	bne.n	800c062 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfec:	d114      	bne.n	800c018 <UART_Transmit_IT+0x48>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	691b      	ldr	r3, [r3, #16]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d110      	bne.n	800c018 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6a1b      	ldr	r3, [r3, #32]
 800bffa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	881b      	ldrh	r3, [r3, #0]
 800c000:	461a      	mov	r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c00a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6a1b      	ldr	r3, [r3, #32]
 800c010:	1c9a      	adds	r2, r3, #2
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	621a      	str	r2, [r3, #32]
 800c016:	e008      	b.n	800c02a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a1b      	ldr	r3, [r3, #32]
 800c01c:	1c59      	adds	r1, r3, #1
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	6211      	str	r1, [r2, #32]
 800c022:	781a      	ldrb	r2, [r3, #0]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c02e:	b29b      	uxth	r3, r3
 800c030:	3b01      	subs	r3, #1
 800c032:	b29b      	uxth	r3, r3
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	4619      	mov	r1, r3
 800c038:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d10f      	bne.n	800c05e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	68da      	ldr	r2, [r3, #12]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c04c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	68da      	ldr	r2, [r3, #12]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c05c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c05e:	2300      	movs	r3, #0
 800c060:	e000      	b.n	800c064 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c062:	2302      	movs	r3, #2
  }
}
 800c064:	4618      	mov	r0, r3
 800c066:	3714      	adds	r7, #20
 800c068:	46bd      	mov	sp, r7
 800c06a:	bc80      	pop	{r7}
 800c06c:	4770      	bx	lr

0800c06e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b082      	sub	sp, #8
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	68da      	ldr	r2, [r3, #12]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c084:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2220      	movs	r2, #32
 800c08a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f7f8 fff6 	bl	8005080 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	3708      	adds	r7, #8
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b084      	sub	sp, #16
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	2b22      	cmp	r3, #34	; 0x22
 800c0b0:	d170      	bne.n	800c194 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0ba:	d117      	bne.n	800c0ec <UART_Receive_IT+0x4e>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d113      	bne.n	800c0ec <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0cc:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0da:	b29a      	uxth	r2, r3
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e4:	1c9a      	adds	r2, r3, #2
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	629a      	str	r2, [r3, #40]	; 0x28
 800c0ea:	e026      	b.n	800c13a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0f0:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0fe:	d007      	beq.n	800c110 <UART_Receive_IT+0x72>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d10a      	bne.n	800c11e <UART_Receive_IT+0x80>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	691b      	ldr	r3, [r3, #16]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d106      	bne.n	800c11e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	b2da      	uxtb	r2, r3
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	701a      	strb	r2, [r3, #0]
 800c11c:	e008      	b.n	800c130 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	b2db      	uxtb	r3, r3
 800c126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c12a:	b2da      	uxtb	r2, r3
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c134:	1c5a      	adds	r2, r3, #1
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c13e:	b29b      	uxth	r3, r3
 800c140:	3b01      	subs	r3, #1
 800c142:	b29b      	uxth	r3, r3
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	4619      	mov	r1, r3
 800c148:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d120      	bne.n	800c190 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	68da      	ldr	r2, [r3, #12]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f022 0220 	bic.w	r2, r2, #32
 800c15c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	68da      	ldr	r2, [r3, #12]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c16c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	695a      	ldr	r2, [r3, #20]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f022 0201 	bic.w	r2, r2, #1
 800c17c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2220      	movs	r2, #32
 800c182:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f7f9 f84e 	bl	8005228 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800c18c:	2300      	movs	r3, #0
 800c18e:	e002      	b.n	800c196 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800c190:	2300      	movs	r3, #0
 800c192:	e000      	b.n	800c196 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800c194:	2302      	movs	r3, #2
  }
}
 800c196:	4618      	mov	r0, r3
 800c198:	3710      	adds	r7, #16
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
	...

0800c1a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	68da      	ldr	r2, [r3, #12]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	430a      	orrs	r2, r1
 800c1bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	689a      	ldr	r2, [r3, #8]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	431a      	orrs	r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	695b      	ldr	r3, [r3, #20]
 800c1cc:	4313      	orrs	r3, r2
 800c1ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c1da:	f023 030c 	bic.w	r3, r3, #12
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	6812      	ldr	r2, [r2, #0]
 800c1e2:	68b9      	ldr	r1, [r7, #8]
 800c1e4:	430b      	orrs	r3, r1
 800c1e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	695b      	ldr	r3, [r3, #20]
 800c1ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	699a      	ldr	r2, [r3, #24]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	430a      	orrs	r2, r1
 800c1fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	4a2c      	ldr	r2, [pc, #176]	; (800c2b4 <UART_SetConfig+0x114>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d103      	bne.n	800c210 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c208:	f7fe fee6 	bl	800afd8 <HAL_RCC_GetPCLK2Freq>
 800c20c:	60f8      	str	r0, [r7, #12]
 800c20e:	e002      	b.n	800c216 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c210:	f7fe fece 	bl	800afb0 <HAL_RCC_GetPCLK1Freq>
 800c214:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c216:	68fa      	ldr	r2, [r7, #12]
 800c218:	4613      	mov	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4413      	add	r3, r2
 800c21e:	009a      	lsls	r2, r3, #2
 800c220:	441a      	add	r2, r3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	fbb2 f3f3 	udiv	r3, r2, r3
 800c22c:	4a22      	ldr	r2, [pc, #136]	; (800c2b8 <UART_SetConfig+0x118>)
 800c22e:	fba2 2303 	umull	r2, r3, r2, r3
 800c232:	095b      	lsrs	r3, r3, #5
 800c234:	0119      	lsls	r1, r3, #4
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	4613      	mov	r3, r2
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	4413      	add	r3, r2
 800c23e:	009a      	lsls	r2, r3, #2
 800c240:	441a      	add	r2, r3
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	fbb2 f2f3 	udiv	r2, r2, r3
 800c24c:	4b1a      	ldr	r3, [pc, #104]	; (800c2b8 <UART_SetConfig+0x118>)
 800c24e:	fba3 0302 	umull	r0, r3, r3, r2
 800c252:	095b      	lsrs	r3, r3, #5
 800c254:	2064      	movs	r0, #100	; 0x64
 800c256:	fb00 f303 	mul.w	r3, r0, r3
 800c25a:	1ad3      	subs	r3, r2, r3
 800c25c:	011b      	lsls	r3, r3, #4
 800c25e:	3332      	adds	r3, #50	; 0x32
 800c260:	4a15      	ldr	r2, [pc, #84]	; (800c2b8 <UART_SetConfig+0x118>)
 800c262:	fba2 2303 	umull	r2, r3, r2, r3
 800c266:	095b      	lsrs	r3, r3, #5
 800c268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c26c:	4419      	add	r1, r3
 800c26e:	68fa      	ldr	r2, [r7, #12]
 800c270:	4613      	mov	r3, r2
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	4413      	add	r3, r2
 800c276:	009a      	lsls	r2, r3, #2
 800c278:	441a      	add	r2, r3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	fbb2 f2f3 	udiv	r2, r2, r3
 800c284:	4b0c      	ldr	r3, [pc, #48]	; (800c2b8 <UART_SetConfig+0x118>)
 800c286:	fba3 0302 	umull	r0, r3, r3, r2
 800c28a:	095b      	lsrs	r3, r3, #5
 800c28c:	2064      	movs	r0, #100	; 0x64
 800c28e:	fb00 f303 	mul.w	r3, r0, r3
 800c292:	1ad3      	subs	r3, r2, r3
 800c294:	011b      	lsls	r3, r3, #4
 800c296:	3332      	adds	r3, #50	; 0x32
 800c298:	4a07      	ldr	r2, [pc, #28]	; (800c2b8 <UART_SetConfig+0x118>)
 800c29a:	fba2 2303 	umull	r2, r3, r2, r3
 800c29e:	095b      	lsrs	r3, r3, #5
 800c2a0:	f003 020f 	and.w	r2, r3, #15
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	440a      	add	r2, r1
 800c2aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c2ac:	bf00      	nop
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	40013800 	.word	0x40013800
 800c2b8:	51eb851f 	.word	0x51eb851f

0800c2bc <__cxa_pure_virtual>:
 800c2bc:	b508      	push	{r3, lr}
 800c2be:	f000 f80d 	bl	800c2dc <_ZSt9terminatev>

0800c2c2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800c2c2:	b508      	push	{r3, lr}
 800c2c4:	4780      	blx	r0
 800c2c6:	f001 f82e 	bl	800d326 <abort>
	...

0800c2cc <_ZSt13get_terminatev>:
 800c2cc:	4b02      	ldr	r3, [pc, #8]	; (800c2d8 <_ZSt13get_terminatev+0xc>)
 800c2ce:	6818      	ldr	r0, [r3, #0]
 800c2d0:	f3bf 8f5b 	dmb	ish
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	20000040 	.word	0x20000040

0800c2dc <_ZSt9terminatev>:
 800c2dc:	b508      	push	{r3, lr}
 800c2de:	f7ff fff5 	bl	800c2cc <_ZSt13get_terminatev>
 800c2e2:	f7ff ffee 	bl	800c2c2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800c2e8 <cos>:
 800c2e8:	b530      	push	{r4, r5, lr}
 800c2ea:	4a18      	ldr	r2, [pc, #96]	; (800c34c <cos+0x64>)
 800c2ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	b087      	sub	sp, #28
 800c2f4:	dc04      	bgt.n	800c300 <cos+0x18>
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	f000 fa55 	bl	800c7a8 <__kernel_cos>
 800c2fe:	e006      	b.n	800c30e <cos+0x26>
 800c300:	4a13      	ldr	r2, [pc, #76]	; (800c350 <cos+0x68>)
 800c302:	4293      	cmp	r3, r2
 800c304:	dd05      	ble.n	800c312 <cos+0x2a>
 800c306:	4602      	mov	r2, r0
 800c308:	460b      	mov	r3, r1
 800c30a:	f7f3 ff2d 	bl	8000168 <__aeabi_dsub>
 800c30e:	b007      	add	sp, #28
 800c310:	bd30      	pop	{r4, r5, pc}
 800c312:	aa02      	add	r2, sp, #8
 800c314:	f000 f858 	bl	800c3c8 <__ieee754_rem_pio2>
 800c318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c31c:	f000 0403 	and.w	r4, r0, #3
 800c320:	2c01      	cmp	r4, #1
 800c322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c326:	d008      	beq.n	800c33a <cos+0x52>
 800c328:	2c02      	cmp	r4, #2
 800c32a:	d00c      	beq.n	800c346 <cos+0x5e>
 800c32c:	2c00      	cmp	r4, #0
 800c32e:	d0e4      	beq.n	800c2fa <cos+0x12>
 800c330:	2401      	movs	r4, #1
 800c332:	9400      	str	r4, [sp, #0]
 800c334:	f000 fe40 	bl	800cfb8 <__kernel_sin>
 800c338:	e7e9      	b.n	800c30e <cos+0x26>
 800c33a:	9400      	str	r4, [sp, #0]
 800c33c:	f000 fe3c 	bl	800cfb8 <__kernel_sin>
 800c340:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c344:	e7e3      	b.n	800c30e <cos+0x26>
 800c346:	f000 fa2f 	bl	800c7a8 <__kernel_cos>
 800c34a:	e7f9      	b.n	800c340 <cos+0x58>
 800c34c:	3fe921fb 	.word	0x3fe921fb
 800c350:	7fefffff 	.word	0x7fefffff

0800c354 <sin>:
 800c354:	b530      	push	{r4, r5, lr}
 800c356:	4a1a      	ldr	r2, [pc, #104]	; (800c3c0 <sin+0x6c>)
 800c358:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c35c:	4293      	cmp	r3, r2
 800c35e:	b087      	sub	sp, #28
 800c360:	dc06      	bgt.n	800c370 <sin+0x1c>
 800c362:	2300      	movs	r3, #0
 800c364:	2200      	movs	r2, #0
 800c366:	9300      	str	r3, [sp, #0]
 800c368:	2300      	movs	r3, #0
 800c36a:	f000 fe25 	bl	800cfb8 <__kernel_sin>
 800c36e:	e006      	b.n	800c37e <sin+0x2a>
 800c370:	4a14      	ldr	r2, [pc, #80]	; (800c3c4 <sin+0x70>)
 800c372:	4293      	cmp	r3, r2
 800c374:	dd05      	ble.n	800c382 <sin+0x2e>
 800c376:	4602      	mov	r2, r0
 800c378:	460b      	mov	r3, r1
 800c37a:	f7f3 fef5 	bl	8000168 <__aeabi_dsub>
 800c37e:	b007      	add	sp, #28
 800c380:	bd30      	pop	{r4, r5, pc}
 800c382:	aa02      	add	r2, sp, #8
 800c384:	f000 f820 	bl	800c3c8 <__ieee754_rem_pio2>
 800c388:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c38c:	f000 0403 	and.w	r4, r0, #3
 800c390:	2c01      	cmp	r4, #1
 800c392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c396:	d005      	beq.n	800c3a4 <sin+0x50>
 800c398:	2c02      	cmp	r4, #2
 800c39a:	d006      	beq.n	800c3aa <sin+0x56>
 800c39c:	b964      	cbnz	r4, 800c3b8 <sin+0x64>
 800c39e:	2401      	movs	r4, #1
 800c3a0:	9400      	str	r4, [sp, #0]
 800c3a2:	e7e2      	b.n	800c36a <sin+0x16>
 800c3a4:	f000 fa00 	bl	800c7a8 <__kernel_cos>
 800c3a8:	e7e9      	b.n	800c37e <sin+0x2a>
 800c3aa:	2401      	movs	r4, #1
 800c3ac:	9400      	str	r4, [sp, #0]
 800c3ae:	f000 fe03 	bl	800cfb8 <__kernel_sin>
 800c3b2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c3b6:	e7e2      	b.n	800c37e <sin+0x2a>
 800c3b8:	f000 f9f6 	bl	800c7a8 <__kernel_cos>
 800c3bc:	e7f9      	b.n	800c3b2 <sin+0x5e>
 800c3be:	bf00      	nop
 800c3c0:	3fe921fb 	.word	0x3fe921fb
 800c3c4:	7fefffff 	.word	0x7fefffff

0800c3c8 <__ieee754_rem_pio2>:
 800c3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3cc:	4614      	mov	r4, r2
 800c3ce:	4ac2      	ldr	r2, [pc, #776]	; (800c6d8 <__ieee754_rem_pio2+0x310>)
 800c3d0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800c3d4:	4592      	cmp	sl, r2
 800c3d6:	b08d      	sub	sp, #52	; 0x34
 800c3d8:	468b      	mov	fp, r1
 800c3da:	dc07      	bgt.n	800c3ec <__ieee754_rem_pio2+0x24>
 800c3dc:	2200      	movs	r2, #0
 800c3de:	2300      	movs	r3, #0
 800c3e0:	e9c4 0100 	strd	r0, r1, [r4]
 800c3e4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c3e8:	2500      	movs	r5, #0
 800c3ea:	e023      	b.n	800c434 <__ieee754_rem_pio2+0x6c>
 800c3ec:	4abb      	ldr	r2, [pc, #748]	; (800c6dc <__ieee754_rem_pio2+0x314>)
 800c3ee:	4592      	cmp	sl, r2
 800c3f0:	dc71      	bgt.n	800c4d6 <__ieee754_rem_pio2+0x10e>
 800c3f2:	a3ab      	add	r3, pc, #684	; (adr r3, 800c6a0 <__ieee754_rem_pio2+0x2d8>)
 800c3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f8:	2900      	cmp	r1, #0
 800c3fa:	4db9      	ldr	r5, [pc, #740]	; (800c6e0 <__ieee754_rem_pio2+0x318>)
 800c3fc:	dd36      	ble.n	800c46c <__ieee754_rem_pio2+0xa4>
 800c3fe:	f7f3 feb3 	bl	8000168 <__aeabi_dsub>
 800c402:	45aa      	cmp	sl, r5
 800c404:	4606      	mov	r6, r0
 800c406:	460f      	mov	r7, r1
 800c408:	d018      	beq.n	800c43c <__ieee754_rem_pio2+0x74>
 800c40a:	a3a7      	add	r3, pc, #668	; (adr r3, 800c6a8 <__ieee754_rem_pio2+0x2e0>)
 800c40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c410:	f7f3 feaa 	bl	8000168 <__aeabi_dsub>
 800c414:	4602      	mov	r2, r0
 800c416:	460b      	mov	r3, r1
 800c418:	4630      	mov	r0, r6
 800c41a:	e9c4 2300 	strd	r2, r3, [r4]
 800c41e:	4639      	mov	r1, r7
 800c420:	f7f3 fea2 	bl	8000168 <__aeabi_dsub>
 800c424:	a3a0      	add	r3, pc, #640	; (adr r3, 800c6a8 <__ieee754_rem_pio2+0x2e0>)
 800c426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42a:	f7f3 fe9d 	bl	8000168 <__aeabi_dsub>
 800c42e:	2501      	movs	r5, #1
 800c430:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c434:	4628      	mov	r0, r5
 800c436:	b00d      	add	sp, #52	; 0x34
 800c438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c43c:	a39c      	add	r3, pc, #624	; (adr r3, 800c6b0 <__ieee754_rem_pio2+0x2e8>)
 800c43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c442:	f7f3 fe91 	bl	8000168 <__aeabi_dsub>
 800c446:	a39c      	add	r3, pc, #624	; (adr r3, 800c6b8 <__ieee754_rem_pio2+0x2f0>)
 800c448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44c:	4606      	mov	r6, r0
 800c44e:	460f      	mov	r7, r1
 800c450:	f7f3 fe8a 	bl	8000168 <__aeabi_dsub>
 800c454:	4602      	mov	r2, r0
 800c456:	460b      	mov	r3, r1
 800c458:	4630      	mov	r0, r6
 800c45a:	e9c4 2300 	strd	r2, r3, [r4]
 800c45e:	4639      	mov	r1, r7
 800c460:	f7f3 fe82 	bl	8000168 <__aeabi_dsub>
 800c464:	a394      	add	r3, pc, #592	; (adr r3, 800c6b8 <__ieee754_rem_pio2+0x2f0>)
 800c466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46a:	e7de      	b.n	800c42a <__ieee754_rem_pio2+0x62>
 800c46c:	f7f3 fe7e 	bl	800016c <__adddf3>
 800c470:	45aa      	cmp	sl, r5
 800c472:	4606      	mov	r6, r0
 800c474:	460f      	mov	r7, r1
 800c476:	d016      	beq.n	800c4a6 <__ieee754_rem_pio2+0xde>
 800c478:	a38b      	add	r3, pc, #556	; (adr r3, 800c6a8 <__ieee754_rem_pio2+0x2e0>)
 800c47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47e:	f7f3 fe75 	bl	800016c <__adddf3>
 800c482:	4602      	mov	r2, r0
 800c484:	460b      	mov	r3, r1
 800c486:	4630      	mov	r0, r6
 800c488:	e9c4 2300 	strd	r2, r3, [r4]
 800c48c:	4639      	mov	r1, r7
 800c48e:	f7f3 fe6b 	bl	8000168 <__aeabi_dsub>
 800c492:	a385      	add	r3, pc, #532	; (adr r3, 800c6a8 <__ieee754_rem_pio2+0x2e0>)
 800c494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c498:	f7f3 fe68 	bl	800016c <__adddf3>
 800c49c:	f04f 35ff 	mov.w	r5, #4294967295
 800c4a0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c4a4:	e7c6      	b.n	800c434 <__ieee754_rem_pio2+0x6c>
 800c4a6:	a382      	add	r3, pc, #520	; (adr r3, 800c6b0 <__ieee754_rem_pio2+0x2e8>)
 800c4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ac:	f7f3 fe5e 	bl	800016c <__adddf3>
 800c4b0:	a381      	add	r3, pc, #516	; (adr r3, 800c6b8 <__ieee754_rem_pio2+0x2f0>)
 800c4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b6:	4606      	mov	r6, r0
 800c4b8:	460f      	mov	r7, r1
 800c4ba:	f7f3 fe57 	bl	800016c <__adddf3>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	e9c4 2300 	strd	r2, r3, [r4]
 800c4c8:	4639      	mov	r1, r7
 800c4ca:	f7f3 fe4d 	bl	8000168 <__aeabi_dsub>
 800c4ce:	a37a      	add	r3, pc, #488	; (adr r3, 800c6b8 <__ieee754_rem_pio2+0x2f0>)
 800c4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d4:	e7e0      	b.n	800c498 <__ieee754_rem_pio2+0xd0>
 800c4d6:	4a83      	ldr	r2, [pc, #524]	; (800c6e4 <__ieee754_rem_pio2+0x31c>)
 800c4d8:	4592      	cmp	sl, r2
 800c4da:	f300 80d2 	bgt.w	800c682 <__ieee754_rem_pio2+0x2ba>
 800c4de:	f000 fe21 	bl	800d124 <fabs>
 800c4e2:	a377      	add	r3, pc, #476	; (adr r3, 800c6c0 <__ieee754_rem_pio2+0x2f8>)
 800c4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e8:	4606      	mov	r6, r0
 800c4ea:	460f      	mov	r7, r1
 800c4ec:	f7f3 fff4 	bl	80004d8 <__aeabi_dmul>
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	4b7d      	ldr	r3, [pc, #500]	; (800c6e8 <__ieee754_rem_pio2+0x320>)
 800c4f4:	f7f3 fe3a 	bl	800016c <__adddf3>
 800c4f8:	f7f4 fa88 	bl	8000a0c <__aeabi_d2iz>
 800c4fc:	4605      	mov	r5, r0
 800c4fe:	f7f3 ff81 	bl	8000404 <__aeabi_i2d>
 800c502:	a367      	add	r3, pc, #412	; (adr r3, 800c6a0 <__ieee754_rem_pio2+0x2d8>)
 800c504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c50c:	f7f3 ffe4 	bl	80004d8 <__aeabi_dmul>
 800c510:	4602      	mov	r2, r0
 800c512:	460b      	mov	r3, r1
 800c514:	4630      	mov	r0, r6
 800c516:	4639      	mov	r1, r7
 800c518:	f7f3 fe26 	bl	8000168 <__aeabi_dsub>
 800c51c:	a362      	add	r3, pc, #392	; (adr r3, 800c6a8 <__ieee754_rem_pio2+0x2e0>)
 800c51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c522:	4606      	mov	r6, r0
 800c524:	460f      	mov	r7, r1
 800c526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c52a:	f7f3 ffd5 	bl	80004d8 <__aeabi_dmul>
 800c52e:	2d1f      	cmp	r5, #31
 800c530:	4680      	mov	r8, r0
 800c532:	4689      	mov	r9, r1
 800c534:	dc0e      	bgt.n	800c554 <__ieee754_rem_pio2+0x18c>
 800c536:	4b6d      	ldr	r3, [pc, #436]	; (800c6ec <__ieee754_rem_pio2+0x324>)
 800c538:	1e6a      	subs	r2, r5, #1
 800c53a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c53e:	4553      	cmp	r3, sl
 800c540:	d008      	beq.n	800c554 <__ieee754_rem_pio2+0x18c>
 800c542:	4642      	mov	r2, r8
 800c544:	464b      	mov	r3, r9
 800c546:	4630      	mov	r0, r6
 800c548:	4639      	mov	r1, r7
 800c54a:	f7f3 fe0d 	bl	8000168 <__aeabi_dsub>
 800c54e:	e9c4 0100 	strd	r0, r1, [r4]
 800c552:	e011      	b.n	800c578 <__ieee754_rem_pio2+0x1b0>
 800c554:	464b      	mov	r3, r9
 800c556:	4642      	mov	r2, r8
 800c558:	4630      	mov	r0, r6
 800c55a:	4639      	mov	r1, r7
 800c55c:	f7f3 fe04 	bl	8000168 <__aeabi_dsub>
 800c560:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c564:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c568:	ebaa 0303 	sub.w	r3, sl, r3
 800c56c:	2b10      	cmp	r3, #16
 800c56e:	dc1f      	bgt.n	800c5b0 <__ieee754_rem_pio2+0x1e8>
 800c570:	4602      	mov	r2, r0
 800c572:	460b      	mov	r3, r1
 800c574:	e9c4 2300 	strd	r2, r3, [r4]
 800c578:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800c57c:	4630      	mov	r0, r6
 800c57e:	4653      	mov	r3, sl
 800c580:	4639      	mov	r1, r7
 800c582:	f7f3 fdf1 	bl	8000168 <__aeabi_dsub>
 800c586:	4642      	mov	r2, r8
 800c588:	464b      	mov	r3, r9
 800c58a:	f7f3 fded 	bl	8000168 <__aeabi_dsub>
 800c58e:	4602      	mov	r2, r0
 800c590:	460b      	mov	r3, r1
 800c592:	f1bb 0f00 	cmp.w	fp, #0
 800c596:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c59a:	f6bf af4b 	bge.w	800c434 <__ieee754_rem_pio2+0x6c>
 800c59e:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800c5a2:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800c5a6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c5aa:	60e1      	str	r1, [r4, #12]
 800c5ac:	426d      	negs	r5, r5
 800c5ae:	e741      	b.n	800c434 <__ieee754_rem_pio2+0x6c>
 800c5b0:	a33f      	add	r3, pc, #252	; (adr r3, 800c6b0 <__ieee754_rem_pio2+0x2e8>)
 800c5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5ba:	f7f3 ff8d 	bl	80004d8 <__aeabi_dmul>
 800c5be:	4680      	mov	r8, r0
 800c5c0:	4689      	mov	r9, r1
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	4630      	mov	r0, r6
 800c5c8:	4639      	mov	r1, r7
 800c5ca:	f7f3 fdcd 	bl	8000168 <__aeabi_dsub>
 800c5ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	4639      	mov	r1, r7
 800c5da:	f7f3 fdc5 	bl	8000168 <__aeabi_dsub>
 800c5de:	4642      	mov	r2, r8
 800c5e0:	464b      	mov	r3, r9
 800c5e2:	f7f3 fdc1 	bl	8000168 <__aeabi_dsub>
 800c5e6:	a334      	add	r3, pc, #208	; (adr r3, 800c6b8 <__ieee754_rem_pio2+0x2f0>)
 800c5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ec:	4606      	mov	r6, r0
 800c5ee:	460f      	mov	r7, r1
 800c5f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5f4:	f7f3 ff70 	bl	80004d8 <__aeabi_dmul>
 800c5f8:	4632      	mov	r2, r6
 800c5fa:	463b      	mov	r3, r7
 800c5fc:	f7f3 fdb4 	bl	8000168 <__aeabi_dsub>
 800c600:	460b      	mov	r3, r1
 800c602:	4602      	mov	r2, r0
 800c604:	4680      	mov	r8, r0
 800c606:	4689      	mov	r9, r1
 800c608:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c60c:	f7f3 fdac 	bl	8000168 <__aeabi_dsub>
 800c610:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c614:	ebaa 0a03 	sub.w	sl, sl, r3
 800c618:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800c61c:	dc06      	bgt.n	800c62c <__ieee754_rem_pio2+0x264>
 800c61e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800c622:	4602      	mov	r2, r0
 800c624:	460b      	mov	r3, r1
 800c626:	e9c4 2300 	strd	r2, r3, [r4]
 800c62a:	e7a5      	b.n	800c578 <__ieee754_rem_pio2+0x1b0>
 800c62c:	a326      	add	r3, pc, #152	; (adr r3, 800c6c8 <__ieee754_rem_pio2+0x300>)
 800c62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c636:	f7f3 ff4f 	bl	80004d8 <__aeabi_dmul>
 800c63a:	4680      	mov	r8, r0
 800c63c:	4689      	mov	r9, r1
 800c63e:	4602      	mov	r2, r0
 800c640:	460b      	mov	r3, r1
 800c642:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c646:	f7f3 fd8f 	bl	8000168 <__aeabi_dsub>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	4606      	mov	r6, r0
 800c650:	460f      	mov	r7, r1
 800c652:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c656:	f7f3 fd87 	bl	8000168 <__aeabi_dsub>
 800c65a:	4642      	mov	r2, r8
 800c65c:	464b      	mov	r3, r9
 800c65e:	f7f3 fd83 	bl	8000168 <__aeabi_dsub>
 800c662:	a31b      	add	r3, pc, #108	; (adr r3, 800c6d0 <__ieee754_rem_pio2+0x308>)
 800c664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c668:	4680      	mov	r8, r0
 800c66a:	4689      	mov	r9, r1
 800c66c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c670:	f7f3 ff32 	bl	80004d8 <__aeabi_dmul>
 800c674:	4642      	mov	r2, r8
 800c676:	464b      	mov	r3, r9
 800c678:	f7f3 fd76 	bl	8000168 <__aeabi_dsub>
 800c67c:	4680      	mov	r8, r0
 800c67e:	4689      	mov	r9, r1
 800c680:	e75f      	b.n	800c542 <__ieee754_rem_pio2+0x17a>
 800c682:	4a1b      	ldr	r2, [pc, #108]	; (800c6f0 <__ieee754_rem_pio2+0x328>)
 800c684:	4592      	cmp	sl, r2
 800c686:	dd35      	ble.n	800c6f4 <__ieee754_rem_pio2+0x32c>
 800c688:	4602      	mov	r2, r0
 800c68a:	460b      	mov	r3, r1
 800c68c:	f7f3 fd6c 	bl	8000168 <__aeabi_dsub>
 800c690:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c694:	e9c4 0100 	strd	r0, r1, [r4]
 800c698:	e6a6      	b.n	800c3e8 <__ieee754_rem_pio2+0x20>
 800c69a:	bf00      	nop
 800c69c:	f3af 8000 	nop.w
 800c6a0:	54400000 	.word	0x54400000
 800c6a4:	3ff921fb 	.word	0x3ff921fb
 800c6a8:	1a626331 	.word	0x1a626331
 800c6ac:	3dd0b461 	.word	0x3dd0b461
 800c6b0:	1a600000 	.word	0x1a600000
 800c6b4:	3dd0b461 	.word	0x3dd0b461
 800c6b8:	2e037073 	.word	0x2e037073
 800c6bc:	3ba3198a 	.word	0x3ba3198a
 800c6c0:	6dc9c883 	.word	0x6dc9c883
 800c6c4:	3fe45f30 	.word	0x3fe45f30
 800c6c8:	2e000000 	.word	0x2e000000
 800c6cc:	3ba3198a 	.word	0x3ba3198a
 800c6d0:	252049c1 	.word	0x252049c1
 800c6d4:	397b839a 	.word	0x397b839a
 800c6d8:	3fe921fb 	.word	0x3fe921fb
 800c6dc:	4002d97b 	.word	0x4002d97b
 800c6e0:	3ff921fb 	.word	0x3ff921fb
 800c6e4:	413921fb 	.word	0x413921fb
 800c6e8:	3fe00000 	.word	0x3fe00000
 800c6ec:	0800edc4 	.word	0x0800edc4
 800c6f0:	7fefffff 	.word	0x7fefffff
 800c6f4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800c6f8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c6fc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800c700:	460f      	mov	r7, r1
 800c702:	4606      	mov	r6, r0
 800c704:	f7f4 f982 	bl	8000a0c <__aeabi_d2iz>
 800c708:	f7f3 fe7c 	bl	8000404 <__aeabi_i2d>
 800c70c:	4602      	mov	r2, r0
 800c70e:	460b      	mov	r3, r1
 800c710:	4630      	mov	r0, r6
 800c712:	4639      	mov	r1, r7
 800c714:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c718:	f7f3 fd26 	bl	8000168 <__aeabi_dsub>
 800c71c:	2200      	movs	r2, #0
 800c71e:	4b20      	ldr	r3, [pc, #128]	; (800c7a0 <__ieee754_rem_pio2+0x3d8>)
 800c720:	f7f3 feda 	bl	80004d8 <__aeabi_dmul>
 800c724:	460f      	mov	r7, r1
 800c726:	4606      	mov	r6, r0
 800c728:	f7f4 f970 	bl	8000a0c <__aeabi_d2iz>
 800c72c:	f7f3 fe6a 	bl	8000404 <__aeabi_i2d>
 800c730:	4602      	mov	r2, r0
 800c732:	460b      	mov	r3, r1
 800c734:	4630      	mov	r0, r6
 800c736:	4639      	mov	r1, r7
 800c738:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c73c:	f7f3 fd14 	bl	8000168 <__aeabi_dsub>
 800c740:	2200      	movs	r2, #0
 800c742:	4b17      	ldr	r3, [pc, #92]	; (800c7a0 <__ieee754_rem_pio2+0x3d8>)
 800c744:	f7f3 fec8 	bl	80004d8 <__aeabi_dmul>
 800c748:	f04f 0803 	mov.w	r8, #3
 800c74c:	2600      	movs	r6, #0
 800c74e:	2700      	movs	r7, #0
 800c750:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c754:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800c758:	4632      	mov	r2, r6
 800c75a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c75e:	463b      	mov	r3, r7
 800c760:	f108 3aff 	add.w	sl, r8, #4294967295
 800c764:	f7f4 f920 	bl	80009a8 <__aeabi_dcmpeq>
 800c768:	b9b8      	cbnz	r0, 800c79a <__ieee754_rem_pio2+0x3d2>
 800c76a:	4b0e      	ldr	r3, [pc, #56]	; (800c7a4 <__ieee754_rem_pio2+0x3dc>)
 800c76c:	462a      	mov	r2, r5
 800c76e:	9301      	str	r3, [sp, #4]
 800c770:	2302      	movs	r3, #2
 800c772:	4621      	mov	r1, r4
 800c774:	9300      	str	r3, [sp, #0]
 800c776:	a806      	add	r0, sp, #24
 800c778:	4643      	mov	r3, r8
 800c77a:	f000 f8d3 	bl	800c924 <__kernel_rem_pio2>
 800c77e:	f1bb 0f00 	cmp.w	fp, #0
 800c782:	4605      	mov	r5, r0
 800c784:	f6bf ae56 	bge.w	800c434 <__ieee754_rem_pio2+0x6c>
 800c788:	6863      	ldr	r3, [r4, #4]
 800c78a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c78e:	6063      	str	r3, [r4, #4]
 800c790:	68e3      	ldr	r3, [r4, #12]
 800c792:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c796:	60e3      	str	r3, [r4, #12]
 800c798:	e708      	b.n	800c5ac <__ieee754_rem_pio2+0x1e4>
 800c79a:	46d0      	mov	r8, sl
 800c79c:	e7dc      	b.n	800c758 <__ieee754_rem_pio2+0x390>
 800c79e:	bf00      	nop
 800c7a0:	41700000 	.word	0x41700000
 800c7a4:	0800ee44 	.word	0x0800ee44

0800c7a8 <__kernel_cos>:
 800c7a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c7b0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c7b4:	4680      	mov	r8, r0
 800c7b6:	460f      	mov	r7, r1
 800c7b8:	e9cd 2300 	strd	r2, r3, [sp]
 800c7bc:	da04      	bge.n	800c7c8 <__kernel_cos+0x20>
 800c7be:	f7f4 f925 	bl	8000a0c <__aeabi_d2iz>
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	f000 8086 	beq.w	800c8d4 <__kernel_cos+0x12c>
 800c7c8:	4642      	mov	r2, r8
 800c7ca:	463b      	mov	r3, r7
 800c7cc:	4640      	mov	r0, r8
 800c7ce:	4639      	mov	r1, r7
 800c7d0:	f7f3 fe82 	bl	80004d8 <__aeabi_dmul>
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	4b4e      	ldr	r3, [pc, #312]	; (800c910 <__kernel_cos+0x168>)
 800c7d8:	4604      	mov	r4, r0
 800c7da:	460d      	mov	r5, r1
 800c7dc:	f7f3 fe7c 	bl	80004d8 <__aeabi_dmul>
 800c7e0:	a33f      	add	r3, pc, #252	; (adr r3, 800c8e0 <__kernel_cos+0x138>)
 800c7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e6:	4682      	mov	sl, r0
 800c7e8:	468b      	mov	fp, r1
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	f7f3 fe73 	bl	80004d8 <__aeabi_dmul>
 800c7f2:	a33d      	add	r3, pc, #244	; (adr r3, 800c8e8 <__kernel_cos+0x140>)
 800c7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f8:	f7f3 fcb8 	bl	800016c <__adddf3>
 800c7fc:	4622      	mov	r2, r4
 800c7fe:	462b      	mov	r3, r5
 800c800:	f7f3 fe6a 	bl	80004d8 <__aeabi_dmul>
 800c804:	a33a      	add	r3, pc, #232	; (adr r3, 800c8f0 <__kernel_cos+0x148>)
 800c806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80a:	f7f3 fcad 	bl	8000168 <__aeabi_dsub>
 800c80e:	4622      	mov	r2, r4
 800c810:	462b      	mov	r3, r5
 800c812:	f7f3 fe61 	bl	80004d8 <__aeabi_dmul>
 800c816:	a338      	add	r3, pc, #224	; (adr r3, 800c8f8 <__kernel_cos+0x150>)
 800c818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81c:	f7f3 fca6 	bl	800016c <__adddf3>
 800c820:	4622      	mov	r2, r4
 800c822:	462b      	mov	r3, r5
 800c824:	f7f3 fe58 	bl	80004d8 <__aeabi_dmul>
 800c828:	a335      	add	r3, pc, #212	; (adr r3, 800c900 <__kernel_cos+0x158>)
 800c82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82e:	f7f3 fc9b 	bl	8000168 <__aeabi_dsub>
 800c832:	4622      	mov	r2, r4
 800c834:	462b      	mov	r3, r5
 800c836:	f7f3 fe4f 	bl	80004d8 <__aeabi_dmul>
 800c83a:	a333      	add	r3, pc, #204	; (adr r3, 800c908 <__kernel_cos+0x160>)
 800c83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c840:	f7f3 fc94 	bl	800016c <__adddf3>
 800c844:	4622      	mov	r2, r4
 800c846:	462b      	mov	r3, r5
 800c848:	f7f3 fe46 	bl	80004d8 <__aeabi_dmul>
 800c84c:	4622      	mov	r2, r4
 800c84e:	462b      	mov	r3, r5
 800c850:	f7f3 fe42 	bl	80004d8 <__aeabi_dmul>
 800c854:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c858:	4604      	mov	r4, r0
 800c85a:	460d      	mov	r5, r1
 800c85c:	4640      	mov	r0, r8
 800c85e:	4639      	mov	r1, r7
 800c860:	f7f3 fe3a 	bl	80004d8 <__aeabi_dmul>
 800c864:	460b      	mov	r3, r1
 800c866:	4602      	mov	r2, r0
 800c868:	4629      	mov	r1, r5
 800c86a:	4620      	mov	r0, r4
 800c86c:	f7f3 fc7c 	bl	8000168 <__aeabi_dsub>
 800c870:	4b28      	ldr	r3, [pc, #160]	; (800c914 <__kernel_cos+0x16c>)
 800c872:	4680      	mov	r8, r0
 800c874:	429e      	cmp	r6, r3
 800c876:	4689      	mov	r9, r1
 800c878:	dc0e      	bgt.n	800c898 <__kernel_cos+0xf0>
 800c87a:	4602      	mov	r2, r0
 800c87c:	460b      	mov	r3, r1
 800c87e:	4650      	mov	r0, sl
 800c880:	4659      	mov	r1, fp
 800c882:	f7f3 fc71 	bl	8000168 <__aeabi_dsub>
 800c886:	4602      	mov	r2, r0
 800c888:	2000      	movs	r0, #0
 800c88a:	460b      	mov	r3, r1
 800c88c:	4922      	ldr	r1, [pc, #136]	; (800c918 <__kernel_cos+0x170>)
 800c88e:	f7f3 fc6b 	bl	8000168 <__aeabi_dsub>
 800c892:	b003      	add	sp, #12
 800c894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c898:	2400      	movs	r4, #0
 800c89a:	4b20      	ldr	r3, [pc, #128]	; (800c91c <__kernel_cos+0x174>)
 800c89c:	4622      	mov	r2, r4
 800c89e:	429e      	cmp	r6, r3
 800c8a0:	bfcc      	ite	gt
 800c8a2:	4d1f      	ldrgt	r5, [pc, #124]	; (800c920 <__kernel_cos+0x178>)
 800c8a4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c8a8:	462b      	mov	r3, r5
 800c8aa:	2000      	movs	r0, #0
 800c8ac:	491a      	ldr	r1, [pc, #104]	; (800c918 <__kernel_cos+0x170>)
 800c8ae:	f7f3 fc5b 	bl	8000168 <__aeabi_dsub>
 800c8b2:	4622      	mov	r2, r4
 800c8b4:	4606      	mov	r6, r0
 800c8b6:	460f      	mov	r7, r1
 800c8b8:	462b      	mov	r3, r5
 800c8ba:	4650      	mov	r0, sl
 800c8bc:	4659      	mov	r1, fp
 800c8be:	f7f3 fc53 	bl	8000168 <__aeabi_dsub>
 800c8c2:	4642      	mov	r2, r8
 800c8c4:	464b      	mov	r3, r9
 800c8c6:	f7f3 fc4f 	bl	8000168 <__aeabi_dsub>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	4639      	mov	r1, r7
 800c8d2:	e7dc      	b.n	800c88e <__kernel_cos+0xe6>
 800c8d4:	2000      	movs	r0, #0
 800c8d6:	4910      	ldr	r1, [pc, #64]	; (800c918 <__kernel_cos+0x170>)
 800c8d8:	e7db      	b.n	800c892 <__kernel_cos+0xea>
 800c8da:	bf00      	nop
 800c8dc:	f3af 8000 	nop.w
 800c8e0:	be8838d4 	.word	0xbe8838d4
 800c8e4:	bda8fae9 	.word	0xbda8fae9
 800c8e8:	bdb4b1c4 	.word	0xbdb4b1c4
 800c8ec:	3e21ee9e 	.word	0x3e21ee9e
 800c8f0:	809c52ad 	.word	0x809c52ad
 800c8f4:	3e927e4f 	.word	0x3e927e4f
 800c8f8:	19cb1590 	.word	0x19cb1590
 800c8fc:	3efa01a0 	.word	0x3efa01a0
 800c900:	16c15177 	.word	0x16c15177
 800c904:	3f56c16c 	.word	0x3f56c16c
 800c908:	5555554c 	.word	0x5555554c
 800c90c:	3fa55555 	.word	0x3fa55555
 800c910:	3fe00000 	.word	0x3fe00000
 800c914:	3fd33332 	.word	0x3fd33332
 800c918:	3ff00000 	.word	0x3ff00000
 800c91c:	3fe90000 	.word	0x3fe90000
 800c920:	3fd20000 	.word	0x3fd20000

0800c924 <__kernel_rem_pio2>:
 800c924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c928:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c92c:	9307      	str	r3, [sp, #28]
 800c92e:	9104      	str	r1, [sp, #16]
 800c930:	4bbf      	ldr	r3, [pc, #764]	; (800cc30 <__kernel_rem_pio2+0x30c>)
 800c932:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c934:	1ed4      	subs	r4, r2, #3
 800c936:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c93a:	2500      	movs	r5, #0
 800c93c:	9302      	str	r3, [sp, #8]
 800c93e:	9b07      	ldr	r3, [sp, #28]
 800c940:	9008      	str	r0, [sp, #32]
 800c942:	3b01      	subs	r3, #1
 800c944:	9306      	str	r3, [sp, #24]
 800c946:	2318      	movs	r3, #24
 800c948:	fb94 f4f3 	sdiv	r4, r4, r3
 800c94c:	f06f 0317 	mvn.w	r3, #23
 800c950:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800c954:	fb04 3303 	mla	r3, r4, r3, r3
 800c958:	eb03 0a02 	add.w	sl, r3, r2
 800c95c:	9a06      	ldr	r2, [sp, #24]
 800c95e:	9b02      	ldr	r3, [sp, #8]
 800c960:	1aa7      	subs	r7, r4, r2
 800c962:	eb03 0802 	add.w	r8, r3, r2
 800c966:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c968:	2200      	movs	r2, #0
 800c96a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c96e:	2300      	movs	r3, #0
 800c970:	ae1e      	add	r6, sp, #120	; 0x78
 800c972:	4545      	cmp	r5, r8
 800c974:	dd14      	ble.n	800c9a0 <__kernel_rem_pio2+0x7c>
 800c976:	2600      	movs	r6, #0
 800c978:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800c97c:	9b02      	ldr	r3, [sp, #8]
 800c97e:	429e      	cmp	r6, r3
 800c980:	dc39      	bgt.n	800c9f6 <__kernel_rem_pio2+0xd2>
 800c982:	9b08      	ldr	r3, [sp, #32]
 800c984:	f04f 0800 	mov.w	r8, #0
 800c988:	3b08      	subs	r3, #8
 800c98a:	9300      	str	r3, [sp, #0]
 800c98c:	9b07      	ldr	r3, [sp, #28]
 800c98e:	f04f 0900 	mov.w	r9, #0
 800c992:	199d      	adds	r5, r3, r6
 800c994:	ab20      	add	r3, sp, #128	; 0x80
 800c996:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c99a:	9305      	str	r3, [sp, #20]
 800c99c:	2700      	movs	r7, #0
 800c99e:	e023      	b.n	800c9e8 <__kernel_rem_pio2+0xc4>
 800c9a0:	42ef      	cmn	r7, r5
 800c9a2:	d40b      	bmi.n	800c9bc <__kernel_rem_pio2+0x98>
 800c9a4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c9a8:	e9cd 2300 	strd	r2, r3, [sp]
 800c9ac:	f7f3 fd2a 	bl	8000404 <__aeabi_i2d>
 800c9b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9b4:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800c9b8:	3501      	adds	r5, #1
 800c9ba:	e7da      	b.n	800c972 <__kernel_rem_pio2+0x4e>
 800c9bc:	4610      	mov	r0, r2
 800c9be:	4619      	mov	r1, r3
 800c9c0:	e7f8      	b.n	800c9b4 <__kernel_rem_pio2+0x90>
 800c9c2:	9905      	ldr	r1, [sp, #20]
 800c9c4:	9d00      	ldr	r5, [sp, #0]
 800c9c6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800c9ca:	9105      	str	r1, [sp, #20]
 800c9cc:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800c9d0:	9500      	str	r5, [sp, #0]
 800c9d2:	f7f3 fd81 	bl	80004d8 <__aeabi_dmul>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	460b      	mov	r3, r1
 800c9da:	4640      	mov	r0, r8
 800c9dc:	4649      	mov	r1, r9
 800c9de:	f7f3 fbc5 	bl	800016c <__adddf3>
 800c9e2:	4680      	mov	r8, r0
 800c9e4:	4689      	mov	r9, r1
 800c9e6:	3701      	adds	r7, #1
 800c9e8:	9b06      	ldr	r3, [sp, #24]
 800c9ea:	429f      	cmp	r7, r3
 800c9ec:	dde9      	ble.n	800c9c2 <__kernel_rem_pio2+0x9e>
 800c9ee:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800c9f2:	3601      	adds	r6, #1
 800c9f4:	e7c2      	b.n	800c97c <__kernel_rem_pio2+0x58>
 800c9f6:	9b02      	ldr	r3, [sp, #8]
 800c9f8:	aa0c      	add	r2, sp, #48	; 0x30
 800c9fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca00:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ca02:	9f02      	ldr	r7, [sp, #8]
 800ca04:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ca08:	930a      	str	r3, [sp, #40]	; 0x28
 800ca0a:	2600      	movs	r6, #0
 800ca0c:	ab98      	add	r3, sp, #608	; 0x260
 800ca0e:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800ca12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ca16:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca1a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800ca1e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800ca22:	ab98      	add	r3, sp, #608	; 0x260
 800ca24:	445b      	add	r3, fp
 800ca26:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800ca2a:	1bbb      	subs	r3, r7, r6
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	dc71      	bgt.n	800cb14 <__kernel_rem_pio2+0x1f0>
 800ca30:	4652      	mov	r2, sl
 800ca32:	4640      	mov	r0, r8
 800ca34:	4649      	mov	r1, r9
 800ca36:	f000 fbff 	bl	800d238 <scalbn>
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ca40:	4604      	mov	r4, r0
 800ca42:	460d      	mov	r5, r1
 800ca44:	f7f3 fd48 	bl	80004d8 <__aeabi_dmul>
 800ca48:	f000 fb72 	bl	800d130 <floor>
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	4b79      	ldr	r3, [pc, #484]	; (800cc34 <__kernel_rem_pio2+0x310>)
 800ca50:	f7f3 fd42 	bl	80004d8 <__aeabi_dmul>
 800ca54:	4602      	mov	r2, r0
 800ca56:	460b      	mov	r3, r1
 800ca58:	4620      	mov	r0, r4
 800ca5a:	4629      	mov	r1, r5
 800ca5c:	f7f3 fb84 	bl	8000168 <__aeabi_dsub>
 800ca60:	460d      	mov	r5, r1
 800ca62:	4604      	mov	r4, r0
 800ca64:	f7f3 ffd2 	bl	8000a0c <__aeabi_d2iz>
 800ca68:	9005      	str	r0, [sp, #20]
 800ca6a:	f7f3 fccb 	bl	8000404 <__aeabi_i2d>
 800ca6e:	4602      	mov	r2, r0
 800ca70:	460b      	mov	r3, r1
 800ca72:	4620      	mov	r0, r4
 800ca74:	4629      	mov	r1, r5
 800ca76:	f7f3 fb77 	bl	8000168 <__aeabi_dsub>
 800ca7a:	f1ba 0f00 	cmp.w	sl, #0
 800ca7e:	4680      	mov	r8, r0
 800ca80:	4689      	mov	r9, r1
 800ca82:	dd6c      	ble.n	800cb5e <__kernel_rem_pio2+0x23a>
 800ca84:	1e7a      	subs	r2, r7, #1
 800ca86:	ab0c      	add	r3, sp, #48	; 0x30
 800ca88:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ca8c:	f1ca 0118 	rsb	r1, sl, #24
 800ca90:	9c05      	ldr	r4, [sp, #20]
 800ca92:	fa40 f301 	asr.w	r3, r0, r1
 800ca96:	441c      	add	r4, r3
 800ca98:	408b      	lsls	r3, r1
 800ca9a:	1ac0      	subs	r0, r0, r3
 800ca9c:	ab0c      	add	r3, sp, #48	; 0x30
 800ca9e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800caa2:	f1ca 0317 	rsb	r3, sl, #23
 800caa6:	9405      	str	r4, [sp, #20]
 800caa8:	fa40 f303 	asr.w	r3, r0, r3
 800caac:	9300      	str	r3, [sp, #0]
 800caae:	9b00      	ldr	r3, [sp, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	dd62      	ble.n	800cb7a <__kernel_rem_pio2+0x256>
 800cab4:	2200      	movs	r2, #0
 800cab6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800caba:	4614      	mov	r4, r2
 800cabc:	9b05      	ldr	r3, [sp, #20]
 800cabe:	3301      	adds	r3, #1
 800cac0:	9305      	str	r3, [sp, #20]
 800cac2:	4297      	cmp	r7, r2
 800cac4:	f300 809f 	bgt.w	800cc06 <__kernel_rem_pio2+0x2e2>
 800cac8:	f1ba 0f00 	cmp.w	sl, #0
 800cacc:	dd07      	ble.n	800cade <__kernel_rem_pio2+0x1ba>
 800cace:	f1ba 0f01 	cmp.w	sl, #1
 800cad2:	f000 80bb 	beq.w	800cc4c <__kernel_rem_pio2+0x328>
 800cad6:	f1ba 0f02 	cmp.w	sl, #2
 800cada:	f000 80c1 	beq.w	800cc60 <__kernel_rem_pio2+0x33c>
 800cade:	9b00      	ldr	r3, [sp, #0]
 800cae0:	2b02      	cmp	r3, #2
 800cae2:	d14a      	bne.n	800cb7a <__kernel_rem_pio2+0x256>
 800cae4:	4642      	mov	r2, r8
 800cae6:	464b      	mov	r3, r9
 800cae8:	2000      	movs	r0, #0
 800caea:	4953      	ldr	r1, [pc, #332]	; (800cc38 <__kernel_rem_pio2+0x314>)
 800caec:	f7f3 fb3c 	bl	8000168 <__aeabi_dsub>
 800caf0:	4680      	mov	r8, r0
 800caf2:	4689      	mov	r9, r1
 800caf4:	2c00      	cmp	r4, #0
 800caf6:	d040      	beq.n	800cb7a <__kernel_rem_pio2+0x256>
 800caf8:	4652      	mov	r2, sl
 800cafa:	2000      	movs	r0, #0
 800cafc:	494e      	ldr	r1, [pc, #312]	; (800cc38 <__kernel_rem_pio2+0x314>)
 800cafe:	f000 fb9b 	bl	800d238 <scalbn>
 800cb02:	4602      	mov	r2, r0
 800cb04:	460b      	mov	r3, r1
 800cb06:	4640      	mov	r0, r8
 800cb08:	4649      	mov	r1, r9
 800cb0a:	f7f3 fb2d 	bl	8000168 <__aeabi_dsub>
 800cb0e:	4680      	mov	r8, r0
 800cb10:	4689      	mov	r9, r1
 800cb12:	e032      	b.n	800cb7a <__kernel_rem_pio2+0x256>
 800cb14:	2200      	movs	r2, #0
 800cb16:	4b49      	ldr	r3, [pc, #292]	; (800cc3c <__kernel_rem_pio2+0x318>)
 800cb18:	4640      	mov	r0, r8
 800cb1a:	4649      	mov	r1, r9
 800cb1c:	f7f3 fcdc 	bl	80004d8 <__aeabi_dmul>
 800cb20:	f7f3 ff74 	bl	8000a0c <__aeabi_d2iz>
 800cb24:	f7f3 fc6e 	bl	8000404 <__aeabi_i2d>
 800cb28:	2200      	movs	r2, #0
 800cb2a:	4b45      	ldr	r3, [pc, #276]	; (800cc40 <__kernel_rem_pio2+0x31c>)
 800cb2c:	e9cd 0100 	strd	r0, r1, [sp]
 800cb30:	f7f3 fcd2 	bl	80004d8 <__aeabi_dmul>
 800cb34:	4602      	mov	r2, r0
 800cb36:	460b      	mov	r3, r1
 800cb38:	4640      	mov	r0, r8
 800cb3a:	4649      	mov	r1, r9
 800cb3c:	f7f3 fb14 	bl	8000168 <__aeabi_dsub>
 800cb40:	f7f3 ff64 	bl	8000a0c <__aeabi_d2iz>
 800cb44:	ab0c      	add	r3, sp, #48	; 0x30
 800cb46:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800cb4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cb4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb52:	f7f3 fb0b 	bl	800016c <__adddf3>
 800cb56:	3601      	adds	r6, #1
 800cb58:	4680      	mov	r8, r0
 800cb5a:	4689      	mov	r9, r1
 800cb5c:	e765      	b.n	800ca2a <__kernel_rem_pio2+0x106>
 800cb5e:	d105      	bne.n	800cb6c <__kernel_rem_pio2+0x248>
 800cb60:	1e7b      	subs	r3, r7, #1
 800cb62:	aa0c      	add	r2, sp, #48	; 0x30
 800cb64:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cb68:	15c3      	asrs	r3, r0, #23
 800cb6a:	e79f      	b.n	800caac <__kernel_rem_pio2+0x188>
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	4b35      	ldr	r3, [pc, #212]	; (800cc44 <__kernel_rem_pio2+0x320>)
 800cb70:	f7f3 ff38 	bl	80009e4 <__aeabi_dcmpge>
 800cb74:	2800      	cmp	r0, #0
 800cb76:	d143      	bne.n	800cc00 <__kernel_rem_pio2+0x2dc>
 800cb78:	9000      	str	r0, [sp, #0]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	4640      	mov	r0, r8
 800cb80:	4649      	mov	r1, r9
 800cb82:	f7f3 ff11 	bl	80009a8 <__aeabi_dcmpeq>
 800cb86:	2800      	cmp	r0, #0
 800cb88:	f000 80c3 	beq.w	800cd12 <__kernel_rem_pio2+0x3ee>
 800cb8c:	1e7c      	subs	r4, r7, #1
 800cb8e:	4623      	mov	r3, r4
 800cb90:	2200      	movs	r2, #0
 800cb92:	9902      	ldr	r1, [sp, #8]
 800cb94:	428b      	cmp	r3, r1
 800cb96:	da6a      	bge.n	800cc6e <__kernel_rem_pio2+0x34a>
 800cb98:	2a00      	cmp	r2, #0
 800cb9a:	f000 8084 	beq.w	800cca6 <__kernel_rem_pio2+0x382>
 800cb9e:	ab0c      	add	r3, sp, #48	; 0x30
 800cba0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cba4:	f1aa 0a18 	sub.w	sl, sl, #24
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	f000 80b0 	beq.w	800cd0e <__kernel_rem_pio2+0x3ea>
 800cbae:	4652      	mov	r2, sl
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	4921      	ldr	r1, [pc, #132]	; (800cc38 <__kernel_rem_pio2+0x314>)
 800cbb4:	f000 fb40 	bl	800d238 <scalbn>
 800cbb8:	4625      	mov	r5, r4
 800cbba:	4606      	mov	r6, r0
 800cbbc:	460f      	mov	r7, r1
 800cbbe:	f04f 0a00 	mov.w	sl, #0
 800cbc2:	00e3      	lsls	r3, r4, #3
 800cbc4:	aa98      	add	r2, sp, #608	; 0x260
 800cbc6:	eb02 0803 	add.w	r8, r2, r3
 800cbca:	f8df b070 	ldr.w	fp, [pc, #112]	; 800cc3c <__kernel_rem_pio2+0x318>
 800cbce:	9306      	str	r3, [sp, #24]
 800cbd0:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800cbd4:	2d00      	cmp	r5, #0
 800cbd6:	f280 80d2 	bge.w	800cd7e <__kernel_rem_pio2+0x45a>
 800cbda:	2500      	movs	r5, #0
 800cbdc:	9a06      	ldr	r2, [sp, #24]
 800cbde:	ab98      	add	r3, sp, #608	; 0x260
 800cbe0:	189e      	adds	r6, r3, r2
 800cbe2:	3ea8      	subs	r6, #168	; 0xa8
 800cbe4:	1b63      	subs	r3, r4, r5
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	f2c0 80f9 	blt.w	800cdde <__kernel_rem_pio2+0x4ba>
 800cbec:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800cc48 <__kernel_rem_pio2+0x324>
 800cbf0:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800cbf4:	f04f 0a00 	mov.w	sl, #0
 800cbf8:	f04f 0b00 	mov.w	fp, #0
 800cbfc:	2700      	movs	r7, #0
 800cbfe:	e0e2      	b.n	800cdc6 <__kernel_rem_pio2+0x4a2>
 800cc00:	2302      	movs	r3, #2
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	e756      	b.n	800cab4 <__kernel_rem_pio2+0x190>
 800cc06:	ab0c      	add	r3, sp, #48	; 0x30
 800cc08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc0c:	b94c      	cbnz	r4, 800cc22 <__kernel_rem_pio2+0x2fe>
 800cc0e:	b12b      	cbz	r3, 800cc1c <__kernel_rem_pio2+0x2f8>
 800cc10:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cc14:	a80c      	add	r0, sp, #48	; 0x30
 800cc16:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	3201      	adds	r2, #1
 800cc1e:	461c      	mov	r4, r3
 800cc20:	e74f      	b.n	800cac2 <__kernel_rem_pio2+0x19e>
 800cc22:	1acb      	subs	r3, r1, r3
 800cc24:	a80c      	add	r0, sp, #48	; 0x30
 800cc26:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800cc2a:	4623      	mov	r3, r4
 800cc2c:	e7f6      	b.n	800cc1c <__kernel_rem_pio2+0x2f8>
 800cc2e:	bf00      	nop
 800cc30:	0800ef90 	.word	0x0800ef90
 800cc34:	40200000 	.word	0x40200000
 800cc38:	3ff00000 	.word	0x3ff00000
 800cc3c:	3e700000 	.word	0x3e700000
 800cc40:	41700000 	.word	0x41700000
 800cc44:	3fe00000 	.word	0x3fe00000
 800cc48:	0800ef48 	.word	0x0800ef48
 800cc4c:	1e7a      	subs	r2, r7, #1
 800cc4e:	ab0c      	add	r3, sp, #48	; 0x30
 800cc50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc54:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cc58:	a90c      	add	r1, sp, #48	; 0x30
 800cc5a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cc5e:	e73e      	b.n	800cade <__kernel_rem_pio2+0x1ba>
 800cc60:	1e7a      	subs	r2, r7, #1
 800cc62:	ab0c      	add	r3, sp, #48	; 0x30
 800cc64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc68:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cc6c:	e7f4      	b.n	800cc58 <__kernel_rem_pio2+0x334>
 800cc6e:	a90c      	add	r1, sp, #48	; 0x30
 800cc70:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cc74:	3b01      	subs	r3, #1
 800cc76:	430a      	orrs	r2, r1
 800cc78:	e78b      	b.n	800cb92 <__kernel_rem_pio2+0x26e>
 800cc7a:	3401      	adds	r4, #1
 800cc7c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cc80:	2a00      	cmp	r2, #0
 800cc82:	d0fa      	beq.n	800cc7a <__kernel_rem_pio2+0x356>
 800cc84:	ab98      	add	r3, sp, #608	; 0x260
 800cc86:	449b      	add	fp, r3
 800cc88:	9b07      	ldr	r3, [sp, #28]
 800cc8a:	1c7e      	adds	r6, r7, #1
 800cc8c:	19dd      	adds	r5, r3, r7
 800cc8e:	ab98      	add	r3, sp, #608	; 0x260
 800cc90:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800cc94:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800cc98:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800cc9c:	443c      	add	r4, r7
 800cc9e:	42b4      	cmp	r4, r6
 800cca0:	da04      	bge.n	800ccac <__kernel_rem_pio2+0x388>
 800cca2:	4627      	mov	r7, r4
 800cca4:	e6b1      	b.n	800ca0a <__kernel_rem_pio2+0xe6>
 800cca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cca8:	2401      	movs	r4, #1
 800ccaa:	e7e7      	b.n	800cc7c <__kernel_rem_pio2+0x358>
 800ccac:	f105 0308 	add.w	r3, r5, #8
 800ccb0:	9309      	str	r3, [sp, #36]	; 0x24
 800ccb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccb4:	2700      	movs	r7, #0
 800ccb6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ccba:	f7f3 fba3 	bl	8000404 <__aeabi_i2d>
 800ccbe:	f04f 0800 	mov.w	r8, #0
 800ccc2:	f04f 0900 	mov.w	r9, #0
 800ccc6:	9b08      	ldr	r3, [sp, #32]
 800ccc8:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800cccc:	3b08      	subs	r3, #8
 800ccce:	9300      	str	r3, [sp, #0]
 800ccd0:	f105 0310 	add.w	r3, r5, #16
 800ccd4:	9305      	str	r3, [sp, #20]
 800ccd6:	9b06      	ldr	r3, [sp, #24]
 800ccd8:	429f      	cmp	r7, r3
 800ccda:	dd04      	ble.n	800cce6 <__kernel_rem_pio2+0x3c2>
 800ccdc:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800cce0:	3601      	adds	r6, #1
 800cce2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cce4:	e7db      	b.n	800cc9e <__kernel_rem_pio2+0x37a>
 800cce6:	9905      	ldr	r1, [sp, #20]
 800cce8:	9d00      	ldr	r5, [sp, #0]
 800ccea:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800ccee:	9105      	str	r1, [sp, #20]
 800ccf0:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800ccf4:	9500      	str	r5, [sp, #0]
 800ccf6:	f7f3 fbef 	bl	80004d8 <__aeabi_dmul>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	4640      	mov	r0, r8
 800cd00:	4649      	mov	r1, r9
 800cd02:	f7f3 fa33 	bl	800016c <__adddf3>
 800cd06:	3701      	adds	r7, #1
 800cd08:	4680      	mov	r8, r0
 800cd0a:	4689      	mov	r9, r1
 800cd0c:	e7e3      	b.n	800ccd6 <__kernel_rem_pio2+0x3b2>
 800cd0e:	3c01      	subs	r4, #1
 800cd10:	e745      	b.n	800cb9e <__kernel_rem_pio2+0x27a>
 800cd12:	f1ca 0200 	rsb	r2, sl, #0
 800cd16:	4640      	mov	r0, r8
 800cd18:	4649      	mov	r1, r9
 800cd1a:	f000 fa8d 	bl	800d238 <scalbn>
 800cd1e:	2200      	movs	r2, #0
 800cd20:	4ba3      	ldr	r3, [pc, #652]	; (800cfb0 <__kernel_rem_pio2+0x68c>)
 800cd22:	4604      	mov	r4, r0
 800cd24:	460d      	mov	r5, r1
 800cd26:	f7f3 fe5d 	bl	80009e4 <__aeabi_dcmpge>
 800cd2a:	b1f8      	cbz	r0, 800cd6c <__kernel_rem_pio2+0x448>
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	4ba1      	ldr	r3, [pc, #644]	; (800cfb4 <__kernel_rem_pio2+0x690>)
 800cd30:	4620      	mov	r0, r4
 800cd32:	4629      	mov	r1, r5
 800cd34:	f7f3 fbd0 	bl	80004d8 <__aeabi_dmul>
 800cd38:	f7f3 fe68 	bl	8000a0c <__aeabi_d2iz>
 800cd3c:	4606      	mov	r6, r0
 800cd3e:	f7f3 fb61 	bl	8000404 <__aeabi_i2d>
 800cd42:	2200      	movs	r2, #0
 800cd44:	4b9a      	ldr	r3, [pc, #616]	; (800cfb0 <__kernel_rem_pio2+0x68c>)
 800cd46:	f7f3 fbc7 	bl	80004d8 <__aeabi_dmul>
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	4629      	mov	r1, r5
 800cd50:	4620      	mov	r0, r4
 800cd52:	f7f3 fa09 	bl	8000168 <__aeabi_dsub>
 800cd56:	f7f3 fe59 	bl	8000a0c <__aeabi_d2iz>
 800cd5a:	1c7c      	adds	r4, r7, #1
 800cd5c:	ab0c      	add	r3, sp, #48	; 0x30
 800cd5e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800cd62:	f10a 0a18 	add.w	sl, sl, #24
 800cd66:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800cd6a:	e720      	b.n	800cbae <__kernel_rem_pio2+0x28a>
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	4629      	mov	r1, r5
 800cd70:	f7f3 fe4c 	bl	8000a0c <__aeabi_d2iz>
 800cd74:	ab0c      	add	r3, sp, #48	; 0x30
 800cd76:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800cd7a:	463c      	mov	r4, r7
 800cd7c:	e717      	b.n	800cbae <__kernel_rem_pio2+0x28a>
 800cd7e:	ab0c      	add	r3, sp, #48	; 0x30
 800cd80:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd84:	f7f3 fb3e 	bl	8000404 <__aeabi_i2d>
 800cd88:	4632      	mov	r2, r6
 800cd8a:	463b      	mov	r3, r7
 800cd8c:	f7f3 fba4 	bl	80004d8 <__aeabi_dmul>
 800cd90:	4652      	mov	r2, sl
 800cd92:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800cd96:	465b      	mov	r3, fp
 800cd98:	4630      	mov	r0, r6
 800cd9a:	4639      	mov	r1, r7
 800cd9c:	f7f3 fb9c 	bl	80004d8 <__aeabi_dmul>
 800cda0:	3d01      	subs	r5, #1
 800cda2:	4606      	mov	r6, r0
 800cda4:	460f      	mov	r7, r1
 800cda6:	e715      	b.n	800cbd4 <__kernel_rem_pio2+0x2b0>
 800cda8:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800cdac:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800cdb0:	f7f3 fb92 	bl	80004d8 <__aeabi_dmul>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	4650      	mov	r0, sl
 800cdba:	4659      	mov	r1, fp
 800cdbc:	f7f3 f9d6 	bl	800016c <__adddf3>
 800cdc0:	4682      	mov	sl, r0
 800cdc2:	468b      	mov	fp, r1
 800cdc4:	3701      	adds	r7, #1
 800cdc6:	9b02      	ldr	r3, [sp, #8]
 800cdc8:	429f      	cmp	r7, r3
 800cdca:	dc01      	bgt.n	800cdd0 <__kernel_rem_pio2+0x4ac>
 800cdcc:	42bd      	cmp	r5, r7
 800cdce:	daeb      	bge.n	800cda8 <__kernel_rem_pio2+0x484>
 800cdd0:	ab48      	add	r3, sp, #288	; 0x120
 800cdd2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cdd6:	e9c3 ab00 	strd	sl, fp, [r3]
 800cdda:	3501      	adds	r5, #1
 800cddc:	e702      	b.n	800cbe4 <__kernel_rem_pio2+0x2c0>
 800cdde:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800cde0:	2b03      	cmp	r3, #3
 800cde2:	d86c      	bhi.n	800cebe <__kernel_rem_pio2+0x59a>
 800cde4:	e8df f003 	tbb	[pc, r3]
 800cde8:	022f2f59 	.word	0x022f2f59
 800cdec:	9a06      	ldr	r2, [sp, #24]
 800cdee:	ab48      	add	r3, sp, #288	; 0x120
 800cdf0:	189d      	adds	r5, r3, r2
 800cdf2:	46aa      	mov	sl, r5
 800cdf4:	46a3      	mov	fp, r4
 800cdf6:	f1bb 0f00 	cmp.w	fp, #0
 800cdfa:	f300 8087 	bgt.w	800cf0c <__kernel_rem_pio2+0x5e8>
 800cdfe:	46a2      	mov	sl, r4
 800ce00:	f1ba 0f01 	cmp.w	sl, #1
 800ce04:	f300 809f 	bgt.w	800cf46 <__kernel_rem_pio2+0x622>
 800ce08:	2700      	movs	r7, #0
 800ce0a:	463e      	mov	r6, r7
 800ce0c:	9d06      	ldr	r5, [sp, #24]
 800ce0e:	ab48      	add	r3, sp, #288	; 0x120
 800ce10:	3508      	adds	r5, #8
 800ce12:	441d      	add	r5, r3
 800ce14:	2c01      	cmp	r4, #1
 800ce16:	f300 80b3 	bgt.w	800cf80 <__kernel_rem_pio2+0x65c>
 800ce1a:	9b00      	ldr	r3, [sp, #0]
 800ce1c:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800ce1e:	9849      	ldr	r0, [sp, #292]	; 0x124
 800ce20:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800ce22:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f040 80b5 	bne.w	800cf94 <__kernel_rem_pio2+0x670>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	462a      	mov	r2, r5
 800ce2e:	9804      	ldr	r0, [sp, #16]
 800ce30:	e9c0 2300 	strd	r2, r3, [r0]
 800ce34:	4622      	mov	r2, r4
 800ce36:	460b      	mov	r3, r1
 800ce38:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ce3c:	463a      	mov	r2, r7
 800ce3e:	4633      	mov	r3, r6
 800ce40:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ce44:	e03b      	b.n	800cebe <__kernel_rem_pio2+0x59a>
 800ce46:	f04f 0c00 	mov.w	ip, #0
 800ce4a:	4626      	mov	r6, r4
 800ce4c:	4667      	mov	r7, ip
 800ce4e:	9d06      	ldr	r5, [sp, #24]
 800ce50:	ab48      	add	r3, sp, #288	; 0x120
 800ce52:	3508      	adds	r5, #8
 800ce54:	441d      	add	r5, r3
 800ce56:	2e00      	cmp	r6, #0
 800ce58:	da42      	bge.n	800cee0 <__kernel_rem_pio2+0x5bc>
 800ce5a:	9b00      	ldr	r3, [sp, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d049      	beq.n	800cef4 <__kernel_rem_pio2+0x5d0>
 800ce60:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800ce64:	4662      	mov	r2, ip
 800ce66:	460b      	mov	r3, r1
 800ce68:	9904      	ldr	r1, [sp, #16]
 800ce6a:	2601      	movs	r6, #1
 800ce6c:	e9c1 2300 	strd	r2, r3, [r1]
 800ce70:	a948      	add	r1, sp, #288	; 0x120
 800ce72:	463b      	mov	r3, r7
 800ce74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce78:	f7f3 f976 	bl	8000168 <__aeabi_dsub>
 800ce7c:	4684      	mov	ip, r0
 800ce7e:	460f      	mov	r7, r1
 800ce80:	ad48      	add	r5, sp, #288	; 0x120
 800ce82:	42b4      	cmp	r4, r6
 800ce84:	da38      	bge.n	800cef8 <__kernel_rem_pio2+0x5d4>
 800ce86:	9b00      	ldr	r3, [sp, #0]
 800ce88:	b10b      	cbz	r3, 800ce8e <__kernel_rem_pio2+0x56a>
 800ce8a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ce8e:	4662      	mov	r2, ip
 800ce90:	463b      	mov	r3, r7
 800ce92:	9904      	ldr	r1, [sp, #16]
 800ce94:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800ce98:	e011      	b.n	800cebe <__kernel_rem_pio2+0x59a>
 800ce9a:	2700      	movs	r7, #0
 800ce9c:	463d      	mov	r5, r7
 800ce9e:	9b06      	ldr	r3, [sp, #24]
 800cea0:	aa98      	add	r2, sp, #608	; 0x260
 800cea2:	4413      	add	r3, r2
 800cea4:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800cea8:	2c00      	cmp	r4, #0
 800ceaa:	da0f      	bge.n	800cecc <__kernel_rem_pio2+0x5a8>
 800ceac:	9b00      	ldr	r3, [sp, #0]
 800ceae:	b10b      	cbz	r3, 800ceb4 <__kernel_rem_pio2+0x590>
 800ceb0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800ceb4:	463a      	mov	r2, r7
 800ceb6:	462b      	mov	r3, r5
 800ceb8:	9904      	ldr	r1, [sp, #16]
 800ceba:	e9c1 2300 	strd	r2, r3, [r1]
 800cebe:	9b05      	ldr	r3, [sp, #20]
 800cec0:	f003 0007 	and.w	r0, r3, #7
 800cec4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800cec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cecc:	4638      	mov	r0, r7
 800cece:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ced2:	4629      	mov	r1, r5
 800ced4:	f7f3 f94a 	bl	800016c <__adddf3>
 800ced8:	3c01      	subs	r4, #1
 800ceda:	4607      	mov	r7, r0
 800cedc:	460d      	mov	r5, r1
 800cede:	e7e3      	b.n	800cea8 <__kernel_rem_pio2+0x584>
 800cee0:	4660      	mov	r0, ip
 800cee2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800cee6:	4639      	mov	r1, r7
 800cee8:	f7f3 f940 	bl	800016c <__adddf3>
 800ceec:	3e01      	subs	r6, #1
 800ceee:	4684      	mov	ip, r0
 800cef0:	460f      	mov	r7, r1
 800cef2:	e7b0      	b.n	800ce56 <__kernel_rem_pio2+0x532>
 800cef4:	4639      	mov	r1, r7
 800cef6:	e7b5      	b.n	800ce64 <__kernel_rem_pio2+0x540>
 800cef8:	4660      	mov	r0, ip
 800cefa:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800cefe:	4639      	mov	r1, r7
 800cf00:	f7f3 f934 	bl	800016c <__adddf3>
 800cf04:	3601      	adds	r6, #1
 800cf06:	4684      	mov	ip, r0
 800cf08:	460f      	mov	r7, r1
 800cf0a:	e7ba      	b.n	800ce82 <__kernel_rem_pio2+0x55e>
 800cf0c:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800cf10:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800cf14:	4640      	mov	r0, r8
 800cf16:	4649      	mov	r1, r9
 800cf18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf1c:	f7f3 f926 	bl	800016c <__adddf3>
 800cf20:	4602      	mov	r2, r0
 800cf22:	460b      	mov	r3, r1
 800cf24:	4606      	mov	r6, r0
 800cf26:	460f      	mov	r7, r1
 800cf28:	4640      	mov	r0, r8
 800cf2a:	4649      	mov	r1, r9
 800cf2c:	f7f3 f91c 	bl	8000168 <__aeabi_dsub>
 800cf30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf34:	f7f3 f91a 	bl	800016c <__adddf3>
 800cf38:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cf3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cf40:	e9ca 6700 	strd	r6, r7, [sl]
 800cf44:	e757      	b.n	800cdf6 <__kernel_rem_pio2+0x4d2>
 800cf46:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800cf4a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800cf4e:	4630      	mov	r0, r6
 800cf50:	4639      	mov	r1, r7
 800cf52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf56:	f7f3 f909 	bl	800016c <__adddf3>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	460b      	mov	r3, r1
 800cf5e:	4680      	mov	r8, r0
 800cf60:	4689      	mov	r9, r1
 800cf62:	4630      	mov	r0, r6
 800cf64:	4639      	mov	r1, r7
 800cf66:	f7f3 f8ff 	bl	8000168 <__aeabi_dsub>
 800cf6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf6e:	f7f3 f8fd 	bl	800016c <__adddf3>
 800cf72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf76:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800cf7a:	e9c5 8900 	strd	r8, r9, [r5]
 800cf7e:	e73f      	b.n	800ce00 <__kernel_rem_pio2+0x4dc>
 800cf80:	4638      	mov	r0, r7
 800cf82:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800cf86:	4631      	mov	r1, r6
 800cf88:	f7f3 f8f0 	bl	800016c <__adddf3>
 800cf8c:	3c01      	subs	r4, #1
 800cf8e:	4607      	mov	r7, r0
 800cf90:	460e      	mov	r6, r1
 800cf92:	e73f      	b.n	800ce14 <__kernel_rem_pio2+0x4f0>
 800cf94:	9b04      	ldr	r3, [sp, #16]
 800cf96:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cf9a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800cf9e:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800cfa2:	601d      	str	r5, [r3, #0]
 800cfa4:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800cfa8:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800cfac:	615e      	str	r6, [r3, #20]
 800cfae:	e786      	b.n	800cebe <__kernel_rem_pio2+0x59a>
 800cfb0:	41700000 	.word	0x41700000
 800cfb4:	3e700000 	.word	0x3e700000

0800cfb8 <__kernel_sin>:
 800cfb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfbc:	b086      	sub	sp, #24
 800cfbe:	e9cd 2300 	strd	r2, r3, [sp]
 800cfc2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cfc6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cfca:	4682      	mov	sl, r0
 800cfcc:	460c      	mov	r4, r1
 800cfce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800cfd0:	da03      	bge.n	800cfda <__kernel_sin+0x22>
 800cfd2:	f7f3 fd1b 	bl	8000a0c <__aeabi_d2iz>
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	d050      	beq.n	800d07c <__kernel_sin+0xc4>
 800cfda:	4652      	mov	r2, sl
 800cfdc:	4623      	mov	r3, r4
 800cfde:	4650      	mov	r0, sl
 800cfe0:	4621      	mov	r1, r4
 800cfe2:	f7f3 fa79 	bl	80004d8 <__aeabi_dmul>
 800cfe6:	4606      	mov	r6, r0
 800cfe8:	460f      	mov	r7, r1
 800cfea:	4602      	mov	r2, r0
 800cfec:	460b      	mov	r3, r1
 800cfee:	4650      	mov	r0, sl
 800cff0:	4621      	mov	r1, r4
 800cff2:	f7f3 fa71 	bl	80004d8 <__aeabi_dmul>
 800cff6:	a33e      	add	r3, pc, #248	; (adr r3, 800d0f0 <__kernel_sin+0x138>)
 800cff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffc:	4680      	mov	r8, r0
 800cffe:	4689      	mov	r9, r1
 800d000:	4630      	mov	r0, r6
 800d002:	4639      	mov	r1, r7
 800d004:	f7f3 fa68 	bl	80004d8 <__aeabi_dmul>
 800d008:	a33b      	add	r3, pc, #236	; (adr r3, 800d0f8 <__kernel_sin+0x140>)
 800d00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00e:	f7f3 f8ab 	bl	8000168 <__aeabi_dsub>
 800d012:	4632      	mov	r2, r6
 800d014:	463b      	mov	r3, r7
 800d016:	f7f3 fa5f 	bl	80004d8 <__aeabi_dmul>
 800d01a:	a339      	add	r3, pc, #228	; (adr r3, 800d100 <__kernel_sin+0x148>)
 800d01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d020:	f7f3 f8a4 	bl	800016c <__adddf3>
 800d024:	4632      	mov	r2, r6
 800d026:	463b      	mov	r3, r7
 800d028:	f7f3 fa56 	bl	80004d8 <__aeabi_dmul>
 800d02c:	a336      	add	r3, pc, #216	; (adr r3, 800d108 <__kernel_sin+0x150>)
 800d02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d032:	f7f3 f899 	bl	8000168 <__aeabi_dsub>
 800d036:	4632      	mov	r2, r6
 800d038:	463b      	mov	r3, r7
 800d03a:	f7f3 fa4d 	bl	80004d8 <__aeabi_dmul>
 800d03e:	a334      	add	r3, pc, #208	; (adr r3, 800d110 <__kernel_sin+0x158>)
 800d040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d044:	f7f3 f892 	bl	800016c <__adddf3>
 800d048:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d04c:	b9dd      	cbnz	r5, 800d086 <__kernel_sin+0xce>
 800d04e:	4602      	mov	r2, r0
 800d050:	460b      	mov	r3, r1
 800d052:	4630      	mov	r0, r6
 800d054:	4639      	mov	r1, r7
 800d056:	f7f3 fa3f 	bl	80004d8 <__aeabi_dmul>
 800d05a:	a32f      	add	r3, pc, #188	; (adr r3, 800d118 <__kernel_sin+0x160>)
 800d05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d060:	f7f3 f882 	bl	8000168 <__aeabi_dsub>
 800d064:	4642      	mov	r2, r8
 800d066:	464b      	mov	r3, r9
 800d068:	f7f3 fa36 	bl	80004d8 <__aeabi_dmul>
 800d06c:	4602      	mov	r2, r0
 800d06e:	460b      	mov	r3, r1
 800d070:	4650      	mov	r0, sl
 800d072:	4621      	mov	r1, r4
 800d074:	f7f3 f87a 	bl	800016c <__adddf3>
 800d078:	4682      	mov	sl, r0
 800d07a:	460c      	mov	r4, r1
 800d07c:	4650      	mov	r0, sl
 800d07e:	4621      	mov	r1, r4
 800d080:	b006      	add	sp, #24
 800d082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d086:	2200      	movs	r2, #0
 800d088:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d08c:	4b24      	ldr	r3, [pc, #144]	; (800d120 <__kernel_sin+0x168>)
 800d08e:	f7f3 fa23 	bl	80004d8 <__aeabi_dmul>
 800d092:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d096:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d09a:	4640      	mov	r0, r8
 800d09c:	4649      	mov	r1, r9
 800d09e:	f7f3 fa1b 	bl	80004d8 <__aeabi_dmul>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d0aa:	f7f3 f85d 	bl	8000168 <__aeabi_dsub>
 800d0ae:	4632      	mov	r2, r6
 800d0b0:	463b      	mov	r3, r7
 800d0b2:	f7f3 fa11 	bl	80004d8 <__aeabi_dmul>
 800d0b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0ba:	f7f3 f855 	bl	8000168 <__aeabi_dsub>
 800d0be:	a316      	add	r3, pc, #88	; (adr r3, 800d118 <__kernel_sin+0x160>)
 800d0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c4:	4606      	mov	r6, r0
 800d0c6:	460f      	mov	r7, r1
 800d0c8:	4640      	mov	r0, r8
 800d0ca:	4649      	mov	r1, r9
 800d0cc:	f7f3 fa04 	bl	80004d8 <__aeabi_dmul>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	4630      	mov	r0, r6
 800d0d6:	4639      	mov	r1, r7
 800d0d8:	f7f3 f848 	bl	800016c <__adddf3>
 800d0dc:	4602      	mov	r2, r0
 800d0de:	460b      	mov	r3, r1
 800d0e0:	4650      	mov	r0, sl
 800d0e2:	4621      	mov	r1, r4
 800d0e4:	f7f3 f840 	bl	8000168 <__aeabi_dsub>
 800d0e8:	e7c6      	b.n	800d078 <__kernel_sin+0xc0>
 800d0ea:	bf00      	nop
 800d0ec:	f3af 8000 	nop.w
 800d0f0:	5acfd57c 	.word	0x5acfd57c
 800d0f4:	3de5d93a 	.word	0x3de5d93a
 800d0f8:	8a2b9ceb 	.word	0x8a2b9ceb
 800d0fc:	3e5ae5e6 	.word	0x3e5ae5e6
 800d100:	57b1fe7d 	.word	0x57b1fe7d
 800d104:	3ec71de3 	.word	0x3ec71de3
 800d108:	19c161d5 	.word	0x19c161d5
 800d10c:	3f2a01a0 	.word	0x3f2a01a0
 800d110:	1110f8a6 	.word	0x1110f8a6
 800d114:	3f811111 	.word	0x3f811111
 800d118:	55555549 	.word	0x55555549
 800d11c:	3fc55555 	.word	0x3fc55555
 800d120:	3fe00000 	.word	0x3fe00000

0800d124 <fabs>:
 800d124:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d128:	4619      	mov	r1, r3
 800d12a:	4770      	bx	lr
 800d12c:	0000      	movs	r0, r0
	...

0800d130 <floor>:
 800d130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d134:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800d138:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800d13c:	2e13      	cmp	r6, #19
 800d13e:	4607      	mov	r7, r0
 800d140:	460b      	mov	r3, r1
 800d142:	460c      	mov	r4, r1
 800d144:	4605      	mov	r5, r0
 800d146:	dc35      	bgt.n	800d1b4 <floor+0x84>
 800d148:	2e00      	cmp	r6, #0
 800d14a:	da16      	bge.n	800d17a <floor+0x4a>
 800d14c:	a336      	add	r3, pc, #216	; (adr r3, 800d228 <floor+0xf8>)
 800d14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d152:	f7f3 f80b 	bl	800016c <__adddf3>
 800d156:	2200      	movs	r2, #0
 800d158:	2300      	movs	r3, #0
 800d15a:	f7f3 fc4d 	bl	80009f8 <__aeabi_dcmpgt>
 800d15e:	b148      	cbz	r0, 800d174 <floor+0x44>
 800d160:	2c00      	cmp	r4, #0
 800d162:	da5b      	bge.n	800d21c <floor+0xec>
 800d164:	2500      	movs	r5, #0
 800d166:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d16a:	4a31      	ldr	r2, [pc, #196]	; (800d230 <floor+0x100>)
 800d16c:	433b      	orrs	r3, r7
 800d16e:	42ab      	cmp	r3, r5
 800d170:	bf18      	it	ne
 800d172:	4614      	movne	r4, r2
 800d174:	4623      	mov	r3, r4
 800d176:	462f      	mov	r7, r5
 800d178:	e026      	b.n	800d1c8 <floor+0x98>
 800d17a:	4a2e      	ldr	r2, [pc, #184]	; (800d234 <floor+0x104>)
 800d17c:	fa42 f806 	asr.w	r8, r2, r6
 800d180:	ea01 0208 	and.w	r2, r1, r8
 800d184:	4302      	orrs	r2, r0
 800d186:	d01f      	beq.n	800d1c8 <floor+0x98>
 800d188:	a327      	add	r3, pc, #156	; (adr r3, 800d228 <floor+0xf8>)
 800d18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18e:	f7f2 ffed 	bl	800016c <__adddf3>
 800d192:	2200      	movs	r2, #0
 800d194:	2300      	movs	r3, #0
 800d196:	f7f3 fc2f 	bl	80009f8 <__aeabi_dcmpgt>
 800d19a:	2800      	cmp	r0, #0
 800d19c:	d0ea      	beq.n	800d174 <floor+0x44>
 800d19e:	2c00      	cmp	r4, #0
 800d1a0:	bfbe      	ittt	lt
 800d1a2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d1a6:	fa43 f606 	asrlt.w	r6, r3, r6
 800d1aa:	19a4      	addlt	r4, r4, r6
 800d1ac:	ea24 0408 	bic.w	r4, r4, r8
 800d1b0:	2500      	movs	r5, #0
 800d1b2:	e7df      	b.n	800d174 <floor+0x44>
 800d1b4:	2e33      	cmp	r6, #51	; 0x33
 800d1b6:	dd0b      	ble.n	800d1d0 <floor+0xa0>
 800d1b8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d1bc:	d104      	bne.n	800d1c8 <floor+0x98>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	f7f2 ffd4 	bl	800016c <__adddf3>
 800d1c4:	4607      	mov	r7, r0
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	4638      	mov	r0, r7
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1d4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800d1d8:	fa22 f808 	lsr.w	r8, r2, r8
 800d1dc:	ea18 0f00 	tst.w	r8, r0
 800d1e0:	d0f2      	beq.n	800d1c8 <floor+0x98>
 800d1e2:	a311      	add	r3, pc, #68	; (adr r3, 800d228 <floor+0xf8>)
 800d1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e8:	f7f2 ffc0 	bl	800016c <__adddf3>
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	f7f3 fc02 	bl	80009f8 <__aeabi_dcmpgt>
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	d0bd      	beq.n	800d174 <floor+0x44>
 800d1f8:	2c00      	cmp	r4, #0
 800d1fa:	da02      	bge.n	800d202 <floor+0xd2>
 800d1fc:	2e14      	cmp	r6, #20
 800d1fe:	d103      	bne.n	800d208 <floor+0xd8>
 800d200:	3401      	adds	r4, #1
 800d202:	ea25 0508 	bic.w	r5, r5, r8
 800d206:	e7b5      	b.n	800d174 <floor+0x44>
 800d208:	2301      	movs	r3, #1
 800d20a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d20e:	fa03 f606 	lsl.w	r6, r3, r6
 800d212:	4435      	add	r5, r6
 800d214:	42bd      	cmp	r5, r7
 800d216:	bf38      	it	cc
 800d218:	18e4      	addcc	r4, r4, r3
 800d21a:	e7f2      	b.n	800d202 <floor+0xd2>
 800d21c:	2500      	movs	r5, #0
 800d21e:	462c      	mov	r4, r5
 800d220:	e7a8      	b.n	800d174 <floor+0x44>
 800d222:	bf00      	nop
 800d224:	f3af 8000 	nop.w
 800d228:	8800759c 	.word	0x8800759c
 800d22c:	7e37e43c 	.word	0x7e37e43c
 800d230:	bff00000 	.word	0xbff00000
 800d234:	000fffff 	.word	0x000fffff

0800d238 <scalbn>:
 800d238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d23a:	4616      	mov	r6, r2
 800d23c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d240:	4604      	mov	r4, r0
 800d242:	460d      	mov	r5, r1
 800d244:	460b      	mov	r3, r1
 800d246:	b982      	cbnz	r2, 800d26a <scalbn+0x32>
 800d248:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d24c:	4303      	orrs	r3, r0
 800d24e:	d034      	beq.n	800d2ba <scalbn+0x82>
 800d250:	4b2d      	ldr	r3, [pc, #180]	; (800d308 <scalbn+0xd0>)
 800d252:	2200      	movs	r2, #0
 800d254:	f7f3 f940 	bl	80004d8 <__aeabi_dmul>
 800d258:	4b2c      	ldr	r3, [pc, #176]	; (800d30c <scalbn+0xd4>)
 800d25a:	4604      	mov	r4, r0
 800d25c:	429e      	cmp	r6, r3
 800d25e:	460d      	mov	r5, r1
 800d260:	da0d      	bge.n	800d27e <scalbn+0x46>
 800d262:	a325      	add	r3, pc, #148	; (adr r3, 800d2f8 <scalbn+0xc0>)
 800d264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d268:	e01c      	b.n	800d2a4 <scalbn+0x6c>
 800d26a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800d26e:	42ba      	cmp	r2, r7
 800d270:	d109      	bne.n	800d286 <scalbn+0x4e>
 800d272:	4602      	mov	r2, r0
 800d274:	f7f2 ff7a 	bl	800016c <__adddf3>
 800d278:	4604      	mov	r4, r0
 800d27a:	460d      	mov	r5, r1
 800d27c:	e01d      	b.n	800d2ba <scalbn+0x82>
 800d27e:	460b      	mov	r3, r1
 800d280:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d284:	3a36      	subs	r2, #54	; 0x36
 800d286:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d28a:	4432      	add	r2, r6
 800d28c:	428a      	cmp	r2, r1
 800d28e:	dd0c      	ble.n	800d2aa <scalbn+0x72>
 800d290:	4622      	mov	r2, r4
 800d292:	462b      	mov	r3, r5
 800d294:	a11a      	add	r1, pc, #104	; (adr r1, 800d300 <scalbn+0xc8>)
 800d296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d29a:	f000 f83b 	bl	800d314 <copysign>
 800d29e:	a318      	add	r3, pc, #96	; (adr r3, 800d300 <scalbn+0xc8>)
 800d2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a4:	f7f3 f918 	bl	80004d8 <__aeabi_dmul>
 800d2a8:	e7e6      	b.n	800d278 <scalbn+0x40>
 800d2aa:	2a00      	cmp	r2, #0
 800d2ac:	dd08      	ble.n	800d2c0 <scalbn+0x88>
 800d2ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d2b2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d2b6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d2ba:	4620      	mov	r0, r4
 800d2bc:	4629      	mov	r1, r5
 800d2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2c0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d2c4:	da0b      	bge.n	800d2de <scalbn+0xa6>
 800d2c6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d2ca:	429e      	cmp	r6, r3
 800d2cc:	4622      	mov	r2, r4
 800d2ce:	462b      	mov	r3, r5
 800d2d0:	dce0      	bgt.n	800d294 <scalbn+0x5c>
 800d2d2:	a109      	add	r1, pc, #36	; (adr r1, 800d2f8 <scalbn+0xc0>)
 800d2d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2d8:	f000 f81c 	bl	800d314 <copysign>
 800d2dc:	e7c1      	b.n	800d262 <scalbn+0x2a>
 800d2de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d2e2:	3236      	adds	r2, #54	; 0x36
 800d2e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d2e8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	4629      	mov	r1, r5
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	4b07      	ldr	r3, [pc, #28]	; (800d310 <scalbn+0xd8>)
 800d2f4:	e7d6      	b.n	800d2a4 <scalbn+0x6c>
 800d2f6:	bf00      	nop
 800d2f8:	c2f8f359 	.word	0xc2f8f359
 800d2fc:	01a56e1f 	.word	0x01a56e1f
 800d300:	8800759c 	.word	0x8800759c
 800d304:	7e37e43c 	.word	0x7e37e43c
 800d308:	43500000 	.word	0x43500000
 800d30c:	ffff3cb0 	.word	0xffff3cb0
 800d310:	3c900000 	.word	0x3c900000

0800d314 <copysign>:
 800d314:	b530      	push	{r4, r5, lr}
 800d316:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d31a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d31e:	ea42 0503 	orr.w	r5, r2, r3
 800d322:	4629      	mov	r1, r5
 800d324:	bd30      	pop	{r4, r5, pc}

0800d326 <abort>:
 800d326:	b508      	push	{r3, lr}
 800d328:	2006      	movs	r0, #6
 800d32a:	f000 f8ed 	bl	800d508 <raise>
 800d32e:	2001      	movs	r0, #1
 800d330:	f7f9 fd1b 	bl	8006d6a <_exit>

0800d334 <__errno>:
 800d334:	4b01      	ldr	r3, [pc, #4]	; (800d33c <__errno+0x8>)
 800d336:	6818      	ldr	r0, [r3, #0]
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	20000044 	.word	0x20000044

0800d340 <__libc_init_array>:
 800d340:	b570      	push	{r4, r5, r6, lr}
 800d342:	2500      	movs	r5, #0
 800d344:	4e0c      	ldr	r6, [pc, #48]	; (800d378 <__libc_init_array+0x38>)
 800d346:	4c0d      	ldr	r4, [pc, #52]	; (800d37c <__libc_init_array+0x3c>)
 800d348:	1ba4      	subs	r4, r4, r6
 800d34a:	10a4      	asrs	r4, r4, #2
 800d34c:	42a5      	cmp	r5, r4
 800d34e:	d109      	bne.n	800d364 <__libc_init_array+0x24>
 800d350:	f000 fffa 	bl	800e348 <_init>
 800d354:	2500      	movs	r5, #0
 800d356:	4e0a      	ldr	r6, [pc, #40]	; (800d380 <__libc_init_array+0x40>)
 800d358:	4c0a      	ldr	r4, [pc, #40]	; (800d384 <__libc_init_array+0x44>)
 800d35a:	1ba4      	subs	r4, r4, r6
 800d35c:	10a4      	asrs	r4, r4, #2
 800d35e:	42a5      	cmp	r5, r4
 800d360:	d105      	bne.n	800d36e <__libc_init_array+0x2e>
 800d362:	bd70      	pop	{r4, r5, r6, pc}
 800d364:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d368:	4798      	blx	r3
 800d36a:	3501      	adds	r5, #1
 800d36c:	e7ee      	b.n	800d34c <__libc_init_array+0xc>
 800d36e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d372:	4798      	blx	r3
 800d374:	3501      	adds	r5, #1
 800d376:	e7f2      	b.n	800d35e <__libc_init_array+0x1e>
 800d378:	0800f038 	.word	0x0800f038
 800d37c:	0800f038 	.word	0x0800f038
 800d380:	0800f038 	.word	0x0800f038
 800d384:	0800f040 	.word	0x0800f040

0800d388 <memcpy>:
 800d388:	b510      	push	{r4, lr}
 800d38a:	1e43      	subs	r3, r0, #1
 800d38c:	440a      	add	r2, r1
 800d38e:	4291      	cmp	r1, r2
 800d390:	d100      	bne.n	800d394 <memcpy+0xc>
 800d392:	bd10      	pop	{r4, pc}
 800d394:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d398:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d39c:	e7f7      	b.n	800d38e <memcpy+0x6>

0800d39e <memset>:
 800d39e:	4603      	mov	r3, r0
 800d3a0:	4402      	add	r2, r0
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d100      	bne.n	800d3a8 <memset+0xa>
 800d3a6:	4770      	bx	lr
 800d3a8:	f803 1b01 	strb.w	r1, [r3], #1
 800d3ac:	e7f9      	b.n	800d3a2 <memset+0x4>
	...

0800d3b0 <iprintf>:
 800d3b0:	b40f      	push	{r0, r1, r2, r3}
 800d3b2:	4b0a      	ldr	r3, [pc, #40]	; (800d3dc <iprintf+0x2c>)
 800d3b4:	b513      	push	{r0, r1, r4, lr}
 800d3b6:	681c      	ldr	r4, [r3, #0]
 800d3b8:	b124      	cbz	r4, 800d3c4 <iprintf+0x14>
 800d3ba:	69a3      	ldr	r3, [r4, #24]
 800d3bc:	b913      	cbnz	r3, 800d3c4 <iprintf+0x14>
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f000 fa6e 	bl	800d8a0 <__sinit>
 800d3c4:	ab05      	add	r3, sp, #20
 800d3c6:	9a04      	ldr	r2, [sp, #16]
 800d3c8:	68a1      	ldr	r1, [r4, #8]
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	9301      	str	r3, [sp, #4]
 800d3ce:	f000 fc49 	bl	800dc64 <_vfiprintf_r>
 800d3d2:	b002      	add	sp, #8
 800d3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3d8:	b004      	add	sp, #16
 800d3da:	4770      	bx	lr
 800d3dc:	20000044 	.word	0x20000044

0800d3e0 <_puts_r>:
 800d3e0:	b570      	push	{r4, r5, r6, lr}
 800d3e2:	460e      	mov	r6, r1
 800d3e4:	4605      	mov	r5, r0
 800d3e6:	b118      	cbz	r0, 800d3f0 <_puts_r+0x10>
 800d3e8:	6983      	ldr	r3, [r0, #24]
 800d3ea:	b90b      	cbnz	r3, 800d3f0 <_puts_r+0x10>
 800d3ec:	f000 fa58 	bl	800d8a0 <__sinit>
 800d3f0:	69ab      	ldr	r3, [r5, #24]
 800d3f2:	68ac      	ldr	r4, [r5, #8]
 800d3f4:	b913      	cbnz	r3, 800d3fc <_puts_r+0x1c>
 800d3f6:	4628      	mov	r0, r5
 800d3f8:	f000 fa52 	bl	800d8a0 <__sinit>
 800d3fc:	4b23      	ldr	r3, [pc, #140]	; (800d48c <_puts_r+0xac>)
 800d3fe:	429c      	cmp	r4, r3
 800d400:	d117      	bne.n	800d432 <_puts_r+0x52>
 800d402:	686c      	ldr	r4, [r5, #4]
 800d404:	89a3      	ldrh	r3, [r4, #12]
 800d406:	071b      	lsls	r3, r3, #28
 800d408:	d51d      	bpl.n	800d446 <_puts_r+0x66>
 800d40a:	6923      	ldr	r3, [r4, #16]
 800d40c:	b1db      	cbz	r3, 800d446 <_puts_r+0x66>
 800d40e:	3e01      	subs	r6, #1
 800d410:	68a3      	ldr	r3, [r4, #8]
 800d412:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d416:	3b01      	subs	r3, #1
 800d418:	60a3      	str	r3, [r4, #8]
 800d41a:	b9e9      	cbnz	r1, 800d458 <_puts_r+0x78>
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	da2e      	bge.n	800d47e <_puts_r+0x9e>
 800d420:	4622      	mov	r2, r4
 800d422:	210a      	movs	r1, #10
 800d424:	4628      	mov	r0, r5
 800d426:	f000 f88b 	bl	800d540 <__swbuf_r>
 800d42a:	3001      	adds	r0, #1
 800d42c:	d011      	beq.n	800d452 <_puts_r+0x72>
 800d42e:	200a      	movs	r0, #10
 800d430:	e011      	b.n	800d456 <_puts_r+0x76>
 800d432:	4b17      	ldr	r3, [pc, #92]	; (800d490 <_puts_r+0xb0>)
 800d434:	429c      	cmp	r4, r3
 800d436:	d101      	bne.n	800d43c <_puts_r+0x5c>
 800d438:	68ac      	ldr	r4, [r5, #8]
 800d43a:	e7e3      	b.n	800d404 <_puts_r+0x24>
 800d43c:	4b15      	ldr	r3, [pc, #84]	; (800d494 <_puts_r+0xb4>)
 800d43e:	429c      	cmp	r4, r3
 800d440:	bf08      	it	eq
 800d442:	68ec      	ldreq	r4, [r5, #12]
 800d444:	e7de      	b.n	800d404 <_puts_r+0x24>
 800d446:	4621      	mov	r1, r4
 800d448:	4628      	mov	r0, r5
 800d44a:	f000 f8cb 	bl	800d5e4 <__swsetup_r>
 800d44e:	2800      	cmp	r0, #0
 800d450:	d0dd      	beq.n	800d40e <_puts_r+0x2e>
 800d452:	f04f 30ff 	mov.w	r0, #4294967295
 800d456:	bd70      	pop	{r4, r5, r6, pc}
 800d458:	2b00      	cmp	r3, #0
 800d45a:	da04      	bge.n	800d466 <_puts_r+0x86>
 800d45c:	69a2      	ldr	r2, [r4, #24]
 800d45e:	429a      	cmp	r2, r3
 800d460:	dc06      	bgt.n	800d470 <_puts_r+0x90>
 800d462:	290a      	cmp	r1, #10
 800d464:	d004      	beq.n	800d470 <_puts_r+0x90>
 800d466:	6823      	ldr	r3, [r4, #0]
 800d468:	1c5a      	adds	r2, r3, #1
 800d46a:	6022      	str	r2, [r4, #0]
 800d46c:	7019      	strb	r1, [r3, #0]
 800d46e:	e7cf      	b.n	800d410 <_puts_r+0x30>
 800d470:	4622      	mov	r2, r4
 800d472:	4628      	mov	r0, r5
 800d474:	f000 f864 	bl	800d540 <__swbuf_r>
 800d478:	3001      	adds	r0, #1
 800d47a:	d1c9      	bne.n	800d410 <_puts_r+0x30>
 800d47c:	e7e9      	b.n	800d452 <_puts_r+0x72>
 800d47e:	200a      	movs	r0, #10
 800d480:	6823      	ldr	r3, [r4, #0]
 800d482:	1c5a      	adds	r2, r3, #1
 800d484:	6022      	str	r2, [r4, #0]
 800d486:	7018      	strb	r0, [r3, #0]
 800d488:	e7e5      	b.n	800d456 <_puts_r+0x76>
 800d48a:	bf00      	nop
 800d48c:	0800efc4 	.word	0x0800efc4
 800d490:	0800efe4 	.word	0x0800efe4
 800d494:	0800efa4 	.word	0x0800efa4

0800d498 <puts>:
 800d498:	4b02      	ldr	r3, [pc, #8]	; (800d4a4 <puts+0xc>)
 800d49a:	4601      	mov	r1, r0
 800d49c:	6818      	ldr	r0, [r3, #0]
 800d49e:	f7ff bf9f 	b.w	800d3e0 <_puts_r>
 800d4a2:	bf00      	nop
 800d4a4:	20000044 	.word	0x20000044

0800d4a8 <realloc>:
 800d4a8:	4b02      	ldr	r3, [pc, #8]	; (800d4b4 <realloc+0xc>)
 800d4aa:	460a      	mov	r2, r1
 800d4ac:	4601      	mov	r1, r0
 800d4ae:	6818      	ldr	r0, [r3, #0]
 800d4b0:	f000 bb8a 	b.w	800dbc8 <_realloc_r>
 800d4b4:	20000044 	.word	0x20000044

0800d4b8 <_raise_r>:
 800d4b8:	291f      	cmp	r1, #31
 800d4ba:	b538      	push	{r3, r4, r5, lr}
 800d4bc:	4604      	mov	r4, r0
 800d4be:	460d      	mov	r5, r1
 800d4c0:	d904      	bls.n	800d4cc <_raise_r+0x14>
 800d4c2:	2316      	movs	r3, #22
 800d4c4:	6003      	str	r3, [r0, #0]
 800d4c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d4ca:	bd38      	pop	{r3, r4, r5, pc}
 800d4cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d4ce:	b112      	cbz	r2, 800d4d6 <_raise_r+0x1e>
 800d4d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4d4:	b94b      	cbnz	r3, 800d4ea <_raise_r+0x32>
 800d4d6:	4620      	mov	r0, r4
 800d4d8:	f000 f830 	bl	800d53c <_getpid_r>
 800d4dc:	462a      	mov	r2, r5
 800d4de:	4601      	mov	r1, r0
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4e6:	f000 b817 	b.w	800d518 <_kill_r>
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d00a      	beq.n	800d504 <_raise_r+0x4c>
 800d4ee:	1c59      	adds	r1, r3, #1
 800d4f0:	d103      	bne.n	800d4fa <_raise_r+0x42>
 800d4f2:	2316      	movs	r3, #22
 800d4f4:	6003      	str	r3, [r0, #0]
 800d4f6:	2001      	movs	r0, #1
 800d4f8:	e7e7      	b.n	800d4ca <_raise_r+0x12>
 800d4fa:	2400      	movs	r4, #0
 800d4fc:	4628      	mov	r0, r5
 800d4fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d502:	4798      	blx	r3
 800d504:	2000      	movs	r0, #0
 800d506:	e7e0      	b.n	800d4ca <_raise_r+0x12>

0800d508 <raise>:
 800d508:	4b02      	ldr	r3, [pc, #8]	; (800d514 <raise+0xc>)
 800d50a:	4601      	mov	r1, r0
 800d50c:	6818      	ldr	r0, [r3, #0]
 800d50e:	f7ff bfd3 	b.w	800d4b8 <_raise_r>
 800d512:	bf00      	nop
 800d514:	20000044 	.word	0x20000044

0800d518 <_kill_r>:
 800d518:	b538      	push	{r3, r4, r5, lr}
 800d51a:	2300      	movs	r3, #0
 800d51c:	4c06      	ldr	r4, [pc, #24]	; (800d538 <_kill_r+0x20>)
 800d51e:	4605      	mov	r5, r0
 800d520:	4608      	mov	r0, r1
 800d522:	4611      	mov	r1, r2
 800d524:	6023      	str	r3, [r4, #0]
 800d526:	f7f9 fc10 	bl	8006d4a <_kill>
 800d52a:	1c43      	adds	r3, r0, #1
 800d52c:	d102      	bne.n	800d534 <_kill_r+0x1c>
 800d52e:	6823      	ldr	r3, [r4, #0]
 800d530:	b103      	cbz	r3, 800d534 <_kill_r+0x1c>
 800d532:	602b      	str	r3, [r5, #0]
 800d534:	bd38      	pop	{r3, r4, r5, pc}
 800d536:	bf00      	nop
 800d538:	2000105c 	.word	0x2000105c

0800d53c <_getpid_r>:
 800d53c:	f7f9 bbfe 	b.w	8006d3c <_getpid>

0800d540 <__swbuf_r>:
 800d540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d542:	460e      	mov	r6, r1
 800d544:	4614      	mov	r4, r2
 800d546:	4605      	mov	r5, r0
 800d548:	b118      	cbz	r0, 800d552 <__swbuf_r+0x12>
 800d54a:	6983      	ldr	r3, [r0, #24]
 800d54c:	b90b      	cbnz	r3, 800d552 <__swbuf_r+0x12>
 800d54e:	f000 f9a7 	bl	800d8a0 <__sinit>
 800d552:	4b21      	ldr	r3, [pc, #132]	; (800d5d8 <__swbuf_r+0x98>)
 800d554:	429c      	cmp	r4, r3
 800d556:	d12a      	bne.n	800d5ae <__swbuf_r+0x6e>
 800d558:	686c      	ldr	r4, [r5, #4]
 800d55a:	69a3      	ldr	r3, [r4, #24]
 800d55c:	60a3      	str	r3, [r4, #8]
 800d55e:	89a3      	ldrh	r3, [r4, #12]
 800d560:	071a      	lsls	r2, r3, #28
 800d562:	d52e      	bpl.n	800d5c2 <__swbuf_r+0x82>
 800d564:	6923      	ldr	r3, [r4, #16]
 800d566:	b363      	cbz	r3, 800d5c2 <__swbuf_r+0x82>
 800d568:	6923      	ldr	r3, [r4, #16]
 800d56a:	6820      	ldr	r0, [r4, #0]
 800d56c:	b2f6      	uxtb	r6, r6
 800d56e:	1ac0      	subs	r0, r0, r3
 800d570:	6963      	ldr	r3, [r4, #20]
 800d572:	4637      	mov	r7, r6
 800d574:	4283      	cmp	r3, r0
 800d576:	dc04      	bgt.n	800d582 <__swbuf_r+0x42>
 800d578:	4621      	mov	r1, r4
 800d57a:	4628      	mov	r0, r5
 800d57c:	f000 f926 	bl	800d7cc <_fflush_r>
 800d580:	bb28      	cbnz	r0, 800d5ce <__swbuf_r+0x8e>
 800d582:	68a3      	ldr	r3, [r4, #8]
 800d584:	3001      	adds	r0, #1
 800d586:	3b01      	subs	r3, #1
 800d588:	60a3      	str	r3, [r4, #8]
 800d58a:	6823      	ldr	r3, [r4, #0]
 800d58c:	1c5a      	adds	r2, r3, #1
 800d58e:	6022      	str	r2, [r4, #0]
 800d590:	701e      	strb	r6, [r3, #0]
 800d592:	6963      	ldr	r3, [r4, #20]
 800d594:	4283      	cmp	r3, r0
 800d596:	d004      	beq.n	800d5a2 <__swbuf_r+0x62>
 800d598:	89a3      	ldrh	r3, [r4, #12]
 800d59a:	07db      	lsls	r3, r3, #31
 800d59c:	d519      	bpl.n	800d5d2 <__swbuf_r+0x92>
 800d59e:	2e0a      	cmp	r6, #10
 800d5a0:	d117      	bne.n	800d5d2 <__swbuf_r+0x92>
 800d5a2:	4621      	mov	r1, r4
 800d5a4:	4628      	mov	r0, r5
 800d5a6:	f000 f911 	bl	800d7cc <_fflush_r>
 800d5aa:	b190      	cbz	r0, 800d5d2 <__swbuf_r+0x92>
 800d5ac:	e00f      	b.n	800d5ce <__swbuf_r+0x8e>
 800d5ae:	4b0b      	ldr	r3, [pc, #44]	; (800d5dc <__swbuf_r+0x9c>)
 800d5b0:	429c      	cmp	r4, r3
 800d5b2:	d101      	bne.n	800d5b8 <__swbuf_r+0x78>
 800d5b4:	68ac      	ldr	r4, [r5, #8]
 800d5b6:	e7d0      	b.n	800d55a <__swbuf_r+0x1a>
 800d5b8:	4b09      	ldr	r3, [pc, #36]	; (800d5e0 <__swbuf_r+0xa0>)
 800d5ba:	429c      	cmp	r4, r3
 800d5bc:	bf08      	it	eq
 800d5be:	68ec      	ldreq	r4, [r5, #12]
 800d5c0:	e7cb      	b.n	800d55a <__swbuf_r+0x1a>
 800d5c2:	4621      	mov	r1, r4
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	f000 f80d 	bl	800d5e4 <__swsetup_r>
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	d0cc      	beq.n	800d568 <__swbuf_r+0x28>
 800d5ce:	f04f 37ff 	mov.w	r7, #4294967295
 800d5d2:	4638      	mov	r0, r7
 800d5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	0800efc4 	.word	0x0800efc4
 800d5dc:	0800efe4 	.word	0x0800efe4
 800d5e0:	0800efa4 	.word	0x0800efa4

0800d5e4 <__swsetup_r>:
 800d5e4:	4b32      	ldr	r3, [pc, #200]	; (800d6b0 <__swsetup_r+0xcc>)
 800d5e6:	b570      	push	{r4, r5, r6, lr}
 800d5e8:	681d      	ldr	r5, [r3, #0]
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	460c      	mov	r4, r1
 800d5ee:	b125      	cbz	r5, 800d5fa <__swsetup_r+0x16>
 800d5f0:	69ab      	ldr	r3, [r5, #24]
 800d5f2:	b913      	cbnz	r3, 800d5fa <__swsetup_r+0x16>
 800d5f4:	4628      	mov	r0, r5
 800d5f6:	f000 f953 	bl	800d8a0 <__sinit>
 800d5fa:	4b2e      	ldr	r3, [pc, #184]	; (800d6b4 <__swsetup_r+0xd0>)
 800d5fc:	429c      	cmp	r4, r3
 800d5fe:	d10f      	bne.n	800d620 <__swsetup_r+0x3c>
 800d600:	686c      	ldr	r4, [r5, #4]
 800d602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d606:	b29a      	uxth	r2, r3
 800d608:	0715      	lsls	r5, r2, #28
 800d60a:	d42c      	bmi.n	800d666 <__swsetup_r+0x82>
 800d60c:	06d0      	lsls	r0, r2, #27
 800d60e:	d411      	bmi.n	800d634 <__swsetup_r+0x50>
 800d610:	2209      	movs	r2, #9
 800d612:	6032      	str	r2, [r6, #0]
 800d614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d618:	81a3      	strh	r3, [r4, #12]
 800d61a:	f04f 30ff 	mov.w	r0, #4294967295
 800d61e:	e03e      	b.n	800d69e <__swsetup_r+0xba>
 800d620:	4b25      	ldr	r3, [pc, #148]	; (800d6b8 <__swsetup_r+0xd4>)
 800d622:	429c      	cmp	r4, r3
 800d624:	d101      	bne.n	800d62a <__swsetup_r+0x46>
 800d626:	68ac      	ldr	r4, [r5, #8]
 800d628:	e7eb      	b.n	800d602 <__swsetup_r+0x1e>
 800d62a:	4b24      	ldr	r3, [pc, #144]	; (800d6bc <__swsetup_r+0xd8>)
 800d62c:	429c      	cmp	r4, r3
 800d62e:	bf08      	it	eq
 800d630:	68ec      	ldreq	r4, [r5, #12]
 800d632:	e7e6      	b.n	800d602 <__swsetup_r+0x1e>
 800d634:	0751      	lsls	r1, r2, #29
 800d636:	d512      	bpl.n	800d65e <__swsetup_r+0x7a>
 800d638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d63a:	b141      	cbz	r1, 800d64e <__swsetup_r+0x6a>
 800d63c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d640:	4299      	cmp	r1, r3
 800d642:	d002      	beq.n	800d64a <__swsetup_r+0x66>
 800d644:	4630      	mov	r0, r6
 800d646:	f000 fa19 	bl	800da7c <_free_r>
 800d64a:	2300      	movs	r3, #0
 800d64c:	6363      	str	r3, [r4, #52]	; 0x34
 800d64e:	89a3      	ldrh	r3, [r4, #12]
 800d650:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d654:	81a3      	strh	r3, [r4, #12]
 800d656:	2300      	movs	r3, #0
 800d658:	6063      	str	r3, [r4, #4]
 800d65a:	6923      	ldr	r3, [r4, #16]
 800d65c:	6023      	str	r3, [r4, #0]
 800d65e:	89a3      	ldrh	r3, [r4, #12]
 800d660:	f043 0308 	orr.w	r3, r3, #8
 800d664:	81a3      	strh	r3, [r4, #12]
 800d666:	6923      	ldr	r3, [r4, #16]
 800d668:	b94b      	cbnz	r3, 800d67e <__swsetup_r+0x9a>
 800d66a:	89a3      	ldrh	r3, [r4, #12]
 800d66c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d674:	d003      	beq.n	800d67e <__swsetup_r+0x9a>
 800d676:	4621      	mov	r1, r4
 800d678:	4630      	mov	r0, r6
 800d67a:	f000 f9bf 	bl	800d9fc <__smakebuf_r>
 800d67e:	89a2      	ldrh	r2, [r4, #12]
 800d680:	f012 0301 	ands.w	r3, r2, #1
 800d684:	d00c      	beq.n	800d6a0 <__swsetup_r+0xbc>
 800d686:	2300      	movs	r3, #0
 800d688:	60a3      	str	r3, [r4, #8]
 800d68a:	6963      	ldr	r3, [r4, #20]
 800d68c:	425b      	negs	r3, r3
 800d68e:	61a3      	str	r3, [r4, #24]
 800d690:	6923      	ldr	r3, [r4, #16]
 800d692:	b953      	cbnz	r3, 800d6aa <__swsetup_r+0xc6>
 800d694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d698:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d69c:	d1ba      	bne.n	800d614 <__swsetup_r+0x30>
 800d69e:	bd70      	pop	{r4, r5, r6, pc}
 800d6a0:	0792      	lsls	r2, r2, #30
 800d6a2:	bf58      	it	pl
 800d6a4:	6963      	ldrpl	r3, [r4, #20]
 800d6a6:	60a3      	str	r3, [r4, #8]
 800d6a8:	e7f2      	b.n	800d690 <__swsetup_r+0xac>
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	e7f7      	b.n	800d69e <__swsetup_r+0xba>
 800d6ae:	bf00      	nop
 800d6b0:	20000044 	.word	0x20000044
 800d6b4:	0800efc4 	.word	0x0800efc4
 800d6b8:	0800efe4 	.word	0x0800efe4
 800d6bc:	0800efa4 	.word	0x0800efa4

0800d6c0 <__sflush_r>:
 800d6c0:	898a      	ldrh	r2, [r1, #12]
 800d6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6c6:	4605      	mov	r5, r0
 800d6c8:	0710      	lsls	r0, r2, #28
 800d6ca:	460c      	mov	r4, r1
 800d6cc:	d458      	bmi.n	800d780 <__sflush_r+0xc0>
 800d6ce:	684b      	ldr	r3, [r1, #4]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	dc05      	bgt.n	800d6e0 <__sflush_r+0x20>
 800d6d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	dc02      	bgt.n	800d6e0 <__sflush_r+0x20>
 800d6da:	2000      	movs	r0, #0
 800d6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6e2:	2e00      	cmp	r6, #0
 800d6e4:	d0f9      	beq.n	800d6da <__sflush_r+0x1a>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d6ec:	682f      	ldr	r7, [r5, #0]
 800d6ee:	6a21      	ldr	r1, [r4, #32]
 800d6f0:	602b      	str	r3, [r5, #0]
 800d6f2:	d032      	beq.n	800d75a <__sflush_r+0x9a>
 800d6f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d6f6:	89a3      	ldrh	r3, [r4, #12]
 800d6f8:	075a      	lsls	r2, r3, #29
 800d6fa:	d505      	bpl.n	800d708 <__sflush_r+0x48>
 800d6fc:	6863      	ldr	r3, [r4, #4]
 800d6fe:	1ac0      	subs	r0, r0, r3
 800d700:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d702:	b10b      	cbz	r3, 800d708 <__sflush_r+0x48>
 800d704:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d706:	1ac0      	subs	r0, r0, r3
 800d708:	2300      	movs	r3, #0
 800d70a:	4602      	mov	r2, r0
 800d70c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d70e:	6a21      	ldr	r1, [r4, #32]
 800d710:	4628      	mov	r0, r5
 800d712:	47b0      	blx	r6
 800d714:	1c43      	adds	r3, r0, #1
 800d716:	89a3      	ldrh	r3, [r4, #12]
 800d718:	d106      	bne.n	800d728 <__sflush_r+0x68>
 800d71a:	6829      	ldr	r1, [r5, #0]
 800d71c:	291d      	cmp	r1, #29
 800d71e:	d848      	bhi.n	800d7b2 <__sflush_r+0xf2>
 800d720:	4a29      	ldr	r2, [pc, #164]	; (800d7c8 <__sflush_r+0x108>)
 800d722:	40ca      	lsrs	r2, r1
 800d724:	07d6      	lsls	r6, r2, #31
 800d726:	d544      	bpl.n	800d7b2 <__sflush_r+0xf2>
 800d728:	2200      	movs	r2, #0
 800d72a:	6062      	str	r2, [r4, #4]
 800d72c:	6922      	ldr	r2, [r4, #16]
 800d72e:	04d9      	lsls	r1, r3, #19
 800d730:	6022      	str	r2, [r4, #0]
 800d732:	d504      	bpl.n	800d73e <__sflush_r+0x7e>
 800d734:	1c42      	adds	r2, r0, #1
 800d736:	d101      	bne.n	800d73c <__sflush_r+0x7c>
 800d738:	682b      	ldr	r3, [r5, #0]
 800d73a:	b903      	cbnz	r3, 800d73e <__sflush_r+0x7e>
 800d73c:	6560      	str	r0, [r4, #84]	; 0x54
 800d73e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d740:	602f      	str	r7, [r5, #0]
 800d742:	2900      	cmp	r1, #0
 800d744:	d0c9      	beq.n	800d6da <__sflush_r+0x1a>
 800d746:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d74a:	4299      	cmp	r1, r3
 800d74c:	d002      	beq.n	800d754 <__sflush_r+0x94>
 800d74e:	4628      	mov	r0, r5
 800d750:	f000 f994 	bl	800da7c <_free_r>
 800d754:	2000      	movs	r0, #0
 800d756:	6360      	str	r0, [r4, #52]	; 0x34
 800d758:	e7c0      	b.n	800d6dc <__sflush_r+0x1c>
 800d75a:	2301      	movs	r3, #1
 800d75c:	4628      	mov	r0, r5
 800d75e:	47b0      	blx	r6
 800d760:	1c41      	adds	r1, r0, #1
 800d762:	d1c8      	bne.n	800d6f6 <__sflush_r+0x36>
 800d764:	682b      	ldr	r3, [r5, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d0c5      	beq.n	800d6f6 <__sflush_r+0x36>
 800d76a:	2b1d      	cmp	r3, #29
 800d76c:	d001      	beq.n	800d772 <__sflush_r+0xb2>
 800d76e:	2b16      	cmp	r3, #22
 800d770:	d101      	bne.n	800d776 <__sflush_r+0xb6>
 800d772:	602f      	str	r7, [r5, #0]
 800d774:	e7b1      	b.n	800d6da <__sflush_r+0x1a>
 800d776:	89a3      	ldrh	r3, [r4, #12]
 800d778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d77c:	81a3      	strh	r3, [r4, #12]
 800d77e:	e7ad      	b.n	800d6dc <__sflush_r+0x1c>
 800d780:	690f      	ldr	r7, [r1, #16]
 800d782:	2f00      	cmp	r7, #0
 800d784:	d0a9      	beq.n	800d6da <__sflush_r+0x1a>
 800d786:	0793      	lsls	r3, r2, #30
 800d788:	bf18      	it	ne
 800d78a:	2300      	movne	r3, #0
 800d78c:	680e      	ldr	r6, [r1, #0]
 800d78e:	bf08      	it	eq
 800d790:	694b      	ldreq	r3, [r1, #20]
 800d792:	eba6 0807 	sub.w	r8, r6, r7
 800d796:	600f      	str	r7, [r1, #0]
 800d798:	608b      	str	r3, [r1, #8]
 800d79a:	f1b8 0f00 	cmp.w	r8, #0
 800d79e:	dd9c      	ble.n	800d6da <__sflush_r+0x1a>
 800d7a0:	4643      	mov	r3, r8
 800d7a2:	463a      	mov	r2, r7
 800d7a4:	6a21      	ldr	r1, [r4, #32]
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d7aa:	47b0      	blx	r6
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	dc06      	bgt.n	800d7be <__sflush_r+0xfe>
 800d7b0:	89a3      	ldrh	r3, [r4, #12]
 800d7b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7b6:	81a3      	strh	r3, [r4, #12]
 800d7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7bc:	e78e      	b.n	800d6dc <__sflush_r+0x1c>
 800d7be:	4407      	add	r7, r0
 800d7c0:	eba8 0800 	sub.w	r8, r8, r0
 800d7c4:	e7e9      	b.n	800d79a <__sflush_r+0xda>
 800d7c6:	bf00      	nop
 800d7c8:	20400001 	.word	0x20400001

0800d7cc <_fflush_r>:
 800d7cc:	b538      	push	{r3, r4, r5, lr}
 800d7ce:	690b      	ldr	r3, [r1, #16]
 800d7d0:	4605      	mov	r5, r0
 800d7d2:	460c      	mov	r4, r1
 800d7d4:	b1db      	cbz	r3, 800d80e <_fflush_r+0x42>
 800d7d6:	b118      	cbz	r0, 800d7e0 <_fflush_r+0x14>
 800d7d8:	6983      	ldr	r3, [r0, #24]
 800d7da:	b90b      	cbnz	r3, 800d7e0 <_fflush_r+0x14>
 800d7dc:	f000 f860 	bl	800d8a0 <__sinit>
 800d7e0:	4b0c      	ldr	r3, [pc, #48]	; (800d814 <_fflush_r+0x48>)
 800d7e2:	429c      	cmp	r4, r3
 800d7e4:	d109      	bne.n	800d7fa <_fflush_r+0x2e>
 800d7e6:	686c      	ldr	r4, [r5, #4]
 800d7e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7ec:	b17b      	cbz	r3, 800d80e <_fflush_r+0x42>
 800d7ee:	4621      	mov	r1, r4
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7f6:	f7ff bf63 	b.w	800d6c0 <__sflush_r>
 800d7fa:	4b07      	ldr	r3, [pc, #28]	; (800d818 <_fflush_r+0x4c>)
 800d7fc:	429c      	cmp	r4, r3
 800d7fe:	d101      	bne.n	800d804 <_fflush_r+0x38>
 800d800:	68ac      	ldr	r4, [r5, #8]
 800d802:	e7f1      	b.n	800d7e8 <_fflush_r+0x1c>
 800d804:	4b05      	ldr	r3, [pc, #20]	; (800d81c <_fflush_r+0x50>)
 800d806:	429c      	cmp	r4, r3
 800d808:	bf08      	it	eq
 800d80a:	68ec      	ldreq	r4, [r5, #12]
 800d80c:	e7ec      	b.n	800d7e8 <_fflush_r+0x1c>
 800d80e:	2000      	movs	r0, #0
 800d810:	bd38      	pop	{r3, r4, r5, pc}
 800d812:	bf00      	nop
 800d814:	0800efc4 	.word	0x0800efc4
 800d818:	0800efe4 	.word	0x0800efe4
 800d81c:	0800efa4 	.word	0x0800efa4

0800d820 <std>:
 800d820:	2300      	movs	r3, #0
 800d822:	b510      	push	{r4, lr}
 800d824:	4604      	mov	r4, r0
 800d826:	e9c0 3300 	strd	r3, r3, [r0]
 800d82a:	6083      	str	r3, [r0, #8]
 800d82c:	8181      	strh	r1, [r0, #12]
 800d82e:	6643      	str	r3, [r0, #100]	; 0x64
 800d830:	81c2      	strh	r2, [r0, #14]
 800d832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d836:	6183      	str	r3, [r0, #24]
 800d838:	4619      	mov	r1, r3
 800d83a:	2208      	movs	r2, #8
 800d83c:	305c      	adds	r0, #92	; 0x5c
 800d83e:	f7ff fdae 	bl	800d39e <memset>
 800d842:	4b05      	ldr	r3, [pc, #20]	; (800d858 <std+0x38>)
 800d844:	6224      	str	r4, [r4, #32]
 800d846:	6263      	str	r3, [r4, #36]	; 0x24
 800d848:	4b04      	ldr	r3, [pc, #16]	; (800d85c <std+0x3c>)
 800d84a:	62a3      	str	r3, [r4, #40]	; 0x28
 800d84c:	4b04      	ldr	r3, [pc, #16]	; (800d860 <std+0x40>)
 800d84e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d850:	4b04      	ldr	r3, [pc, #16]	; (800d864 <std+0x44>)
 800d852:	6323      	str	r3, [r4, #48]	; 0x30
 800d854:	bd10      	pop	{r4, pc}
 800d856:	bf00      	nop
 800d858:	0800e1c1 	.word	0x0800e1c1
 800d85c:	0800e1e3 	.word	0x0800e1e3
 800d860:	0800e21b 	.word	0x0800e21b
 800d864:	0800e23f 	.word	0x0800e23f

0800d868 <_cleanup_r>:
 800d868:	4901      	ldr	r1, [pc, #4]	; (800d870 <_cleanup_r+0x8>)
 800d86a:	f000 b885 	b.w	800d978 <_fwalk_reent>
 800d86e:	bf00      	nop
 800d870:	0800d7cd 	.word	0x0800d7cd

0800d874 <__sfmoreglue>:
 800d874:	b570      	push	{r4, r5, r6, lr}
 800d876:	2568      	movs	r5, #104	; 0x68
 800d878:	1e4a      	subs	r2, r1, #1
 800d87a:	4355      	muls	r5, r2
 800d87c:	460e      	mov	r6, r1
 800d87e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d882:	f000 f947 	bl	800db14 <_malloc_r>
 800d886:	4604      	mov	r4, r0
 800d888:	b140      	cbz	r0, 800d89c <__sfmoreglue+0x28>
 800d88a:	2100      	movs	r1, #0
 800d88c:	e9c0 1600 	strd	r1, r6, [r0]
 800d890:	300c      	adds	r0, #12
 800d892:	60a0      	str	r0, [r4, #8]
 800d894:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d898:	f7ff fd81 	bl	800d39e <memset>
 800d89c:	4620      	mov	r0, r4
 800d89e:	bd70      	pop	{r4, r5, r6, pc}

0800d8a0 <__sinit>:
 800d8a0:	6983      	ldr	r3, [r0, #24]
 800d8a2:	b510      	push	{r4, lr}
 800d8a4:	4604      	mov	r4, r0
 800d8a6:	bb33      	cbnz	r3, 800d8f6 <__sinit+0x56>
 800d8a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d8ac:	6503      	str	r3, [r0, #80]	; 0x50
 800d8ae:	4b12      	ldr	r3, [pc, #72]	; (800d8f8 <__sinit+0x58>)
 800d8b0:	4a12      	ldr	r2, [pc, #72]	; (800d8fc <__sinit+0x5c>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	6282      	str	r2, [r0, #40]	; 0x28
 800d8b6:	4298      	cmp	r0, r3
 800d8b8:	bf04      	itt	eq
 800d8ba:	2301      	moveq	r3, #1
 800d8bc:	6183      	streq	r3, [r0, #24]
 800d8be:	f000 f81f 	bl	800d900 <__sfp>
 800d8c2:	6060      	str	r0, [r4, #4]
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	f000 f81b 	bl	800d900 <__sfp>
 800d8ca:	60a0      	str	r0, [r4, #8]
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	f000 f817 	bl	800d900 <__sfp>
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	60e0      	str	r0, [r4, #12]
 800d8d6:	2104      	movs	r1, #4
 800d8d8:	6860      	ldr	r0, [r4, #4]
 800d8da:	f7ff ffa1 	bl	800d820 <std>
 800d8de:	2201      	movs	r2, #1
 800d8e0:	2109      	movs	r1, #9
 800d8e2:	68a0      	ldr	r0, [r4, #8]
 800d8e4:	f7ff ff9c 	bl	800d820 <std>
 800d8e8:	2202      	movs	r2, #2
 800d8ea:	2112      	movs	r1, #18
 800d8ec:	68e0      	ldr	r0, [r4, #12]
 800d8ee:	f7ff ff97 	bl	800d820 <std>
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	61a3      	str	r3, [r4, #24]
 800d8f6:	bd10      	pop	{r4, pc}
 800d8f8:	0800efa0 	.word	0x0800efa0
 800d8fc:	0800d869 	.word	0x0800d869

0800d900 <__sfp>:
 800d900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d902:	4b1b      	ldr	r3, [pc, #108]	; (800d970 <__sfp+0x70>)
 800d904:	4607      	mov	r7, r0
 800d906:	681e      	ldr	r6, [r3, #0]
 800d908:	69b3      	ldr	r3, [r6, #24]
 800d90a:	b913      	cbnz	r3, 800d912 <__sfp+0x12>
 800d90c:	4630      	mov	r0, r6
 800d90e:	f7ff ffc7 	bl	800d8a0 <__sinit>
 800d912:	3648      	adds	r6, #72	; 0x48
 800d914:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d918:	3b01      	subs	r3, #1
 800d91a:	d503      	bpl.n	800d924 <__sfp+0x24>
 800d91c:	6833      	ldr	r3, [r6, #0]
 800d91e:	b133      	cbz	r3, 800d92e <__sfp+0x2e>
 800d920:	6836      	ldr	r6, [r6, #0]
 800d922:	e7f7      	b.n	800d914 <__sfp+0x14>
 800d924:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d928:	b16d      	cbz	r5, 800d946 <__sfp+0x46>
 800d92a:	3468      	adds	r4, #104	; 0x68
 800d92c:	e7f4      	b.n	800d918 <__sfp+0x18>
 800d92e:	2104      	movs	r1, #4
 800d930:	4638      	mov	r0, r7
 800d932:	f7ff ff9f 	bl	800d874 <__sfmoreglue>
 800d936:	6030      	str	r0, [r6, #0]
 800d938:	2800      	cmp	r0, #0
 800d93a:	d1f1      	bne.n	800d920 <__sfp+0x20>
 800d93c:	230c      	movs	r3, #12
 800d93e:	4604      	mov	r4, r0
 800d940:	603b      	str	r3, [r7, #0]
 800d942:	4620      	mov	r0, r4
 800d944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d946:	4b0b      	ldr	r3, [pc, #44]	; (800d974 <__sfp+0x74>)
 800d948:	6665      	str	r5, [r4, #100]	; 0x64
 800d94a:	e9c4 5500 	strd	r5, r5, [r4]
 800d94e:	60a5      	str	r5, [r4, #8]
 800d950:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d954:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d958:	2208      	movs	r2, #8
 800d95a:	4629      	mov	r1, r5
 800d95c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d960:	f7ff fd1d 	bl	800d39e <memset>
 800d964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d968:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d96c:	e7e9      	b.n	800d942 <__sfp+0x42>
 800d96e:	bf00      	nop
 800d970:	0800efa0 	.word	0x0800efa0
 800d974:	ffff0001 	.word	0xffff0001

0800d978 <_fwalk_reent>:
 800d978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d97c:	4680      	mov	r8, r0
 800d97e:	4689      	mov	r9, r1
 800d980:	2600      	movs	r6, #0
 800d982:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d986:	b914      	cbnz	r4, 800d98e <_fwalk_reent+0x16>
 800d988:	4630      	mov	r0, r6
 800d98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d98e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d992:	3f01      	subs	r7, #1
 800d994:	d501      	bpl.n	800d99a <_fwalk_reent+0x22>
 800d996:	6824      	ldr	r4, [r4, #0]
 800d998:	e7f5      	b.n	800d986 <_fwalk_reent+0xe>
 800d99a:	89ab      	ldrh	r3, [r5, #12]
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	d907      	bls.n	800d9b0 <_fwalk_reent+0x38>
 800d9a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	d003      	beq.n	800d9b0 <_fwalk_reent+0x38>
 800d9a8:	4629      	mov	r1, r5
 800d9aa:	4640      	mov	r0, r8
 800d9ac:	47c8      	blx	r9
 800d9ae:	4306      	orrs	r6, r0
 800d9b0:	3568      	adds	r5, #104	; 0x68
 800d9b2:	e7ee      	b.n	800d992 <_fwalk_reent+0x1a>

0800d9b4 <__swhatbuf_r>:
 800d9b4:	b570      	push	{r4, r5, r6, lr}
 800d9b6:	460e      	mov	r6, r1
 800d9b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9bc:	b096      	sub	sp, #88	; 0x58
 800d9be:	2900      	cmp	r1, #0
 800d9c0:	4614      	mov	r4, r2
 800d9c2:	461d      	mov	r5, r3
 800d9c4:	da07      	bge.n	800d9d6 <__swhatbuf_r+0x22>
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	602b      	str	r3, [r5, #0]
 800d9ca:	89b3      	ldrh	r3, [r6, #12]
 800d9cc:	061a      	lsls	r2, r3, #24
 800d9ce:	d410      	bmi.n	800d9f2 <__swhatbuf_r+0x3e>
 800d9d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9d4:	e00e      	b.n	800d9f4 <__swhatbuf_r+0x40>
 800d9d6:	466a      	mov	r2, sp
 800d9d8:	f000 fc58 	bl	800e28c <_fstat_r>
 800d9dc:	2800      	cmp	r0, #0
 800d9de:	dbf2      	blt.n	800d9c6 <__swhatbuf_r+0x12>
 800d9e0:	9a01      	ldr	r2, [sp, #4]
 800d9e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d9e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d9ea:	425a      	negs	r2, r3
 800d9ec:	415a      	adcs	r2, r3
 800d9ee:	602a      	str	r2, [r5, #0]
 800d9f0:	e7ee      	b.n	800d9d0 <__swhatbuf_r+0x1c>
 800d9f2:	2340      	movs	r3, #64	; 0x40
 800d9f4:	2000      	movs	r0, #0
 800d9f6:	6023      	str	r3, [r4, #0]
 800d9f8:	b016      	add	sp, #88	; 0x58
 800d9fa:	bd70      	pop	{r4, r5, r6, pc}

0800d9fc <__smakebuf_r>:
 800d9fc:	898b      	ldrh	r3, [r1, #12]
 800d9fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da00:	079d      	lsls	r5, r3, #30
 800da02:	4606      	mov	r6, r0
 800da04:	460c      	mov	r4, r1
 800da06:	d507      	bpl.n	800da18 <__smakebuf_r+0x1c>
 800da08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da0c:	6023      	str	r3, [r4, #0]
 800da0e:	6123      	str	r3, [r4, #16]
 800da10:	2301      	movs	r3, #1
 800da12:	6163      	str	r3, [r4, #20]
 800da14:	b002      	add	sp, #8
 800da16:	bd70      	pop	{r4, r5, r6, pc}
 800da18:	ab01      	add	r3, sp, #4
 800da1a:	466a      	mov	r2, sp
 800da1c:	f7ff ffca 	bl	800d9b4 <__swhatbuf_r>
 800da20:	9900      	ldr	r1, [sp, #0]
 800da22:	4605      	mov	r5, r0
 800da24:	4630      	mov	r0, r6
 800da26:	f000 f875 	bl	800db14 <_malloc_r>
 800da2a:	b948      	cbnz	r0, 800da40 <__smakebuf_r+0x44>
 800da2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da30:	059a      	lsls	r2, r3, #22
 800da32:	d4ef      	bmi.n	800da14 <__smakebuf_r+0x18>
 800da34:	f023 0303 	bic.w	r3, r3, #3
 800da38:	f043 0302 	orr.w	r3, r3, #2
 800da3c:	81a3      	strh	r3, [r4, #12]
 800da3e:	e7e3      	b.n	800da08 <__smakebuf_r+0xc>
 800da40:	4b0d      	ldr	r3, [pc, #52]	; (800da78 <__smakebuf_r+0x7c>)
 800da42:	62b3      	str	r3, [r6, #40]	; 0x28
 800da44:	89a3      	ldrh	r3, [r4, #12]
 800da46:	6020      	str	r0, [r4, #0]
 800da48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da4c:	81a3      	strh	r3, [r4, #12]
 800da4e:	9b00      	ldr	r3, [sp, #0]
 800da50:	6120      	str	r0, [r4, #16]
 800da52:	6163      	str	r3, [r4, #20]
 800da54:	9b01      	ldr	r3, [sp, #4]
 800da56:	b15b      	cbz	r3, 800da70 <__smakebuf_r+0x74>
 800da58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da5c:	4630      	mov	r0, r6
 800da5e:	f000 fc27 	bl	800e2b0 <_isatty_r>
 800da62:	b128      	cbz	r0, 800da70 <__smakebuf_r+0x74>
 800da64:	89a3      	ldrh	r3, [r4, #12]
 800da66:	f023 0303 	bic.w	r3, r3, #3
 800da6a:	f043 0301 	orr.w	r3, r3, #1
 800da6e:	81a3      	strh	r3, [r4, #12]
 800da70:	89a3      	ldrh	r3, [r4, #12]
 800da72:	431d      	orrs	r5, r3
 800da74:	81a5      	strh	r5, [r4, #12]
 800da76:	e7cd      	b.n	800da14 <__smakebuf_r+0x18>
 800da78:	0800d869 	.word	0x0800d869

0800da7c <_free_r>:
 800da7c:	b538      	push	{r3, r4, r5, lr}
 800da7e:	4605      	mov	r5, r0
 800da80:	2900      	cmp	r1, #0
 800da82:	d043      	beq.n	800db0c <_free_r+0x90>
 800da84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da88:	1f0c      	subs	r4, r1, #4
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	bfb8      	it	lt
 800da8e:	18e4      	addlt	r4, r4, r3
 800da90:	f000 fc3e 	bl	800e310 <__malloc_lock>
 800da94:	4a1e      	ldr	r2, [pc, #120]	; (800db10 <_free_r+0x94>)
 800da96:	6813      	ldr	r3, [r2, #0]
 800da98:	4610      	mov	r0, r2
 800da9a:	b933      	cbnz	r3, 800daaa <_free_r+0x2e>
 800da9c:	6063      	str	r3, [r4, #4]
 800da9e:	6014      	str	r4, [r2, #0]
 800daa0:	4628      	mov	r0, r5
 800daa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daa6:	f000 bc34 	b.w	800e312 <__malloc_unlock>
 800daaa:	42a3      	cmp	r3, r4
 800daac:	d90b      	bls.n	800dac6 <_free_r+0x4a>
 800daae:	6821      	ldr	r1, [r4, #0]
 800dab0:	1862      	adds	r2, r4, r1
 800dab2:	4293      	cmp	r3, r2
 800dab4:	bf01      	itttt	eq
 800dab6:	681a      	ldreq	r2, [r3, #0]
 800dab8:	685b      	ldreq	r3, [r3, #4]
 800daba:	1852      	addeq	r2, r2, r1
 800dabc:	6022      	streq	r2, [r4, #0]
 800dabe:	6063      	str	r3, [r4, #4]
 800dac0:	6004      	str	r4, [r0, #0]
 800dac2:	e7ed      	b.n	800daa0 <_free_r+0x24>
 800dac4:	4613      	mov	r3, r2
 800dac6:	685a      	ldr	r2, [r3, #4]
 800dac8:	b10a      	cbz	r2, 800dace <_free_r+0x52>
 800daca:	42a2      	cmp	r2, r4
 800dacc:	d9fa      	bls.n	800dac4 <_free_r+0x48>
 800dace:	6819      	ldr	r1, [r3, #0]
 800dad0:	1858      	adds	r0, r3, r1
 800dad2:	42a0      	cmp	r0, r4
 800dad4:	d10b      	bne.n	800daee <_free_r+0x72>
 800dad6:	6820      	ldr	r0, [r4, #0]
 800dad8:	4401      	add	r1, r0
 800dada:	1858      	adds	r0, r3, r1
 800dadc:	4282      	cmp	r2, r0
 800dade:	6019      	str	r1, [r3, #0]
 800dae0:	d1de      	bne.n	800daa0 <_free_r+0x24>
 800dae2:	6810      	ldr	r0, [r2, #0]
 800dae4:	6852      	ldr	r2, [r2, #4]
 800dae6:	4401      	add	r1, r0
 800dae8:	6019      	str	r1, [r3, #0]
 800daea:	605a      	str	r2, [r3, #4]
 800daec:	e7d8      	b.n	800daa0 <_free_r+0x24>
 800daee:	d902      	bls.n	800daf6 <_free_r+0x7a>
 800daf0:	230c      	movs	r3, #12
 800daf2:	602b      	str	r3, [r5, #0]
 800daf4:	e7d4      	b.n	800daa0 <_free_r+0x24>
 800daf6:	6820      	ldr	r0, [r4, #0]
 800daf8:	1821      	adds	r1, r4, r0
 800dafa:	428a      	cmp	r2, r1
 800dafc:	bf01      	itttt	eq
 800dafe:	6811      	ldreq	r1, [r2, #0]
 800db00:	6852      	ldreq	r2, [r2, #4]
 800db02:	1809      	addeq	r1, r1, r0
 800db04:	6021      	streq	r1, [r4, #0]
 800db06:	6062      	str	r2, [r4, #4]
 800db08:	605c      	str	r4, [r3, #4]
 800db0a:	e7c9      	b.n	800daa0 <_free_r+0x24>
 800db0c:	bd38      	pop	{r3, r4, r5, pc}
 800db0e:	bf00      	nop
 800db10:	20000de0 	.word	0x20000de0

0800db14 <_malloc_r>:
 800db14:	b570      	push	{r4, r5, r6, lr}
 800db16:	1ccd      	adds	r5, r1, #3
 800db18:	f025 0503 	bic.w	r5, r5, #3
 800db1c:	3508      	adds	r5, #8
 800db1e:	2d0c      	cmp	r5, #12
 800db20:	bf38      	it	cc
 800db22:	250c      	movcc	r5, #12
 800db24:	2d00      	cmp	r5, #0
 800db26:	4606      	mov	r6, r0
 800db28:	db01      	blt.n	800db2e <_malloc_r+0x1a>
 800db2a:	42a9      	cmp	r1, r5
 800db2c:	d903      	bls.n	800db36 <_malloc_r+0x22>
 800db2e:	230c      	movs	r3, #12
 800db30:	6033      	str	r3, [r6, #0]
 800db32:	2000      	movs	r0, #0
 800db34:	bd70      	pop	{r4, r5, r6, pc}
 800db36:	f000 fbeb 	bl	800e310 <__malloc_lock>
 800db3a:	4a21      	ldr	r2, [pc, #132]	; (800dbc0 <_malloc_r+0xac>)
 800db3c:	6814      	ldr	r4, [r2, #0]
 800db3e:	4621      	mov	r1, r4
 800db40:	b991      	cbnz	r1, 800db68 <_malloc_r+0x54>
 800db42:	4c20      	ldr	r4, [pc, #128]	; (800dbc4 <_malloc_r+0xb0>)
 800db44:	6823      	ldr	r3, [r4, #0]
 800db46:	b91b      	cbnz	r3, 800db50 <_malloc_r+0x3c>
 800db48:	4630      	mov	r0, r6
 800db4a:	f000 fb29 	bl	800e1a0 <_sbrk_r>
 800db4e:	6020      	str	r0, [r4, #0]
 800db50:	4629      	mov	r1, r5
 800db52:	4630      	mov	r0, r6
 800db54:	f000 fb24 	bl	800e1a0 <_sbrk_r>
 800db58:	1c43      	adds	r3, r0, #1
 800db5a:	d124      	bne.n	800dba6 <_malloc_r+0x92>
 800db5c:	230c      	movs	r3, #12
 800db5e:	4630      	mov	r0, r6
 800db60:	6033      	str	r3, [r6, #0]
 800db62:	f000 fbd6 	bl	800e312 <__malloc_unlock>
 800db66:	e7e4      	b.n	800db32 <_malloc_r+0x1e>
 800db68:	680b      	ldr	r3, [r1, #0]
 800db6a:	1b5b      	subs	r3, r3, r5
 800db6c:	d418      	bmi.n	800dba0 <_malloc_r+0x8c>
 800db6e:	2b0b      	cmp	r3, #11
 800db70:	d90f      	bls.n	800db92 <_malloc_r+0x7e>
 800db72:	600b      	str	r3, [r1, #0]
 800db74:	18cc      	adds	r4, r1, r3
 800db76:	50cd      	str	r5, [r1, r3]
 800db78:	4630      	mov	r0, r6
 800db7a:	f000 fbca 	bl	800e312 <__malloc_unlock>
 800db7e:	f104 000b 	add.w	r0, r4, #11
 800db82:	1d23      	adds	r3, r4, #4
 800db84:	f020 0007 	bic.w	r0, r0, #7
 800db88:	1ac3      	subs	r3, r0, r3
 800db8a:	d0d3      	beq.n	800db34 <_malloc_r+0x20>
 800db8c:	425a      	negs	r2, r3
 800db8e:	50e2      	str	r2, [r4, r3]
 800db90:	e7d0      	b.n	800db34 <_malloc_r+0x20>
 800db92:	684b      	ldr	r3, [r1, #4]
 800db94:	428c      	cmp	r4, r1
 800db96:	bf16      	itet	ne
 800db98:	6063      	strne	r3, [r4, #4]
 800db9a:	6013      	streq	r3, [r2, #0]
 800db9c:	460c      	movne	r4, r1
 800db9e:	e7eb      	b.n	800db78 <_malloc_r+0x64>
 800dba0:	460c      	mov	r4, r1
 800dba2:	6849      	ldr	r1, [r1, #4]
 800dba4:	e7cc      	b.n	800db40 <_malloc_r+0x2c>
 800dba6:	1cc4      	adds	r4, r0, #3
 800dba8:	f024 0403 	bic.w	r4, r4, #3
 800dbac:	42a0      	cmp	r0, r4
 800dbae:	d005      	beq.n	800dbbc <_malloc_r+0xa8>
 800dbb0:	1a21      	subs	r1, r4, r0
 800dbb2:	4630      	mov	r0, r6
 800dbb4:	f000 faf4 	bl	800e1a0 <_sbrk_r>
 800dbb8:	3001      	adds	r0, #1
 800dbba:	d0cf      	beq.n	800db5c <_malloc_r+0x48>
 800dbbc:	6025      	str	r5, [r4, #0]
 800dbbe:	e7db      	b.n	800db78 <_malloc_r+0x64>
 800dbc0:	20000de0 	.word	0x20000de0
 800dbc4:	20000de4 	.word	0x20000de4

0800dbc8 <_realloc_r>:
 800dbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbca:	4607      	mov	r7, r0
 800dbcc:	4614      	mov	r4, r2
 800dbce:	460e      	mov	r6, r1
 800dbd0:	b921      	cbnz	r1, 800dbdc <_realloc_r+0x14>
 800dbd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dbd6:	4611      	mov	r1, r2
 800dbd8:	f7ff bf9c 	b.w	800db14 <_malloc_r>
 800dbdc:	b922      	cbnz	r2, 800dbe8 <_realloc_r+0x20>
 800dbde:	f7ff ff4d 	bl	800da7c <_free_r>
 800dbe2:	4625      	mov	r5, r4
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbe8:	f000 fb94 	bl	800e314 <_malloc_usable_size_r>
 800dbec:	42a0      	cmp	r0, r4
 800dbee:	d20f      	bcs.n	800dc10 <_realloc_r+0x48>
 800dbf0:	4621      	mov	r1, r4
 800dbf2:	4638      	mov	r0, r7
 800dbf4:	f7ff ff8e 	bl	800db14 <_malloc_r>
 800dbf8:	4605      	mov	r5, r0
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	d0f2      	beq.n	800dbe4 <_realloc_r+0x1c>
 800dbfe:	4631      	mov	r1, r6
 800dc00:	4622      	mov	r2, r4
 800dc02:	f7ff fbc1 	bl	800d388 <memcpy>
 800dc06:	4631      	mov	r1, r6
 800dc08:	4638      	mov	r0, r7
 800dc0a:	f7ff ff37 	bl	800da7c <_free_r>
 800dc0e:	e7e9      	b.n	800dbe4 <_realloc_r+0x1c>
 800dc10:	4635      	mov	r5, r6
 800dc12:	e7e7      	b.n	800dbe4 <_realloc_r+0x1c>

0800dc14 <__sfputc_r>:
 800dc14:	6893      	ldr	r3, [r2, #8]
 800dc16:	b410      	push	{r4}
 800dc18:	3b01      	subs	r3, #1
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	6093      	str	r3, [r2, #8]
 800dc1e:	da07      	bge.n	800dc30 <__sfputc_r+0x1c>
 800dc20:	6994      	ldr	r4, [r2, #24]
 800dc22:	42a3      	cmp	r3, r4
 800dc24:	db01      	blt.n	800dc2a <__sfputc_r+0x16>
 800dc26:	290a      	cmp	r1, #10
 800dc28:	d102      	bne.n	800dc30 <__sfputc_r+0x1c>
 800dc2a:	bc10      	pop	{r4}
 800dc2c:	f7ff bc88 	b.w	800d540 <__swbuf_r>
 800dc30:	6813      	ldr	r3, [r2, #0]
 800dc32:	1c58      	adds	r0, r3, #1
 800dc34:	6010      	str	r0, [r2, #0]
 800dc36:	7019      	strb	r1, [r3, #0]
 800dc38:	4608      	mov	r0, r1
 800dc3a:	bc10      	pop	{r4}
 800dc3c:	4770      	bx	lr

0800dc3e <__sfputs_r>:
 800dc3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc40:	4606      	mov	r6, r0
 800dc42:	460f      	mov	r7, r1
 800dc44:	4614      	mov	r4, r2
 800dc46:	18d5      	adds	r5, r2, r3
 800dc48:	42ac      	cmp	r4, r5
 800dc4a:	d101      	bne.n	800dc50 <__sfputs_r+0x12>
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	e007      	b.n	800dc60 <__sfputs_r+0x22>
 800dc50:	463a      	mov	r2, r7
 800dc52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc56:	4630      	mov	r0, r6
 800dc58:	f7ff ffdc 	bl	800dc14 <__sfputc_r>
 800dc5c:	1c43      	adds	r3, r0, #1
 800dc5e:	d1f3      	bne.n	800dc48 <__sfputs_r+0xa>
 800dc60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc64 <_vfiprintf_r>:
 800dc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc68:	460c      	mov	r4, r1
 800dc6a:	b09d      	sub	sp, #116	; 0x74
 800dc6c:	4617      	mov	r7, r2
 800dc6e:	461d      	mov	r5, r3
 800dc70:	4606      	mov	r6, r0
 800dc72:	b118      	cbz	r0, 800dc7c <_vfiprintf_r+0x18>
 800dc74:	6983      	ldr	r3, [r0, #24]
 800dc76:	b90b      	cbnz	r3, 800dc7c <_vfiprintf_r+0x18>
 800dc78:	f7ff fe12 	bl	800d8a0 <__sinit>
 800dc7c:	4b7c      	ldr	r3, [pc, #496]	; (800de70 <_vfiprintf_r+0x20c>)
 800dc7e:	429c      	cmp	r4, r3
 800dc80:	d158      	bne.n	800dd34 <_vfiprintf_r+0xd0>
 800dc82:	6874      	ldr	r4, [r6, #4]
 800dc84:	89a3      	ldrh	r3, [r4, #12]
 800dc86:	0718      	lsls	r0, r3, #28
 800dc88:	d55e      	bpl.n	800dd48 <_vfiprintf_r+0xe4>
 800dc8a:	6923      	ldr	r3, [r4, #16]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d05b      	beq.n	800dd48 <_vfiprintf_r+0xe4>
 800dc90:	2300      	movs	r3, #0
 800dc92:	9309      	str	r3, [sp, #36]	; 0x24
 800dc94:	2320      	movs	r3, #32
 800dc96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc9a:	2330      	movs	r3, #48	; 0x30
 800dc9c:	f04f 0b01 	mov.w	fp, #1
 800dca0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dca4:	9503      	str	r5, [sp, #12]
 800dca6:	46b8      	mov	r8, r7
 800dca8:	4645      	mov	r5, r8
 800dcaa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dcae:	b10b      	cbz	r3, 800dcb4 <_vfiprintf_r+0x50>
 800dcb0:	2b25      	cmp	r3, #37	; 0x25
 800dcb2:	d154      	bne.n	800dd5e <_vfiprintf_r+0xfa>
 800dcb4:	ebb8 0a07 	subs.w	sl, r8, r7
 800dcb8:	d00b      	beq.n	800dcd2 <_vfiprintf_r+0x6e>
 800dcba:	4653      	mov	r3, sl
 800dcbc:	463a      	mov	r2, r7
 800dcbe:	4621      	mov	r1, r4
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	f7ff ffbc 	bl	800dc3e <__sfputs_r>
 800dcc6:	3001      	adds	r0, #1
 800dcc8:	f000 80c2 	beq.w	800de50 <_vfiprintf_r+0x1ec>
 800dccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcce:	4453      	add	r3, sl
 800dcd0:	9309      	str	r3, [sp, #36]	; 0x24
 800dcd2:	f898 3000 	ldrb.w	r3, [r8]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	f000 80ba 	beq.w	800de50 <_vfiprintf_r+0x1ec>
 800dcdc:	2300      	movs	r3, #0
 800dcde:	f04f 32ff 	mov.w	r2, #4294967295
 800dce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dce6:	9304      	str	r3, [sp, #16]
 800dce8:	9307      	str	r3, [sp, #28]
 800dcea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dcee:	931a      	str	r3, [sp, #104]	; 0x68
 800dcf0:	46a8      	mov	r8, r5
 800dcf2:	2205      	movs	r2, #5
 800dcf4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800dcf8:	485e      	ldr	r0, [pc, #376]	; (800de74 <_vfiprintf_r+0x210>)
 800dcfa:	f000 fafb 	bl	800e2f4 <memchr>
 800dcfe:	9b04      	ldr	r3, [sp, #16]
 800dd00:	bb78      	cbnz	r0, 800dd62 <_vfiprintf_r+0xfe>
 800dd02:	06d9      	lsls	r1, r3, #27
 800dd04:	bf44      	itt	mi
 800dd06:	2220      	movmi	r2, #32
 800dd08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dd0c:	071a      	lsls	r2, r3, #28
 800dd0e:	bf44      	itt	mi
 800dd10:	222b      	movmi	r2, #43	; 0x2b
 800dd12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dd16:	782a      	ldrb	r2, [r5, #0]
 800dd18:	2a2a      	cmp	r2, #42	; 0x2a
 800dd1a:	d02a      	beq.n	800dd72 <_vfiprintf_r+0x10e>
 800dd1c:	46a8      	mov	r8, r5
 800dd1e:	2000      	movs	r0, #0
 800dd20:	250a      	movs	r5, #10
 800dd22:	9a07      	ldr	r2, [sp, #28]
 800dd24:	4641      	mov	r1, r8
 800dd26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd2a:	3b30      	subs	r3, #48	; 0x30
 800dd2c:	2b09      	cmp	r3, #9
 800dd2e:	d969      	bls.n	800de04 <_vfiprintf_r+0x1a0>
 800dd30:	b360      	cbz	r0, 800dd8c <_vfiprintf_r+0x128>
 800dd32:	e024      	b.n	800dd7e <_vfiprintf_r+0x11a>
 800dd34:	4b50      	ldr	r3, [pc, #320]	; (800de78 <_vfiprintf_r+0x214>)
 800dd36:	429c      	cmp	r4, r3
 800dd38:	d101      	bne.n	800dd3e <_vfiprintf_r+0xda>
 800dd3a:	68b4      	ldr	r4, [r6, #8]
 800dd3c:	e7a2      	b.n	800dc84 <_vfiprintf_r+0x20>
 800dd3e:	4b4f      	ldr	r3, [pc, #316]	; (800de7c <_vfiprintf_r+0x218>)
 800dd40:	429c      	cmp	r4, r3
 800dd42:	bf08      	it	eq
 800dd44:	68f4      	ldreq	r4, [r6, #12]
 800dd46:	e79d      	b.n	800dc84 <_vfiprintf_r+0x20>
 800dd48:	4621      	mov	r1, r4
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	f7ff fc4a 	bl	800d5e4 <__swsetup_r>
 800dd50:	2800      	cmp	r0, #0
 800dd52:	d09d      	beq.n	800dc90 <_vfiprintf_r+0x2c>
 800dd54:	f04f 30ff 	mov.w	r0, #4294967295
 800dd58:	b01d      	add	sp, #116	; 0x74
 800dd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd5e:	46a8      	mov	r8, r5
 800dd60:	e7a2      	b.n	800dca8 <_vfiprintf_r+0x44>
 800dd62:	4a44      	ldr	r2, [pc, #272]	; (800de74 <_vfiprintf_r+0x210>)
 800dd64:	4645      	mov	r5, r8
 800dd66:	1a80      	subs	r0, r0, r2
 800dd68:	fa0b f000 	lsl.w	r0, fp, r0
 800dd6c:	4318      	orrs	r0, r3
 800dd6e:	9004      	str	r0, [sp, #16]
 800dd70:	e7be      	b.n	800dcf0 <_vfiprintf_r+0x8c>
 800dd72:	9a03      	ldr	r2, [sp, #12]
 800dd74:	1d11      	adds	r1, r2, #4
 800dd76:	6812      	ldr	r2, [r2, #0]
 800dd78:	9103      	str	r1, [sp, #12]
 800dd7a:	2a00      	cmp	r2, #0
 800dd7c:	db01      	blt.n	800dd82 <_vfiprintf_r+0x11e>
 800dd7e:	9207      	str	r2, [sp, #28]
 800dd80:	e004      	b.n	800dd8c <_vfiprintf_r+0x128>
 800dd82:	4252      	negs	r2, r2
 800dd84:	f043 0302 	orr.w	r3, r3, #2
 800dd88:	9207      	str	r2, [sp, #28]
 800dd8a:	9304      	str	r3, [sp, #16]
 800dd8c:	f898 3000 	ldrb.w	r3, [r8]
 800dd90:	2b2e      	cmp	r3, #46	; 0x2e
 800dd92:	d10e      	bne.n	800ddb2 <_vfiprintf_r+0x14e>
 800dd94:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dd98:	2b2a      	cmp	r3, #42	; 0x2a
 800dd9a:	d138      	bne.n	800de0e <_vfiprintf_r+0x1aa>
 800dd9c:	9b03      	ldr	r3, [sp, #12]
 800dd9e:	f108 0802 	add.w	r8, r8, #2
 800dda2:	1d1a      	adds	r2, r3, #4
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	9203      	str	r2, [sp, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	bfb8      	it	lt
 800ddac:	f04f 33ff 	movlt.w	r3, #4294967295
 800ddb0:	9305      	str	r3, [sp, #20]
 800ddb2:	4d33      	ldr	r5, [pc, #204]	; (800de80 <_vfiprintf_r+0x21c>)
 800ddb4:	2203      	movs	r2, #3
 800ddb6:	f898 1000 	ldrb.w	r1, [r8]
 800ddba:	4628      	mov	r0, r5
 800ddbc:	f000 fa9a 	bl	800e2f4 <memchr>
 800ddc0:	b140      	cbz	r0, 800ddd4 <_vfiprintf_r+0x170>
 800ddc2:	2340      	movs	r3, #64	; 0x40
 800ddc4:	1b40      	subs	r0, r0, r5
 800ddc6:	fa03 f000 	lsl.w	r0, r3, r0
 800ddca:	9b04      	ldr	r3, [sp, #16]
 800ddcc:	f108 0801 	add.w	r8, r8, #1
 800ddd0:	4303      	orrs	r3, r0
 800ddd2:	9304      	str	r3, [sp, #16]
 800ddd4:	f898 1000 	ldrb.w	r1, [r8]
 800ddd8:	2206      	movs	r2, #6
 800ddda:	482a      	ldr	r0, [pc, #168]	; (800de84 <_vfiprintf_r+0x220>)
 800dddc:	f108 0701 	add.w	r7, r8, #1
 800dde0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dde4:	f000 fa86 	bl	800e2f4 <memchr>
 800dde8:	2800      	cmp	r0, #0
 800ddea:	d037      	beq.n	800de5c <_vfiprintf_r+0x1f8>
 800ddec:	4b26      	ldr	r3, [pc, #152]	; (800de88 <_vfiprintf_r+0x224>)
 800ddee:	bb1b      	cbnz	r3, 800de38 <_vfiprintf_r+0x1d4>
 800ddf0:	9b03      	ldr	r3, [sp, #12]
 800ddf2:	3307      	adds	r3, #7
 800ddf4:	f023 0307 	bic.w	r3, r3, #7
 800ddf8:	3308      	adds	r3, #8
 800ddfa:	9303      	str	r3, [sp, #12]
 800ddfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddfe:	444b      	add	r3, r9
 800de00:	9309      	str	r3, [sp, #36]	; 0x24
 800de02:	e750      	b.n	800dca6 <_vfiprintf_r+0x42>
 800de04:	fb05 3202 	mla	r2, r5, r2, r3
 800de08:	2001      	movs	r0, #1
 800de0a:	4688      	mov	r8, r1
 800de0c:	e78a      	b.n	800dd24 <_vfiprintf_r+0xc0>
 800de0e:	2300      	movs	r3, #0
 800de10:	250a      	movs	r5, #10
 800de12:	4619      	mov	r1, r3
 800de14:	f108 0801 	add.w	r8, r8, #1
 800de18:	9305      	str	r3, [sp, #20]
 800de1a:	4640      	mov	r0, r8
 800de1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de20:	3a30      	subs	r2, #48	; 0x30
 800de22:	2a09      	cmp	r2, #9
 800de24:	d903      	bls.n	800de2e <_vfiprintf_r+0x1ca>
 800de26:	2b00      	cmp	r3, #0
 800de28:	d0c3      	beq.n	800ddb2 <_vfiprintf_r+0x14e>
 800de2a:	9105      	str	r1, [sp, #20]
 800de2c:	e7c1      	b.n	800ddb2 <_vfiprintf_r+0x14e>
 800de2e:	fb05 2101 	mla	r1, r5, r1, r2
 800de32:	2301      	movs	r3, #1
 800de34:	4680      	mov	r8, r0
 800de36:	e7f0      	b.n	800de1a <_vfiprintf_r+0x1b6>
 800de38:	ab03      	add	r3, sp, #12
 800de3a:	9300      	str	r3, [sp, #0]
 800de3c:	4622      	mov	r2, r4
 800de3e:	4b13      	ldr	r3, [pc, #76]	; (800de8c <_vfiprintf_r+0x228>)
 800de40:	a904      	add	r1, sp, #16
 800de42:	4630      	mov	r0, r6
 800de44:	f3af 8000 	nop.w
 800de48:	f1b0 3fff 	cmp.w	r0, #4294967295
 800de4c:	4681      	mov	r9, r0
 800de4e:	d1d5      	bne.n	800ddfc <_vfiprintf_r+0x198>
 800de50:	89a3      	ldrh	r3, [r4, #12]
 800de52:	065b      	lsls	r3, r3, #25
 800de54:	f53f af7e 	bmi.w	800dd54 <_vfiprintf_r+0xf0>
 800de58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de5a:	e77d      	b.n	800dd58 <_vfiprintf_r+0xf4>
 800de5c:	ab03      	add	r3, sp, #12
 800de5e:	9300      	str	r3, [sp, #0]
 800de60:	4622      	mov	r2, r4
 800de62:	4b0a      	ldr	r3, [pc, #40]	; (800de8c <_vfiprintf_r+0x228>)
 800de64:	a904      	add	r1, sp, #16
 800de66:	4630      	mov	r0, r6
 800de68:	f000 f888 	bl	800df7c <_printf_i>
 800de6c:	e7ec      	b.n	800de48 <_vfiprintf_r+0x1e4>
 800de6e:	bf00      	nop
 800de70:	0800efc4 	.word	0x0800efc4
 800de74:	0800f004 	.word	0x0800f004
 800de78:	0800efe4 	.word	0x0800efe4
 800de7c:	0800efa4 	.word	0x0800efa4
 800de80:	0800f00a 	.word	0x0800f00a
 800de84:	0800f00e 	.word	0x0800f00e
 800de88:	00000000 	.word	0x00000000
 800de8c:	0800dc3f 	.word	0x0800dc3f

0800de90 <_printf_common>:
 800de90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de94:	4691      	mov	r9, r2
 800de96:	461f      	mov	r7, r3
 800de98:	688a      	ldr	r2, [r1, #8]
 800de9a:	690b      	ldr	r3, [r1, #16]
 800de9c:	4606      	mov	r6, r0
 800de9e:	4293      	cmp	r3, r2
 800dea0:	bfb8      	it	lt
 800dea2:	4613      	movlt	r3, r2
 800dea4:	f8c9 3000 	str.w	r3, [r9]
 800dea8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800deac:	460c      	mov	r4, r1
 800deae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800deb2:	b112      	cbz	r2, 800deba <_printf_common+0x2a>
 800deb4:	3301      	adds	r3, #1
 800deb6:	f8c9 3000 	str.w	r3, [r9]
 800deba:	6823      	ldr	r3, [r4, #0]
 800debc:	0699      	lsls	r1, r3, #26
 800debe:	bf42      	ittt	mi
 800dec0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dec4:	3302      	addmi	r3, #2
 800dec6:	f8c9 3000 	strmi.w	r3, [r9]
 800deca:	6825      	ldr	r5, [r4, #0]
 800decc:	f015 0506 	ands.w	r5, r5, #6
 800ded0:	d107      	bne.n	800dee2 <_printf_common+0x52>
 800ded2:	f104 0a19 	add.w	sl, r4, #25
 800ded6:	68e3      	ldr	r3, [r4, #12]
 800ded8:	f8d9 2000 	ldr.w	r2, [r9]
 800dedc:	1a9b      	subs	r3, r3, r2
 800dede:	42ab      	cmp	r3, r5
 800dee0:	dc29      	bgt.n	800df36 <_printf_common+0xa6>
 800dee2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dee6:	6822      	ldr	r2, [r4, #0]
 800dee8:	3300      	adds	r3, #0
 800deea:	bf18      	it	ne
 800deec:	2301      	movne	r3, #1
 800deee:	0692      	lsls	r2, r2, #26
 800def0:	d42e      	bmi.n	800df50 <_printf_common+0xc0>
 800def2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800def6:	4639      	mov	r1, r7
 800def8:	4630      	mov	r0, r6
 800defa:	47c0      	blx	r8
 800defc:	3001      	adds	r0, #1
 800defe:	d021      	beq.n	800df44 <_printf_common+0xb4>
 800df00:	6823      	ldr	r3, [r4, #0]
 800df02:	68e5      	ldr	r5, [r4, #12]
 800df04:	f003 0306 	and.w	r3, r3, #6
 800df08:	2b04      	cmp	r3, #4
 800df0a:	bf18      	it	ne
 800df0c:	2500      	movne	r5, #0
 800df0e:	f8d9 2000 	ldr.w	r2, [r9]
 800df12:	f04f 0900 	mov.w	r9, #0
 800df16:	bf08      	it	eq
 800df18:	1aad      	subeq	r5, r5, r2
 800df1a:	68a3      	ldr	r3, [r4, #8]
 800df1c:	6922      	ldr	r2, [r4, #16]
 800df1e:	bf08      	it	eq
 800df20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df24:	4293      	cmp	r3, r2
 800df26:	bfc4      	itt	gt
 800df28:	1a9b      	subgt	r3, r3, r2
 800df2a:	18ed      	addgt	r5, r5, r3
 800df2c:	341a      	adds	r4, #26
 800df2e:	454d      	cmp	r5, r9
 800df30:	d11a      	bne.n	800df68 <_printf_common+0xd8>
 800df32:	2000      	movs	r0, #0
 800df34:	e008      	b.n	800df48 <_printf_common+0xb8>
 800df36:	2301      	movs	r3, #1
 800df38:	4652      	mov	r2, sl
 800df3a:	4639      	mov	r1, r7
 800df3c:	4630      	mov	r0, r6
 800df3e:	47c0      	blx	r8
 800df40:	3001      	adds	r0, #1
 800df42:	d103      	bne.n	800df4c <_printf_common+0xbc>
 800df44:	f04f 30ff 	mov.w	r0, #4294967295
 800df48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df4c:	3501      	adds	r5, #1
 800df4e:	e7c2      	b.n	800ded6 <_printf_common+0x46>
 800df50:	2030      	movs	r0, #48	; 0x30
 800df52:	18e1      	adds	r1, r4, r3
 800df54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df58:	1c5a      	adds	r2, r3, #1
 800df5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df5e:	4422      	add	r2, r4
 800df60:	3302      	adds	r3, #2
 800df62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df66:	e7c4      	b.n	800def2 <_printf_common+0x62>
 800df68:	2301      	movs	r3, #1
 800df6a:	4622      	mov	r2, r4
 800df6c:	4639      	mov	r1, r7
 800df6e:	4630      	mov	r0, r6
 800df70:	47c0      	blx	r8
 800df72:	3001      	adds	r0, #1
 800df74:	d0e6      	beq.n	800df44 <_printf_common+0xb4>
 800df76:	f109 0901 	add.w	r9, r9, #1
 800df7a:	e7d8      	b.n	800df2e <_printf_common+0x9e>

0800df7c <_printf_i>:
 800df7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800df84:	460c      	mov	r4, r1
 800df86:	7e09      	ldrb	r1, [r1, #24]
 800df88:	b085      	sub	sp, #20
 800df8a:	296e      	cmp	r1, #110	; 0x6e
 800df8c:	4617      	mov	r7, r2
 800df8e:	4606      	mov	r6, r0
 800df90:	4698      	mov	r8, r3
 800df92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df94:	f000 80b3 	beq.w	800e0fe <_printf_i+0x182>
 800df98:	d822      	bhi.n	800dfe0 <_printf_i+0x64>
 800df9a:	2963      	cmp	r1, #99	; 0x63
 800df9c:	d036      	beq.n	800e00c <_printf_i+0x90>
 800df9e:	d80a      	bhi.n	800dfb6 <_printf_i+0x3a>
 800dfa0:	2900      	cmp	r1, #0
 800dfa2:	f000 80b9 	beq.w	800e118 <_printf_i+0x19c>
 800dfa6:	2958      	cmp	r1, #88	; 0x58
 800dfa8:	f000 8083 	beq.w	800e0b2 <_printf_i+0x136>
 800dfac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800dfb4:	e032      	b.n	800e01c <_printf_i+0xa0>
 800dfb6:	2964      	cmp	r1, #100	; 0x64
 800dfb8:	d001      	beq.n	800dfbe <_printf_i+0x42>
 800dfba:	2969      	cmp	r1, #105	; 0x69
 800dfbc:	d1f6      	bne.n	800dfac <_printf_i+0x30>
 800dfbe:	6820      	ldr	r0, [r4, #0]
 800dfc0:	6813      	ldr	r3, [r2, #0]
 800dfc2:	0605      	lsls	r5, r0, #24
 800dfc4:	f103 0104 	add.w	r1, r3, #4
 800dfc8:	d52a      	bpl.n	800e020 <_printf_i+0xa4>
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	6011      	str	r1, [r2, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	da03      	bge.n	800dfda <_printf_i+0x5e>
 800dfd2:	222d      	movs	r2, #45	; 0x2d
 800dfd4:	425b      	negs	r3, r3
 800dfd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dfda:	486f      	ldr	r0, [pc, #444]	; (800e198 <_printf_i+0x21c>)
 800dfdc:	220a      	movs	r2, #10
 800dfde:	e039      	b.n	800e054 <_printf_i+0xd8>
 800dfe0:	2973      	cmp	r1, #115	; 0x73
 800dfe2:	f000 809d 	beq.w	800e120 <_printf_i+0x1a4>
 800dfe6:	d808      	bhi.n	800dffa <_printf_i+0x7e>
 800dfe8:	296f      	cmp	r1, #111	; 0x6f
 800dfea:	d020      	beq.n	800e02e <_printf_i+0xb2>
 800dfec:	2970      	cmp	r1, #112	; 0x70
 800dfee:	d1dd      	bne.n	800dfac <_printf_i+0x30>
 800dff0:	6823      	ldr	r3, [r4, #0]
 800dff2:	f043 0320 	orr.w	r3, r3, #32
 800dff6:	6023      	str	r3, [r4, #0]
 800dff8:	e003      	b.n	800e002 <_printf_i+0x86>
 800dffa:	2975      	cmp	r1, #117	; 0x75
 800dffc:	d017      	beq.n	800e02e <_printf_i+0xb2>
 800dffe:	2978      	cmp	r1, #120	; 0x78
 800e000:	d1d4      	bne.n	800dfac <_printf_i+0x30>
 800e002:	2378      	movs	r3, #120	; 0x78
 800e004:	4865      	ldr	r0, [pc, #404]	; (800e19c <_printf_i+0x220>)
 800e006:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e00a:	e055      	b.n	800e0b8 <_printf_i+0x13c>
 800e00c:	6813      	ldr	r3, [r2, #0]
 800e00e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e012:	1d19      	adds	r1, r3, #4
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	6011      	str	r1, [r2, #0]
 800e018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e01c:	2301      	movs	r3, #1
 800e01e:	e08c      	b.n	800e13a <_printf_i+0x1be>
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e026:	6011      	str	r1, [r2, #0]
 800e028:	bf18      	it	ne
 800e02a:	b21b      	sxthne	r3, r3
 800e02c:	e7cf      	b.n	800dfce <_printf_i+0x52>
 800e02e:	6813      	ldr	r3, [r2, #0]
 800e030:	6825      	ldr	r5, [r4, #0]
 800e032:	1d18      	adds	r0, r3, #4
 800e034:	6010      	str	r0, [r2, #0]
 800e036:	0628      	lsls	r0, r5, #24
 800e038:	d501      	bpl.n	800e03e <_printf_i+0xc2>
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	e002      	b.n	800e044 <_printf_i+0xc8>
 800e03e:	0668      	lsls	r0, r5, #25
 800e040:	d5fb      	bpl.n	800e03a <_printf_i+0xbe>
 800e042:	881b      	ldrh	r3, [r3, #0]
 800e044:	296f      	cmp	r1, #111	; 0x6f
 800e046:	bf14      	ite	ne
 800e048:	220a      	movne	r2, #10
 800e04a:	2208      	moveq	r2, #8
 800e04c:	4852      	ldr	r0, [pc, #328]	; (800e198 <_printf_i+0x21c>)
 800e04e:	2100      	movs	r1, #0
 800e050:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e054:	6865      	ldr	r5, [r4, #4]
 800e056:	2d00      	cmp	r5, #0
 800e058:	60a5      	str	r5, [r4, #8]
 800e05a:	f2c0 8095 	blt.w	800e188 <_printf_i+0x20c>
 800e05e:	6821      	ldr	r1, [r4, #0]
 800e060:	f021 0104 	bic.w	r1, r1, #4
 800e064:	6021      	str	r1, [r4, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d13d      	bne.n	800e0e6 <_printf_i+0x16a>
 800e06a:	2d00      	cmp	r5, #0
 800e06c:	f040 808e 	bne.w	800e18c <_printf_i+0x210>
 800e070:	4665      	mov	r5, ip
 800e072:	2a08      	cmp	r2, #8
 800e074:	d10b      	bne.n	800e08e <_printf_i+0x112>
 800e076:	6823      	ldr	r3, [r4, #0]
 800e078:	07db      	lsls	r3, r3, #31
 800e07a:	d508      	bpl.n	800e08e <_printf_i+0x112>
 800e07c:	6923      	ldr	r3, [r4, #16]
 800e07e:	6862      	ldr	r2, [r4, #4]
 800e080:	429a      	cmp	r2, r3
 800e082:	bfde      	ittt	le
 800e084:	2330      	movle	r3, #48	; 0x30
 800e086:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e08a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e08e:	ebac 0305 	sub.w	r3, ip, r5
 800e092:	6123      	str	r3, [r4, #16]
 800e094:	f8cd 8000 	str.w	r8, [sp]
 800e098:	463b      	mov	r3, r7
 800e09a:	aa03      	add	r2, sp, #12
 800e09c:	4621      	mov	r1, r4
 800e09e:	4630      	mov	r0, r6
 800e0a0:	f7ff fef6 	bl	800de90 <_printf_common>
 800e0a4:	3001      	adds	r0, #1
 800e0a6:	d14d      	bne.n	800e144 <_printf_i+0x1c8>
 800e0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0ac:	b005      	add	sp, #20
 800e0ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0b2:	4839      	ldr	r0, [pc, #228]	; (800e198 <_printf_i+0x21c>)
 800e0b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e0b8:	6813      	ldr	r3, [r2, #0]
 800e0ba:	6821      	ldr	r1, [r4, #0]
 800e0bc:	1d1d      	adds	r5, r3, #4
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	6015      	str	r5, [r2, #0]
 800e0c2:	060a      	lsls	r2, r1, #24
 800e0c4:	d50b      	bpl.n	800e0de <_printf_i+0x162>
 800e0c6:	07ca      	lsls	r2, r1, #31
 800e0c8:	bf44      	itt	mi
 800e0ca:	f041 0120 	orrmi.w	r1, r1, #32
 800e0ce:	6021      	strmi	r1, [r4, #0]
 800e0d0:	b91b      	cbnz	r3, 800e0da <_printf_i+0x15e>
 800e0d2:	6822      	ldr	r2, [r4, #0]
 800e0d4:	f022 0220 	bic.w	r2, r2, #32
 800e0d8:	6022      	str	r2, [r4, #0]
 800e0da:	2210      	movs	r2, #16
 800e0dc:	e7b7      	b.n	800e04e <_printf_i+0xd2>
 800e0de:	064d      	lsls	r5, r1, #25
 800e0e0:	bf48      	it	mi
 800e0e2:	b29b      	uxthmi	r3, r3
 800e0e4:	e7ef      	b.n	800e0c6 <_printf_i+0x14a>
 800e0e6:	4665      	mov	r5, ip
 800e0e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800e0ec:	fb02 3311 	mls	r3, r2, r1, r3
 800e0f0:	5cc3      	ldrb	r3, [r0, r3]
 800e0f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e0f6:	460b      	mov	r3, r1
 800e0f8:	2900      	cmp	r1, #0
 800e0fa:	d1f5      	bne.n	800e0e8 <_printf_i+0x16c>
 800e0fc:	e7b9      	b.n	800e072 <_printf_i+0xf6>
 800e0fe:	6813      	ldr	r3, [r2, #0]
 800e100:	6825      	ldr	r5, [r4, #0]
 800e102:	1d18      	adds	r0, r3, #4
 800e104:	6961      	ldr	r1, [r4, #20]
 800e106:	6010      	str	r0, [r2, #0]
 800e108:	0628      	lsls	r0, r5, #24
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	d501      	bpl.n	800e112 <_printf_i+0x196>
 800e10e:	6019      	str	r1, [r3, #0]
 800e110:	e002      	b.n	800e118 <_printf_i+0x19c>
 800e112:	066a      	lsls	r2, r5, #25
 800e114:	d5fb      	bpl.n	800e10e <_printf_i+0x192>
 800e116:	8019      	strh	r1, [r3, #0]
 800e118:	2300      	movs	r3, #0
 800e11a:	4665      	mov	r5, ip
 800e11c:	6123      	str	r3, [r4, #16]
 800e11e:	e7b9      	b.n	800e094 <_printf_i+0x118>
 800e120:	6813      	ldr	r3, [r2, #0]
 800e122:	1d19      	adds	r1, r3, #4
 800e124:	6011      	str	r1, [r2, #0]
 800e126:	681d      	ldr	r5, [r3, #0]
 800e128:	6862      	ldr	r2, [r4, #4]
 800e12a:	2100      	movs	r1, #0
 800e12c:	4628      	mov	r0, r5
 800e12e:	f000 f8e1 	bl	800e2f4 <memchr>
 800e132:	b108      	cbz	r0, 800e138 <_printf_i+0x1bc>
 800e134:	1b40      	subs	r0, r0, r5
 800e136:	6060      	str	r0, [r4, #4]
 800e138:	6863      	ldr	r3, [r4, #4]
 800e13a:	6123      	str	r3, [r4, #16]
 800e13c:	2300      	movs	r3, #0
 800e13e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e142:	e7a7      	b.n	800e094 <_printf_i+0x118>
 800e144:	6923      	ldr	r3, [r4, #16]
 800e146:	462a      	mov	r2, r5
 800e148:	4639      	mov	r1, r7
 800e14a:	4630      	mov	r0, r6
 800e14c:	47c0      	blx	r8
 800e14e:	3001      	adds	r0, #1
 800e150:	d0aa      	beq.n	800e0a8 <_printf_i+0x12c>
 800e152:	6823      	ldr	r3, [r4, #0]
 800e154:	079b      	lsls	r3, r3, #30
 800e156:	d413      	bmi.n	800e180 <_printf_i+0x204>
 800e158:	68e0      	ldr	r0, [r4, #12]
 800e15a:	9b03      	ldr	r3, [sp, #12]
 800e15c:	4298      	cmp	r0, r3
 800e15e:	bfb8      	it	lt
 800e160:	4618      	movlt	r0, r3
 800e162:	e7a3      	b.n	800e0ac <_printf_i+0x130>
 800e164:	2301      	movs	r3, #1
 800e166:	464a      	mov	r2, r9
 800e168:	4639      	mov	r1, r7
 800e16a:	4630      	mov	r0, r6
 800e16c:	47c0      	blx	r8
 800e16e:	3001      	adds	r0, #1
 800e170:	d09a      	beq.n	800e0a8 <_printf_i+0x12c>
 800e172:	3501      	adds	r5, #1
 800e174:	68e3      	ldr	r3, [r4, #12]
 800e176:	9a03      	ldr	r2, [sp, #12]
 800e178:	1a9b      	subs	r3, r3, r2
 800e17a:	42ab      	cmp	r3, r5
 800e17c:	dcf2      	bgt.n	800e164 <_printf_i+0x1e8>
 800e17e:	e7eb      	b.n	800e158 <_printf_i+0x1dc>
 800e180:	2500      	movs	r5, #0
 800e182:	f104 0919 	add.w	r9, r4, #25
 800e186:	e7f5      	b.n	800e174 <_printf_i+0x1f8>
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d1ac      	bne.n	800e0e6 <_printf_i+0x16a>
 800e18c:	7803      	ldrb	r3, [r0, #0]
 800e18e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e192:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e196:	e76c      	b.n	800e072 <_printf_i+0xf6>
 800e198:	0800f015 	.word	0x0800f015
 800e19c:	0800f026 	.word	0x0800f026

0800e1a0 <_sbrk_r>:
 800e1a0:	b538      	push	{r3, r4, r5, lr}
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	4c05      	ldr	r4, [pc, #20]	; (800e1bc <_sbrk_r+0x1c>)
 800e1a6:	4605      	mov	r5, r0
 800e1a8:	4608      	mov	r0, r1
 800e1aa:	6023      	str	r3, [r4, #0]
 800e1ac:	f7f8 fe50 	bl	8006e50 <_sbrk>
 800e1b0:	1c43      	adds	r3, r0, #1
 800e1b2:	d102      	bne.n	800e1ba <_sbrk_r+0x1a>
 800e1b4:	6823      	ldr	r3, [r4, #0]
 800e1b6:	b103      	cbz	r3, 800e1ba <_sbrk_r+0x1a>
 800e1b8:	602b      	str	r3, [r5, #0]
 800e1ba:	bd38      	pop	{r3, r4, r5, pc}
 800e1bc:	2000105c 	.word	0x2000105c

0800e1c0 <__sread>:
 800e1c0:	b510      	push	{r4, lr}
 800e1c2:	460c      	mov	r4, r1
 800e1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1c8:	f000 f8ac 	bl	800e324 <_read_r>
 800e1cc:	2800      	cmp	r0, #0
 800e1ce:	bfab      	itete	ge
 800e1d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e1d2:	89a3      	ldrhlt	r3, [r4, #12]
 800e1d4:	181b      	addge	r3, r3, r0
 800e1d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e1da:	bfac      	ite	ge
 800e1dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800e1de:	81a3      	strhlt	r3, [r4, #12]
 800e1e0:	bd10      	pop	{r4, pc}

0800e1e2 <__swrite>:
 800e1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e6:	461f      	mov	r7, r3
 800e1e8:	898b      	ldrh	r3, [r1, #12]
 800e1ea:	4605      	mov	r5, r0
 800e1ec:	05db      	lsls	r3, r3, #23
 800e1ee:	460c      	mov	r4, r1
 800e1f0:	4616      	mov	r6, r2
 800e1f2:	d505      	bpl.n	800e200 <__swrite+0x1e>
 800e1f4:	2302      	movs	r3, #2
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1fc:	f000 f868 	bl	800e2d0 <_lseek_r>
 800e200:	89a3      	ldrh	r3, [r4, #12]
 800e202:	4632      	mov	r2, r6
 800e204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e208:	81a3      	strh	r3, [r4, #12]
 800e20a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e20e:	463b      	mov	r3, r7
 800e210:	4628      	mov	r0, r5
 800e212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e216:	f000 b817 	b.w	800e248 <_write_r>

0800e21a <__sseek>:
 800e21a:	b510      	push	{r4, lr}
 800e21c:	460c      	mov	r4, r1
 800e21e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e222:	f000 f855 	bl	800e2d0 <_lseek_r>
 800e226:	1c43      	adds	r3, r0, #1
 800e228:	89a3      	ldrh	r3, [r4, #12]
 800e22a:	bf15      	itete	ne
 800e22c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e22e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e232:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e236:	81a3      	strheq	r3, [r4, #12]
 800e238:	bf18      	it	ne
 800e23a:	81a3      	strhne	r3, [r4, #12]
 800e23c:	bd10      	pop	{r4, pc}

0800e23e <__sclose>:
 800e23e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e242:	f000 b813 	b.w	800e26c <_close_r>
	...

0800e248 <_write_r>:
 800e248:	b538      	push	{r3, r4, r5, lr}
 800e24a:	4605      	mov	r5, r0
 800e24c:	4608      	mov	r0, r1
 800e24e:	4611      	mov	r1, r2
 800e250:	2200      	movs	r2, #0
 800e252:	4c05      	ldr	r4, [pc, #20]	; (800e268 <_write_r+0x20>)
 800e254:	6022      	str	r2, [r4, #0]
 800e256:	461a      	mov	r2, r3
 800e258:	f7f8 fdae 	bl	8006db8 <_write>
 800e25c:	1c43      	adds	r3, r0, #1
 800e25e:	d102      	bne.n	800e266 <_write_r+0x1e>
 800e260:	6823      	ldr	r3, [r4, #0]
 800e262:	b103      	cbz	r3, 800e266 <_write_r+0x1e>
 800e264:	602b      	str	r3, [r5, #0]
 800e266:	bd38      	pop	{r3, r4, r5, pc}
 800e268:	2000105c 	.word	0x2000105c

0800e26c <_close_r>:
 800e26c:	b538      	push	{r3, r4, r5, lr}
 800e26e:	2300      	movs	r3, #0
 800e270:	4c05      	ldr	r4, [pc, #20]	; (800e288 <_close_r+0x1c>)
 800e272:	4605      	mov	r5, r0
 800e274:	4608      	mov	r0, r1
 800e276:	6023      	str	r3, [r4, #0]
 800e278:	f7f8 fdba 	bl	8006df0 <_close>
 800e27c:	1c43      	adds	r3, r0, #1
 800e27e:	d102      	bne.n	800e286 <_close_r+0x1a>
 800e280:	6823      	ldr	r3, [r4, #0]
 800e282:	b103      	cbz	r3, 800e286 <_close_r+0x1a>
 800e284:	602b      	str	r3, [r5, #0]
 800e286:	bd38      	pop	{r3, r4, r5, pc}
 800e288:	2000105c 	.word	0x2000105c

0800e28c <_fstat_r>:
 800e28c:	b538      	push	{r3, r4, r5, lr}
 800e28e:	2300      	movs	r3, #0
 800e290:	4c06      	ldr	r4, [pc, #24]	; (800e2ac <_fstat_r+0x20>)
 800e292:	4605      	mov	r5, r0
 800e294:	4608      	mov	r0, r1
 800e296:	4611      	mov	r1, r2
 800e298:	6023      	str	r3, [r4, #0]
 800e29a:	f7f8 fdb4 	bl	8006e06 <_fstat>
 800e29e:	1c43      	adds	r3, r0, #1
 800e2a0:	d102      	bne.n	800e2a8 <_fstat_r+0x1c>
 800e2a2:	6823      	ldr	r3, [r4, #0]
 800e2a4:	b103      	cbz	r3, 800e2a8 <_fstat_r+0x1c>
 800e2a6:	602b      	str	r3, [r5, #0]
 800e2a8:	bd38      	pop	{r3, r4, r5, pc}
 800e2aa:	bf00      	nop
 800e2ac:	2000105c 	.word	0x2000105c

0800e2b0 <_isatty_r>:
 800e2b0:	b538      	push	{r3, r4, r5, lr}
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	4c05      	ldr	r4, [pc, #20]	; (800e2cc <_isatty_r+0x1c>)
 800e2b6:	4605      	mov	r5, r0
 800e2b8:	4608      	mov	r0, r1
 800e2ba:	6023      	str	r3, [r4, #0]
 800e2bc:	f7f8 fdb2 	bl	8006e24 <_isatty>
 800e2c0:	1c43      	adds	r3, r0, #1
 800e2c2:	d102      	bne.n	800e2ca <_isatty_r+0x1a>
 800e2c4:	6823      	ldr	r3, [r4, #0]
 800e2c6:	b103      	cbz	r3, 800e2ca <_isatty_r+0x1a>
 800e2c8:	602b      	str	r3, [r5, #0]
 800e2ca:	bd38      	pop	{r3, r4, r5, pc}
 800e2cc:	2000105c 	.word	0x2000105c

0800e2d0 <_lseek_r>:
 800e2d0:	b538      	push	{r3, r4, r5, lr}
 800e2d2:	4605      	mov	r5, r0
 800e2d4:	4608      	mov	r0, r1
 800e2d6:	4611      	mov	r1, r2
 800e2d8:	2200      	movs	r2, #0
 800e2da:	4c05      	ldr	r4, [pc, #20]	; (800e2f0 <_lseek_r+0x20>)
 800e2dc:	6022      	str	r2, [r4, #0]
 800e2de:	461a      	mov	r2, r3
 800e2e0:	f7f8 fdaa 	bl	8006e38 <_lseek>
 800e2e4:	1c43      	adds	r3, r0, #1
 800e2e6:	d102      	bne.n	800e2ee <_lseek_r+0x1e>
 800e2e8:	6823      	ldr	r3, [r4, #0]
 800e2ea:	b103      	cbz	r3, 800e2ee <_lseek_r+0x1e>
 800e2ec:	602b      	str	r3, [r5, #0]
 800e2ee:	bd38      	pop	{r3, r4, r5, pc}
 800e2f0:	2000105c 	.word	0x2000105c

0800e2f4 <memchr>:
 800e2f4:	b510      	push	{r4, lr}
 800e2f6:	b2c9      	uxtb	r1, r1
 800e2f8:	4402      	add	r2, r0
 800e2fa:	4290      	cmp	r0, r2
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	d101      	bne.n	800e304 <memchr+0x10>
 800e300:	2300      	movs	r3, #0
 800e302:	e003      	b.n	800e30c <memchr+0x18>
 800e304:	781c      	ldrb	r4, [r3, #0]
 800e306:	3001      	adds	r0, #1
 800e308:	428c      	cmp	r4, r1
 800e30a:	d1f6      	bne.n	800e2fa <memchr+0x6>
 800e30c:	4618      	mov	r0, r3
 800e30e:	bd10      	pop	{r4, pc}

0800e310 <__malloc_lock>:
 800e310:	4770      	bx	lr

0800e312 <__malloc_unlock>:
 800e312:	4770      	bx	lr

0800e314 <_malloc_usable_size_r>:
 800e314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e318:	1f18      	subs	r0, r3, #4
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	bfbc      	itt	lt
 800e31e:	580b      	ldrlt	r3, [r1, r0]
 800e320:	18c0      	addlt	r0, r0, r3
 800e322:	4770      	bx	lr

0800e324 <_read_r>:
 800e324:	b538      	push	{r3, r4, r5, lr}
 800e326:	4605      	mov	r5, r0
 800e328:	4608      	mov	r0, r1
 800e32a:	4611      	mov	r1, r2
 800e32c:	2200      	movs	r2, #0
 800e32e:	4c05      	ldr	r4, [pc, #20]	; (800e344 <_read_r+0x20>)
 800e330:	6022      	str	r2, [r4, #0]
 800e332:	461a      	mov	r2, r3
 800e334:	f7f8 fd23 	bl	8006d7e <_read>
 800e338:	1c43      	adds	r3, r0, #1
 800e33a:	d102      	bne.n	800e342 <_read_r+0x1e>
 800e33c:	6823      	ldr	r3, [r4, #0]
 800e33e:	b103      	cbz	r3, 800e342 <_read_r+0x1e>
 800e340:	602b      	str	r3, [r5, #0]
 800e342:	bd38      	pop	{r3, r4, r5, pc}
 800e344:	2000105c 	.word	0x2000105c

0800e348 <_init>:
 800e348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e34a:	bf00      	nop
 800e34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e34e:	bc08      	pop	{r3}
 800e350:	469e      	mov	lr, r3
 800e352:	4770      	bx	lr

0800e354 <_fini>:
 800e354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e356:	bf00      	nop
 800e358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e35a:	bc08      	pop	{r3}
 800e35c:	469e      	mov	lr, r3
 800e35e:	4770      	bx	lr
