
RosSearial_templet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b51c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b8  0800b62c  0800b62c  0001b62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfe4  0800bfe4  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800bfe4  0800bfe4  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bfe4  0800bfe4  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bfe4  0800bfe4  0001bfe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfec  0800bfec  0001bfec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800bff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f50  20000098  0800c088  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000fe8  0800c088  00020fe8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001edfc  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000370c  00000000  00000000  0003eebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  000425d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  00043a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5b8  00000000  00000000  00044d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c4a  00000000  00000000  00060320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096fa6  00000000  00000000  00076f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010df10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006344  00000000  00000000  0010df64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000098 	.word	0x20000098
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b614 	.word	0x0800b614

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000009c 	.word	0x2000009c
 800014c:	0800b614 	.word	0x0800b614

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <__aeabi_d2f>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000954:	bf24      	itt	cs
 8000956:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800095a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800095e:	d90d      	bls.n	800097c <__aeabi_d2f+0x30>
 8000960:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000964:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000968:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800096c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000970:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000974:	bf08      	it	eq
 8000976:	f020 0001 	biceq.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000980:	d121      	bne.n	80009c6 <__aeabi_d2f+0x7a>
 8000982:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000986:	bfbc      	itt	lt
 8000988:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800098c:	4770      	bxlt	lr
 800098e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000992:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000996:	f1c2 0218 	rsb	r2, r2, #24
 800099a:	f1c2 0c20 	rsb	ip, r2, #32
 800099e:	fa10 f30c 	lsls.w	r3, r0, ip
 80009a2:	fa20 f002 	lsr.w	r0, r0, r2
 80009a6:	bf18      	it	ne
 80009a8:	f040 0001 	orrne.w	r0, r0, #1
 80009ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b8:	ea40 000c 	orr.w	r0, r0, ip
 80009bc:	fa23 f302 	lsr.w	r3, r3, r2
 80009c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009c4:	e7cc      	b.n	8000960 <__aeabi_d2f+0x14>
 80009c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ca:	d107      	bne.n	80009dc <__aeabi_d2f+0x90>
 80009cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009d0:	bf1e      	ittt	ne
 80009d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009da:	4770      	bxne	lr
 80009dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_frsub>:
 80009ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009f0:	e002      	b.n	80009f8 <__addsf3>
 80009f2:	bf00      	nop

080009f4 <__aeabi_fsub>:
 80009f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009f8 <__addsf3>:
 80009f8:	0042      	lsls	r2, r0, #1
 80009fa:	bf1f      	itttt	ne
 80009fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a00:	ea92 0f03 	teqne	r2, r3
 8000a04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a0c:	d06a      	beq.n	8000ae4 <__addsf3+0xec>
 8000a0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a16:	bfc1      	itttt	gt
 8000a18:	18d2      	addgt	r2, r2, r3
 8000a1a:	4041      	eorgt	r1, r0
 8000a1c:	4048      	eorgt	r0, r1
 8000a1e:	4041      	eorgt	r1, r0
 8000a20:	bfb8      	it	lt
 8000a22:	425b      	neglt	r3, r3
 8000a24:	2b19      	cmp	r3, #25
 8000a26:	bf88      	it	hi
 8000a28:	4770      	bxhi	lr
 8000a2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4249      	negne	r1, r1
 8000a4a:	ea92 0f03 	teq	r2, r3
 8000a4e:	d03f      	beq.n	8000ad0 <__addsf3+0xd8>
 8000a50:	f1a2 0201 	sub.w	r2, r2, #1
 8000a54:	fa41 fc03 	asr.w	ip, r1, r3
 8000a58:	eb10 000c 	adds.w	r0, r0, ip
 8000a5c:	f1c3 0320 	rsb	r3, r3, #32
 8000a60:	fa01 f103 	lsl.w	r1, r1, r3
 8000a64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a68:	d502      	bpl.n	8000a70 <__addsf3+0x78>
 8000a6a:	4249      	negs	r1, r1
 8000a6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a74:	d313      	bcc.n	8000a9e <__addsf3+0xa6>
 8000a76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a7a:	d306      	bcc.n	8000a8a <__addsf3+0x92>
 8000a7c:	0840      	lsrs	r0, r0, #1
 8000a7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a82:	f102 0201 	add.w	r2, r2, #1
 8000a86:	2afe      	cmp	r2, #254	; 0xfe
 8000a88:	d251      	bcs.n	8000b2e <__addsf3+0x136>
 8000a8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a92:	bf08      	it	eq
 8000a94:	f020 0001 	biceq.w	r0, r0, #1
 8000a98:	ea40 0003 	orr.w	r0, r0, r3
 8000a9c:	4770      	bx	lr
 8000a9e:	0049      	lsls	r1, r1, #1
 8000aa0:	eb40 0000 	adc.w	r0, r0, r0
 8000aa4:	3a01      	subs	r2, #1
 8000aa6:	bf28      	it	cs
 8000aa8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000aac:	d2ed      	bcs.n	8000a8a <__addsf3+0x92>
 8000aae:	fab0 fc80 	clz	ip, r0
 8000ab2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ab6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000abe:	bfaa      	itet	ge
 8000ac0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ac4:	4252      	neglt	r2, r2
 8000ac6:	4318      	orrge	r0, r3
 8000ac8:	bfbc      	itt	lt
 8000aca:	40d0      	lsrlt	r0, r2
 8000acc:	4318      	orrlt	r0, r3
 8000ace:	4770      	bx	lr
 8000ad0:	f092 0f00 	teq	r2, #0
 8000ad4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ad8:	bf06      	itte	eq
 8000ada:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ade:	3201      	addeq	r2, #1
 8000ae0:	3b01      	subne	r3, #1
 8000ae2:	e7b5      	b.n	8000a50 <__addsf3+0x58>
 8000ae4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ae8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aec:	bf18      	it	ne
 8000aee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af2:	d021      	beq.n	8000b38 <__addsf3+0x140>
 8000af4:	ea92 0f03 	teq	r2, r3
 8000af8:	d004      	beq.n	8000b04 <__addsf3+0x10c>
 8000afa:	f092 0f00 	teq	r2, #0
 8000afe:	bf08      	it	eq
 8000b00:	4608      	moveq	r0, r1
 8000b02:	4770      	bx	lr
 8000b04:	ea90 0f01 	teq	r0, r1
 8000b08:	bf1c      	itt	ne
 8000b0a:	2000      	movne	r0, #0
 8000b0c:	4770      	bxne	lr
 8000b0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b12:	d104      	bne.n	8000b1e <__addsf3+0x126>
 8000b14:	0040      	lsls	r0, r0, #1
 8000b16:	bf28      	it	cs
 8000b18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	4770      	bx	lr
 8000b1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b22:	bf3c      	itt	cc
 8000b24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bxcc	lr
 8000b2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b36:	4770      	bx	lr
 8000b38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b3c:	bf16      	itet	ne
 8000b3e:	4608      	movne	r0, r1
 8000b40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b44:	4601      	movne	r1, r0
 8000b46:	0242      	lsls	r2, r0, #9
 8000b48:	bf06      	itte	eq
 8000b4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b4e:	ea90 0f01 	teqeq	r0, r1
 8000b52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_ui2f>:
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	e004      	b.n	8000b68 <__aeabi_i2f+0x8>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_i2f>:
 8000b60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b64:	bf48      	it	mi
 8000b66:	4240      	negmi	r0, r0
 8000b68:	ea5f 0c00 	movs.w	ip, r0
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b74:	4601      	mov	r1, r0
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	e01c      	b.n	8000bb6 <__aeabi_l2f+0x2a>

08000b7c <__aeabi_ul2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e00a      	b.n	8000ba0 <__aeabi_l2f+0x14>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_l2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b98:	d502      	bpl.n	8000ba0 <__aeabi_l2f+0x14>
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	ea5f 0c01 	movs.w	ip, r1
 8000ba4:	bf02      	ittt	eq
 8000ba6:	4684      	moveq	ip, r0
 8000ba8:	4601      	moveq	r1, r0
 8000baa:	2000      	moveq	r0, #0
 8000bac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bba:	fabc f28c 	clz	r2, ip
 8000bbe:	3a08      	subs	r2, #8
 8000bc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bc4:	db10      	blt.n	8000be8 <__aeabi_l2f+0x5c>
 8000bc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bca:	4463      	add	r3, ip
 8000bcc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f102 0220 	add.w	r2, r2, #32
 8000bec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf0:	f1c2 0220 	rsb	r2, r2, #32
 8000bf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bfc:	eb43 0002 	adc.w	r0, r3, r2
 8000c00:	bf08      	it	eq
 8000c02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_fmul>:
 8000c08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c10:	bf1e      	ittt	ne
 8000c12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c16:	ea92 0f0c 	teqne	r2, ip
 8000c1a:	ea93 0f0c 	teqne	r3, ip
 8000c1e:	d06f      	beq.n	8000d00 <__aeabi_fmul+0xf8>
 8000c20:	441a      	add	r2, r3
 8000c22:	ea80 0c01 	eor.w	ip, r0, r1
 8000c26:	0240      	lsls	r0, r0, #9
 8000c28:	bf18      	it	ne
 8000c2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c2e:	d01e      	beq.n	8000c6e <__aeabi_fmul+0x66>
 8000c30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c48:	bf3e      	ittt	cc
 8000c4a:	0049      	lslcc	r1, r1, #1
 8000c4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c50:	005b      	lslcc	r3, r3, #1
 8000c52:	ea40 0001 	orr.w	r0, r0, r1
 8000c56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c5a:	2afd      	cmp	r2, #253	; 0xfd
 8000c5c:	d81d      	bhi.n	8000c9a <__aeabi_fmul+0x92>
 8000c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c66:	bf08      	it	eq
 8000c68:	f020 0001 	biceq.w	r0, r0, #1
 8000c6c:	4770      	bx	lr
 8000c6e:	f090 0f00 	teq	r0, #0
 8000c72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c76:	bf08      	it	eq
 8000c78:	0249      	lsleq	r1, r1, #9
 8000c7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c82:	3a7f      	subs	r2, #127	; 0x7f
 8000c84:	bfc2      	ittt	gt
 8000c86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c8e:	4770      	bxgt	lr
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	dc5d      	bgt.n	8000d58 <__aeabi_fmul+0x150>
 8000c9c:	f112 0f19 	cmn.w	r2, #25
 8000ca0:	bfdc      	itt	le
 8000ca2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ca6:	4770      	bxle	lr
 8000ca8:	f1c2 0200 	rsb	r2, r2, #0
 8000cac:	0041      	lsls	r1, r0, #1
 8000cae:	fa21 f102 	lsr.w	r1, r1, r2
 8000cb2:	f1c2 0220 	rsb	r2, r2, #32
 8000cb6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cbe:	f140 0000 	adc.w	r0, r0, #0
 8000cc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cc6:	bf08      	it	eq
 8000cc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ccc:	4770      	bx	lr
 8000cce:	f092 0f00 	teq	r2, #0
 8000cd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cd6:	bf02      	ittt	eq
 8000cd8:	0040      	lsleq	r0, r0, #1
 8000cda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cde:	3a01      	subeq	r2, #1
 8000ce0:	d0f9      	beq.n	8000cd6 <__aeabi_fmul+0xce>
 8000ce2:	ea40 000c 	orr.w	r0, r0, ip
 8000ce6:	f093 0f00 	teq	r3, #0
 8000cea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cee:	bf02      	ittt	eq
 8000cf0:	0049      	lsleq	r1, r1, #1
 8000cf2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cf6:	3b01      	subeq	r3, #1
 8000cf8:	d0f9      	beq.n	8000cee <__aeabi_fmul+0xe6>
 8000cfa:	ea41 010c 	orr.w	r1, r1, ip
 8000cfe:	e78f      	b.n	8000c20 <__aeabi_fmul+0x18>
 8000d00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d04:	ea92 0f0c 	teq	r2, ip
 8000d08:	bf18      	it	ne
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d00a      	beq.n	8000d26 <__aeabi_fmul+0x11e>
 8000d10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d14:	bf18      	it	ne
 8000d16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d1a:	d1d8      	bne.n	8000cce <__aeabi_fmul+0xc6>
 8000d1c:	ea80 0001 	eor.w	r0, r0, r1
 8000d20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f090 0f00 	teq	r0, #0
 8000d2a:	bf17      	itett	ne
 8000d2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d30:	4608      	moveq	r0, r1
 8000d32:	f091 0f00 	teqne	r1, #0
 8000d36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d3a:	d014      	beq.n	8000d66 <__aeabi_fmul+0x15e>
 8000d3c:	ea92 0f0c 	teq	r2, ip
 8000d40:	d101      	bne.n	8000d46 <__aeabi_fmul+0x13e>
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	d10f      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d46:	ea93 0f0c 	teq	r3, ip
 8000d4a:	d103      	bne.n	8000d54 <__aeabi_fmul+0x14c>
 8000d4c:	024b      	lsls	r3, r1, #9
 8000d4e:	bf18      	it	ne
 8000d50:	4608      	movne	r0, r1
 8000d52:	d108      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d54:	ea80 0001 	eor.w	r0, r0, r1
 8000d58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d6e:	4770      	bx	lr

08000d70 <__aeabi_fdiv>:
 8000d70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d78:	bf1e      	ittt	ne
 8000d7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7e:	ea92 0f0c 	teqne	r2, ip
 8000d82:	ea93 0f0c 	teqne	r3, ip
 8000d86:	d069      	beq.n	8000e5c <__aeabi_fdiv+0xec>
 8000d88:	eba2 0203 	sub.w	r2, r2, r3
 8000d8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d96:	d037      	beq.n	8000e08 <__aeabi_fdiv+0x98>
 8000d98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000da0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	428b      	cmp	r3, r1
 8000daa:	bf38      	it	cc
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000db2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000db6:	428b      	cmp	r3, r1
 8000db8:	bf24      	itt	cs
 8000dba:	1a5b      	subcs	r3, r3, r1
 8000dbc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dc0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dc4:	bf24      	itt	cs
 8000dc6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dd2:	bf24      	itt	cs
 8000dd4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ddc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000de0:	bf24      	itt	cs
 8000de2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000de6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	bf18      	it	ne
 8000dee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000df2:	d1e0      	bne.n	8000db6 <__aeabi_fdiv+0x46>
 8000df4:	2afd      	cmp	r2, #253	; 0xfd
 8000df6:	f63f af50 	bhi.w	8000c9a <__aeabi_fmul+0x92>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e00:	bf08      	it	eq
 8000e02:	f020 0001 	biceq.w	r0, r0, #1
 8000e06:	4770      	bx	lr
 8000e08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e10:	327f      	adds	r2, #127	; 0x7f
 8000e12:	bfc2      	ittt	gt
 8000e14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1c:	4770      	bxgt	lr
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	3a01      	subs	r2, #1
 8000e28:	e737      	b.n	8000c9a <__aeabi_fmul+0x92>
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fdiv+0xc2>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fdiv+0xda>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e795      	b.n	8000d88 <__aeabi_fdiv+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	d108      	bne.n	8000e78 <__aeabi_fdiv+0x108>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	f47f af7d 	bne.w	8000d66 <__aeabi_fmul+0x15e>
 8000e6c:	ea93 0f0c 	teq	r3, ip
 8000e70:	f47f af70 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e776      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e78:	ea93 0f0c 	teq	r3, ip
 8000e7c:	d104      	bne.n	8000e88 <__aeabi_fdiv+0x118>
 8000e7e:	024b      	lsls	r3, r1, #9
 8000e80:	f43f af4c 	beq.w	8000d1c <__aeabi_fmul+0x114>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e76e      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1ca      	bne.n	8000e2a <__aeabi_fdiv+0xba>
 8000e94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e98:	f47f af5c 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ea0:	f47f af3c 	bne.w	8000d1c <__aeabi_fmul+0x114>
 8000ea4:	e75f      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000ea6:	bf00      	nop

08000ea8 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	2007      	movs	r0, #7
 8000eb8:	f003 fe0c 	bl	8004ad4 <bno055_writeData>
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	203d      	movs	r0, #61	; 0x3d
 8000ed4:	f003 fdfe 	bl	8004ad4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d103      	bne.n	8000ee6 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000ede:	2013      	movs	r0, #19
 8000ee0:	f003 fdec 	bl	8004abc <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000ee4:	e002      	b.n	8000eec <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000ee6:	2007      	movs	r0, #7
 8000ee8:	f003 fde8 	bl	8004abc <bno055_delay>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff ffe3 	bl	8000ec4 <bno055_setOperationMode>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000f02:	b580      	push	{r7, lr}
 8000f04:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000f06:	200c      	movs	r0, #12
 8000f08:	f7ff ffdc 	bl	8000ec4 <bno055_setOperationMode>
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000f14:	2120      	movs	r1, #32
 8000f16:	203f      	movs	r0, #63	; 0x3f
 8000f18:	f003 fddc 	bl	8004ad4 <bno055_writeData>
  bno055_delay(700);
 8000f1c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f20:	f003 fdcc 	bl	8004abc <bno055_delay>
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
  bno055_reset();
 8000f2e:	f7ff ffef 	bl	8000f10 <bno055_reset>

  uint8_t id = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f003 feb5 	bl	8004cac <bno055_readData>
  if (id != BNO055_ID) {
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2ba0      	cmp	r3, #160	; 0xa0
 8000f46:	d004      	beq.n	8000f52 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <bno055_setup+0x4c>)
 8000f4e:	f009 fb11 	bl	800a574 <iprintf>
  }
  bno055_setPage(0);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f7ff ffa8 	bl	8000ea8 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	203f      	movs	r0, #63	; 0x3f
 8000f5c:	f003 fdba 	bl	8004ad4 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000f60:	f7ff ffc8 	bl	8000ef4 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000f64:	200a      	movs	r0, #10
 8000f66:	f003 fda9 	bl	8004abc <bno055_delay>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	0800b62c 	.word	0x0800b62c

08000f78 <bno055_getSelfTestResult>:
  uint8_t tmp;
  bno055_readData(BNO055_SYS_STATUS, &tmp, 1);
  return tmp;
}

bno055_self_test_result_t bno055_getSelfTestResult() {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f7ff ff92 	bl	8000ea8 <bno055_setPage>
  uint8_t tmp;
  bno055_self_test_result_t res = {
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
      .mcuState = 0, .gyrState = 0, .magState = 0, .accState = 0};
  bno055_readData(BNO055_ST_RESULT, &tmp, 1);
 8000f88:	f107 030b 	add.w	r3, r7, #11
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4619      	mov	r1, r3
 8000f90:	2036      	movs	r0, #54	; 0x36
 8000f92:	f003 fe8b 	bl	8004cac <bno055_readData>
  res.mcuState = (tmp >> 3) & 0x01;
 8000f96:	7afb      	ldrb	r3, [r7, #11]
 8000f98:	08db      	lsrs	r3, r3, #3
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	713b      	strb	r3, [r7, #4]
  res.gyrState = (tmp >> 2) & 0x01;
 8000fa4:	7afb      	ldrb	r3, [r7, #11]
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	717b      	strb	r3, [r7, #5]
  res.magState = (tmp >> 1) & 0x01;
 8000fb2:	7afb      	ldrb	r3, [r7, #11]
 8000fb4:	085b      	lsrs	r3, r3, #1
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	71bb      	strb	r3, [r7, #6]
  res.accState = (tmp >> 0) & 0x01;
 8000fc0:	7afb      	ldrb	r3, [r7, #11]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	71fb      	strb	r3, [r7, #7]
  return res;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	2300      	movs	r3, #0
 8000fd0:	7b3a      	ldrb	r2, [r7, #12]
 8000fd2:	f362 0307 	bfi	r3, r2, #0, #8
 8000fd6:	7b7a      	ldrb	r2, [r7, #13]
 8000fd8:	f362 230f 	bfi	r3, r2, #8, #8
 8000fdc:	7bba      	ldrb	r2, [r7, #14]
 8000fde:	f362 4317 	bfi	r3, r2, #16, #8
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	f362 631f 	bfi	r3, r2, #24, #8
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b08e      	sub	sp, #56	; 0x38
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
  bno055_setPage(0);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff ff53 	bl	8000ea8 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001002:	78fb      	ldrb	r3, [r7, #3]
 8001004:	2b20      	cmp	r3, #32
 8001006:	d107      	bne.n	8001018 <bno055_getVector+0x28>
    bno055_readData(vec, buffer, 8);
 8001008:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	2208      	movs	r2, #8
 8001010:	4618      	mov	r0, r3
 8001012:	f003 fe4b 	bl	8004cac <bno055_readData>
 8001016:	e006      	b.n	8001026 <bno055_getVector+0x36>
  else
    bno055_readData(vec, buffer, 6);
 8001018:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	2206      	movs	r2, #6
 8001020:	4618      	mov	r0, r3
 8001022:	f003 fe43 	bl	8004cac <bno055_readData>

  double scale = 1;
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	4b77      	ldr	r3, [pc, #476]	; (8001208 <bno055_getVector+0x218>)
 800102c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	2b0e      	cmp	r3, #14
 8001034:	d109      	bne.n	800104a <bno055_getVector+0x5a>
    scale = magScale;
 8001036:	4b75      	ldr	r3, [pc, #468]	; (800120c <bno055_getVector+0x21c>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f9d2 	bl	80003e4 <__aeabi_ui2d>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001048:	e038      	b.n	80010bc <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	2b08      	cmp	r3, #8
 800104e:	d005      	beq.n	800105c <bno055_getVector+0x6c>
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	2b28      	cmp	r3, #40	; 0x28
 8001054:	d002      	beq.n	800105c <bno055_getVector+0x6c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001056:	78fb      	ldrb	r3, [r7, #3]
 8001058:	2b2e      	cmp	r3, #46	; 0x2e
 800105a:	d109      	bne.n	8001070 <bno055_getVector+0x80>
    scale = accelScale;
 800105c:	4b6c      	ldr	r3, [pc, #432]	; (8001210 <bno055_getVector+0x220>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff f9bf 	bl	80003e4 <__aeabi_ui2d>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800106e:	e025      	b.n	80010bc <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	2b14      	cmp	r3, #20
 8001074:	d109      	bne.n	800108a <bno055_getVector+0x9a>
    scale = angularRateScale;
 8001076:	4b67      	ldr	r3, [pc, #412]	; (8001214 <bno055_getVector+0x224>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f9b2 	bl	80003e4 <__aeabi_ui2d>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001088:	e018      	b.n	80010bc <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_EULER) {
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	2b1a      	cmp	r3, #26
 800108e:	d109      	bne.n	80010a4 <bno055_getVector+0xb4>
    scale = eulerScale;
 8001090:	4b61      	ldr	r3, [pc, #388]	; (8001218 <bno055_getVector+0x228>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff f9a5 	bl	80003e4 <__aeabi_ui2d>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80010a2:	e00b      	b.n	80010bc <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	2b20      	cmp	r3, #32
 80010a8:	d108      	bne.n	80010bc <bno055_getVector+0xcc>
    scale = quaScale;
 80010aa:	4b5c      	ldr	r3, [pc, #368]	; (800121c <bno055_getVector+0x22c>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f998 	bl	80003e4 <__aeabi_ui2d>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80010bc:	f107 0308 	add.w	r3, r7, #8
 80010c0:	2220      	movs	r2, #32
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f009 fa4d 	bl	800a564 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80010ca:	78fb      	ldrb	r3, [r7, #3]
 80010cc:	2b20      	cmp	r3, #32
 80010ce:	d150      	bne.n	8001172 <bno055_getVector+0x182>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80010d0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80010d4:	021b      	lsls	r3, r3, #8
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f98e 	bl	8000404 <__aeabi_i2d>
 80010e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80010ec:	f7ff fb1e 	bl	800072c <__aeabi_ddiv>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80010f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	b21a      	sxth	r2, r3
 8001100:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b21b      	sxth	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f97a 	bl	8000404 <__aeabi_i2d>
 8001110:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001114:	f7ff fb0a 	bl	800072c <__aeabi_ddiv>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001120:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	b21a      	sxth	r2, r3
 8001128:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800112c:	b21b      	sxth	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b21b      	sxth	r3, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f966 	bl	8000404 <__aeabi_i2d>
 8001138:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800113c:	f7ff faf6 	bl	800072c <__aeabi_ddiv>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	e9c7 2306 	strd	r2, r3, [r7, #24]
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001148:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b21a      	sxth	r2, r3
 8001150:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001154:	b21b      	sxth	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b21b      	sxth	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f952 	bl	8000404 <__aeabi_i2d>
 8001160:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001164:	f7ff fae2 	bl	800072c <__aeabi_ddiv>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001170:	e03b      	b.n	80011ea <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001172:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	b21a      	sxth	r2, r3
 800117a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800117e:	b21b      	sxth	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b21b      	sxth	r3, r3
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f93d 	bl	8000404 <__aeabi_i2d>
 800118a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800118e:	f7ff facd 	bl	800072c <__aeabi_ddiv>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	e9c7 2304 	strd	r2, r3, [r7, #16]
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800119a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f929 	bl	8000404 <__aeabi_i2d>
 80011b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011b6:	f7ff fab9 	bl	800072c <__aeabi_ddiv>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	e9c7 2306 	strd	r2, r3, [r7, #24]
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80011c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f915 	bl	8000404 <__aeabi_i2d>
 80011da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011de:	f7ff faa5 	bl	800072c <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  return xyz;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	461d      	mov	r5, r3
 80011ee:	f107 0408 	add.w	r4, r7, #8
 80011f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011fa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	3738      	adds	r7, #56	; 0x38
 8001202:	46bd      	mov	sp, r7
 8001204:	bdb0      	pop	{r4, r5, r7, pc}
 8001206:	bf00      	nop
 8001208:	3ff00000 	.word	0x3ff00000
 800120c:	20000006 	.word	0x20000006
 8001210:	20000000 	.word	0x20000000
 8001214:	20000002 	.word	0x20000002
 8001218:	20000004 	.word	0x20000004
 800121c:	20000008 	.word	0x20000008

08001220 <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2114      	movs	r1, #20
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fedf 	bl	8000ff0 <bno055_getVector>
}
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <bno055_getVectorLinearAccel>:
bno055_vector_t bno055_getVectorEuler() {
  return bno055_getVector(BNO055_VECTOR_EULER);
}
bno055_vector_t bno055_getVectorLinearAccel() {
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2128      	movs	r1, #40	; 0x28
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fed2 	bl	8000ff0 <bno055_getVector>
}
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <bno055_getVectorQuaternion>:
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2120      	movs	r1, #32
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fec5 	bl	8000ff0 <bno055_getVector>
}
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001274:	f005 fe58 	bl	8006f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001278:	f000 f814 	bl	80012a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127c:	f000 f916 	bl	80014ac <MX_GPIO_Init>
  MX_DMA_Init();
 8001280:	f000 f8de 	bl	8001440 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001284:	f000 f878 	bl	8001378 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001288:	f000 f8a0 	bl	80013cc <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800128c:	f000 f846 	bl	800131c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  xl430_int(&huart3);
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <main+0x30>)
 8001292:	f005 fb51 	bl	8006938 <xl430_int>
  setup();
 8001296:	f003 fe09 	bl	8004eac <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  setup_dummy();
 800129a:	f003 feb1 	bl	8005000 <setup_dummy>
 800129e:	e7fc      	b.n	800129a <main+0x2a>
 80012a0:	20000da8 	.word	0x20000da8

080012a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b090      	sub	sp, #64	; 0x40
 80012a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012aa:	f107 0318 	add.w	r3, r7, #24
 80012ae:	2228      	movs	r2, #40	; 0x28
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f009 f956 	bl	800a564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ca:	2301      	movs	r3, #1
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ce:	2310      	movs	r3, #16
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d6:	f107 0318 	add.w	r3, r7, #24
 80012da:	4618      	mov	r0, r3
 80012dc:	f007 fb94 	bl	8008a08 <HAL_RCC_OscConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012e6:	f000 f961 	bl	80015ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ea:	230f      	movs	r3, #15
 80012ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f007 fe00 	bl	8008f08 <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800130e:	f000 f94d 	bl	80015ac <Error_Handler>
  }
}
 8001312:	bf00      	nop
 8001314:	3740      	adds	r7, #64	; 0x40
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <MX_I2C1_Init+0x50>)
 8001322:	4a13      	ldr	r2, [pc, #76]	; (8001370 <MX_I2C1_Init+0x54>)
 8001324:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 200000;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_I2C1_Init+0x50>)
 8001328:	4a12      	ldr	r2, [pc, #72]	; (8001374 <MX_I2C1_Init+0x58>)
 800132a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_I2C1_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_I2C1_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_I2C1_Init+0x50>)
 800133a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800133e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <MX_I2C1_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_I2C1_Init+0x50>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <MX_I2C1_Init+0x50>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_I2C1_Init+0x50>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001358:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_I2C1_Init+0x50>)
 800135a:	f006 fb6f 	bl	8007a3c <HAL_I2C_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001364:	f000 f922 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000de8 	.word	0x20000de8
 8001370:	40005400 	.word	0x40005400
 8001374:	00030d40 	.word	0x00030d40

08001378 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <MX_USART1_UART_Init+0x50>)
 8001380:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 8001384:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001388:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 80013b0:	f008 f9be 	bl	8009730 <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013ba:	f000 f8f7 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000f08 	.word	0x20000f08
 80013c8:	40013800 	.word	0x40013800

080013cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <MX_USART3_UART_Init+0x6c>)
 80013d2:	4a1a      	ldr	r2, [pc, #104]	; (800143c <MX_USART3_UART_Init+0x70>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57200;
 80013d6:	4b18      	ldr	r3, [pc, #96]	; (8001438 <MX_USART3_UART_Init+0x6c>)
 80013d8:	f64d 7270 	movw	r2, #57200	; 0xdf70
 80013dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <MX_USART3_UART_Init+0x6c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MX_USART3_UART_Init+0x6c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <MX_USART3_UART_Init+0x6c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_USART3_UART_Init+0x6c>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <MX_USART3_UART_Init+0x6c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_USART3_UART_Init+0x6c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8001402:	480d      	ldr	r0, [pc, #52]	; (8001438 <MX_USART3_UART_Init+0x6c>)
 8001404:	f008 f9e1 	bl	80097ca <HAL_HalfDuplex_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800140e:	f000 f8cd 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_USART3_UART_Init+0x6c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <MX_USART3_UART_Init+0x6c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f042 0210 	orr.w	r2, r2, #16
 8001420:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <MX_USART3_UART_Init+0x6c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <MX_USART3_UART_Init+0x6c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001430:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART3_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000da8 	.word	0x20000da8
 800143c:	40004800 	.word	0x40004800

08001440 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <MX_DMA_Init+0x68>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	4a17      	ldr	r2, [pc, #92]	; (80014a8 <MX_DMA_Init+0x68>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6153      	str	r3, [r2, #20]
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_DMA_Init+0x68>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	200c      	movs	r0, #12
 8001464:	f005 fe6b 	bl	800713e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001468:	200c      	movs	r0, #12
 800146a:	f005 fe84 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	200d      	movs	r0, #13
 8001474:	f005 fe63 	bl	800713e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001478:	200d      	movs	r0, #13
 800147a:	f005 fe7c 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	200e      	movs	r0, #14
 8001484:	f005 fe5b 	bl	800713e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001488:	200e      	movs	r0, #14
 800148a:	f005 fe74 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	200f      	movs	r0, #15
 8001494:	f005 fe53 	bl	800713e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001498:	200f      	movs	r0, #15
 800149a:	f005 fe6c 	bl	8007176 <HAL_NVIC_EnableIRQ>

}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000

080014ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c0:	4b2e      	ldr	r3, [pc, #184]	; (800157c <MX_GPIO_Init+0xd0>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a2d      	ldr	r2, [pc, #180]	; (800157c <MX_GPIO_Init+0xd0>)
 80014c6:	f043 0310 	orr.w	r3, r3, #16
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <MX_GPIO_Init+0xd0>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d8:	4b28      	ldr	r3, [pc, #160]	; (800157c <MX_GPIO_Init+0xd0>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	4a27      	ldr	r2, [pc, #156]	; (800157c <MX_GPIO_Init+0xd0>)
 80014de:	f043 0320 	orr.w	r3, r3, #32
 80014e2:	6193      	str	r3, [r2, #24]
 80014e4:	4b25      	ldr	r3, [pc, #148]	; (800157c <MX_GPIO_Init+0xd0>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f003 0320 	and.w	r3, r3, #32
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <MX_GPIO_Init+0xd0>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a21      	ldr	r2, [pc, #132]	; (800157c <MX_GPIO_Init+0xd0>)
 80014f6:	f043 0308 	orr.w	r3, r3, #8
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <MX_GPIO_Init+0xd0>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <MX_GPIO_Init+0xd0>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a1b      	ldr	r2, [pc, #108]	; (800157c <MX_GPIO_Init+0xd0>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <MX_GPIO_Init+0xd0>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001526:	4816      	ldr	r0, [pc, #88]	; (8001580 <MX_GPIO_Init+0xd4>)
 8001528:	f006 fa56 	bl	80079d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_rst_GPIO_Port, IMU_rst_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001532:	4814      	ldr	r0, [pc, #80]	; (8001584 <MX_GPIO_Init+0xd8>)
 8001534:	f006 fa50 	bl	80079d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2302      	movs	r3, #2
 8001548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	4619      	mov	r1, r3
 8001550:	480b      	ldr	r0, [pc, #44]	; (8001580 <MX_GPIO_Init+0xd4>)
 8001552:	f006 f8bd 	bl	80076d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_rst_Pin */
  GPIO_InitStruct.Pin = IMU_rst_Pin;
 8001556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800155a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2302      	movs	r3, #2
 8001566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_rst_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	4619      	mov	r1, r3
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_GPIO_Init+0xd8>)
 8001570:	f006 f8ae 	bl	80076d0 <HAL_GPIO_Init>

}
 8001574:	bf00      	nop
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000
 8001580:	40011000 	.word	0x40011000
 8001584:	40010800 	.word	0x40010800

08001588 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d101      	bne.n	800159e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800159a:	f005 fcdb 	bl	8006f54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40012c00 	.word	0x40012c00

080015ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b0:	b672      	cpsid	i
}
 80015b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <Error_Handler+0x8>

080015b6 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
	...

080015d8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <_ZN3ros3MsgC1Ev+0x1c>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	0800bf1c 	.word	0x0800bf1c

080015f8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
      data()
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ffe8 	bl	80015d8 <_ZN3ros3MsgC1Ev>
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3304      	adds	r3, #4
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ffcf 	bl	80015b6 <_ZN3ros4TimeC1Ev>
    {
    }
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	0800bf04 	.word	0x0800bf04

08001628 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6859      	ldr	r1, [r3, #4]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	4413      	add	r3, r2
 8001640:	b2ca      	uxtb	r2, r1
 8001642:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	0a19      	lsrs	r1, r3, #8
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3301      	adds	r3, #1
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	4413      	add	r3, r2
 8001652:	b2ca      	uxtb	r2, r1
 8001654:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	0c19      	lsrs	r1, r3, #16
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3302      	adds	r3, #2
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	4413      	add	r3, r2
 8001664:	b2ca      	uxtb	r2, r1
 8001666:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	0e19      	lsrs	r1, r3, #24
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	3303      	adds	r3, #3
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	4413      	add	r3, r2
 8001676:	b2ca      	uxtb	r2, r1
 8001678:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3304      	adds	r3, #4
 800167e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6899      	ldr	r1, [r3, #8]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	4413      	add	r3, r2
 800168a:	b2ca      	uxtb	r2, r1
 800168c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	0a19      	lsrs	r1, r3, #8
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3301      	adds	r3, #1
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	4413      	add	r3, r2
 800169c:	b2ca      	uxtb	r2, r1
 800169e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	0c19      	lsrs	r1, r3, #16
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3302      	adds	r3, #2
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	4413      	add	r3, r2
 80016ae:	b2ca      	uxtb	r2, r1
 80016b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	0e19      	lsrs	r1, r3, #24
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3303      	adds	r3, #3
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	b2ca      	uxtb	r2, r1
 80016c2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3304      	adds	r3, #4
 80016c8:	60fb      	str	r3, [r7, #12]
      return offset;
 80016ca:	68fb      	ldr	r3, [r7, #12]
    }
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80016d6:	b480      	push	{r7}
 80016d8:	b085      	sub	sp, #20
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	4413      	add	r3, r2
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3301      	adds	r3, #1
 80016fa:	6839      	ldr	r1, [r7, #0]
 80016fc:	440b      	add	r3, r1
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3302      	adds	r3, #2
 8001710:	6839      	ldr	r1, [r7, #0]
 8001712:	440b      	add	r3, r1
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	041b      	lsls	r3, r3, #16
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	3303      	adds	r3, #3
 8001726:	6839      	ldr	r1, [r7, #0]
 8001728:	440b      	add	r3, r1
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	061b      	lsls	r3, r3, #24
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3304      	adds	r3, #4
 8001738:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	4413      	add	r3, r2
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	3301      	adds	r3, #1
 8001750:	6839      	ldr	r1, [r7, #0]
 8001752:	440b      	add	r3, r1
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3302      	adds	r3, #2
 8001766:	6839      	ldr	r1, [r7, #0]
 8001768:	440b      	add	r3, r1
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	3303      	adds	r3, #3
 800177c:	6839      	ldr	r1, [r7, #0]
 800177e:	440b      	add	r3, r1
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	061b      	lsls	r3, r3, #24
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3304      	adds	r3, #4
 800178e:	60fb      	str	r3, [r7, #12]
     return offset;
 8001790:	68fb      	ldr	r3, [r7, #12]
    }
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	4b02      	ldr	r3, [pc, #8]	; (80017b0 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	0800b668 	.word	0x0800b668

080017b4 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	4b02      	ldr	r3, [pc, #8]	; (80017c8 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	0800b678 	.word	0x0800b678

080017cc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fefe 	bl	80015d8 <_ZN3ros3MsgC1Ev>
 80017dc:	4a0b      	ldr	r2, [pc, #44]	; (800180c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	809a      	strh	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a09      	ldr	r2, [pc, #36]	; (8001810 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a07      	ldr	r2, [pc, #28]	; (8001810 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a06      	ldr	r2, [pc, #24]	; (8001810 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80017f8:	611a      	str	r2, [r3, #16]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
    {
    }
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	0800beec 	.word	0x0800beec
 8001810:	0800b69c 	.word	0x0800b69c

08001814 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	8899      	ldrh	r1, [r3, #4]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	4413      	add	r3, r2
 800182c:	b2ca      	uxtb	r2, r1
 800182e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	889b      	ldrh	r3, [r3, #4]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	b299      	uxth	r1, r3
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	3301      	adds	r3, #1
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	4413      	add	r3, r2
 8001840:	b2ca      	uxtb	r2, r1
 8001842:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	3302      	adds	r3, #2
 8001848:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fc7e 	bl	8000150 <strlen>
 8001854:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	4413      	add	r3, r2
 800185c:	69b9      	ldr	r1, [r7, #24]
 800185e:	4618      	mov	r0, r3
 8001860:	f003 fdaa 	bl	80053b8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	3304      	adds	r3, #4
 8001868:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	18d0      	adds	r0, r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4619      	mov	r1, r3
 8001878:	f008 fe66 	bl	800a548 <memcpy>
      offset += length_topic_name;
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	4413      	add	r3, r2
 8001882:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fc61 	bl	8000150 <strlen>
 800188e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	4413      	add	r3, r2
 8001896:	6979      	ldr	r1, [r7, #20]
 8001898:	4618      	mov	r0, r3
 800189a:	f003 fd8d 	bl	80053b8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	18d0      	adds	r0, r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f008 fe49 	bl	800a548 <memcpy>
      offset += length_message_type;
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	4413      	add	r3, r2
 80018bc:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fc44 	bl	8000150 <strlen>
 80018c8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	6939      	ldr	r1, [r7, #16]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f003 fd70 	bl	80053b8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	3304      	adds	r3, #4
 80018dc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	18d0      	adds	r0, r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4619      	mov	r1, r3
 80018ec:	f008 fe2c 	bl	800a548 <memcpy>
      offset += length_md5sum;
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4413      	add	r3, r2
 80018f6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80018fe:	68f9      	ldr	r1, [r7, #12]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	4413      	add	r3, r2
 8001906:	b2ca      	uxtb	r2, r1
 8001908:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	0a19      	lsrs	r1, r3, #8
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3301      	adds	r3, #1
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	4413      	add	r3, r2
 8001916:	b2ca      	uxtb	r2, r1
 8001918:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	0c19      	lsrs	r1, r3, #16
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3302      	adds	r3, #2
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	4413      	add	r3, r2
 8001926:	b2ca      	uxtb	r2, r1
 8001928:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	0e19      	lsrs	r1, r3, #24
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3303      	adds	r3, #3
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	4413      	add	r3, r2
 8001936:	b2ca      	uxtb	r2, r1
 8001938:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	61fb      	str	r3, [r7, #28]
      return offset;
 8001940:	69fb      	ldr	r3, [r7, #28]
    }
 8001942:	4618      	mov	r0, r3
 8001944:	3720      	adds	r7, #32
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800194a:	b580      	push	{r7, lr}
 800194c:	b08a      	sub	sp, #40	; 0x28
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	4413      	add	r3, r2
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b29a      	uxth	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	889b      	ldrh	r3, [r3, #4]
 800196a:	b21a      	sxth	r2, r3
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	3301      	adds	r3, #1
 8001970:	6839      	ldr	r1, [r7, #0]
 8001972:	440b      	add	r3, r1
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	b21b      	sxth	r3, r3
 800197a:	4313      	orrs	r3, r2
 800197c:	b21b      	sxth	r3, r3
 800197e:	b29a      	uxth	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	3302      	adds	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	441a      	add	r2, r3
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4611      	mov	r1, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f003 fd2b 	bl	80053f2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	3304      	adds	r3, #4
 80019a0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	4413      	add	r3, r2
 80019ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d20c      	bcs.n	80019cc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	441a      	add	r2, r3
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	3b01      	subs	r3, #1
 80019bc:	6839      	ldr	r1, [r7, #0]
 80019be:	440b      	add	r3, r1
 80019c0:	7812      	ldrb	r2, [r2, #0]
 80019c2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	3301      	adds	r3, #1
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ca:	e7ec      	b.n	80019a6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	4413      	add	r3, r2
 80019d2:	3b01      	subs	r3, #1
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	3b01      	subs	r3, #1
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	441a      	add	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	4413      	add	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	441a      	add	r2, r3
 80019f6:	f107 0310 	add.w	r3, r7, #16
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 fcf8 	bl	80053f2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	3304      	adds	r3, #4
 8001a06:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	623b      	str	r3, [r7, #32]
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4413      	add	r3, r2
 8001a12:	6a3a      	ldr	r2, [r7, #32]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d20c      	bcs.n	8001a32 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	441a      	add	r2, r3
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	6839      	ldr	r1, [r7, #0]
 8001a24:	440b      	add	r3, r1
 8001a26:	7812      	ldrb	r2, [r2, #0]
 8001a28:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	623b      	str	r3, [r7, #32]
 8001a30:	e7ec      	b.n	8001a0c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4413      	add	r3, r2
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	441a      	add	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	4413      	add	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	441a      	add	r2, r3
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 fcc5 	bl	80053f2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4413      	add	r3, r2
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d20c      	bcs.n	8001a98 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	441a      	add	r2, r3
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	6839      	ldr	r1, [r7, #0]
 8001a8a:	440b      	add	r3, r1
 8001a8c:	7812      	ldrb	r2, [r2, #0]
 8001a8e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	3301      	adds	r3, #1
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	e7ec      	b.n	8001a72 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	441a      	add	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4413      	add	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	6839      	ldr	r1, [r7, #0]
 8001ac6:	440a      	add	r2, r1
 8001ac8:	7812      	ldrb	r2, [r2, #0]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	6839      	ldr	r1, [r7, #0]
 8001ad6:	440b      	add	r3, r1
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	6839      	ldr	r1, [r7, #0]
 8001ae8:	440b      	add	r3, r1
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	041b      	lsls	r3, r3, #16
 8001aee:	4313      	orrs	r3, r2
 8001af0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	3303      	adds	r3, #3
 8001af8:	6839      	ldr	r1, [r7, #0]
 8001afa:	440b      	add	r3, r1
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	061b      	lsls	r3, r3, #24
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	61bb      	str	r3, [r7, #24]
     return offset;
 8001b10:	69bb      	ldr	r3, [r7, #24]
    }
 8001b12:	4618      	mov	r0, r3
 8001b14:	3728      	adds	r7, #40	; 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	4b02      	ldr	r3, [pc, #8]	; (8001b30 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	0800b6a0 	.word	0x0800b6a0

08001b34 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	4b02      	ldr	r3, [pc, #8]	; (8001b48 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	0800b6bc 	.word	0x0800b6bc

08001b4c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fd3e 	bl	80015d8 <_ZN3ros3MsgC1Ev>
 8001b5c:	4a06      	ldr	r2, [pc, #24]	; (8001b78 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	711a      	strb	r2, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001b6c:	609a      	str	r2, [r3, #8]
    {
    }
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	0800bed4 	.word	0x0800bed4
 8001b7c:	0800b69c 	.word	0x0800b69c

08001b80 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	7912      	ldrb	r2, [r2, #4]
 8001b98:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fad3 	bl	8000150 <strlen>
 8001baa:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	68b9      	ldr	r1, [r7, #8]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f003 fbff 	bl	80053b8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	18d0      	adds	r0, r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f008 fcbb 	bl	800a548 <memcpy>
      offset += length_msg;
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
      return offset;
 8001bda:	68fb      	ldr	r3, [r7, #12]
    }
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	3301      	adds	r3, #1
 8001c02:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	441a      	add	r2, r3
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 fbee 	bl	80053f2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4413      	add	r3, r2
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d20c      	bcs.n	8001c46 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	441a      	add	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	6839      	ldr	r1, [r7, #0]
 8001c38:	440b      	add	r3, r1
 8001c3a:	7812      	ldrb	r2, [r2, #0]
 8001c3c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3301      	adds	r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	e7ec      	b.n	8001c20 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	4413      	add	r3, r2
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	441a      	add	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
     return offset;
 8001c6a:	693b      	ldr	r3, [r7, #16]
    }
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	4b02      	ldr	r3, [pc, #8]	; (8001c88 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	0800b6e0 	.word	0x0800b6e0

08001c8c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	4b02      	ldr	r3, [pc, #8]	; (8001ca0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	0800b6f4 	.word	0x0800b6f4

08001ca4 <_ZN14rosserial_msgs19RequestParamRequestC1Ev>:
  {
    public:
      typedef const char* _name_type;
      _name_type name;

    RequestParamRequest():
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
      name("")
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fc92 	bl	80015d8 <_ZN3ros3MsgC1Ev>
 8001cb4:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <_ZN14rosserial_msgs19RequestParamRequestC1Ev+0x28>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <_ZN14rosserial_msgs19RequestParamRequestC1Ev+0x2c>)
 8001cbe:	605a      	str	r2, [r3, #4]
    {
    }
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	0800bebc 	.word	0x0800bebc
 8001cd0:	0800b69c 	.word	0x0800b69c

08001cd4 <_ZNK14rosserial_msgs19RequestParamRequest9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
      uint32_t length_name = strlen(this->name);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fa32 	bl	8000150 <strlen>
 8001cec:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_name);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f003 fb5e 	bl	80053b8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->name, length_name);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	18d0      	adds	r0, r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f008 fc1a 	bl	800a548 <memcpy>
      offset += length_name;
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	4413      	add	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
      return offset;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    }
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_ZN14rosserial_msgs19RequestParamRequest11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
      uint32_t length_name;
      arrToVar(length_name, (inbuffer + offset));
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	441a      	add	r2, r3
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f003 fb56 	bl	80053f2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_name; ++k){
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4413      	add	r3, r2
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d20c      	bcs.n	8001d76 <_ZN14rosserial_msgs19RequestParamRequest11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	441a      	add	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	6839      	ldr	r1, [r7, #0]
 8001d68:	440b      	add	r3, r1
 8001d6a:	7812      	ldrb	r2, [r2, #0]
 8001d6c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_name; ++k){
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3301      	adds	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	e7ec      	b.n	8001d50 <_ZN14rosserial_msgs19RequestParamRequest11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_name-1]=0;
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	4413      	add	r3, r2
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
      this->name = (char *)(inbuffer + offset-1);
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	441a      	add	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	605a      	str	r2, [r3, #4]
      offset += length_name;
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
     return offset;
 8001d9a:	693b      	ldr	r3, [r7, #16]
    }
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_ZN14rosserial_msgs19RequestParamRequest7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	4b02      	ldr	r3, [pc, #8]	; (8001db8 <_ZN14rosserial_msgs19RequestParamRequest7getTypeEv+0x14>)
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	0800bda4 	.word	0x0800bda4

08001dbc <_ZN14rosserial_msgs19RequestParamRequest6getMD5Ev>:
    const char * getMD5(){ return "c1f3d28f1b044c871e6eff2e9fc3c667"; };
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	4b02      	ldr	r3, [pc, #8]	; (8001dd0 <_ZN14rosserial_msgs19RequestParamRequest6getMD5Ev+0x14>)
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	0800b718 	.word	0x0800b718

08001dd4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fbfa 	bl	80015d8 <_ZN3ros3MsgC1Ev>
 8001de4:	4a0c      	ldr	r2, [pc, #48]	; (8001e18 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	605a      	str	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	61da      	str	r2, [r3, #28]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	0800bea4 	.word	0x0800bea4

08001e1c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6859      	ldr	r1, [r3, #4]
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	b2ca      	uxtb	r2, r1
 8001e36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	0a19      	lsrs	r1, r3, #8
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	3301      	adds	r3, #1
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	b2ca      	uxtb	r2, r1
 8001e48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	0c19      	lsrs	r1, r3, #16
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	3302      	adds	r3, #2
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	b2ca      	uxtb	r2, r1
 8001e5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	0e19      	lsrs	r1, r3, #24
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	3303      	adds	r3, #3
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	b2ca      	uxtb	r2, r1
 8001e6c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	3304      	adds	r3, #4
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001e74:	2300      	movs	r3, #0
 8001e76:	623b      	str	r3, [r7, #32]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	6a3a      	ldr	r2, [r7, #32]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d22b      	bcs.n	8001eda <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001e90:	6939      	ldr	r1, [r7, #16]
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	b2ca      	uxtb	r2, r1
 8001e9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	0a19      	lsrs	r1, r3, #8
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	b2ca      	uxtb	r2, r1
 8001eaa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	0c19      	lsrs	r1, r3, #16
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	b2ca      	uxtb	r2, r1
 8001eba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	0e19      	lsrs	r1, r3, #24
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	3303      	adds	r3, #3
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	b2ca      	uxtb	r2, r1
 8001eca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	3304      	adds	r3, #4
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	623b      	str	r3, [r7, #32]
 8001ed8:	e7ce      	b.n	8001e78 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6919      	ldr	r1, [r3, #16]
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b2ca      	uxtb	r2, r1
 8001ee6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	0a19      	lsrs	r1, r3, #8
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	b2ca      	uxtb	r2, r1
 8001ef8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	0c19      	lsrs	r1, r3, #16
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	3302      	adds	r3, #2
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	b2ca      	uxtb	r2, r1
 8001f0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	0e19      	lsrs	r1, r3, #24
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	3303      	adds	r3, #3
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	4413      	add	r3, r2
 8001f1a:	b2ca      	uxtb	r2, r1
 8001f1c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	3304      	adds	r3, #4
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d22b      	bcs.n	8001f8a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699a      	ldr	r2, [r3, #24]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001f40:	68f9      	ldr	r1, [r7, #12]
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	b2ca      	uxtb	r2, r1
 8001f4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	0a19      	lsrs	r1, r3, #8
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	3301      	adds	r3, #1
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	b2ca      	uxtb	r2, r1
 8001f5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	0c19      	lsrs	r1, r3, #16
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	3302      	adds	r3, #2
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	b2ca      	uxtb	r2, r1
 8001f6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	0e19      	lsrs	r1, r3, #24
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	3303      	adds	r3, #3
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	b2ca      	uxtb	r2, r1
 8001f7a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	3304      	adds	r3, #4
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3301      	adds	r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	e7ce      	b.n	8001f28 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69d9      	ldr	r1, [r3, #28]
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	b2ca      	uxtb	r2, r1
 8001f96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	0a19      	lsrs	r1, r3, #8
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	b2ca      	uxtb	r2, r1
 8001fa8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	0c19      	lsrs	r1, r3, #16
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	b2ca      	uxtb	r2, r1
 8001fba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	0e19      	lsrs	r1, r3, #24
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	3303      	adds	r3, #3
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	4413      	add	r3, r2
 8001fca:	b2ca      	uxtb	r2, r1
 8001fcc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61bb      	str	r3, [r7, #24]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d228      	bcs.n	8002034 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe f8ae 	bl	8000150 <strlen>
 8001ff4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	6979      	ldr	r1, [r7, #20]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 f9da 	bl	80053b8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	3304      	adds	r3, #4
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	18d0      	adds	r0, r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	4619      	mov	r1, r3
 8002020:	f008 fa92 	bl	800a548 <memcpy>
      offset += length_stringsi;
 8002024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	4413      	add	r3, r2
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	3301      	adds	r3, #1
 8002030:	61bb      	str	r3, [r7, #24]
 8002032:	e7d1      	b.n	8001fd8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002036:	4618      	mov	r0, r3
 8002038:	3728      	adds	r7, #40	; 0x28
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800203e:	b580      	push	{r7, lr}
 8002040:	b08e      	sub	sp, #56	; 0x38
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800204c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	4413      	add	r3, r2
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002058:	3301      	adds	r3, #1
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	4413      	add	r3, r2
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	6a3a      	ldr	r2, [r7, #32]
 8002064:	4313      	orrs	r3, r2
 8002066:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206a:	3302      	adds	r3, #2
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	4413      	add	r3, r2
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	041b      	lsls	r3, r3, #16
 8002074:	6a3a      	ldr	r2, [r7, #32]
 8002076:	4313      	orrs	r3, r2
 8002078:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800207a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207c:	3303      	adds	r3, #3
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	4413      	add	r3, r2
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	061b      	lsls	r3, r3, #24
 8002086:	6a3a      	ldr	r2, [r7, #32]
 8002088:	4313      	orrs	r3, r2
 800208a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800208c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800208e:	3304      	adds	r3, #4
 8002090:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	6a3a      	ldr	r2, [r7, #32]
 8002098:	429a      	cmp	r2, r3
 800209a:	d90a      	bls.n	80020b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4619      	mov	r1, r3
 80020a6:	4610      	mov	r0, r2
 80020a8:	f008 faf2 	bl	800a690 <realloc>
 80020ac:	4602      	mov	r2, r0
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a3a      	ldr	r2, [r7, #32]
 80020b6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80020b8:	2300      	movs	r3, #0
 80020ba:	633b      	str	r3, [r7, #48]	; 0x30
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d236      	bcs.n	8002134 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020ce:	6839      	ldr	r1, [r7, #0]
 80020d0:	440a      	add	r2, r1
 80020d2:	7812      	ldrb	r2, [r2, #0]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020dc:	3301      	adds	r3, #1
 80020de:	6839      	ldr	r1, [r7, #0]
 80020e0:	440b      	add	r3, r1
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	4313      	orrs	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ee:	3302      	adds	r3, #2
 80020f0:	6839      	ldr	r1, [r7, #0]
 80020f2:	440b      	add	r3, r1
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	041b      	lsls	r3, r3, #16
 80020f8:	4313      	orrs	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002100:	3303      	adds	r3, #3
 8002102:	6839      	ldr	r1, [r7, #0]
 8002104:	440b      	add	r3, r1
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	061b      	lsls	r3, r3, #24
 800210a:	4313      	orrs	r3, r2
 800210c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002116:	3304      	adds	r3, #4
 8002118:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	3208      	adds	r2, #8
 8002128:	6812      	ldr	r2, [r2, #0]
 800212a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800212c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212e:	3301      	adds	r3, #1
 8002130:	633b      	str	r3, [r7, #48]	; 0x30
 8002132:	e7c3      	b.n	80020bc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	4413      	add	r3, r2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800213e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002140:	3301      	adds	r3, #1
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	4413      	add	r3, r2
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	4313      	orrs	r3, r2
 800214e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002152:	3302      	adds	r3, #2
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	4413      	add	r3, r2
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	041b      	lsls	r3, r3, #16
 800215c:	69fa      	ldr	r2, [r7, #28]
 800215e:	4313      	orrs	r3, r2
 8002160:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002164:	3303      	adds	r3, #3
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	4413      	add	r3, r2
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	061b      	lsls	r3, r3, #24
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	4313      	orrs	r3, r2
 8002172:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002176:	3304      	adds	r3, #4
 8002178:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	429a      	cmp	r2, r3
 8002182:	d90a      	bls.n	800219a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699a      	ldr	r2, [r3, #24]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4619      	mov	r1, r3
 800218e:	4610      	mov	r0, r2
 8002190:	f008 fa7e 	bl	800a690 <realloc>
 8002194:	4602      	mov	r2, r0
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80021a0:	2300      	movs	r3, #0
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d236      	bcs.n	800221c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021b6:	6839      	ldr	r1, [r7, #0]
 80021b8:	440a      	add	r2, r1
 80021ba:	7812      	ldrb	r2, [r2, #0]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c4:	3301      	adds	r3, #1
 80021c6:	6839      	ldr	r1, [r7, #0]
 80021c8:	440b      	add	r3, r1
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d6:	3302      	adds	r3, #2
 80021d8:	6839      	ldr	r1, [r7, #0]
 80021da:	440b      	add	r3, r1
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	041b      	lsls	r3, r3, #16
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e8:	3303      	adds	r3, #3
 80021ea:	6839      	ldr	r1, [r7, #0]
 80021ec:	440b      	add	r3, r1
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	061b      	lsls	r3, r3, #24
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80021fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fe:	3304      	adds	r3, #4
 8002200:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	3214      	adds	r2, #20
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002216:	3301      	adds	r3, #1
 8002218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800221a:	e7c3      	b.n	80021a4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800221c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	4413      	add	r3, r2
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002228:	3301      	adds	r3, #1
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	4413      	add	r3, r2
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	021b      	lsls	r3, r3, #8
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223a:	3302      	adds	r3, #2
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	4413      	add	r3, r2
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	041b      	lsls	r3, r3, #16
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800224a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224c:	3303      	adds	r3, #3
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	4413      	add	r3, r2
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	061b      	lsls	r3, r3, #24
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800225c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225e:	3304      	adds	r3, #4
 8002260:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	429a      	cmp	r2, r3
 800226a:	d90a      	bls.n	8002282 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4619      	mov	r1, r3
 8002276:	4610      	mov	r0, r2
 8002278:	f008 fa0a 	bl	800a690 <realloc>
 800227c:	4602      	mov	r2, r0
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002288:	2300      	movs	r3, #0
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002292:	429a      	cmp	r2, r3
 8002294:	d23f      	bcs.n	8002316 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	441a      	add	r2, r3
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 f8a5 	bl	80053f2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80022a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022aa:	3304      	adds	r3, #4
 80022ac:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80022ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
 80022b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d20c      	bcs.n	80022d8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	441a      	add	r2, r3
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	3b01      	subs	r3, #1
 80022c8:	6839      	ldr	r1, [r7, #0]
 80022ca:	440b      	add	r3, r1
 80022cc:	7812      	ldrb	r2, [r2, #0]
 80022ce:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	3301      	adds	r3, #1
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
 80022d6:	e7ec      	b.n	80022b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80022d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4413      	add	r3, r2
 80022de:	3b01      	subs	r3, #1
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80022e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ea:	3b01      	subs	r3, #1
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	441a      	add	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80022f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4413      	add	r3, r2
 80022fa:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	3220      	adds	r2, #32
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	3301      	adds	r3, #1
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
 8002314:	e7ba      	b.n	800228c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002318:	4618      	mov	r0, r3
 800231a:	3738      	adds	r7, #56	; 0x38
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	4b02      	ldr	r3, [pc, #8]	; (8002334 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	0800bda4 	.word	0x0800bda4

08002338 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	4b02      	ldr	r3, [pc, #8]	; (800234c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	0800b73c 	.word	0x0800b73c

08002350 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	611a      	str	r2, [r3, #16]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68d8      	ldr	r0, [r3, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6891      	ldr	r1, [r2, #8]
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	4798      	blx	r3
 800239a:	4603      	mov	r3, r0
  };
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
  }
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80023d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
	...

080023e0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <_ZN13STM32HardwareC1Ev+0x34>)
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000f08 	.word	0x20000f08

08002418 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f804 	bl	800242e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
     if( HAL_UART_Receive_DMA(huart, rbuf, rbuflen) != HAL_OK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3304      	adds	r3, #4
 800243e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002442:	4619      	mov	r1, r3
 8002444:	f007 fb14 	bl	8009a70 <HAL_UART_Receive_DMA>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
    		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    		 HAL_Delay(100);
    		 }*/

     }
    }
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800245c:	f04f 33ff 	mov.w	r3, #4294967295
 8002460:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ffa6 	bl	80023ba <_ZN13STM32Hardware10getRdmaIndEv>
 800246e:	4603      	mov	r3, r0
 8002470:	429c      	cmp	r4, r3
 8002472:	bf14      	ite	ne
 8002474:	2301      	movne	r3, #1
 8002476:	2300      	moveq	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d012      	beq.n	80024a4 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002484:	1c59      	adds	r1, r3, #1
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	4413      	add	r3, r2
 8002490:	791b      	ldrb	r3, [r3, #4]
 8002492:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800249a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80024a4:	68fb      	ldr	r3, [r7, #12]
    }
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd90      	pop	{r4, r7, pc}
	...

080024b0 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b20      	cmp	r3, #32
 80024c4:	d108      	bne.n	80024d8 <_ZN13STM32Hardware5flushEv+0x28>
 80024c6:	4b28      	ldr	r3, [pc, #160]	; (8002568 <_ZN13STM32Hardware5flushEv+0xb8>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	f083 0301 	eor.w	r3, r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <_ZN13STM32Hardware5flushEv+0x28>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <_ZN13STM32Hardware5flushEv+0x2a>
 80024d8:	2300      	movs	r3, #0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d03f      	beq.n	800255e <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80024de:	4b22      	ldr	r3, [pc, #136]	; (8002568 <_ZN13STM32Hardware5flushEv+0xb8>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d031      	beq.n	8002558 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002500:	429a      	cmp	r2, r3
 8002502:	d20a      	bcs.n	800251a <_ZN13STM32Hardware5flushEv+0x6a>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800250a:	b29a      	uxth	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002512:	b29b      	uxth	r3, r3
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	b29b      	uxth	r3, r3
 8002518:	e006      	b.n	8002528 <_ZN13STM32Hardware5flushEv+0x78>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002520:	b29b      	uxth	r3, r3
 8002522:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002526:	b29b      	uxth	r3, r3
 8002528:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002534:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	4413      	add	r3, r2
 800253c:	89fa      	ldrh	r2, [r7, #14]
 800253e:	4619      	mov	r1, r3
 8002540:	f007 fa2a 	bl	8009998 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800254a:	89fb      	ldrh	r3, [r7, #14]
 800254c:	4413      	add	r3, r2
 800254e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <_ZN13STM32Hardware5flushEv+0xb8>)
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
      }
    }
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000176 	.word	0x20000176

0800256c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
      int n = length;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002582:	bfa8      	it	ge
 8002584:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002588:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002590:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	4293      	cmp	r3, r2
 8002598:	bf28      	it	cs
 800259a:	4613      	movcs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80025a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4413      	add	r3, r2
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	68b9      	ldr	r1, [r7, #8]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f007 ffc9 	bl	800a548 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	4413      	add	r3, r2
 80025c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d00b      	beq.n	80025ea <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	18d1      	adds	r1, r2, r3
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	f007 ffaf 	bl	800a548 <memcpy>
      }

      flush();
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f7ff ff60 	bl	80024b0 <_ZN13STM32Hardware5flushEv>
    }
 80025f0:	bf00      	nop
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	f004 fcba 	bl	8006f78 <HAL_GetTick>
 8002604:	4603      	mov	r3, r0
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe ffdc 	bl	80015d8 <_ZN3ros3MsgC1Ev>
 8002620:	4a0e      	ldr	r2, [pc, #56]	; (800265c <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	0800be60 	.word	0x0800be60

08002660 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002660:	b480      	push	{r7}
 8002662:	b08b      	sub	sp, #44	; 0x2c
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002674:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800267c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800267e:	6838      	ldr	r0, [r7, #0]
 8002680:	4401      	add	r1, r0
 8002682:	b2d3      	uxtb	r3, r2
 8002684:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002686:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	0a02      	lsrs	r2, r0, #8
 8002694:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002698:	0a0b      	lsrs	r3, r1, #8
 800269a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800269c:	3101      	adds	r1, #1
 800269e:	6838      	ldr	r0, [r7, #0]
 80026a0:	4401      	add	r1, r0
 80026a2:	b2d3      	uxtb	r3, r2
 80026a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80026a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	0c02      	lsrs	r2, r0, #16
 80026b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026b8:	0c0b      	lsrs	r3, r1, #16
 80026ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026bc:	3102      	adds	r1, #2
 80026be:	6838      	ldr	r0, [r7, #0]
 80026c0:	4401      	add	r1, r0
 80026c2:	b2d3      	uxtb	r3, r2
 80026c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80026c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	0e02      	lsrs	r2, r0, #24
 80026d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026d8:	0e0b      	lsrs	r3, r1, #24
 80026da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026dc:	3103      	adds	r1, #3
 80026de:	6838      	ldr	r0, [r7, #0]
 80026e0:	4401      	add	r1, r0
 80026e2:	b2d3      	uxtb	r3, r2
 80026e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80026e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	000a      	movs	r2, r1
 80026f4:	2300      	movs	r3, #0
 80026f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f8:	3104      	adds	r1, #4
 80026fa:	6838      	ldr	r0, [r7, #0]
 80026fc:	4401      	add	r1, r0
 80026fe:	b2d3      	uxtb	r3, r2
 8002700:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002702:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	0a0a      	lsrs	r2, r1, #8
 8002710:	2300      	movs	r3, #0
 8002712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002714:	3105      	adds	r1, #5
 8002716:	6838      	ldr	r0, [r7, #0]
 8002718:	4401      	add	r1, r0
 800271a:	b2d3      	uxtb	r3, r2
 800271c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800271e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	0c0a      	lsrs	r2, r1, #16
 800272c:	2300      	movs	r3, #0
 800272e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002730:	3106      	adds	r1, #6
 8002732:	6838      	ldr	r0, [r7, #0]
 8002734:	4401      	add	r1, r0
 8002736:	b2d3      	uxtb	r3, r2
 8002738:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800273a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	0e0a      	lsrs	r2, r1, #24
 8002748:	2300      	movs	r3, #0
 800274a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800274c:	3107      	adds	r1, #7
 800274e:	6838      	ldr	r0, [r7, #0]
 8002750:	4401      	add	r1, r0
 8002752:	b2d3      	uxtb	r3, r2
 8002754:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	3308      	adds	r3, #8
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002762:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002766:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800276a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800276c:	6838      	ldr	r0, [r7, #0]
 800276e:	4401      	add	r1, r0
 8002770:	b2d3      	uxtb	r3, r2
 8002772:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002774:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	0a02      	lsrs	r2, r0, #8
 8002782:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002786:	0a0b      	lsrs	r3, r1, #8
 8002788:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800278a:	3101      	adds	r1, #1
 800278c:	6838      	ldr	r0, [r7, #0]
 800278e:	4401      	add	r1, r0
 8002790:	b2d3      	uxtb	r3, r2
 8002792:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002794:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	0c02      	lsrs	r2, r0, #16
 80027a2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80027a6:	0c0b      	lsrs	r3, r1, #16
 80027a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027aa:	3102      	adds	r1, #2
 80027ac:	6838      	ldr	r0, [r7, #0]
 80027ae:	4401      	add	r1, r0
 80027b0:	b2d3      	uxtb	r3, r2
 80027b2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80027b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	0e02      	lsrs	r2, r0, #24
 80027c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80027c6:	0e0b      	lsrs	r3, r1, #24
 80027c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ca:	3103      	adds	r1, #3
 80027cc:	6838      	ldr	r0, [r7, #0]
 80027ce:	4401      	add	r1, r0
 80027d0:	b2d3      	uxtb	r3, r2
 80027d2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80027d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	000a      	movs	r2, r1
 80027e2:	2300      	movs	r3, #0
 80027e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e6:	3104      	adds	r1, #4
 80027e8:	6838      	ldr	r0, [r7, #0]
 80027ea:	4401      	add	r1, r0
 80027ec:	b2d3      	uxtb	r3, r2
 80027ee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80027f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	0a0a      	lsrs	r2, r1, #8
 80027fe:	2300      	movs	r3, #0
 8002800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002802:	3105      	adds	r1, #5
 8002804:	6838      	ldr	r0, [r7, #0]
 8002806:	4401      	add	r1, r0
 8002808:	b2d3      	uxtb	r3, r2
 800280a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800280c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	0c0a      	lsrs	r2, r1, #16
 800281a:	2300      	movs	r3, #0
 800281c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800281e:	3106      	adds	r1, #6
 8002820:	6838      	ldr	r0, [r7, #0]
 8002822:	4401      	add	r1, r0
 8002824:	b2d3      	uxtb	r3, r2
 8002826:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002828:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	0e0a      	lsrs	r2, r1, #24
 8002836:	2300      	movs	r3, #0
 8002838:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800283a:	3107      	adds	r1, #7
 800283c:	6838      	ldr	r0, [r7, #0]
 800283e:	4401      	add	r1, r0
 8002840:	b2d3      	uxtb	r3, r2
 8002842:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	3308      	adds	r3, #8
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002850:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002854:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800285a:	6838      	ldr	r0, [r7, #0]
 800285c:	4401      	add	r1, r0
 800285e:	b2d3      	uxtb	r3, r2
 8002860:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002862:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	0a02      	lsrs	r2, r0, #8
 8002870:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002874:	0a0b      	lsrs	r3, r1, #8
 8002876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002878:	3101      	adds	r1, #1
 800287a:	6838      	ldr	r0, [r7, #0]
 800287c:	4401      	add	r1, r0
 800287e:	b2d3      	uxtb	r3, r2
 8002880:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002882:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	0c02      	lsrs	r2, r0, #16
 8002890:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002894:	0c0b      	lsrs	r3, r1, #16
 8002896:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002898:	3102      	adds	r1, #2
 800289a:	6838      	ldr	r0, [r7, #0]
 800289c:	4401      	add	r1, r0
 800289e:	b2d3      	uxtb	r3, r2
 80028a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80028a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	0e02      	lsrs	r2, r0, #24
 80028b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80028b4:	0e0b      	lsrs	r3, r1, #24
 80028b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b8:	3103      	adds	r1, #3
 80028ba:	6838      	ldr	r0, [r7, #0]
 80028bc:	4401      	add	r1, r0
 80028be:	b2d3      	uxtb	r3, r2
 80028c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80028c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	000a      	movs	r2, r1
 80028d0:	2300      	movs	r3, #0
 80028d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d4:	3104      	adds	r1, #4
 80028d6:	6838      	ldr	r0, [r7, #0]
 80028d8:	4401      	add	r1, r0
 80028da:	b2d3      	uxtb	r3, r2
 80028dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80028de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	0a0a      	lsrs	r2, r1, #8
 80028ec:	2300      	movs	r3, #0
 80028ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028f0:	3105      	adds	r1, #5
 80028f2:	6838      	ldr	r0, [r7, #0]
 80028f4:	4401      	add	r1, r0
 80028f6:	b2d3      	uxtb	r3, r2
 80028f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80028fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	0c0a      	lsrs	r2, r1, #16
 8002908:	2300      	movs	r3, #0
 800290a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800290c:	3106      	adds	r1, #6
 800290e:	6838      	ldr	r0, [r7, #0]
 8002910:	4401      	add	r1, r0
 8002912:	b2d3      	uxtb	r3, r2
 8002914:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002916:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	0e0a      	lsrs	r2, r1, #24
 8002924:	2300      	movs	r3, #0
 8002926:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002928:	3107      	adds	r1, #7
 800292a:	6838      	ldr	r0, [r7, #0]
 800292c:	4401      	add	r1, r0
 800292e:	b2d3      	uxtb	r3, r2
 8002930:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	3308      	adds	r3, #8
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800293a:	4618      	mov	r0, r3
 800293c:	372c      	adds	r7, #44	; 0x2c
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002944:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002948:	b0bb      	sub	sp, #236	; 0xec
 800294a:	af00      	add	r7, sp, #0
 800294c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8002950:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    {
      int offset = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002966:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800296a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800296e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002972:	4413      	add	r3, r2
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b2da      	uxtb	r2, r3
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	ea40 0402 	orr.w	r4, r0, r2
 8002980:	ea41 0503 	orr.w	r5, r1, r3
 8002984:	e9c7 4536 	strd	r4, r5, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002988:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800298c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002996:	4413      	add	r3, r2
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	f04f 0000 	mov.w	r0, #0
 80029a4:	f04f 0100 	mov.w	r1, #0
 80029a8:	0219      	lsls	r1, r3, #8
 80029aa:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80029ae:	0210      	lsls	r0, r2, #8
 80029b0:	ea44 0a00 	orr.w	sl, r4, r0
 80029b4:	ea45 0b01 	orr.w	fp, r5, r1
 80029b8:	e9c7 ab36 	strd	sl, fp, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029bc:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80029c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c4:	1c9a      	adds	r2, r3, #2
 80029c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029ca:	4413      	add	r3, r2
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	f04f 0000 	mov.w	r0, #0
 80029d8:	f04f 0100 	mov.w	r1, #0
 80029dc:	0419      	lsls	r1, r3, #16
 80029de:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80029e2:	0410      	lsls	r0, r2, #16
 80029e4:	ea44 0300 	orr.w	r3, r4, r0
 80029e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029ec:	ea45 0301 	orr.w	r3, r5, r1
 80029f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80029f4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80029f8:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029fc:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a04:	1cda      	adds	r2, r3, #3
 8002a06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a0a:	4413      	add	r3, r2
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8002a18:	ea4f 6802 	mov.w	r8, r2, lsl #24
 8002a1c:	ea40 0308 	orr.w	r3, r0, r8
 8002a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a24:	ea41 0309 	orr.w	r3, r1, r9
 8002a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a2c:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8002a30:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002a34:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a3c:	1d1a      	adds	r2, r3, #4
 8002a3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a42:	4413      	add	r3, r2
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	f04f 0000 	mov.w	r0, #0
 8002a50:	f04f 0100 	mov.w	r1, #0
 8002a54:	0011      	movs	r1, r2
 8002a56:	2000      	movs	r0, #0
 8002a58:	ea44 0300 	orr.w	r3, r4, r0
 8002a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a60:	ea45 0301 	orr.w	r3, r5, r1
 8002a64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a68:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002a6c:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002a70:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a78:	1d5a      	adds	r2, r3, #5
 8002a7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a7e:	4413      	add	r3, r2
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	f04f 0000 	mov.w	r0, #0
 8002a8c:	f04f 0100 	mov.w	r1, #0
 8002a90:	0211      	lsls	r1, r2, #8
 8002a92:	2000      	movs	r0, #0
 8002a94:	ea44 0300 	orr.w	r3, r4, r0
 8002a98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a9c:	ea45 0301 	orr.w	r3, r5, r1
 8002aa0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002aa4:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8002aa8:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002aac:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab4:	1d9a      	adds	r2, r3, #6
 8002ab6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002aba:	4413      	add	r3, r2
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	f04f 0000 	mov.w	r0, #0
 8002ac8:	f04f 0100 	mov.w	r1, #0
 8002acc:	0411      	lsls	r1, r2, #16
 8002ace:	2000      	movs	r0, #0
 8002ad0:	ea44 0300 	orr.w	r3, r4, r0
 8002ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ad8:	ea45 0301 	orr.w	r3, r5, r1
 8002adc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ae0:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002ae4:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002ae8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af0:	1dda      	adds	r2, r3, #7
 8002af2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002af6:	4413      	add	r3, r2
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	f04f 0000 	mov.w	r0, #0
 8002b04:	f04f 0100 	mov.w	r1, #0
 8002b08:	0611      	lsls	r1, r2, #24
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	ea44 0300 	orr.w	r3, r4, r0
 8002b10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b14:	ea45 0301 	orr.w	r3, r5, r1
 8002b18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b1c:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8002b20:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->x = u_x.real;
 8002b24:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002b28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b2c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b34:	3308      	adds	r3, #8
 8002b36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b46:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002b4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002b4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b52:	4413      	add	r3, r2
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	ea40 0402 	orr.w	r4, r0, r2
 8002b60:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002b64:	430b      	orrs	r3, r1
 8002b66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002b6a:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002b6e:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b72:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b80:	4413      	add	r3, r2
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	f04f 0000 	mov.w	r0, #0
 8002b8e:	f04f 0100 	mov.w	r1, #0
 8002b92:	0219      	lsls	r1, r3, #8
 8002b94:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8002b98:	0210      	lsls	r0, r2, #8
 8002b9a:	ea44 0300 	orr.w	r3, r4, r0
 8002b9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ba2:	ea45 0301 	orr.w	r3, r5, r1
 8002ba6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002baa:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8002bae:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bb2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bba:	1c9a      	adds	r2, r3, #2
 8002bbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bc0:	4413      	add	r3, r2
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	f04f 0000 	mov.w	r0, #0
 8002bce:	f04f 0100 	mov.w	r1, #0
 8002bd2:	0419      	lsls	r1, r3, #16
 8002bd4:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002bd8:	0410      	lsls	r0, r2, #16
 8002bda:	ea44 0300 	orr.w	r3, r4, r0
 8002bde:	67bb      	str	r3, [r7, #120]	; 0x78
 8002be0:	ea45 0301 	orr.w	r3, r5, r1
 8002be4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002be6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002bea:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002bee:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf6:	1cda      	adds	r2, r3, #3
 8002bf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bfc:	4413      	add	r3, r2
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	0a14      	lsrs	r4, r2, #8
 8002c08:	677c      	str	r4, [r7, #116]	; 0x74
 8002c0a:	0613      	lsls	r3, r2, #24
 8002c0c:	673b      	str	r3, [r7, #112]	; 0x70
 8002c0e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002c12:	4623      	mov	r3, r4
 8002c14:	4303      	orrs	r3, r0
 8002c16:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c18:	462b      	mov	r3, r5
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c1e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002c22:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002c26:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c2e:	1d1a      	adds	r2, r3, #4
 8002c30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c34:	4413      	add	r3, r2
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	f04f 0000 	mov.w	r0, #0
 8002c42:	f04f 0100 	mov.w	r1, #0
 8002c46:	0011      	movs	r1, r2
 8002c48:	2000      	movs	r0, #0
 8002c4a:	ea44 0300 	orr.w	r3, r4, r0
 8002c4e:	663b      	str	r3, [r7, #96]	; 0x60
 8002c50:	ea45 0301 	orr.w	r3, r5, r1
 8002c54:	667b      	str	r3, [r7, #100]	; 0x64
 8002c56:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8002c5a:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002c5e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c66:	1d5a      	adds	r2, r3, #5
 8002c68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c6c:	4413      	add	r3, r2
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	f04f 0000 	mov.w	r0, #0
 8002c7a:	f04f 0100 	mov.w	r1, #0
 8002c7e:	0211      	lsls	r1, r2, #8
 8002c80:	2000      	movs	r0, #0
 8002c82:	ea44 0300 	orr.w	r3, r4, r0
 8002c86:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c88:	ea45 0301 	orr.w	r3, r5, r1
 8002c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c8e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002c92:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002c96:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c9e:	1d9a      	adds	r2, r3, #6
 8002ca0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ca4:	4413      	add	r3, r2
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	f04f 0000 	mov.w	r0, #0
 8002cb2:	f04f 0100 	mov.w	r1, #0
 8002cb6:	0411      	lsls	r1, r2, #16
 8002cb8:	2000      	movs	r0, #0
 8002cba:	ea44 0300 	orr.w	r3, r4, r0
 8002cbe:	653b      	str	r3, [r7, #80]	; 0x50
 8002cc0:	ea45 0301 	orr.w	r3, r5, r1
 8002cc4:	657b      	str	r3, [r7, #84]	; 0x54
 8002cc6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8002cca:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002cce:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd6:	1dda      	adds	r2, r3, #7
 8002cd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cdc:	4413      	add	r3, r2
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	f04f 0000 	mov.w	r0, #0
 8002cea:	f04f 0100 	mov.w	r1, #0
 8002cee:	0611      	lsls	r1, r2, #24
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	ea44 0300 	orr.w	r3, r4, r0
 8002cf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cf8:	ea45 0301 	orr.w	r3, r5, r1
 8002cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cfe:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002d02:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->y = u_y.real;
 8002d06:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002d0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d0e:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d16:	3308      	adds	r3, #8
 8002d18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d28:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d2c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d34:	4413      	add	r3, r2
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	ea40 0402 	orr.w	r4, r0, r2
 8002d42:	643c      	str	r4, [r7, #64]	; 0x40
 8002d44:	430b      	orrs	r3, r1
 8002d46:	647b      	str	r3, [r7, #68]	; 0x44
 8002d48:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002d4c:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d50:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8002d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d5e:	4413      	add	r3, r2
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	f04f 0000 	mov.w	r0, #0
 8002d6c:	f04f 0100 	mov.w	r1, #0
 8002d70:	0219      	lsls	r1, r3, #8
 8002d72:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8002d76:	0210      	lsls	r0, r2, #8
 8002d78:	ea44 0300 	orr.w	r3, r4, r0
 8002d7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d7e:	ea45 0301 	orr.w	r3, r5, r1
 8002d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d84:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002d88:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d8c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8002d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d94:	1c9a      	adds	r2, r3, #2
 8002d96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d9a:	4413      	add	r3, r2
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	f04f 0000 	mov.w	r0, #0
 8002da8:	f04f 0100 	mov.w	r1, #0
 8002dac:	0419      	lsls	r1, r3, #16
 8002dae:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002db2:	0410      	lsls	r0, r2, #16
 8002db4:	ea44 0300 	orr.w	r3, r4, r0
 8002db8:	633b      	str	r3, [r7, #48]	; 0x30
 8002dba:	ea45 0301 	orr.w	r3, r5, r1
 8002dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8002dc0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002dc4:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002dc8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd0:	1cda      	adds	r2, r3, #3
 8002dd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dd6:	4413      	add	r3, r2
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	0a14      	lsrs	r4, r2, #8
 8002de2:	62fc      	str	r4, [r7, #44]	; 0x2c
 8002de4:	0613      	lsls	r3, r2, #24
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002dec:	4623      	mov	r3, r4
 8002dee:	4303      	orrs	r3, r0
 8002df0:	623b      	str	r3, [r7, #32]
 8002df2:	462b      	mov	r3, r5
 8002df4:	430b      	orrs	r3, r1
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
 8002df8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002dfc:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002e00:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e08:	3304      	adds	r3, #4
 8002e0a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e0e:	4413      	add	r3, r2
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	b2dc      	uxtb	r4, r3
 8002e14:	f04f 0500 	mov.w	r5, #0
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	0023      	movs	r3, r4
 8002e22:	2200      	movs	r2, #0
 8002e24:	ea40 0402 	orr.w	r4, r0, r2
 8002e28:	61bc      	str	r4, [r7, #24]
 8002e2a:	430b      	orrs	r3, r1
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002e32:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002e36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e3e:	3305      	adds	r3, #5
 8002e40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e44:	4413      	add	r3, r2
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	b2dc      	uxtb	r4, r3
 8002e4a:	f04f 0500 	mov.w	r5, #0
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	0223      	lsls	r3, r4, #8
 8002e58:	2200      	movs	r2, #0
 8002e5a:	ea40 0402 	orr.w	r4, r0, r2
 8002e5e:	613c      	str	r4, [r7, #16]
 8002e60:	430b      	orrs	r3, r1
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002e68:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002e6c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e74:	3306      	adds	r3, #6
 8002e76:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e7a:	4413      	add	r3, r2
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	b2dc      	uxtb	r4, r3
 8002e80:	f04f 0500 	mov.w	r5, #0
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	0423      	lsls	r3, r4, #16
 8002e8e:	2200      	movs	r2, #0
 8002e90:	ea40 0402 	orr.w	r4, r0, r2
 8002e94:	60bc      	str	r4, [r7, #8]
 8002e96:	430b      	orrs	r3, r1
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002e9e:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002ea2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eaa:	3307      	adds	r3, #7
 8002eac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002eb0:	4413      	add	r3, r2
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	b2dc      	uxtb	r4, r3
 8002eb6:	f04f 0500 	mov.w	r5, #0
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	0623      	lsls	r3, r4, #24
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	ea40 0402 	orr.w	r4, r0, r2
 8002eca:	603c      	str	r4, [r7, #0]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002ed4:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      this->z = u_z.real;
 8002ed8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002edc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8002ee0:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee8:	3308      	adds	r3, #8
 8002eea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
     return offset;
 8002eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    }
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	37ec      	adds	r7, #236	; 0xec
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002efc:	4770      	bx	lr
	...

08002f00 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	4b02      	ldr	r3, [pc, #8]	; (8002f14 <_ZN13geometry_msgs7Vector37getTypeEv+0x14>)
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	0800b760 	.word	0x0800b760

08002f18 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	4b02      	ldr	r3, [pc, #8]	; (8002f2c <_ZN13geometry_msgs7Vector36getMD5Ev+0x14>)
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	0800b778 	.word	0x0800b778

08002f30 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe fb4c 	bl	80015d8 <_ZN3ros3MsgC1Ev>
 8002f40:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3308      	adds	r3, #8
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fb60 	bl	8002610 <_ZN13geometry_msgs7Vector3C1Ev>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3328      	adds	r3, #40	; 0x28
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fb5b 	bl	8002610 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	0800be48 	.word	0x0800be48

08002f68 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f103 0008 	add.w	r0, r3, #8
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	4413      	add	r3, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	f7ff fb6c 	bl	8002660 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f7ff fb5f 	bl	8002660 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
      return offset;
 8002faa:	68fb      	ldr	r3, [r7, #12]
    }
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f103 0008 	add.w	r0, r3, #8
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	4413      	add	r3, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f7ff fcb8 	bl	8002944 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4413      	add	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	f7ff fcab 	bl	8002944 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
     return offset;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
    }
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	4b02      	ldr	r3, [pc, #8]	; (8003014 <_ZN13geometry_msgs5Twist7getTypeEv+0x14>)
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr
 8003014:	0800b79c 	.word	0x0800b79c

08003018 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	4b02      	ldr	r3, [pc, #8]	; (800302c <_ZN13geometry_msgs5Twist6getMD5Ev+0x14>)
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr
 800302c:	0800b7b0 	.word	0x0800b7b0

08003030 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe facc 	bl	80015d8 <_ZN3ros3MsgC1Ev>
 8003040:	4a09      	ldr	r2, [pc, #36]	; (8003068 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	605a      	str	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3308      	adds	r3, #8
 8003050:	4618      	mov	r0, r3
 8003052:	f7fe fab0 	bl	80015b6 <_ZN3ros4TimeC1Ev>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a04      	ldr	r2, [pc, #16]	; (800306c <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 800305a:	611a      	str	r2, [r3, #16]
    {
    }
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	0800be30 	.word	0x0800be30
 800306c:	0800b69c 	.word	0x0800b69c

08003070 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6859      	ldr	r1, [r3, #4]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	4413      	add	r3, r2
 8003088:	b2ca      	uxtb	r2, r1
 800308a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	0a19      	lsrs	r1, r3, #8
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	3301      	adds	r3, #1
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	4413      	add	r3, r2
 800309a:	b2ca      	uxtb	r2, r1
 800309c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	0c19      	lsrs	r1, r3, #16
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3302      	adds	r3, #2
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	4413      	add	r3, r2
 80030ac:	b2ca      	uxtb	r2, r1
 80030ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	0e19      	lsrs	r1, r3, #24
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	3303      	adds	r3, #3
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	4413      	add	r3, r2
 80030be:	b2ca      	uxtb	r2, r1
 80030c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3304      	adds	r3, #4
 80030c6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6899      	ldr	r1, [r3, #8]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	4413      	add	r3, r2
 80030d2:	b2ca      	uxtb	r2, r1
 80030d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	0a19      	lsrs	r1, r3, #8
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	3301      	adds	r3, #1
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	4413      	add	r3, r2
 80030e4:	b2ca      	uxtb	r2, r1
 80030e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	0c19      	lsrs	r1, r3, #16
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3302      	adds	r3, #2
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	4413      	add	r3, r2
 80030f6:	b2ca      	uxtb	r2, r1
 80030f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	0e19      	lsrs	r1, r3, #24
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3303      	adds	r3, #3
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	4413      	add	r3, r2
 8003108:	b2ca      	uxtb	r2, r1
 800310a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3304      	adds	r3, #4
 8003110:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68d9      	ldr	r1, [r3, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	4413      	add	r3, r2
 800311c:	b2ca      	uxtb	r2, r1
 800311e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	0a19      	lsrs	r1, r3, #8
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	3301      	adds	r3, #1
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	4413      	add	r3, r2
 800312e:	b2ca      	uxtb	r2, r1
 8003130:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	0c19      	lsrs	r1, r3, #16
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3302      	adds	r3, #2
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	4413      	add	r3, r2
 8003140:	b2ca      	uxtb	r2, r1
 8003142:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	0e19      	lsrs	r1, r3, #24
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	3303      	adds	r3, #3
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	4413      	add	r3, r2
 8003152:	b2ca      	uxtb	r2, r1
 8003154:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	3304      	adds	r3, #4
 800315a:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	4618      	mov	r0, r3
 8003162:	f7fc fff5 	bl	8000150 <strlen>
 8003166:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	4413      	add	r3, r2
 800316e:	68b9      	ldr	r1, [r7, #8]
 8003170:	4618      	mov	r0, r3
 8003172:	f002 f921 	bl	80053b8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	3304      	adds	r3, #4
 800317a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	18d0      	adds	r0, r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	4619      	mov	r1, r3
 800318a:	f007 f9dd 	bl	800a548 <memcpy>
      offset += length_frame_id;
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4413      	add	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
      return offset;
 8003196:	68fb      	ldr	r3, [r7, #12]
    }
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	4413      	add	r3, r2
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	3301      	adds	r3, #1
 80031c4:	6839      	ldr	r1, [r7, #0]
 80031c6:	440b      	add	r3, r1
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	3302      	adds	r3, #2
 80031da:	6839      	ldr	r1, [r7, #0]
 80031dc:	440b      	add	r3, r1
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	041b      	lsls	r3, r3, #16
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	3303      	adds	r3, #3
 80031f0:	6839      	ldr	r1, [r7, #0]
 80031f2:	440b      	add	r3, r1
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	061b      	lsls	r3, r3, #24
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	3304      	adds	r3, #4
 8003202:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	4413      	add	r3, r2
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	3301      	adds	r3, #1
 800321a:	6839      	ldr	r1, [r7, #0]
 800321c:	440b      	add	r3, r1
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	3302      	adds	r3, #2
 8003230:	6839      	ldr	r1, [r7, #0]
 8003232:	440b      	add	r3, r1
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	041b      	lsls	r3, r3, #16
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	3303      	adds	r3, #3
 8003246:	6839      	ldr	r1, [r7, #0]
 8003248:	440b      	add	r3, r1
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	061b      	lsls	r3, r3, #24
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	3304      	adds	r3, #4
 8003258:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	4413      	add	r3, r2
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	3301      	adds	r3, #1
 8003270:	6839      	ldr	r1, [r7, #0]
 8003272:	440b      	add	r3, r1
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	3302      	adds	r3, #2
 8003286:	6839      	ldr	r1, [r7, #0]
 8003288:	440b      	add	r3, r1
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	041b      	lsls	r3, r3, #16
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	3303      	adds	r3, #3
 800329c:	6839      	ldr	r1, [r7, #0]
 800329e:	440b      	add	r3, r1
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	061b      	lsls	r3, r3, #24
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	3304      	adds	r3, #4
 80032ae:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	441a      	add	r2, r3
 80032b6:	f107 030c 	add.w	r3, r7, #12
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f002 f898 	bl	80053f2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	3304      	adds	r3, #4
 80032c6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4413      	add	r3, r2
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d20c      	bcs.n	80032f2 <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	441a      	add	r2, r3
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	6839      	ldr	r1, [r7, #0]
 80032e4:	440b      	add	r3, r1
 80032e6:	7812      	ldrb	r2, [r2, #0]
 80032e8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	3301      	adds	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	e7ec      	b.n	80032cc <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	3b01      	subs	r3, #1
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	4413      	add	r3, r2
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	3b01      	subs	r3, #1
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	441a      	add	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
     return offset;
 8003316:	693b      	ldr	r3, [r7, #16]
    }
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	4b02      	ldr	r3, [pc, #8]	; (8003334 <_ZN8std_msgs6Header7getTypeEv+0x14>)
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	0800b7d4 	.word	0x0800b7d4

08003338 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	4b02      	ldr	r3, [pc, #8]	; (800334c <_ZN8std_msgs6Header6getMD5Ev+0x14>)
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	0800b7e4 	.word	0x0800b7e4

08003350 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4618      	mov	r0, r3
 800335c:	f7fe f93c 	bl	80015d8 <_ZN3ros3MsgC1Ev>
 8003360:	4a11      	ldr	r2, [pc, #68]	; (80033a8 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	0800be18 	.word	0x0800be18

080033ac <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80033ac:	b480      	push	{r7}
 80033ae:	b08d      	sub	sp, #52	; 0x34
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80033c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80033c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033ca:	6838      	ldr	r0, [r7, #0]
 80033cc:	4401      	add	r1, r0
 80033ce:	b2d3      	uxtb	r3, r2
 80033d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80033d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	0a02      	lsrs	r2, r0, #8
 80033e0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80033e4:	0a0b      	lsrs	r3, r1, #8
 80033e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033e8:	3101      	adds	r1, #1
 80033ea:	6838      	ldr	r0, [r7, #0]
 80033ec:	4401      	add	r1, r0
 80033ee:	b2d3      	uxtb	r3, r2
 80033f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80033f2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	0c02      	lsrs	r2, r0, #16
 8003400:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003404:	0c0b      	lsrs	r3, r1, #16
 8003406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003408:	3102      	adds	r1, #2
 800340a:	6838      	ldr	r0, [r7, #0]
 800340c:	4401      	add	r1, r0
 800340e:	b2d3      	uxtb	r3, r2
 8003410:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003412:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	0e02      	lsrs	r2, r0, #24
 8003420:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003424:	0e0b      	lsrs	r3, r1, #24
 8003426:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003428:	3103      	adds	r1, #3
 800342a:	6838      	ldr	r0, [r7, #0]
 800342c:	4401      	add	r1, r0
 800342e:	b2d3      	uxtb	r3, r2
 8003430:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003432:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	000a      	movs	r2, r1
 8003440:	2300      	movs	r3, #0
 8003442:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003444:	3104      	adds	r1, #4
 8003446:	6838      	ldr	r0, [r7, #0]
 8003448:	4401      	add	r1, r0
 800344a:	b2d3      	uxtb	r3, r2
 800344c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800344e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	0a0a      	lsrs	r2, r1, #8
 800345c:	2300      	movs	r3, #0
 800345e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003460:	3105      	adds	r1, #5
 8003462:	6838      	ldr	r0, [r7, #0]
 8003464:	4401      	add	r1, r0
 8003466:	b2d3      	uxtb	r3, r2
 8003468:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800346a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	0c0a      	lsrs	r2, r1, #16
 8003478:	2300      	movs	r3, #0
 800347a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800347c:	3106      	adds	r1, #6
 800347e:	6838      	ldr	r0, [r7, #0]
 8003480:	4401      	add	r1, r0
 8003482:	b2d3      	uxtb	r3, r2
 8003484:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003486:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	0e0a      	lsrs	r2, r1, #24
 8003494:	2300      	movs	r3, #0
 8003496:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003498:	3107      	adds	r1, #7
 800349a:	6838      	ldr	r0, [r7, #0]
 800349c:	4401      	add	r1, r0
 800349e:	b2d3      	uxtb	r3, r2
 80034a0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	3308      	adds	r3, #8
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80034ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80034b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034b8:	6838      	ldr	r0, [r7, #0]
 80034ba:	4401      	add	r1, r0
 80034bc:	b2d3      	uxtb	r3, r2
 80034be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80034c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	0a02      	lsrs	r2, r0, #8
 80034ce:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80034d2:	0a0b      	lsrs	r3, r1, #8
 80034d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034d6:	3101      	adds	r1, #1
 80034d8:	6838      	ldr	r0, [r7, #0]
 80034da:	4401      	add	r1, r0
 80034dc:	b2d3      	uxtb	r3, r2
 80034de:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80034e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	0c02      	lsrs	r2, r0, #16
 80034ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80034f2:	0c0b      	lsrs	r3, r1, #16
 80034f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034f6:	3102      	adds	r1, #2
 80034f8:	6838      	ldr	r0, [r7, #0]
 80034fa:	4401      	add	r1, r0
 80034fc:	b2d3      	uxtb	r3, r2
 80034fe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003500:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	0e02      	lsrs	r2, r0, #24
 800350e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003512:	0e0b      	lsrs	r3, r1, #24
 8003514:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003516:	3103      	adds	r1, #3
 8003518:	6838      	ldr	r0, [r7, #0]
 800351a:	4401      	add	r1, r0
 800351c:	b2d3      	uxtb	r3, r2
 800351e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003520:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	000a      	movs	r2, r1
 800352e:	2300      	movs	r3, #0
 8003530:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003532:	3104      	adds	r1, #4
 8003534:	6838      	ldr	r0, [r7, #0]
 8003536:	4401      	add	r1, r0
 8003538:	b2d3      	uxtb	r3, r2
 800353a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800353c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	0a0a      	lsrs	r2, r1, #8
 800354a:	2300      	movs	r3, #0
 800354c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800354e:	3105      	adds	r1, #5
 8003550:	6838      	ldr	r0, [r7, #0]
 8003552:	4401      	add	r1, r0
 8003554:	b2d3      	uxtb	r3, r2
 8003556:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003558:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	0c0a      	lsrs	r2, r1, #16
 8003566:	2300      	movs	r3, #0
 8003568:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800356a:	3106      	adds	r1, #6
 800356c:	6838      	ldr	r0, [r7, #0]
 800356e:	4401      	add	r1, r0
 8003570:	b2d3      	uxtb	r3, r2
 8003572:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003574:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	0e0a      	lsrs	r2, r1, #24
 8003582:	2300      	movs	r3, #0
 8003584:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003586:	3107      	adds	r1, #7
 8003588:	6838      	ldr	r0, [r7, #0]
 800358a:	4401      	add	r1, r0
 800358c:	b2d3      	uxtb	r3, r2
 800358e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	3308      	adds	r3, #8
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800359c:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80035a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035a6:	6838      	ldr	r0, [r7, #0]
 80035a8:	4401      	add	r1, r0
 80035aa:	b2d3      	uxtb	r3, r2
 80035ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80035ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	0a02      	lsrs	r2, r0, #8
 80035bc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80035c0:	0a0b      	lsrs	r3, r1, #8
 80035c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035c4:	3101      	adds	r1, #1
 80035c6:	6838      	ldr	r0, [r7, #0]
 80035c8:	4401      	add	r1, r0
 80035ca:	b2d3      	uxtb	r3, r2
 80035cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80035ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	0c02      	lsrs	r2, r0, #16
 80035dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80035e0:	0c0b      	lsrs	r3, r1, #16
 80035e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035e4:	3102      	adds	r1, #2
 80035e6:	6838      	ldr	r0, [r7, #0]
 80035e8:	4401      	add	r1, r0
 80035ea:	b2d3      	uxtb	r3, r2
 80035ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80035ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	0e02      	lsrs	r2, r0, #24
 80035fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003600:	0e0b      	lsrs	r3, r1, #24
 8003602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003604:	3103      	adds	r1, #3
 8003606:	6838      	ldr	r0, [r7, #0]
 8003608:	4401      	add	r1, r0
 800360a:	b2d3      	uxtb	r3, r2
 800360c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800360e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	000a      	movs	r2, r1
 800361c:	2300      	movs	r3, #0
 800361e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003620:	3104      	adds	r1, #4
 8003622:	6838      	ldr	r0, [r7, #0]
 8003624:	4401      	add	r1, r0
 8003626:	b2d3      	uxtb	r3, r2
 8003628:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800362a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	0a0a      	lsrs	r2, r1, #8
 8003638:	2300      	movs	r3, #0
 800363a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800363c:	3105      	adds	r1, #5
 800363e:	6838      	ldr	r0, [r7, #0]
 8003640:	4401      	add	r1, r0
 8003642:	b2d3      	uxtb	r3, r2
 8003644:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003646:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	0c0a      	lsrs	r2, r1, #16
 8003654:	2300      	movs	r3, #0
 8003656:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003658:	3106      	adds	r1, #6
 800365a:	6838      	ldr	r0, [r7, #0]
 800365c:	4401      	add	r1, r0
 800365e:	b2d3      	uxtb	r3, r2
 8003660:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003662:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	0e0a      	lsrs	r2, r1, #24
 8003670:	2300      	movs	r3, #0
 8003672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003674:	3107      	adds	r1, #7
 8003676:	6838      	ldr	r0, [r7, #0]
 8003678:	4401      	add	r1, r0
 800367a:	b2d3      	uxtb	r3, r2
 800367c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	3308      	adds	r3, #8
 8003682:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800368a:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 800368e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003694:	6838      	ldr	r0, [r7, #0]
 8003696:	4401      	add	r1, r0
 8003698:	b2d3      	uxtb	r3, r2
 800369a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 800369c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	0a02      	lsrs	r2, r0, #8
 80036aa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80036ae:	0a0b      	lsrs	r3, r1, #8
 80036b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036b2:	3101      	adds	r1, #1
 80036b4:	6838      	ldr	r0, [r7, #0]
 80036b6:	4401      	add	r1, r0
 80036b8:	b2d3      	uxtb	r3, r2
 80036ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 80036bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	0c02      	lsrs	r2, r0, #16
 80036ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80036ce:	0c0b      	lsrs	r3, r1, #16
 80036d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036d2:	3102      	adds	r1, #2
 80036d4:	6838      	ldr	r0, [r7, #0]
 80036d6:	4401      	add	r1, r0
 80036d8:	b2d3      	uxtb	r3, r2
 80036da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 80036dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	0e02      	lsrs	r2, r0, #24
 80036ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80036ee:	0e0b      	lsrs	r3, r1, #24
 80036f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036f2:	3103      	adds	r1, #3
 80036f4:	6838      	ldr	r0, [r7, #0]
 80036f6:	4401      	add	r1, r0
 80036f8:	b2d3      	uxtb	r3, r2
 80036fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 80036fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	000a      	movs	r2, r1
 800370a:	2300      	movs	r3, #0
 800370c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800370e:	3104      	adds	r1, #4
 8003710:	6838      	ldr	r0, [r7, #0]
 8003712:	4401      	add	r1, r0
 8003714:	b2d3      	uxtb	r3, r2
 8003716:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8003718:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	0a0a      	lsrs	r2, r1, #8
 8003726:	2300      	movs	r3, #0
 8003728:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800372a:	3105      	adds	r1, #5
 800372c:	6838      	ldr	r0, [r7, #0]
 800372e:	4401      	add	r1, r0
 8003730:	b2d3      	uxtb	r3, r2
 8003732:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8003734:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	0c0a      	lsrs	r2, r1, #16
 8003742:	2300      	movs	r3, #0
 8003744:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003746:	3106      	adds	r1, #6
 8003748:	6838      	ldr	r0, [r7, #0]
 800374a:	4401      	add	r1, r0
 800374c:	b2d3      	uxtb	r3, r2
 800374e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8003750:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	0e0a      	lsrs	r2, r1, #24
 800375e:	2300      	movs	r3, #0
 8003760:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003762:	3107      	adds	r1, #7
 8003764:	6838      	ldr	r0, [r7, #0]
 8003766:	4401      	add	r1, r0
 8003768:	b2d3      	uxtb	r3, r2
 800376a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 800376c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376e:	3308      	adds	r3, #8
 8003770:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8003774:	4618      	mov	r0, r3
 8003776:	3734      	adds	r7, #52	; 0x34
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800377e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003782:	b0cf      	sub	sp, #316	; 0x13c
 8003784:	af00      	add	r7, sp, #0
 8003786:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800378a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
    {
      int offset = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80037a0:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80037a4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80037a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80037ac:	4413      	add	r3, r2
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	ea40 0402 	orr.w	r4, r0, r2
 80037ba:	ea41 0503 	orr.w	r5, r1, r3
 80037be:	e9c7 454a 	strd	r4, r5, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80037c2:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 80037c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80037d0:	4413      	add	r3, r2
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	f04f 0000 	mov.w	r0, #0
 80037de:	f04f 0100 	mov.w	r1, #0
 80037e2:	0219      	lsls	r1, r3, #8
 80037e4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80037e8:	0210      	lsls	r0, r2, #8
 80037ea:	ea44 0a00 	orr.w	sl, r4, r0
 80037ee:	ea45 0b01 	orr.w	fp, r5, r1
 80037f2:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80037f6:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 80037fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80037fe:	1c9a      	adds	r2, r3, #2
 8003800:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003804:	4413      	add	r3, r2
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	f04f 0000 	mov.w	r0, #0
 8003812:	f04f 0100 	mov.w	r1, #0
 8003816:	0419      	lsls	r1, r3, #16
 8003818:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800381c:	0410      	lsls	r0, r2, #16
 800381e:	ea44 0300 	orr.w	r3, r4, r0
 8003822:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003826:	ea45 0301 	orr.w	r3, r5, r1
 800382a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800382e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003832:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003836:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800383a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800383e:	1cda      	adds	r2, r3, #3
 8003840:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003844:	4413      	add	r3, r2
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	b2da      	uxtb	r2, r3
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8003852:	ea4f 6802 	mov.w	r8, r2, lsl #24
 8003856:	ea40 0308 	orr.w	r3, r0, r8
 800385a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800385e:	ea41 0309 	orr.w	r3, r1, r9
 8003862:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003866:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800386a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800386e:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003872:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003876:	1d1a      	adds	r2, r3, #4
 8003878:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800387c:	4413      	add	r3, r2
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	b2da      	uxtb	r2, r3
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	f04f 0000 	mov.w	r0, #0
 800388a:	f04f 0100 	mov.w	r1, #0
 800388e:	0011      	movs	r1, r2
 8003890:	2000      	movs	r0, #0
 8003892:	ea44 0300 	orr.w	r3, r4, r0
 8003896:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800389a:	ea45 0301 	orr.w	r3, r5, r1
 800389e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80038a2:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80038a6:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80038aa:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 80038ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80038b2:	1d5a      	adds	r2, r3, #5
 80038b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80038b8:	4413      	add	r3, r2
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	f04f 0000 	mov.w	r0, #0
 80038c6:	f04f 0100 	mov.w	r1, #0
 80038ca:	0211      	lsls	r1, r2, #8
 80038cc:	2000      	movs	r0, #0
 80038ce:	ea44 0300 	orr.w	r3, r4, r0
 80038d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038d6:	ea45 0301 	orr.w	r3, r5, r1
 80038da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80038de:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80038e2:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80038e6:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 80038ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80038ee:	1d9a      	adds	r2, r3, #6
 80038f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80038f4:	4413      	add	r3, r2
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	f04f 0000 	mov.w	r0, #0
 8003902:	f04f 0100 	mov.w	r1, #0
 8003906:	0411      	lsls	r1, r2, #16
 8003908:	2000      	movs	r0, #0
 800390a:	ea44 0300 	orr.w	r3, r4, r0
 800390e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003912:	ea45 0301 	orr.w	r3, r5, r1
 8003916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800391a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800391e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003922:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003926:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800392a:	1dda      	adds	r2, r3, #7
 800392c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003930:	4413      	add	r3, r2
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	f04f 0000 	mov.w	r0, #0
 800393e:	f04f 0100 	mov.w	r1, #0
 8003942:	0611      	lsls	r1, r2, #24
 8003944:	2000      	movs	r0, #0
 8003946:	ea44 0300 	orr.w	r3, r4, r0
 800394a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800394e:	ea45 0301 	orr.w	r3, r5, r1
 8003952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003956:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800395a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      this->x = u_x.real;
 800395e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8003962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003966:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 800396a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800396e:	3308      	adds	r3, #8
 8003970:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003980:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8003984:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003988:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800398c:	4413      	add	r3, r2
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	b2da      	uxtb	r2, r3
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	ea40 0402 	orr.w	r4, r0, r2
 800399a:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 800399e:	430b      	orrs	r3, r1
 80039a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80039a4:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 80039a8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80039ac:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 80039b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80039ba:	4413      	add	r3, r2
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	f04f 0000 	mov.w	r0, #0
 80039c8:	f04f 0100 	mov.w	r1, #0
 80039cc:	0219      	lsls	r1, r3, #8
 80039ce:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80039d2:	0210      	lsls	r0, r2, #8
 80039d4:	ea44 0300 	orr.w	r3, r4, r0
 80039d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039dc:	ea45 0301 	orr.w	r3, r5, r1
 80039e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039e4:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80039e8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80039ec:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 80039f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80039f4:	1c9a      	adds	r2, r3, #2
 80039f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80039fa:	4413      	add	r3, r2
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	f04f 0000 	mov.w	r0, #0
 8003a08:	f04f 0100 	mov.w	r1, #0
 8003a0c:	0419      	lsls	r1, r3, #16
 8003a0e:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003a12:	0410      	lsls	r0, r2, #16
 8003a14:	ea44 0300 	orr.w	r3, r4, r0
 8003a18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a1c:	ea45 0301 	orr.w	r3, r5, r1
 8003a20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a24:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8003a28:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a2c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8003a30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003a34:	1cda      	adds	r2, r3, #3
 8003a36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a3a:	4413      	add	r3, r2
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	0a14      	lsrs	r4, r2, #8
 8003a46:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8003a4a:	0613      	lsls	r3, r2, #24
 8003a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a50:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8003a54:	4623      	mov	r3, r4
 8003a56:	4303      	orrs	r3, r0
 8003a58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a5c:	462b      	mov	r3, r5
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a64:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8003a68:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003a6c:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003a70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003a74:	1d1a      	adds	r2, r3, #4
 8003a76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a7a:	4413      	add	r3, r2
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	f04f 0000 	mov.w	r0, #0
 8003a88:	f04f 0100 	mov.w	r1, #0
 8003a8c:	0011      	movs	r1, r2
 8003a8e:	2000      	movs	r0, #0
 8003a90:	ea44 0300 	orr.w	r3, r4, r0
 8003a94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a98:	ea45 0301 	orr.w	r3, r5, r1
 8003a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003aa0:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003aa4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003aa8:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003aac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ab0:	1d5a      	adds	r2, r3, #5
 8003ab2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ab6:	4413      	add	r3, r2
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	f04f 0000 	mov.w	r0, #0
 8003ac4:	f04f 0100 	mov.w	r1, #0
 8003ac8:	0211      	lsls	r1, r2, #8
 8003aca:	2000      	movs	r0, #0
 8003acc:	ea44 0300 	orr.w	r3, r4, r0
 8003ad0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ad4:	ea45 0301 	orr.w	r3, r5, r1
 8003ad8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003adc:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8003ae0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003ae4:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003ae8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003aec:	1d9a      	adds	r2, r3, #6
 8003aee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003af2:	4413      	add	r3, r2
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	f04f 0000 	mov.w	r0, #0
 8003b00:	f04f 0100 	mov.w	r1, #0
 8003b04:	0411      	lsls	r1, r2, #16
 8003b06:	2000      	movs	r0, #0
 8003b08:	ea44 0300 	orr.w	r3, r4, r0
 8003b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b10:	ea45 0301 	orr.w	r3, r5, r1
 8003b14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b18:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003b1c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003b20:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003b24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003b28:	1dda      	adds	r2, r3, #7
 8003b2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b2e:	4413      	add	r3, r2
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	f04f 0000 	mov.w	r0, #0
 8003b3c:	f04f 0100 	mov.w	r1, #0
 8003b40:	0611      	lsls	r1, r2, #24
 8003b42:	2000      	movs	r0, #0
 8003b44:	ea44 0300 	orr.w	r3, r4, r0
 8003b48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b4c:	ea45 0301 	orr.w	r3, r5, r1
 8003b50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b54:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8003b58:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      this->y = u_y.real;
 8003b5c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8003b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b64:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003b68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003b7e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8003b82:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003b86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b8a:	4413      	add	r3, r2
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	ea40 0402 	orr.w	r4, r0, r2
 8003b98:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003ba2:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003ba6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003baa:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003bae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003bb8:	4413      	add	r3, r2
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	f04f 0000 	mov.w	r0, #0
 8003bc6:	f04f 0100 	mov.w	r1, #0
 8003bca:	0219      	lsls	r1, r3, #8
 8003bcc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003bd0:	0210      	lsls	r0, r2, #8
 8003bd2:	ea44 0300 	orr.w	r3, r4, r0
 8003bd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bda:	ea45 0301 	orr.w	r3, r5, r1
 8003bde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003be2:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8003be6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003bea:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003bee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003bf2:	1c9a      	adds	r2, r3, #2
 8003bf4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003bf8:	4413      	add	r3, r2
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	f04f 0000 	mov.w	r0, #0
 8003c06:	f04f 0100 	mov.w	r1, #0
 8003c0a:	0419      	lsls	r1, r3, #16
 8003c0c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003c10:	0410      	lsls	r0, r2, #16
 8003c12:	ea44 0300 	orr.w	r3, r4, r0
 8003c16:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c18:	ea45 0301 	orr.w	r3, r5, r1
 8003c1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c1e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003c22:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c26:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8003c2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c2e:	1cda      	adds	r2, r3, #3
 8003c30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c34:	4413      	add	r3, r2
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	0a14      	lsrs	r4, r2, #8
 8003c40:	677c      	str	r4, [r7, #116]	; 0x74
 8003c42:	0613      	lsls	r3, r2, #24
 8003c44:	673b      	str	r3, [r7, #112]	; 0x70
 8003c46:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8003c4a:	4623      	mov	r3, r4
 8003c4c:	4303      	orrs	r3, r0
 8003c4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c50:	462b      	mov	r3, r5
 8003c52:	430b      	orrs	r3, r1
 8003c54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c56:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003c5a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003c5e:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003c62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c66:	1d1a      	adds	r2, r3, #4
 8003c68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c6c:	4413      	add	r3, r2
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	f04f 0000 	mov.w	r0, #0
 8003c7a:	f04f 0100 	mov.w	r1, #0
 8003c7e:	0011      	movs	r1, r2
 8003c80:	2000      	movs	r0, #0
 8003c82:	ea44 0300 	orr.w	r3, r4, r0
 8003c86:	663b      	str	r3, [r7, #96]	; 0x60
 8003c88:	ea45 0301 	orr.w	r3, r5, r1
 8003c8c:	667b      	str	r3, [r7, #100]	; 0x64
 8003c8e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8003c92:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003c96:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003c9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c9e:	1d5a      	adds	r2, r3, #5
 8003ca0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ca4:	4413      	add	r3, r2
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	f04f 0000 	mov.w	r0, #0
 8003cb2:	f04f 0100 	mov.w	r1, #0
 8003cb6:	0211      	lsls	r1, r2, #8
 8003cb8:	2000      	movs	r0, #0
 8003cba:	ea44 0300 	orr.w	r3, r4, r0
 8003cbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cc0:	ea45 0301 	orr.w	r3, r5, r1
 8003cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cc6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003cca:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003cce:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003cd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003cd6:	1d9a      	adds	r2, r3, #6
 8003cd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003cdc:	4413      	add	r3, r2
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	f04f 0000 	mov.w	r0, #0
 8003cea:	f04f 0100 	mov.w	r1, #0
 8003cee:	0411      	lsls	r1, r2, #16
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	ea44 0300 	orr.w	r3, r4, r0
 8003cf6:	653b      	str	r3, [r7, #80]	; 0x50
 8003cf8:	ea45 0301 	orr.w	r3, r5, r1
 8003cfc:	657b      	str	r3, [r7, #84]	; 0x54
 8003cfe:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8003d02:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003d06:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003d0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d0e:	1dda      	adds	r2, r3, #7
 8003d10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d14:	4413      	add	r3, r2
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	f04f 0000 	mov.w	r0, #0
 8003d22:	f04f 0100 	mov.w	r1, #0
 8003d26:	0611      	lsls	r1, r2, #24
 8003d28:	2000      	movs	r0, #0
 8003d2a:	ea44 0300 	orr.w	r3, r4, r0
 8003d2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d30:	ea45 0301 	orr.w	r3, r5, r1
 8003d34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d36:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8003d3a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      this->z = u_z.real;
 8003d3e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8003d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d46:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 8003d4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d4e:	3308      	adds	r3, #8
 8003d50:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003d60:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003d64:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003d68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d6c:	4413      	add	r3, r2
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	ea40 0402 	orr.w	r4, r0, r2
 8003d7a:	643c      	str	r4, [r7, #64]	; 0x40
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d80:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003d84:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d88:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8003d8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d96:	4413      	add	r3, r2
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	f04f 0000 	mov.w	r0, #0
 8003da4:	f04f 0100 	mov.w	r1, #0
 8003da8:	0219      	lsls	r1, r3, #8
 8003daa:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003dae:	0210      	lsls	r0, r2, #8
 8003db0:	ea44 0300 	orr.w	r3, r4, r0
 8003db4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003db6:	ea45 0301 	orr.w	r3, r5, r1
 8003dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dbc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003dc0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003dc4:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8003dc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003dcc:	1c9a      	adds	r2, r3, #2
 8003dce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003dd2:	4413      	add	r3, r2
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	f04f 0000 	mov.w	r0, #0
 8003de0:	f04f 0100 	mov.w	r1, #0
 8003de4:	0419      	lsls	r1, r3, #16
 8003de6:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003dea:	0410      	lsls	r0, r2, #16
 8003dec:	ea44 0300 	orr.w	r3, r4, r0
 8003df0:	633b      	str	r3, [r7, #48]	; 0x30
 8003df2:	ea45 0301 	orr.w	r3, r5, r1
 8003df6:	637b      	str	r3, [r7, #52]	; 0x34
 8003df8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003dfc:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e00:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003e04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e08:	1cda      	adds	r2, r3, #3
 8003e0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e0e:	4413      	add	r3, r2
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	0a14      	lsrs	r4, r2, #8
 8003e1a:	62fc      	str	r4, [r7, #44]	; 0x2c
 8003e1c:	0613      	lsls	r3, r2, #24
 8003e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e20:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8003e24:	4623      	mov	r3, r4
 8003e26:	4303      	orrs	r3, r0
 8003e28:	623b      	str	r3, [r7, #32]
 8003e2a:	462b      	mov	r3, r5
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e30:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003e34:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003e38:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003e3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e40:	3304      	adds	r3, #4
 8003e42:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003e46:	4413      	add	r3, r2
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	b2dc      	uxtb	r4, r3
 8003e4c:	f04f 0500 	mov.w	r5, #0
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	0023      	movs	r3, r4
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	ea40 0402 	orr.w	r4, r0, r2
 8003e60:	61bc      	str	r4, [r7, #24]
 8003e62:	430b      	orrs	r3, r1
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003e6a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003e6e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003e72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e76:	3305      	adds	r3, #5
 8003e78:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003e7c:	4413      	add	r3, r2
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	b2dc      	uxtb	r4, r3
 8003e82:	f04f 0500 	mov.w	r5, #0
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	0223      	lsls	r3, r4, #8
 8003e90:	2200      	movs	r2, #0
 8003e92:	ea40 0402 	orr.w	r4, r0, r2
 8003e96:	613c      	str	r4, [r7, #16]
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003ea0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003ea4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003ea8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003eac:	3306      	adds	r3, #6
 8003eae:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003eb2:	4413      	add	r3, r2
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	b2dc      	uxtb	r4, r3
 8003eb8:	f04f 0500 	mov.w	r5, #0
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	0423      	lsls	r3, r4, #16
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	ea40 0402 	orr.w	r4, r0, r2
 8003ecc:	60bc      	str	r4, [r7, #8]
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003ed6:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003eda:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003ede:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ee2:	3307      	adds	r3, #7
 8003ee4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003ee8:	4413      	add	r3, r2
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	b2dc      	uxtb	r4, r3
 8003eee:	f04f 0500 	mov.w	r5, #0
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	0623      	lsls	r3, r4, #24
 8003efc:	2200      	movs	r2, #0
 8003efe:	ea40 0402 	orr.w	r4, r0, r2
 8003f02:	603c      	str	r4, [r7, #0]
 8003f04:	430b      	orrs	r3, r1
 8003f06:	607b      	str	r3, [r7, #4]
 8003f08:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003f0c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      this->w = u_w.real;
 8003f10:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003f14:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8003f18:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 8003f1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f20:	3308      	adds	r3, #8
 8003f22:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
     return offset;
 8003f26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
    }
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8003f30:	46bd      	mov	sp, r7
 8003f32:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003f36:	4770      	bx	lr

08003f38 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	4b02      	ldr	r3, [pc, #8]	; (8003f4c <_ZN13geometry_msgs10Quaternion7getTypeEv+0x14>)
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	0800b808 	.word	0x0800b808

08003f50 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	4b02      	ldr	r3, [pc, #8]	; (8003f64 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x14>)
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	0800b824 	.word	0x0800b824

08003f68 <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fd fb30 	bl	80015d8 <_ZN3ros3MsgC1Ev>
 8003f78:	4a24      	ldr	r2, [pc, #144]	; (800400c <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3304      	adds	r3, #4
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff f854 	bl	8003030 <_ZN8std_msgs6HeaderC1Ev>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3318      	adds	r3, #24
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff f9df 	bl	8003350 <_ZN13geometry_msgs10QuaternionC1Ev>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003f98:	2308      	movs	r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	db08      	blt.n	8003fb0 <_ZN11sensor_msgs3ImuC1Ev+0x48>
 8003f9e:	f04f 0000 	mov.w	r0, #0
 8003fa2:	f04f 0100 	mov.w	r1, #0
 8003fa6:	e9c2 0100 	strd	r0, r1, [r2]
 8003faa:	3208      	adds	r2, #8
 8003fac:	3b01      	subs	r3, #1
 8003fae:	e7f4      	b.n	8003f9a <_ZN11sensor_msgs3ImuC1Ev+0x32>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3388      	adds	r3, #136	; 0x88
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fe fb2b 	bl	8002610 <_ZN13geometry_msgs7Vector3C1Ev>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8003fc0:	2308      	movs	r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	db08      	blt.n	8003fd8 <_ZN11sensor_msgs3ImuC1Ev+0x70>
 8003fc6:	f04f 0000 	mov.w	r0, #0
 8003fca:	f04f 0100 	mov.w	r1, #0
 8003fce:	e9c2 0100 	strd	r0, r1, [r2]
 8003fd2:	3208      	adds	r2, #8
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	e7f4      	b.n	8003fc2 <_ZN11sensor_msgs3ImuC1Ev+0x5a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	33f0      	adds	r3, #240	; 0xf0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fe fb17 	bl	8002610 <_ZN13geometry_msgs7Vector3C1Ev>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8003fe8:	2308      	movs	r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	db08      	blt.n	8004000 <_ZN11sensor_msgs3ImuC1Ev+0x98>
 8003fee:	f04f 0000 	mov.w	r0, #0
 8003ff2:	f04f 0100 	mov.w	r1, #0
 8003ff6:	e9c2 0100 	strd	r0, r1, [r2]
 8003ffa:	3208      	adds	r2, #8
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	e7f4      	b.n	8003fea <_ZN11sensor_msgs3ImuC1Ev+0x82>
    {
    }
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	0800be00 	.word	0x0800be00

08004010 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004010:	b580      	push	{r7, lr}
 8004012:	b08c      	sub	sp, #48	; 0x30
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800401a:	2300      	movs	r3, #0
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->header.serialize(outbuffer + offset);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	1d18      	adds	r0, r3, #4
 8004022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	4413      	add	r3, r2
 8004028:	4619      	mov	r1, r3
 800402a:	f7ff f821 	bl	8003070 <_ZNK8std_msgs6Header9serializeEPh>
 800402e:	4602      	mov	r2, r0
 8004030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004032:	4413      	add	r3, r2
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f103 0018 	add.w	r0, r3, #24
 800403c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	4413      	add	r3, r2
 8004042:	4619      	mov	r1, r3
 8004044:	f7ff f9b2 	bl	80033ac <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8004048:	4602      	mov	r2, r0
 800404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404c:	4413      	add	r3, r2
 800404e:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004050:	2300      	movs	r3, #0
 8004052:	62bb      	str	r3, [r7, #40]	; 0x28
 8004054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004056:	2b08      	cmp	r3, #8
 8004058:	d87e      	bhi.n	8004158 <_ZNK11sensor_msgs3Imu9serializeEPh+0x148>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405e:	3308      	adds	r3, #8
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4413      	add	r3, r2
 8004064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004068:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 800406c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004070:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004072:	6838      	ldr	r0, [r7, #0]
 8004074:	4401      	add	r1, r0
 8004076:	b2d3      	uxtb	r3, r2
 8004078:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 800407a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	0a02      	lsrs	r2, r0, #8
 8004088:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800408c:	0a0b      	lsrs	r3, r1, #8
 800408e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004090:	3101      	adds	r1, #1
 8004092:	6838      	ldr	r0, [r7, #0]
 8004094:	4401      	add	r1, r0
 8004096:	b2d3      	uxtb	r3, r2
 8004098:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 800409a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	0c02      	lsrs	r2, r0, #16
 80040a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80040ac:	0c0b      	lsrs	r3, r1, #16
 80040ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040b0:	3102      	adds	r1, #2
 80040b2:	6838      	ldr	r0, [r7, #0]
 80040b4:	4401      	add	r1, r0
 80040b6:	b2d3      	uxtb	r3, r2
 80040b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 80040ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	0e02      	lsrs	r2, r0, #24
 80040c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80040cc:	0e0b      	lsrs	r3, r1, #24
 80040ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040d0:	3103      	adds	r1, #3
 80040d2:	6838      	ldr	r0, [r7, #0]
 80040d4:	4401      	add	r1, r0
 80040d6:	b2d3      	uxtb	r3, r2
 80040d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 80040da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	000a      	movs	r2, r1
 80040e8:	2300      	movs	r3, #0
 80040ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040ec:	3104      	adds	r1, #4
 80040ee:	6838      	ldr	r0, [r7, #0]
 80040f0:	4401      	add	r1, r0
 80040f2:	b2d3      	uxtb	r3, r2
 80040f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 80040f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	0a0a      	lsrs	r2, r1, #8
 8004104:	2300      	movs	r3, #0
 8004106:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004108:	3105      	adds	r1, #5
 800410a:	6838      	ldr	r0, [r7, #0]
 800410c:	4401      	add	r1, r0
 800410e:	b2d3      	uxtb	r3, r2
 8004110:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 8004112:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	0c0a      	lsrs	r2, r1, #16
 8004120:	2300      	movs	r3, #0
 8004122:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004124:	3106      	adds	r1, #6
 8004126:	6838      	ldr	r0, [r7, #0]
 8004128:	4401      	add	r1, r0
 800412a:	b2d3      	uxtb	r3, r2
 800412c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 800412e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	0e0a      	lsrs	r2, r1, #24
 800413c:	2300      	movs	r3, #0
 800413e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004140:	3107      	adds	r1, #7
 8004142:	6838      	ldr	r0, [r7, #0]
 8004144:	4401      	add	r1, r0
 8004146:	b2d3      	uxtb	r3, r2
 8004148:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->orientation_covariance[i]);
 800414a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414c:	3308      	adds	r3, #8
 800414e:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	3301      	adds	r3, #1
 8004154:	62bb      	str	r3, [r7, #40]	; 0x28
 8004156:	e77d      	b.n	8004054 <_ZNK11sensor_msgs3Imu9serializeEPh+0x44>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800415e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	4413      	add	r3, r2
 8004164:	4619      	mov	r1, r3
 8004166:	f7fe fa7b 	bl	8002660 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800416a:	4602      	mov	r2, r0
 800416c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416e:	4413      	add	r3, r2
 8004170:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004172:	2300      	movs	r3, #0
 8004174:	627b      	str	r3, [r7, #36]	; 0x24
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	2b08      	cmp	r3, #8
 800417a:	d87e      	bhi.n	800427a <_ZNK11sensor_msgs3Imu9serializeEPh+0x26a>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	3315      	adds	r3, #21
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	4413      	add	r3, r2
 8004186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 800418e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004192:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004194:	6838      	ldr	r0, [r7, #0]
 8004196:	4401      	add	r1, r0
 8004198:	b2d3      	uxtb	r3, r2
 800419a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 800419c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	0a02      	lsrs	r2, r0, #8
 80041aa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80041ae:	0a0b      	lsrs	r3, r1, #8
 80041b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041b2:	3101      	adds	r1, #1
 80041b4:	6838      	ldr	r0, [r7, #0]
 80041b6:	4401      	add	r1, r0
 80041b8:	b2d3      	uxtb	r3, r2
 80041ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 80041bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	0c02      	lsrs	r2, r0, #16
 80041ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80041ce:	0c0b      	lsrs	r3, r1, #16
 80041d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041d2:	3102      	adds	r1, #2
 80041d4:	6838      	ldr	r0, [r7, #0]
 80041d6:	4401      	add	r1, r0
 80041d8:	b2d3      	uxtb	r3, r2
 80041da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 80041dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	0e02      	lsrs	r2, r0, #24
 80041ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80041ee:	0e0b      	lsrs	r3, r1, #24
 80041f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041f2:	3103      	adds	r1, #3
 80041f4:	6838      	ldr	r0, [r7, #0]
 80041f6:	4401      	add	r1, r0
 80041f8:	b2d3      	uxtb	r3, r2
 80041fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 80041fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	000a      	movs	r2, r1
 800420a:	2300      	movs	r3, #0
 800420c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800420e:	3104      	adds	r1, #4
 8004210:	6838      	ldr	r0, [r7, #0]
 8004212:	4401      	add	r1, r0
 8004214:	b2d3      	uxtb	r3, r2
 8004216:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 8004218:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	0a0a      	lsrs	r2, r1, #8
 8004226:	2300      	movs	r3, #0
 8004228:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800422a:	3105      	adds	r1, #5
 800422c:	6838      	ldr	r0, [r7, #0]
 800422e:	4401      	add	r1, r0
 8004230:	b2d3      	uxtb	r3, r2
 8004232:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 8004234:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	0c0a      	lsrs	r2, r1, #16
 8004242:	2300      	movs	r3, #0
 8004244:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004246:	3106      	adds	r1, #6
 8004248:	6838      	ldr	r0, [r7, #0]
 800424a:	4401      	add	r1, r0
 800424c:	b2d3      	uxtb	r3, r2
 800424e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 8004250:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	0e0a      	lsrs	r2, r1, #24
 800425e:	2300      	movs	r3, #0
 8004260:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004262:	3107      	adds	r1, #7
 8004264:	6838      	ldr	r0, [r7, #0]
 8004266:	4401      	add	r1, r0
 8004268:	b2d3      	uxtb	r3, r2
 800426a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 800426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426e:	3308      	adds	r3, #8
 8004270:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	3301      	adds	r3, #1
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
 8004278:	e77d      	b.n	8004176 <_ZNK11sensor_msgs3Imu9serializeEPh+0x166>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8004280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	4413      	add	r3, r2
 8004286:	4619      	mov	r1, r3
 8004288:	f7fe f9ea 	bl	8002660 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800428c:	4602      	mov	r2, r0
 800428e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004290:	4413      	add	r3, r2
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004294:	2300      	movs	r3, #0
 8004296:	623b      	str	r3, [r7, #32]
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	2b08      	cmp	r3, #8
 800429c:	d87e      	bhi.n	800439c <_ZNK11sensor_msgs3Imu9serializeEPh+0x38c>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	3322      	adds	r3, #34	; 0x22
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	4413      	add	r3, r2
 80042a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 80042b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042b6:	6838      	ldr	r0, [r7, #0]
 80042b8:	4401      	add	r1, r0
 80042ba:	b2d3      	uxtb	r3, r2
 80042bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 80042be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	0a02      	lsrs	r2, r0, #8
 80042cc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80042d0:	0a0b      	lsrs	r3, r1, #8
 80042d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042d4:	3101      	adds	r1, #1
 80042d6:	6838      	ldr	r0, [r7, #0]
 80042d8:	4401      	add	r1, r0
 80042da:	b2d3      	uxtb	r3, r2
 80042dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 80042de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	0c02      	lsrs	r2, r0, #16
 80042ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80042f0:	0c0b      	lsrs	r3, r1, #16
 80042f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042f4:	3102      	adds	r1, #2
 80042f6:	6838      	ldr	r0, [r7, #0]
 80042f8:	4401      	add	r1, r0
 80042fa:	b2d3      	uxtb	r3, r2
 80042fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 80042fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	0e02      	lsrs	r2, r0, #24
 800430c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004310:	0e0b      	lsrs	r3, r1, #24
 8004312:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004314:	3103      	adds	r1, #3
 8004316:	6838      	ldr	r0, [r7, #0]
 8004318:	4401      	add	r1, r0
 800431a:	b2d3      	uxtb	r3, r2
 800431c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 800431e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	000a      	movs	r2, r1
 800432c:	2300      	movs	r3, #0
 800432e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004330:	3104      	adds	r1, #4
 8004332:	6838      	ldr	r0, [r7, #0]
 8004334:	4401      	add	r1, r0
 8004336:	b2d3      	uxtb	r3, r2
 8004338:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 800433a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800433e:	f04f 0200 	mov.w	r2, #0
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	0a0a      	lsrs	r2, r1, #8
 8004348:	2300      	movs	r3, #0
 800434a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800434c:	3105      	adds	r1, #5
 800434e:	6838      	ldr	r0, [r7, #0]
 8004350:	4401      	add	r1, r0
 8004352:	b2d3      	uxtb	r3, r2
 8004354:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 8004356:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	0c0a      	lsrs	r2, r1, #16
 8004364:	2300      	movs	r3, #0
 8004366:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004368:	3106      	adds	r1, #6
 800436a:	6838      	ldr	r0, [r7, #0]
 800436c:	4401      	add	r1, r0
 800436e:	b2d3      	uxtb	r3, r2
 8004370:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 8004372:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	0e0a      	lsrs	r2, r1, #24
 8004380:	2300      	movs	r3, #0
 8004382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004384:	3107      	adds	r1, #7
 8004386:	6838      	ldr	r0, [r7, #0]
 8004388:	4401      	add	r1, r0
 800438a:	b2d3      	uxtb	r3, r2
 800438c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 800438e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004390:	3308      	adds	r3, #8
 8004392:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	3301      	adds	r3, #1
 8004398:	623b      	str	r3, [r7, #32]
 800439a:	e77d      	b.n	8004298 <_ZNK11sensor_msgs3Imu9serializeEPh+0x288>
      }
      return offset;
 800439c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800439e:	4618      	mov	r0, r3
 80043a0:	3730      	adds	r7, #48	; 0x30
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80043a6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043aa:	b0be      	sub	sp, #248	; 0xf8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 80043b2:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
    {
      int offset = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      offset += this->header.deserialize(inbuffer + offset);
 80043bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043c0:	1d18      	adds	r0, r3, #4
 80043c2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80043c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043ca:	4413      	add	r3, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	f7fe fee7 	bl	80031a0 <_ZN8std_msgs6Header11deserializeEPh>
 80043d2:	4602      	mov	r2, r0
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d8:	4413      	add	r3, r2
 80043da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      offset += this->orientation.deserialize(inbuffer + offset);
 80043de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043e2:	f103 0018 	add.w	r0, r3, #24
 80043e6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80043ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043ee:	4413      	add	r3, r2
 80043f0:	4619      	mov	r1, r3
 80043f2:	f7ff f9c4 	bl	800377e <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 80043f6:	4602      	mov	r2, r0
 80043f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fc:	4413      	add	r3, r2
 80043fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004402:	2300      	movs	r3, #0
 8004404:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004408:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800440c:	2b08      	cmp	r3, #8
 800440e:	f200 8100 	bhi.w	8004612 <_ZN11sensor_msgs3Imu11deserializeEPh+0x26c>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800441e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004422:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004426:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800442a:	4413      	add	r3, r2
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	b2da      	uxtb	r2, r3
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	ea40 0402 	orr.w	r4, r0, r2
 8004438:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800443c:	430b      	orrs	r3, r1
 800443e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004442:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8004446:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800444a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800444e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004458:	4413      	add	r3, r2
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	b2da      	uxtb	r2, r3
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f04f 0100 	mov.w	r1, #0
 800446a:	0219      	lsls	r1, r3, #8
 800446c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004470:	0210      	lsls	r0, r2, #8
 8004472:	ea44 0300 	orr.w	r3, r4, r0
 8004476:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800447a:	ea45 0301 	orr.w	r3, r5, r1
 800447e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004482:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8004486:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800448a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800448e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004492:	1c9a      	adds	r2, r3, #2
 8004494:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004498:	4413      	add	r3, r2
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	f04f 0000 	mov.w	r0, #0
 80044a6:	f04f 0100 	mov.w	r1, #0
 80044aa:	0419      	lsls	r1, r3, #16
 80044ac:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80044b0:	0410      	lsls	r0, r2, #16
 80044b2:	ea44 0300 	orr.w	r3, r4, r0
 80044b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044ba:	ea45 0301 	orr.w	r3, r5, r1
 80044be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044c2:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 80044c6:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80044ca:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d2:	1cda      	adds	r2, r3, #3
 80044d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044d8:	4413      	add	r3, r2
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	ea4f 2912 	mov.w	r9, r2, lsr #8
 80044e6:	ea4f 6802 	mov.w	r8, r2, lsl #24
 80044ea:	ea40 0308 	orr.w	r3, r0, r8
 80044ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044f2:	ea41 0309 	orr.w	r3, r1, r9
 80044f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044fa:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80044fe:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004502:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450a:	1d1a      	adds	r2, r3, #4
 800450c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004510:	4413      	add	r3, r2
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	b2da      	uxtb	r2, r3
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	f04f 0000 	mov.w	r0, #0
 800451e:	f04f 0100 	mov.w	r1, #0
 8004522:	0011      	movs	r1, r2
 8004524:	2000      	movs	r0, #0
 8004526:	ea44 0300 	orr.w	r3, r4, r0
 800452a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800452e:	ea45 0301 	orr.w	r3, r5, r1
 8004532:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004536:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800453a:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800453e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004546:	1d5a      	adds	r2, r3, #5
 8004548:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800454c:	4413      	add	r3, r2
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	f04f 0000 	mov.w	r0, #0
 800455a:	f04f 0100 	mov.w	r1, #0
 800455e:	0211      	lsls	r1, r2, #8
 8004560:	2000      	movs	r0, #0
 8004562:	ea44 0300 	orr.w	r3, r4, r0
 8004566:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800456a:	ea45 0301 	orr.w	r3, r5, r1
 800456e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004572:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8004576:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800457a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004582:	1d9a      	adds	r2, r3, #6
 8004584:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004588:	4413      	add	r3, r2
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	b2da      	uxtb	r2, r3
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f04f 0100 	mov.w	r1, #0
 800459a:	0411      	lsls	r1, r2, #16
 800459c:	2000      	movs	r0, #0
 800459e:	ea44 0300 	orr.w	r3, r4, r0
 80045a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045a6:	ea45 0301 	orr.w	r3, r5, r1
 80045aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80045ae:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80045b2:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80045b6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045be:	1dda      	adds	r2, r3, #7
 80045c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045c4:	4413      	add	r3, r2
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	f04f 0000 	mov.w	r0, #0
 80045d2:	f04f 0100 	mov.w	r1, #0
 80045d6:	0611      	lsls	r1, r2, #24
 80045d8:	2000      	movs	r0, #0
 80045da:	ea44 0a00 	orr.w	sl, r4, r0
 80045de:	ea45 0b01 	orr.w	fp, r5, r1
 80045e2:	e9c7 ab38 	strd	sl, fp, [r7, #224]	; 0xe0
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 80045e6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045ea:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80045ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80045f2:	3308      	adds	r3, #8
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	4413      	add	r3, r2
 80045f8:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->orientation_covariance[i]);
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004600:	3308      	adds	r3, #8
 8004602:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004606:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800460a:	3301      	adds	r3, #1
 800460c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004610:	e6fa      	b.n	8004408 <_ZN11sensor_msgs3Imu11deserializeEPh+0x62>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8004612:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004616:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800461a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800461e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004622:	4413      	add	r3, r2
 8004624:	4619      	mov	r1, r3
 8004626:	f7fe f98d 	bl	8002944 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800462a:	4602      	mov	r2, r0
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004630:	4413      	add	r3, r2
 8004632:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004636:	2300      	movs	r3, #0
 8004638:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800463c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004640:	2b08      	cmp	r3, #8
 8004642:	f200 80fc 	bhi.w	800483e <_ZN11sensor_msgs3Imu11deserializeEPh+0x498>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004652:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004656:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800465a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800465e:	4413      	add	r3, r2
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	b2da      	uxtb	r2, r3
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	ea40 0402 	orr.w	r4, r0, r2
 800466c:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8004670:	430b      	orrs	r3, r1
 8004672:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004676:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800467a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800467e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800468c:	4413      	add	r3, r2
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	b2da      	uxtb	r2, r3
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	f04f 0000 	mov.w	r0, #0
 800469a:	f04f 0100 	mov.w	r1, #0
 800469e:	0219      	lsls	r1, r3, #8
 80046a0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80046a4:	0210      	lsls	r0, r2, #8
 80046a6:	ea44 0300 	orr.w	r3, r4, r0
 80046aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046ae:	ea45 0301 	orr.w	r3, r5, r1
 80046b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046b6:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80046ba:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80046be:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80046c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c6:	1c9a      	adds	r2, r3, #2
 80046c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046cc:	4413      	add	r3, r2
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	f04f 0300 	mov.w	r3, #0
 80046d6:	f04f 0000 	mov.w	r0, #0
 80046da:	f04f 0100 	mov.w	r1, #0
 80046de:	0419      	lsls	r1, r3, #16
 80046e0:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80046e4:	0410      	lsls	r0, r2, #16
 80046e6:	ea44 0300 	orr.w	r3, r4, r0
 80046ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80046ec:	ea45 0301 	orr.w	r3, r5, r1
 80046f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046f2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80046f6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80046fa:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80046fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004702:	1cda      	adds	r2, r3, #3
 8004704:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004708:	4413      	add	r3, r2
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	b2da      	uxtb	r2, r3
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	0a14      	lsrs	r4, r2, #8
 8004714:	677c      	str	r4, [r7, #116]	; 0x74
 8004716:	0613      	lsls	r3, r2, #24
 8004718:	673b      	str	r3, [r7, #112]	; 0x70
 800471a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800471e:	4623      	mov	r3, r4
 8004720:	4303      	orrs	r3, r0
 8004722:	66bb      	str	r3, [r7, #104]	; 0x68
 8004724:	462b      	mov	r3, r5
 8004726:	430b      	orrs	r3, r1
 8004728:	66fb      	str	r3, [r7, #108]	; 0x6c
 800472a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800472e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004732:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473a:	1d1a      	adds	r2, r3, #4
 800473c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004740:	4413      	add	r3, r2
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	b2da      	uxtb	r2, r3
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	f04f 0000 	mov.w	r0, #0
 800474e:	f04f 0100 	mov.w	r1, #0
 8004752:	0011      	movs	r1, r2
 8004754:	2000      	movs	r0, #0
 8004756:	ea44 0300 	orr.w	r3, r4, r0
 800475a:	663b      	str	r3, [r7, #96]	; 0x60
 800475c:	ea45 0301 	orr.w	r3, r5, r1
 8004760:	667b      	str	r3, [r7, #100]	; 0x64
 8004762:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8004766:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800476a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004772:	1d5a      	adds	r2, r3, #5
 8004774:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004778:	4413      	add	r3, r2
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	b2da      	uxtb	r2, r3
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	f04f 0000 	mov.w	r0, #0
 8004786:	f04f 0100 	mov.w	r1, #0
 800478a:	0211      	lsls	r1, r2, #8
 800478c:	2000      	movs	r0, #0
 800478e:	ea44 0300 	orr.w	r3, r4, r0
 8004792:	65bb      	str	r3, [r7, #88]	; 0x58
 8004794:	ea45 0301 	orr.w	r3, r5, r1
 8004798:	65fb      	str	r3, [r7, #92]	; 0x5c
 800479a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800479e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80047a2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80047a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047aa:	1d9a      	adds	r2, r3, #6
 80047ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047b0:	4413      	add	r3, r2
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	f04f 0000 	mov.w	r0, #0
 80047be:	f04f 0100 	mov.w	r1, #0
 80047c2:	0411      	lsls	r1, r2, #16
 80047c4:	2000      	movs	r0, #0
 80047c6:	ea44 0300 	orr.w	r3, r4, r0
 80047ca:	653b      	str	r3, [r7, #80]	; 0x50
 80047cc:	ea45 0301 	orr.w	r3, r5, r1
 80047d0:	657b      	str	r3, [r7, #84]	; 0x54
 80047d2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80047d6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80047da:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80047de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e2:	1dda      	adds	r2, r3, #7
 80047e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047e8:	4413      	add	r3, r2
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	f04f 0000 	mov.w	r0, #0
 80047f6:	f04f 0100 	mov.w	r1, #0
 80047fa:	0611      	lsls	r1, r2, #24
 80047fc:	2000      	movs	r0, #0
 80047fe:	ea44 0300 	orr.w	r3, r4, r0
 8004802:	64bb      	str	r3, [r7, #72]	; 0x48
 8004804:	ea45 0301 	orr.w	r3, r5, r1
 8004808:	64fb      	str	r3, [r7, #76]	; 0x4c
 800480a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800480e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 8004812:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004816:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800481a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800481e:	3315      	adds	r3, #21
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	4413      	add	r3, r2
 8004824:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482c:	3308      	adds	r3, #8
 800482e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004832:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004836:	3301      	adds	r3, #1
 8004838:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800483c:	e6fe      	b.n	800463c <_ZN11sensor_msgs3Imu11deserializeEPh+0x296>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 800483e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004842:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8004846:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800484a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800484e:	4413      	add	r3, r2
 8004850:	4619      	mov	r1, r3
 8004852:	f7fe f877 	bl	8002944 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004856:	4602      	mov	r2, r0
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	4413      	add	r3, r2
 800485e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004862:	2300      	movs	r3, #0
 8004864:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004868:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800486c:	2b08      	cmp	r3, #8
 800486e:	f200 80f8 	bhi.w	8004a62 <_ZN11sensor_msgs3Imu11deserializeEPh+0x6bc>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800487e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004882:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004886:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800488a:	4413      	add	r3, r2
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	b2da      	uxtb	r2, r3
 8004890:	f04f 0300 	mov.w	r3, #0
 8004894:	ea40 0402 	orr.w	r4, r0, r2
 8004898:	643c      	str	r4, [r7, #64]	; 0x40
 800489a:	430b      	orrs	r3, r1
 800489c:	647b      	str	r3, [r7, #68]	; 0x44
 800489e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80048a2:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80048a6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80048aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048b4:	4413      	add	r3, r2
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	f04f 0000 	mov.w	r0, #0
 80048c2:	f04f 0100 	mov.w	r1, #0
 80048c6:	0219      	lsls	r1, r3, #8
 80048c8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80048cc:	0210      	lsls	r0, r2, #8
 80048ce:	ea44 0300 	orr.w	r3, r4, r0
 80048d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048d4:	ea45 0301 	orr.w	r3, r5, r1
 80048d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048da:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80048de:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80048e2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80048e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ea:	1c9a      	adds	r2, r3, #2
 80048ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048f0:	4413      	add	r3, r2
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	f04f 0000 	mov.w	r0, #0
 80048fe:	f04f 0100 	mov.w	r1, #0
 8004902:	0419      	lsls	r1, r3, #16
 8004904:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004908:	0410      	lsls	r0, r2, #16
 800490a:	ea44 0300 	orr.w	r3, r4, r0
 800490e:	633b      	str	r3, [r7, #48]	; 0x30
 8004910:	ea45 0301 	orr.w	r3, r5, r1
 8004914:	637b      	str	r3, [r7, #52]	; 0x34
 8004916:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800491a:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800491e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004926:	1cda      	adds	r2, r3, #3
 8004928:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800492c:	4413      	add	r3, r2
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	b2da      	uxtb	r2, r3
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	0a14      	lsrs	r4, r2, #8
 8004938:	62fc      	str	r4, [r7, #44]	; 0x2c
 800493a:	0613      	lsls	r3, r2, #24
 800493c:	62bb      	str	r3, [r7, #40]	; 0x28
 800493e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8004942:	4623      	mov	r3, r4
 8004944:	4303      	orrs	r3, r0
 8004946:	623b      	str	r3, [r7, #32]
 8004948:	462b      	mov	r3, r5
 800494a:	430b      	orrs	r3, r1
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
 800494e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004952:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004956:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800495a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495e:	1d1a      	adds	r2, r3, #4
 8004960:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004964:	4413      	add	r3, r2
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	b2da      	uxtb	r2, r3
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	f04f 0000 	mov.w	r0, #0
 8004972:	f04f 0100 	mov.w	r1, #0
 8004976:	0011      	movs	r1, r2
 8004978:	2000      	movs	r0, #0
 800497a:	ea44 0300 	orr.w	r3, r4, r0
 800497e:	61bb      	str	r3, [r7, #24]
 8004980:	ea45 0301 	orr.w	r3, r5, r1
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800498a:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800498e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004996:	1d5a      	adds	r2, r3, #5
 8004998:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800499c:	4413      	add	r3, r2
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	f04f 0000 	mov.w	r0, #0
 80049aa:	f04f 0100 	mov.w	r1, #0
 80049ae:	0211      	lsls	r1, r2, #8
 80049b0:	2000      	movs	r0, #0
 80049b2:	ea44 0300 	orr.w	r3, r4, r0
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	ea45 0301 	orr.w	r3, r5, r1
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80049c2:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80049c6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ce:	1d9a      	adds	r2, r3, #6
 80049d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049d4:	4413      	add	r3, r2
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	f04f 0000 	mov.w	r0, #0
 80049e2:	f04f 0100 	mov.w	r1, #0
 80049e6:	0411      	lsls	r1, r2, #16
 80049e8:	2000      	movs	r0, #0
 80049ea:	ea44 0300 	orr.w	r3, r4, r0
 80049ee:	60bb      	str	r3, [r7, #8]
 80049f0:	ea45 0301 	orr.w	r3, r5, r1
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80049fa:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80049fe:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a06:	1dda      	adds	r2, r3, #7
 8004a08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a0c:	4413      	add	r3, r2
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	f04f 0000 	mov.w	r0, #0
 8004a1a:	f04f 0100 	mov.w	r1, #0
 8004a1e:	0611      	lsls	r1, r2, #24
 8004a20:	2000      	movs	r0, #0
 8004a22:	ea44 0300 	orr.w	r3, r4, r0
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	ea45 0301 	orr.w	r3, r5, r1
 8004a2c:	607b      	str	r3, [r7, #4]
 8004a2e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004a32:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 8004a36:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004a3a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004a3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004a42:	3322      	adds	r3, #34	; 0x22
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	4413      	add	r3, r2
 8004a48:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	3308      	adds	r3, #8
 8004a52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004a56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a60:	e702      	b.n	8004868 <_ZN11sensor_msgs3Imu11deserializeEPh+0x4c2>
      }
     return offset;
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    }
 8004a66:	4618      	mov	r0, r3
 8004a68:	37f8      	adds	r7, #248	; 0xf8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004a70 <_ZN11sensor_msgs3Imu7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Imu"; };
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	4b02      	ldr	r3, [pc, #8]	; (8004a84 <_ZN11sensor_msgs3Imu7getTypeEv+0x14>)
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr
 8004a84:	0800b848 	.word	0x0800b848

08004a88 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    const char * getMD5(){ return "6a62c6daae103f4ff57a132d6f95cec2"; };
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	4b02      	ldr	r3, [pc, #8]	; (8004a9c <_ZN11sensor_msgs3Imu6getMD5Ev+0x14>)
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr
 8004a9c:	0800b858 	.word	0x0800b858

08004aa0 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8004aa8:	4a03      	ldr	r2, [pc, #12]	; (8004ab8 <bno055_assignI2C+0x18>)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6013      	str	r3, [r2, #0]
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr
 8004ab8:	20000178 	.word	0x20000178

08004abc <bno055_delay>:

void bno055_delay(int time) {
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f002 fa60 	bl	8006f8c <HAL_Delay>
#endif
}
 8004acc:	bf00      	nop
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	4603      	mov	r3, r0
 8004adc:	460a      	mov	r2, r1
 8004ade:	71fb      	strb	r3, [r7, #7]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	733b      	strb	r3, [r7, #12]
 8004ae8:	79bb      	ldrb	r3, [r7, #6]
 8004aea:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8004aec:	4b5a      	ldr	r3, [pc, #360]	; (8004c58 <bno055_writeData+0x184>)
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	f107 020c 	add.w	r2, r7, #12
 8004af4:	230a      	movs	r3, #10
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	2302      	movs	r3, #2
 8004afa:	2150      	movs	r1, #80	; 0x50
 8004afc:	f003 f8e2 	bl	8007cc4 <HAL_I2C_Master_Transmit>
 8004b00:	4603      	mov	r3, r0
 8004b02:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 80a0 	beq.w	8004c4c <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8004b0c:	7dfb      	ldrb	r3, [r7, #23]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d103      	bne.n	8004b1a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8004b12:	4852      	ldr	r0, [pc, #328]	; (8004c5c <bno055_writeData+0x188>)
 8004b14:	f005 fdb4 	bl	800a680 <puts>
 8004b18:	e012      	b.n	8004b40 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8004b1a:	7dfb      	ldrb	r3, [r7, #23]
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d103      	bne.n	8004b28 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8004b20:	484f      	ldr	r0, [pc, #316]	; (8004c60 <bno055_writeData+0x18c>)
 8004b22:	f005 fdad 	bl	800a680 <puts>
 8004b26:	e00b      	b.n	8004b40 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d103      	bne.n	8004b36 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8004b2e:	484d      	ldr	r0, [pc, #308]	; (8004c64 <bno055_writeData+0x190>)
 8004b30:	f005 fda6 	bl	800a680 <puts>
 8004b34:	e004      	b.n	8004b40 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
 8004b38:	4619      	mov	r1, r3
 8004b3a:	484b      	ldr	r0, [pc, #300]	; (8004c68 <bno055_writeData+0x194>)
 8004b3c:	f005 fd1a 	bl	800a574 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8004b40:	4b45      	ldr	r3, [pc, #276]	; (8004c58 <bno055_writeData+0x184>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f003 fc28 	bl	800839a <HAL_I2C_GetError>
 8004b4a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d07e      	beq.n	8004c50 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d103      	bne.n	8004b60 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8004b58:	4844      	ldr	r0, [pc, #272]	; (8004c6c <bno055_writeData+0x198>)
 8004b5a:	f005 fd91 	bl	800a680 <puts>
 8004b5e:	e021      	b.n	8004ba4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d103      	bne.n	8004b6e <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8004b66:	4842      	ldr	r0, [pc, #264]	; (8004c70 <bno055_writeData+0x19c>)
 8004b68:	f005 fd8a 	bl	800a680 <puts>
 8004b6c:	e01a      	b.n	8004ba4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d103      	bne.n	8004b7c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8004b74:	483f      	ldr	r0, [pc, #252]	; (8004c74 <bno055_writeData+0x1a0>)
 8004b76:	f005 fd83 	bl	800a680 <puts>
 8004b7a:	e013      	b.n	8004ba4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d103      	bne.n	8004b8a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8004b82:	483d      	ldr	r0, [pc, #244]	; (8004c78 <bno055_writeData+0x1a4>)
 8004b84:	f005 fd7c 	bl	800a680 <puts>
 8004b88:	e00c      	b.n	8004ba4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2b10      	cmp	r3, #16
 8004b8e:	d103      	bne.n	8004b98 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8004b90:	483a      	ldr	r0, [pc, #232]	; (8004c7c <bno055_writeData+0x1a8>)
 8004b92:	f005 fd75 	bl	800a680 <puts>
 8004b96:	e005      	b.n	8004ba4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d102      	bne.n	8004ba4 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8004b9e:	4838      	ldr	r0, [pc, #224]	; (8004c80 <bno055_writeData+0x1ac>)
 8004ba0:	f005 fd6e 	bl	800a680 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8004ba4:	4b2c      	ldr	r3, [pc, #176]	; (8004c58 <bno055_writeData+0x184>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f003 fbe9 	bl	8008380 <HAL_I2C_GetState>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d103      	bne.n	8004bc0 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8004bb8:	4832      	ldr	r0, [pc, #200]	; (8004c84 <bno055_writeData+0x1b0>)
 8004bba:	f005 fd61 	bl	800a680 <puts>
 8004bbe:	e048      	b.n	8004c52 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d103      	bne.n	8004bce <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8004bc6:	482f      	ldr	r0, [pc, #188]	; (8004c84 <bno055_writeData+0x1b0>)
 8004bc8:	f005 fd5a 	bl	800a680 <puts>
 8004bcc:	e041      	b.n	8004c52 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
 8004bd0:	2b24      	cmp	r3, #36	; 0x24
 8004bd2:	d103      	bne.n	8004bdc <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8004bd4:	482c      	ldr	r0, [pc, #176]	; (8004c88 <bno055_writeData+0x1b4>)
 8004bd6:	f005 fd53 	bl	800a680 <puts>
 8004bda:	e03a      	b.n	8004c52 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	2b21      	cmp	r3, #33	; 0x21
 8004be0:	d103      	bne.n	8004bea <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8004be2:	482a      	ldr	r0, [pc, #168]	; (8004c8c <bno055_writeData+0x1b8>)
 8004be4:	f005 fd4c 	bl	800a680 <puts>
 8004be8:	e033      	b.n	8004c52 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	2b22      	cmp	r3, #34	; 0x22
 8004bee:	d103      	bne.n	8004bf8 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8004bf0:	4827      	ldr	r0, [pc, #156]	; (8004c90 <bno055_writeData+0x1bc>)
 8004bf2:	f005 fd45 	bl	800a680 <puts>
 8004bf6:	e02c      	b.n	8004c52 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	2b28      	cmp	r3, #40	; 0x28
 8004bfc:	d103      	bne.n	8004c06 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8004bfe:	4825      	ldr	r0, [pc, #148]	; (8004c94 <bno055_writeData+0x1c0>)
 8004c00:	f005 fd3e 	bl	800a680 <puts>
 8004c04:	e025      	b.n	8004c52 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
 8004c08:	2b29      	cmp	r3, #41	; 0x29
 8004c0a:	d103      	bne.n	8004c14 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8004c0c:	4822      	ldr	r0, [pc, #136]	; (8004c98 <bno055_writeData+0x1c4>)
 8004c0e:	f005 fd37 	bl	800a680 <puts>
 8004c12:	e01e      	b.n	8004c52 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b2a      	cmp	r3, #42	; 0x2a
 8004c18:	d103      	bne.n	8004c22 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8004c1a:	4820      	ldr	r0, [pc, #128]	; (8004c9c <bno055_writeData+0x1c8>)
 8004c1c:	f005 fd30 	bl	800a680 <puts>
 8004c20:	e017      	b.n	8004c52 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	2b60      	cmp	r3, #96	; 0x60
 8004c26:	d103      	bne.n	8004c30 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8004c28:	481d      	ldr	r0, [pc, #116]	; (8004ca0 <bno055_writeData+0x1cc>)
 8004c2a:	f005 fd29 	bl	800a680 <puts>
 8004c2e:	e010      	b.n	8004c52 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	2ba0      	cmp	r3, #160	; 0xa0
 8004c34:	d103      	bne.n	8004c3e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8004c36:	481b      	ldr	r0, [pc, #108]	; (8004ca4 <bno055_writeData+0x1d0>)
 8004c38:	f005 fd22 	bl	800a680 <puts>
 8004c3c:	e009      	b.n	8004c52 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	2be0      	cmp	r3, #224	; 0xe0
 8004c42:	d106      	bne.n	8004c52 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8004c44:	4818      	ldr	r0, [pc, #96]	; (8004ca8 <bno055_writeData+0x1d4>)
 8004c46:	f005 fd1b 	bl	800a680 <puts>
 8004c4a:	e002      	b.n	8004c52 <bno055_writeData+0x17e>
    return;
 8004c4c:	bf00      	nop
 8004c4e:	e000      	b.n	8004c52 <bno055_writeData+0x17e>
    return;
 8004c50:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	20000178 	.word	0x20000178
 8004c5c:	0800b87c 	.word	0x0800b87c
 8004c60:	0800b8a0 	.word	0x0800b8a0
 8004c64:	0800b8c8 	.word	0x0800b8c8
 8004c68:	0800b8ec 	.word	0x0800b8ec
 8004c6c:	0800b904 	.word	0x0800b904
 8004c70:	0800b918 	.word	0x0800b918
 8004c74:	0800b92c 	.word	0x0800b92c
 8004c78:	0800b940 	.word	0x0800b940
 8004c7c:	0800b954 	.word	0x0800b954
 8004c80:	0800b968 	.word	0x0800b968
 8004c84:	0800b980 	.word	0x0800b980
 8004c88:	0800b998 	.word	0x0800b998
 8004c8c:	0800b9ac 	.word	0x0800b9ac
 8004c90:	0800b9c4 	.word	0x0800b9c4
 8004c94:	0800b9dc 	.word	0x0800b9dc
 8004c98:	0800b9f4 	.word	0x0800b9f4
 8004c9c:	0800ba14 	.word	0x0800ba14
 8004ca0:	0800ba34 	.word	0x0800ba34
 8004ca4:	0800ba4c 	.word	0x0800ba4c
 8004ca8:	0800ba64 	.word	0x0800ba64

08004cac <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	6039      	str	r1, [r7, #0]
 8004cb6:	71fb      	strb	r3, [r7, #7]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <bno055_readData+0x40>)
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	1dfa      	adds	r2, r7, #7
 8004cc2:	2364      	movs	r3, #100	; 0x64
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	2150      	movs	r1, #80	; 0x50
 8004cca:	f002 fffb 	bl	8007cc4 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8004cce:	4b07      	ldr	r3, [pc, #28]	; (8004cec <bno055_readData+0x40>)
 8004cd0:	6818      	ldr	r0, [r3, #0]
 8004cd2:	79bb      	ldrb	r3, [r7, #6]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2264      	movs	r2, #100	; 0x64
 8004cd8:	9200      	str	r2, [sp, #0]
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	2150      	movs	r1, #80	; 0x50
 8004cde:	f003 f8ef 	bl	8007ec0 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000178 	.word	0x20000178

08004cf0 <HAL_UART_TxCpltCallback>:
char log_msg[256];
float _roverBase_width =0.75;
float _wheelRadius = 0.06;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a07      	ldr	r2, [pc, #28]	; (8004d18 <HAL_UART_TxCpltCallback+0x28>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d106      	bne.n	8004d0e <HAL_UART_TxCpltCallback+0x1e>
	{
  nh.getHardware()->flush();
 8004d00:	4806      	ldr	r0, [pc, #24]	; (8004d1c <HAL_UART_TxCpltCallback+0x2c>)
 8004d02:	f000 fc5f 	bl	80055c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004d06:	4603      	mov	r3, r0
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7fd fbd1 	bl	80024b0 <_ZN13STM32Hardware5flushEv>
	}
}
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20000f08 	.word	0x20000f08
 8004d1c:	2000017c 	.word	0x2000017c

08004d20 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE>:

/*--------------/cmd_vel callBack function------------*/
void cmd_velCallBack(const geometry_msgs::Twist &velInfo)
{
 8004d20:	b5b0      	push	{r4, r5, r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 float lin_x = velInfo.linear.x;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004d2e:	4610      	mov	r0, r2
 8004d30:	4619      	mov	r1, r3
 8004d32:	f7fb fe0b 	bl	800094c <__aeabi_d2f>
 8004d36:	4603      	mov	r3, r0
 8004d38:	61fb      	str	r3, [r7, #28]
 float ang_z = velInfo.angular.z;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8004d40:	4610      	mov	r0, r2
 8004d42:	4619      	mov	r1, r3
 8004d44:	f7fb fe02 	bl	800094c <__aeabi_d2f>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	61bb      	str	r3, [r7, #24]



 float leftWheelSpeed = lin_x - ((_roverBase_width/2)*ang_z); // linear vel
 8004d4c:	4b4a      	ldr	r3, [pc, #296]	; (8004e78 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x158>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fc f80b 	bl	8000d70 <__aeabi_fdiv>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	69b9      	ldr	r1, [r7, #24]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fb ff52 	bl	8000c08 <__aeabi_fmul>
 8004d64:	4603      	mov	r3, r0
 8004d66:	4619      	mov	r1, r3
 8004d68:	69f8      	ldr	r0, [r7, #28]
 8004d6a:	f7fb fe43 	bl	80009f4 <__aeabi_fsub>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	617b      	str	r3, [r7, #20]
 float rightWheelSpeed = lin_x + ((_roverBase_width/2)*ang_z);// linear vel
 8004d72:	4b41      	ldr	r3, [pc, #260]	; (8004e78 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x158>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fb fff8 	bl	8000d70 <__aeabi_fdiv>
 8004d80:	4603      	mov	r3, r0
 8004d82:	69b9      	ldr	r1, [r7, #24]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7fb ff3f 	bl	8000c08 <__aeabi_fmul>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	69f8      	ldr	r0, [r7, #28]
 8004d90:	f7fb fe32 	bl	80009f8 <__addsf3>
 8004d94:	4603      	mov	r3, r0
 8004d96:	613b      	str	r3, [r7, #16]

 int leftRpm_reg_val = ((leftWheelSpeed)/(0.10472*_wheelRadius))/0.23;
 8004d98:	6978      	ldr	r0, [r7, #20]
 8004d9a:	f7fb fb45 	bl	8000428 <__aeabi_f2d>
 8004d9e:	4604      	mov	r4, r0
 8004da0:	460d      	mov	r5, r1
 8004da2:	4b36      	ldr	r3, [pc, #216]	; (8004e7c <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x15c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fb fb3e 	bl	8000428 <__aeabi_f2d>
 8004dac:	a32e      	add	r3, pc, #184	; (adr r3, 8004e68 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x148>)
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	f7fb fb91 	bl	80004d8 <__aeabi_dmul>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4620      	mov	r0, r4
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	f7fb fcb5 	bl	800072c <__aeabi_ddiv>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	4619      	mov	r1, r3
 8004dca:	a329      	add	r3, pc, #164	; (adr r3, 8004e70 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x150>)
 8004dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd0:	f7fb fcac 	bl	800072c <__aeabi_ddiv>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4610      	mov	r0, r2
 8004dda:	4619      	mov	r1, r3
 8004ddc:	f7fb fd8e 	bl	80008fc <__aeabi_d2iz>
 8004de0:	4603      	mov	r3, r0
 8004de2:	60fb      	str	r3, [r7, #12]
 int righttRpm_reg_val = ((rightWheelSpeed)/(0.10472*_wheelRadius))/0.23;
 8004de4:	6938      	ldr	r0, [r7, #16]
 8004de6:	f7fb fb1f 	bl	8000428 <__aeabi_f2d>
 8004dea:	4604      	mov	r4, r0
 8004dec:	460d      	mov	r5, r1
 8004dee:	4b23      	ldr	r3, [pc, #140]	; (8004e7c <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x15c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fb fb18 	bl	8000428 <__aeabi_f2d>
 8004df8:	a31b      	add	r3, pc, #108	; (adr r3, 8004e68 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x148>)
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	f7fb fb6b 	bl	80004d8 <__aeabi_dmul>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4620      	mov	r0, r4
 8004e08:	4629      	mov	r1, r5
 8004e0a:	f7fb fc8f 	bl	800072c <__aeabi_ddiv>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4610      	mov	r0, r2
 8004e14:	4619      	mov	r1, r3
 8004e16:	a316      	add	r3, pc, #88	; (adr r3, 8004e70 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x150>)
 8004e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1c:	f7fb fc86 	bl	800072c <__aeabi_ddiv>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4610      	mov	r0, r2
 8004e26:	4619      	mov	r1, r3
 8004e28:	f7fb fd68 	bl	80008fc <__aeabi_d2iz>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	60bb      	str	r3, [r7, #8]


 xl430_writeToAddress(2, leftRpm_reg_val, &GOAL_VELOCITY, &REG_WR);
 8004e30:	4b13      	ldr	r3, [pc, #76]	; (8004e80 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x160>)
 8004e32:	4a14      	ldr	r2, [pc, #80]	; (8004e84 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x164>)
 8004e34:	68f9      	ldr	r1, [r7, #12]
 8004e36:	2002      	movs	r0, #2
 8004e38:	f001 fef0 	bl	8006c1c <xl430_writeToAddress>
 HAL_Delay(4);
 8004e3c:	2004      	movs	r0, #4
 8004e3e:	f002 f8a5 	bl	8006f8c <HAL_Delay>

 xl430_writeToAddress(1, righttRpm_reg_val, &GOAL_VELOCITY, &REG_WR);
 8004e42:	4b0f      	ldr	r3, [pc, #60]	; (8004e80 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x160>)
 8004e44:	4a0f      	ldr	r2, [pc, #60]	; (8004e84 <_Z15cmd_velCallBackRKN13geometry_msgs5TwistE+0x164>)
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	2001      	movs	r0, #1
 8004e4a:	f001 fee7 	bl	8006c1c <xl430_writeToAddress>
 HAL_Delay(4);
 8004e4e:	2004      	movs	r0, #4
 8004e50:	f002 f89c 	bl	8006f8c <HAL_Delay>

 xl430_Action();
 8004e54:	f001 ff82 	bl	8006d5c <xl430_Action>
 HAL_Delay(4);
 8004e58:	2004      	movs	r0, #4
 8004e5a:	f002 f897 	bl	8006f8c <HAL_Delay>


}
 8004e5e:	bf00      	nop
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bdb0      	pop	{r4, r5, r7, pc}
 8004e66:	bf00      	nop
 8004e68:	0f3cb3e5 	.word	0x0f3cb3e5
 8004e6c:	3fbaceee 	.word	0x3fbaceee
 8004e70:	d70a3d71 	.word	0xd70a3d71
 8004e74:	3fcd70a3 	.word	0x3fcd70a3
 8004e78:	20000018 	.word	0x20000018
 8004e7c:	2000001c 	.word	0x2000001c
 8004e80:	0800bdc4 	.word	0x0800bdc4
 8004e84:	0800bdc8 	.word	0x0800bdc8

08004e88 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8004e90:	4805      	ldr	r0, [pc, #20]	; (8004ea8 <HAL_UART_RxCpltCallback+0x20>)
 8004e92:	f000 fb97 	bl	80055c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004e96:	4603      	mov	r3, r0
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fd fac8 	bl	800242e <_ZN13STM32Hardware10reset_rbufEv>
}
 8004e9e:	bf00      	nop
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	2000017c 	.word	0x2000017c

08004eac <setup>:

void setup(void)
{
 8004eac:	b590      	push	{r4, r7, lr}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af02      	add	r7, sp, #8
	nh.initNode();
 8004eb2:	4842      	ldr	r0, [pc, #264]	; (8004fbc <setup+0x110>)
 8004eb4:	f000 fb91 	bl	80055da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	while(!nh.connected())
 8004eb8:	4840      	ldr	r0, [pc, #256]	; (8004fbc <setup+0x110>)
 8004eba:	f000 fbab 	bl	8005614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f083 0301 	eor.w	r3, r3, #1
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <setup+0x26>
	 {
	   nh.spinOnce();
 8004eca:	483c      	ldr	r0, [pc, #240]	; (8004fbc <setup+0x110>)
 8004ecc:	f000 fbae 	bl	800562c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	while(!nh.connected())
 8004ed0:	e7f2      	b.n	8004eb8 <setup+0xc>
	 }
	 nh.loginfo("stm32 Connected");
 8004ed2:	493b      	ldr	r1, [pc, #236]	; (8004fc0 <setup+0x114>)
 8004ed4:	4839      	ldr	r0, [pc, #228]	; (8004fbc <setup+0x110>)
 8004ed6:	f000 fd82 	bl	80059de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
	   nh.loginfo("[ID 01] ping Fails");
	    HAL_Delay(5);
	  }
	nh.loginfo("[ID 01] ping Success !");*/

	 while(! nh.advertise(imu))
 8004eda:	493a      	ldr	r1, [pc, #232]	; (8004fc4 <setup+0x118>)
 8004edc:	4837      	ldr	r0, [pc, #220]	; (8004fbc <setup+0x110>)
 8004ede:	f000 fd8c 	bl	80059fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f083 0301 	eor.w	r3, r3, #1
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <setup+0x4a>
	{
		nh.spinOnce();
 8004eee:	4833      	ldr	r0, [pc, #204]	; (8004fbc <setup+0x110>)
 8004ef0:	f000 fb9c 	bl	800562c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	 while(! nh.advertise(imu))
 8004ef4:	e7f1      	b.n	8004eda <setup+0x2e>
	}

	while(! nh.advertise(wheelFeedback_pub))
 8004ef6:	4934      	ldr	r1, [pc, #208]	; (8004fc8 <setup+0x11c>)
 8004ef8:	4830      	ldr	r0, [pc, #192]	; (8004fbc <setup+0x110>)
 8004efa:	f000 fd7e 	bl	80059fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f083 0301 	eor.w	r3, r3, #1
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <setup+0x66>
		{
			nh.spinOnce();
 8004f0a:	482c      	ldr	r0, [pc, #176]	; (8004fbc <setup+0x110>)
 8004f0c:	f000 fb8e 	bl	800562c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	while(! nh.advertise(wheelFeedback_pub))
 8004f10:	e7f1      	b.n	8004ef6 <setup+0x4a>
		}
	 nh.subscribe(_sub);
 8004f12:	492e      	ldr	r1, [pc, #184]	; (8004fcc <setup+0x120>)
 8004f14:	4829      	ldr	r0, [pc, #164]	; (8004fbc <setup+0x110>)
 8004f16:	f000 fd9f 	bl	8005a58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
	 nh.negotiateTopics();
 8004f1a:	4828      	ldr	r0, [pc, #160]	; (8004fbc <setup+0x110>)
 8004f1c:	f000 fdc6 	bl	8005aac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>


	 if(!nh.getParam("base_width", &_roverBase_width))
 8004f20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	2301      	movs	r3, #1
 8004f28:	4a29      	ldr	r2, [pc, #164]	; (8004fd0 <setup+0x124>)
 8004f2a:	492a      	ldr	r1, [pc, #168]	; (8004fd4 <setup+0x128>)
 8004f2c:	4823      	ldr	r0, [pc, #140]	; (8004fbc <setup+0x110>)
 8004f2e:	f000 fe9d 	bl	8005c6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii>
 8004f32:	4603      	mov	r3, r0
 8004f34:	f083 0301 	eor.w	r3, r3, #1
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <setup+0x98>
	 {
		 _roverBase_width=0.2;
 8004f3e:	4b24      	ldr	r3, [pc, #144]	; (8004fd0 <setup+0x124>)
 8004f40:	4a25      	ldr	r2, [pc, #148]	; (8004fd8 <setup+0x12c>)
 8004f42:	601a      	str	r2, [r3, #0]

	 }
	 if(!nh.getParam("wheel_radius",&_wheelRadius))
 8004f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	4a23      	ldr	r2, [pc, #140]	; (8004fdc <setup+0x130>)
 8004f4e:	4924      	ldr	r1, [pc, #144]	; (8004fe0 <setup+0x134>)
 8004f50:	481a      	ldr	r0, [pc, #104]	; (8004fbc <setup+0x110>)
 8004f52:	f000 fe8b 	bl	8005c6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii>
 8004f56:	4603      	mov	r3, r0
 8004f58:	f083 0301 	eor.w	r3, r3, #1
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <setup+0xbc>
	 {
		 _wheelRadius = 0.06;
 8004f62:	4b1e      	ldr	r3, [pc, #120]	; (8004fdc <setup+0x130>)
 8004f64:	4a1f      	ldr	r2, [pc, #124]	; (8004fe4 <setup+0x138>)
 8004f66:	601a      	str	r2, [r3, #0]
	 }

	 xl430_writeToAddress(0xFE, 1, &TORQUE_ENABLE,&WRITE);
 8004f68:	4b1f      	ldr	r3, [pc, #124]	; (8004fe8 <setup+0x13c>)
 8004f6a:	4a20      	ldr	r2, [pc, #128]	; (8004fec <setup+0x140>)
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	20fe      	movs	r0, #254	; 0xfe
 8004f70:	f001 fe54 	bl	8006c1c <xl430_writeToAddress>



	  bno055_assignI2C(&hi2c1);
 8004f74:	481e      	ldr	r0, [pc, #120]	; (8004ff0 <setup+0x144>)
 8004f76:	f7ff fd93 	bl	8004aa0 <bno055_assignI2C>
	  bno055_setup();
 8004f7a:	f7fb ffd5 	bl	8000f28 <bno055_setup>
	  bno055_setOperationModeNDOF();
 8004f7e:	f7fb ffc0 	bl	8000f02 <bno055_setOperationModeNDOF>

     //update the time parameters
	 current_time= nh.now();
 8004f82:	4c1c      	ldr	r4, [pc, #112]	; (8004ff4 <setup+0x148>)
 8004f84:	463b      	mov	r3, r7
 8004f86:	490d      	ldr	r1, [pc, #52]	; (8004fbc <setup+0x110>)
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 fea7 	bl	8005cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 8004f8e:	4622      	mov	r2, r4
 8004f90:	463b      	mov	r3, r7
 8004f92:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f96:	e882 0003 	stmia.w	r2, {r0, r1}
	 last_time = nh.now();
 8004f9a:	4c17      	ldr	r4, [pc, #92]	; (8004ff8 <setup+0x14c>)
 8004f9c:	463b      	mov	r3, r7
 8004f9e:	4907      	ldr	r1, [pc, #28]	; (8004fbc <setup+0x110>)
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fe9b 	bl	8005cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 8004fa6:	4622      	mov	r2, r4
 8004fa8:	463b      	mov	r3, r7
 8004faa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004fae:	e882 0003 	stmia.w	r2, {r0, r1}

}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd90      	pop	{r4, r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	2000017c 	.word	0x2000017c
 8004fc0:	0800ba7c 	.word	0x0800ba7c
 8004fc4:	20000c90 	.word	0x20000c90
 8004fc8:	20000b20 	.word	0x20000b20
 8004fcc:	20000ca8 	.word	0x20000ca8
 8004fd0:	20000018 	.word	0x20000018
 8004fd4:	0800ba8c 	.word	0x0800ba8c
 8004fd8:	3e4ccccd 	.word	0x3e4ccccd
 8004fdc:	2000001c 	.word	0x2000001c
 8004fe0:	0800ba98 	.word	0x0800ba98
 8004fe4:	3d75c28f 	.word	0x3d75c28f
 8004fe8:	0800bdc3 	.word	0x0800bdc3
 8004fec:	0800bdc6 	.word	0x0800bdc6
 8004ff0:	20000de8 	.word	0x20000de8
 8004ff4:	20000d20 	.word	0x20000d20
 8004ff8:	20000d28 	.word	0x20000d28
 8004ffc:	00000000 	.word	0x00000000

08005000 <setup_dummy>:




void setup_dummy(void)
{
 8005000:	b5b0      	push	{r4, r5, r7, lr}
 8005002:	b08c      	sub	sp, #48	; 0x30
 8005004:	af00      	add	r7, sp, #0
	last_time = current_time;
 8005006:	4b15      	ldr	r3, [pc, #84]	; (800505c <setup_dummy+0x5c>)
 8005008:	4a15      	ldr	r2, [pc, #84]	; (8005060 <setup_dummy+0x60>)
 800500a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800500e:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8005012:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005016:	4813      	ldr	r0, [pc, #76]	; (8005064 <setup_dummy+0x64>)
 8005018:	f002 fcf6 	bl	8007a08 <HAL_GPIO_TogglePin>
	xl430_syncRead(&PRESENT_VELOCITY, servo_ID,uint8_t(2));
 800501c:	2202      	movs	r2, #2
 800501e:	4912      	ldr	r1, [pc, #72]	; (8005068 <setup_dummy+0x68>)
 8005020:	4812      	ldr	r0, [pc, #72]	; (800506c <setup_dummy+0x6c>)
 8005022:	f001 febf 	bl	8006da4 <xl430_syncRead>
	HAL_Delay(5);
 8005026:	2005      	movs	r0, #5
 8005028:	f001 ffb0 	bl	8006f8c <HAL_Delay>

	xl430_readBroadcastBuffer(2, __speedData);
 800502c:	4910      	ldr	r1, [pc, #64]	; (8005070 <setup_dummy+0x70>)
 800502e:	2002      	movs	r0, #2
 8005030:	f001 fcbc 	bl	80069ac <xl430_readBroadcastBuffer>
	HAL_Delay(5);
 8005034:	2005      	movs	r0, #5
 8005036:	f001 ffa9 	bl	8006f8c <HAL_Delay>

	// validate the speed data and update
	if(__speedData[0].crc_check && __speedData[1].crc_check)
 800503a:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <setup_dummy+0x70>)
 800503c:	7b1b      	ldrb	r3, [r3, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d01c      	beq.n	800507c <setup_dummy+0x7c>
 8005042:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <setup_dummy+0x70>)
 8005044:	7f1b      	ldrb	r3, [r3, #28]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d018      	beq.n	800507c <setup_dummy+0x7c>
	{
		leftSpeed_regval = __speedData[0].data;
 800504a:	4b09      	ldr	r3, [pc, #36]	; (8005070 <setup_dummy+0x70>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	4a09      	ldr	r2, [pc, #36]	; (8005074 <setup_dummy+0x74>)
 8005050:	6013      	str	r3, [r2, #0]
		rightSpeed_regval = __speedData[1].data;
 8005052:	4b07      	ldr	r3, [pc, #28]	; (8005070 <setup_dummy+0x70>)
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	4a08      	ldr	r2, [pc, #32]	; (8005078 <setup_dummy+0x78>)
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	e013      	b.n	8005084 <setup_dummy+0x84>
 800505c:	20000d28 	.word	0x20000d28
 8005060:	20000d20 	.word	0x20000d20
 8005064:	40011000 	.word	0x40011000
 8005068:	0800bdc0 	.word	0x0800bdc0
 800506c:	0800bdca 	.word	0x0800bdca
 8005070:	20000ab8 	.word	0x20000ab8
 8005074:	20000d08 	.word	0x20000d08
 8005078:	20000d0c 	.word	0x20000d0c
	}
	else
	{
		nh.logwarn("Error in validating wheel speed");
 800507c:	49b0      	ldr	r1, [pc, #704]	; (8005340 <setup_dummy+0x340>)
 800507e:	48b1      	ldr	r0, [pc, #708]	; (8005344 <setup_dummy+0x344>)
 8005080:	f000 fe68 	bl	8005d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7logwarnEPKc>
	}

	// ----Beginning of the calculation and relative position update-----
	float l_wheelSpeed_ = ((leftSpeed_regval * 0.23) / 60)
 8005084:	4bb0      	ldr	r3, [pc, #704]	; (8005348 <setup_dummy+0x348>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4618      	mov	r0, r3
 800508a:	f7fb f9bb 	bl	8000404 <__aeabi_i2d>
 800508e:	a3a8      	add	r3, pc, #672	; (adr r3, 8005330 <setup_dummy+0x330>)
 8005090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005094:	f7fb fa20 	bl	80004d8 <__aeabi_dmul>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	4610      	mov	r0, r2
 800509e:	4619      	mov	r1, r3
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	4ba9      	ldr	r3, [pc, #676]	; (800534c <setup_dummy+0x34c>)
 80050a6:	f7fb fb41 	bl	800072c <__aeabi_ddiv>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4614      	mov	r4, r2
 80050b0:	461d      	mov	r5, r3
			* (_wheelRadius * 6.2831);
 80050b2:	4ba7      	ldr	r3, [pc, #668]	; (8005350 <setup_dummy+0x350>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fb f9b6 	bl	8000428 <__aeabi_f2d>
 80050bc:	a39e      	add	r3, pc, #632	; (adr r3, 8005338 <setup_dummy+0x338>)
 80050be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c2:	f7fb fa09 	bl	80004d8 <__aeabi_dmul>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4620      	mov	r0, r4
 80050cc:	4629      	mov	r1, r5
 80050ce:	f7fb fa03 	bl	80004d8 <__aeabi_dmul>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
	float l_wheelSpeed_ = ((leftSpeed_regval * 0.23) / 60)
 80050d6:	4610      	mov	r0, r2
 80050d8:	4619      	mov	r1, r3
 80050da:	f7fb fc37 	bl	800094c <__aeabi_d2f>
 80050de:	4603      	mov	r3, r0
 80050e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	float r_wheelSpeed_ = ((rightSpeed_regval * 0.23) / 60)
 80050e2:	4b9c      	ldr	r3, [pc, #624]	; (8005354 <setup_dummy+0x354>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fb f98c 	bl	8000404 <__aeabi_i2d>
 80050ec:	a390      	add	r3, pc, #576	; (adr r3, 8005330 <setup_dummy+0x330>)
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	f7fb f9f1 	bl	80004d8 <__aeabi_dmul>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4610      	mov	r0, r2
 80050fc:	4619      	mov	r1, r3
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	4b92      	ldr	r3, [pc, #584]	; (800534c <setup_dummy+0x34c>)
 8005104:	f7fb fb12 	bl	800072c <__aeabi_ddiv>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4614      	mov	r4, r2
 800510e:	461d      	mov	r5, r3
			* (_wheelRadius * 6.2831);
 8005110:	4b8f      	ldr	r3, [pc, #572]	; (8005350 <setup_dummy+0x350>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4618      	mov	r0, r3
 8005116:	f7fb f987 	bl	8000428 <__aeabi_f2d>
 800511a:	a387      	add	r3, pc, #540	; (adr r3, 8005338 <setup_dummy+0x338>)
 800511c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005120:	f7fb f9da 	bl	80004d8 <__aeabi_dmul>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4620      	mov	r0, r4
 800512a:	4629      	mov	r1, r5
 800512c:	f7fb f9d4 	bl	80004d8 <__aeabi_dmul>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
	float r_wheelSpeed_ = ((rightSpeed_regval * 0.23) / 60)
 8005134:	4610      	mov	r0, r2
 8005136:	4619      	mov	r1, r3
 8005138:	f7fb fc08 	bl	800094c <__aeabi_d2f>
 800513c:	4603      	mov	r3, r0
 800513e:	62bb      	str	r3, [r7, #40]	; 0x28

	vth = (r_wheelSpeed_ - l_wheelSpeed_) / _roverBase_width;
 8005140:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005144:	f7fb fc56 	bl	80009f4 <__aeabi_fsub>
 8005148:	4603      	mov	r3, r0
 800514a:	461a      	mov	r2, r3
 800514c:	4b82      	ldr	r3, [pc, #520]	; (8005358 <setup_dummy+0x358>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4619      	mov	r1, r3
 8005152:	4610      	mov	r0, r2
 8005154:	f7fb fe0c 	bl	8000d70 <__aeabi_fdiv>
 8005158:	4603      	mov	r3, r0
 800515a:	4618      	mov	r0, r3
 800515c:	f7fb f964 	bl	8000428 <__aeabi_f2d>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	497d      	ldr	r1, [pc, #500]	; (800535c <setup_dummy+0x35c>)
 8005166:	e9c1 2300 	strd	r2, r3, [r1]
	vx = (l_wheelSpeed_ + r_wheelSpeed_) / 2;
 800516a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800516c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800516e:	f7fb fc43 	bl	80009f8 <__addsf3>
 8005172:	4603      	mov	r3, r0
 8005174:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005178:	4618      	mov	r0, r3
 800517a:	f7fb fdf9 	bl	8000d70 <__aeabi_fdiv>
 800517e:	4603      	mov	r3, r0
 8005180:	4618      	mov	r0, r3
 8005182:	f7fb f951 	bl	8000428 <__aeabi_f2d>
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4975      	ldr	r1, [pc, #468]	; (8005360 <setup_dummy+0x360>)
 800518c:	e9c1 2300 	strd	r2, r3, [r1]

	wheelFeedback_msgs.linear.x =vx;
 8005190:	4b73      	ldr	r3, [pc, #460]	; (8005360 <setup_dummy+0x360>)
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	4973      	ldr	r1, [pc, #460]	; (8005364 <setup_dummy+0x364>)
 8005198:	e9c1 2304 	strd	r2, r3, [r1, #16]
	wheelFeedback_msgs.angular.z = vth;
 800519c:	4b6f      	ldr	r3, [pc, #444]	; (800535c <setup_dummy+0x35c>)
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	4970      	ldr	r1, [pc, #448]	; (8005364 <setup_dummy+0x364>)
 80051a4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	wheelFeedback_pub.publish(&wheelFeedback_msgs);
 80051a8:	496e      	ldr	r1, [pc, #440]	; (8005364 <setup_dummy+0x364>)
 80051aa:	486f      	ldr	r0, [pc, #444]	; (8005368 <setup_dummy+0x368>)
 80051ac:	f7fd f8e6 	bl	800237c <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	current_time = nh.now();
 80051b0:	4c6e      	ldr	r4, [pc, #440]	; (800536c <setup_dummy+0x36c>)
 80051b2:	f107 0320 	add.w	r3, r7, #32
 80051b6:	4963      	ldr	r1, [pc, #396]	; (8005344 <setup_dummy+0x344>)
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fd8f 	bl	8005cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 80051be:	4622      	mov	r2, r4
 80051c0:	f107 0320 	add.w	r3, r7, #32
 80051c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80051c8:	e882 0003 	stmia.w	r2, {r0, r1}


	imu_msg.header.stamp = nh.now();
 80051cc:	4c68      	ldr	r4, [pc, #416]	; (8005370 <setup_dummy+0x370>)
 80051ce:	f107 0320 	add.w	r3, r7, #32
 80051d2:	495c      	ldr	r1, [pc, #368]	; (8005344 <setup_dummy+0x344>)
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fd81 	bl	8005cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 80051da:	f104 030c 	add.w	r3, r4, #12
 80051de:	f107 0220 	add.w	r2, r7, #32
 80051e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051e6:	e883 0003 	stmia.w	r3, {r0, r1}
	imu_msg.header.frame_id= base_link;
 80051ea:	4b61      	ldr	r3, [pc, #388]	; (8005370 <setup_dummy+0x370>)
 80051ec:	4a61      	ldr	r2, [pc, #388]	; (8005374 <setup_dummy+0x374>)
 80051ee:	615a      	str	r2, [r3, #20]

	  test_rslts= bno055_getSelfTestResult();
 80051f0:	f7fb fec2 	bl	8000f78 <bno055_getSelfTestResult>
 80051f4:	4603      	mov	r3, r0
 80051f6:	4a60      	ldr	r2, [pc, #384]	; (8005378 <setup_dummy+0x378>)
 80051f8:	6013      	str	r3, [r2, #0]
	  if(test_rslts.accState ==0 || test_rslts.gyrState ==0)
 80051fa:	4b5f      	ldr	r3, [pc, #380]	; (8005378 <setup_dummy+0x378>)
 80051fc:	78db      	ldrb	r3, [r3, #3]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <setup_dummy+0x20a>
 8005202:	4b5d      	ldr	r3, [pc, #372]	; (8005378 <setup_dummy+0x378>)
 8005204:	785b      	ldrb	r3, [r3, #1]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d11c      	bne.n	8005244 <setup_dummy+0x244>
	  {
		  HAL_GPIO_WritePin(IMU_rst_GPIO_Port, IMU_rst_Pin, GPIO_PIN_RESET);
 800520a:	2200      	movs	r2, #0
 800520c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005210:	485a      	ldr	r0, [pc, #360]	; (800537c <setup_dummy+0x37c>)
 8005212:	f002 fbe1 	bl	80079d8 <HAL_GPIO_WritePin>
		  HAL_Delay(20);
 8005216:	2014      	movs	r0, #20
 8005218:	f001 feb8 	bl	8006f8c <HAL_Delay>
		  HAL_GPIO_WritePin(IMU_rst_GPIO_Port, IMU_rst_Pin, GPIO_PIN_SET);
 800521c:	2201      	movs	r2, #1
 800521e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005222:	4856      	ldr	r0, [pc, #344]	; (800537c <setup_dummy+0x37c>)
 8005224:	f002 fbd8 	bl	80079d8 <HAL_GPIO_WritePin>
		  HAL_Delay(10);
 8005228:	200a      	movs	r0, #10
 800522a:	f001 feaf 	bl	8006f8c <HAL_Delay>
		  nh.loginfo("fails");
 800522e:	4954      	ldr	r1, [pc, #336]	; (8005380 <setup_dummy+0x380>)
 8005230:	4844      	ldr	r0, [pc, #272]	; (8005344 <setup_dummy+0x344>)
 8005232:	f000 fbd4 	bl	80059de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
		  bno055_assignI2C(&hi2c1);
 8005236:	4853      	ldr	r0, [pc, #332]	; (8005384 <setup_dummy+0x384>)
 8005238:	f7ff fc32 	bl	8004aa0 <bno055_assignI2C>
		  bno055_setup();
 800523c:	f7fb fe74 	bl	8000f28 <bno055_setup>
		  bno055_setOperationModeNDOF();
 8005240:	f7fb fe5f 	bl	8000f02 <bno055_setOperationModeNDOF>
	  }
	  v = bno055_getVectorGyroscope();
 8005244:	4c50      	ldr	r4, [pc, #320]	; (8005388 <setup_dummy+0x388>)
 8005246:	463b      	mov	r3, r7
 8005248:	4618      	mov	r0, r3
 800524a:	f7fb ffe9 	bl	8001220 <bno055_getVectorGyroscope>
 800524e:	4625      	mov	r5, r4
 8005250:	463c      	mov	r4, r7
 8005252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005256:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800525a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	  imu_msg.angular_velocity.x= v.x;
 800525e:	4b4a      	ldr	r3, [pc, #296]	; (8005388 <setup_dummy+0x388>)
 8005260:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005264:	4942      	ldr	r1, [pc, #264]	; (8005370 <setup_dummy+0x370>)
 8005266:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	  imu_msg.angular_velocity.y= v.y;
 800526a:	4b47      	ldr	r3, [pc, #284]	; (8005388 <setup_dummy+0x388>)
 800526c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005270:	493f      	ldr	r1, [pc, #252]	; (8005370 <setup_dummy+0x370>)
 8005272:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	  imu_msg.angular_velocity.z= v.z;
 8005276:	4b44      	ldr	r3, [pc, #272]	; (8005388 <setup_dummy+0x388>)
 8005278:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800527c:	493c      	ldr	r1, [pc, #240]	; (8005370 <setup_dummy+0x370>)
 800527e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

	  v = bno055_getVectorLinearAccel();
 8005282:	4c41      	ldr	r4, [pc, #260]	; (8005388 <setup_dummy+0x388>)
 8005284:	463b      	mov	r3, r7
 8005286:	4618      	mov	r0, r3
 8005288:	f7fb ffd7 	bl	800123a <bno055_getVectorLinearAccel>
 800528c:	4625      	mov	r5, r4
 800528e:	463c      	mov	r4, r7
 8005290:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005292:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005294:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005298:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

	  imu_msg.linear_acceleration.x= v.x;
 800529c:	4b3a      	ldr	r3, [pc, #232]	; (8005388 <setup_dummy+0x388>)
 800529e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80052a2:	4933      	ldr	r1, [pc, #204]	; (8005370 <setup_dummy+0x370>)
 80052a4:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
	  imu_msg.linear_acceleration.y= v.y;
 80052a8:	4b37      	ldr	r3, [pc, #220]	; (8005388 <setup_dummy+0x388>)
 80052aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80052ae:	4930      	ldr	r1, [pc, #192]	; (8005370 <setup_dummy+0x370>)
 80052b0:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
	  imu_msg.linear_acceleration.z= v.z;
 80052b4:	4b34      	ldr	r3, [pc, #208]	; (8005388 <setup_dummy+0x388>)
 80052b6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80052ba:	492d      	ldr	r1, [pc, #180]	; (8005370 <setup_dummy+0x370>)
 80052bc:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108

	  v = bno055_getVectorQuaternion();
 80052c0:	4c31      	ldr	r4, [pc, #196]	; (8005388 <setup_dummy+0x388>)
 80052c2:	463b      	mov	r3, r7
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fb ffc5 	bl	8001254 <bno055_getVectorQuaternion>
 80052ca:	4625      	mov	r5, r4
 80052cc:	463c      	mov	r4, r7
 80052ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80052d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

	  imu_msg.orientation.w = v.w;
 80052da:	4b2b      	ldr	r3, [pc, #172]	; (8005388 <setup_dummy+0x388>)
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	4923      	ldr	r1, [pc, #140]	; (8005370 <setup_dummy+0x370>)
 80052e2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	  imu_msg.orientation.x = v.x;
 80052e6:	4b28      	ldr	r3, [pc, #160]	; (8005388 <setup_dummy+0x388>)
 80052e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80052ec:	4920      	ldr	r1, [pc, #128]	; (8005370 <setup_dummy+0x370>)
 80052ee:	e9c1 2308 	strd	r2, r3, [r1, #32]
	  imu_msg.orientation.y = v.y;
 80052f2:	4b25      	ldr	r3, [pc, #148]	; (8005388 <setup_dummy+0x388>)
 80052f4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80052f8:	491d      	ldr	r1, [pc, #116]	; (8005370 <setup_dummy+0x370>)
 80052fa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	  imu_msg.orientation.z = v.z;
 80052fe:	4b22      	ldr	r3, [pc, #136]	; (8005388 <setup_dummy+0x388>)
 8005300:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005304:	491a      	ldr	r1, [pc, #104]	; (8005370 <setup_dummy+0x370>)
 8005306:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	  imu.publish( &imu_msg );
 800530a:	4919      	ldr	r1, [pc, #100]	; (8005370 <setup_dummy+0x370>)
 800530c:	481f      	ldr	r0, [pc, #124]	; (800538c <setup_dummy+0x38c>)
 800530e:	f7fd f835 	bl	800237c <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	nh.spinOnce();
 8005312:	480c      	ldr	r0, [pc, #48]	; (8005344 <setup_dummy+0x344>)
 8005314:	f000 f98a 	bl	800562c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	if(!nh.connected())
 8005318:	480a      	ldr	r0, [pc, #40]	; (8005344 <setup_dummy+0x344>)
 800531a:	f000 f97b 	bl	8005614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 800531e:	4603      	mov	r3, r0
 8005320:	f083 0301 	eor.w	r3, r3, #1
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d03b      	beq.n	80053a2 <setup_dummy+0x3a2>
 800532a:	e031      	b.n	8005390 <setup_dummy+0x390>
 800532c:	f3af 8000 	nop.w
 8005330:	d70a3d71 	.word	0xd70a3d71
 8005334:	3fcd70a3 	.word	0x3fcd70a3
 8005338:	f765fd8b 	.word	0xf765fd8b
 800533c:	401921e4 	.word	0x401921e4
 8005340:	0800baa8 	.word	0x0800baa8
 8005344:	2000017c 	.word	0x2000017c
 8005348:	20000d08 	.word	0x20000d08
 800534c:	404e0000 	.word	0x404e0000
 8005350:	2000001c 	.word	0x2000001c
 8005354:	20000d0c 	.word	0x20000d0c
 8005358:	20000018 	.word	0x20000018
 800535c:	20000d18 	.word	0x20000d18
 8005360:	20000d10 	.word	0x20000d10
 8005364:	20000ad8 	.word	0x20000ad8
 8005368:	20000b20 	.word	0x20000b20
 800536c:	20000d20 	.word	0x20000d20
 8005370:	20000b38 	.word	0x20000b38
 8005374:	2000000c 	.word	0x2000000c
 8005378:	20000d50 	.word	0x20000d50
 800537c:	40010800 	.word	0x40010800
 8005380:	0800bac8 	.word	0x0800bac8
 8005384:	20000de8 	.word	0x20000de8
 8005388:	20000d30 	.word	0x20000d30
 800538c:	20000c90 	.word	0x20000c90
	{
		HAL_Delay(5);
 8005390:	2005      	movs	r0, #5
 8005392:	f001 fdfb 	bl	8006f8c <HAL_Delay>
		xl430_writeToAddress(0xFE, 0, &TORQUE_ENABLE,&WRITE);
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <setup_dummy+0x3b0>)
 8005398:	4a06      	ldr	r2, [pc, #24]	; (80053b4 <setup_dummy+0x3b4>)
 800539a:	2100      	movs	r1, #0
 800539c:	20fe      	movs	r0, #254	; 0xfe
 800539e:	f001 fc3d 	bl	8006c1c <xl430_writeToAddress>
	}
	HAL_Delay(50);
 80053a2:	2032      	movs	r0, #50	; 0x32
 80053a4:	f001 fdf2 	bl	8006f8c <HAL_Delay>



}
 80053a8:	bf00      	nop
 80053aa:	3730      	adds	r7, #48	; 0x30
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bdb0      	pop	{r4, r5, r7, pc}
 80053b0:	0800bdc3 	.word	0x0800bdc3
 80053b4:	0800bdc6 	.word	0x0800bdc6

080053b8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b03      	cmp	r3, #3
 80053ca:	d80d      	bhi.n	80053e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	fa22 f103 	lsr.w	r1, r2, r3
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4413      	add	r3, r2
 80053dc:	b2ca      	uxtb	r2, r1
 80053de:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	3301      	adds	r3, #1
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	e7ee      	b.n	80053c6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80053e8:	bf00      	nop
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bc80      	pop	{r7}
 80053f0:	4770      	bx	lr

080053f2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80053f2:	b480      	push	{r7}
 80053f4:	b085      	sub	sp, #20
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b03      	cmp	r3, #3
 800540a:	d811      	bhi.n	8005430 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6839      	ldr	r1, [r7, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	440a      	add	r2, r1
 8005416:	7812      	ldrb	r2, [r2, #0]
 8005418:	4611      	mov	r1, r2
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	00d2      	lsls	r2, r2, #3
 800541e:	fa01 f202 	lsl.w	r2, r1, r2
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3301      	adds	r3, #1
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	e7ea      	b.n	8005406 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8005430:	bf00      	nop
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	bc80      	pop	{r7}
 8005438:	4770      	bx	lr
	...

0800543c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	4a04      	ldr	r2, [pc, #16]	; (8005458 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	bc80      	pop	{r7}
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	0800be90 	.word	0x0800be90

0800545c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff ffe8 	bl	800543c <_ZN3ros15NodeHandleBase_C1Ev>
 800546c:	4a3a      	ldr	r2, [pc, #232]	; (8005558 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3304      	adds	r3, #4
 8005476:	4618      	mov	r0, r3
 8005478:	f7fc ffb2 	bl	80023e0 <_ZN13STM32HardwareC1Ev>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800548a:	4618      	mov	r0, r3
 800548c:	f7fc fca2 	bl	8001dd4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	2b18      	cmp	r3, #24
 8005498:	d80b      	bhi.n	80054b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	2200      	movs	r2, #0
 80054a8:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	3301      	adds	r3, #1
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	e7f0      	b.n	8005494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80054b2:	2300      	movs	r3, #0
 80054b4:	613b      	str	r3, [r7, #16]
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2b18      	cmp	r3, #24
 80054ba:	d80a      	bhi.n	80054d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80054c4:	2100      	movs	r1, #0
 80054c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	3301      	adds	r3, #1
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	e7f1      	b.n	80054b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054dc:	d20a      	bcs.n	80054f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80054e8:	2200      	movs	r2, #0
 80054ea:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3301      	adds	r3, #1
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	e7f0      	b.n	80054d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80054f4:	2300      	movs	r3, #0
 80054f6:	60bb      	str	r3, [r7, #8]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054fe:	d20a      	bcs.n	8005516 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4413      	add	r3, r2
 8005506:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800550a:	2200      	movs	r2, #0
 800550c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	3301      	adds	r3, #1
 8005512:	60bb      	str	r3, [r7, #8]
 8005514:	e7f0      	b.n	80054f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	0800bdec 	.word	0x0800bdec

0800555c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	4a04      	ldr	r2, [pc, #16]	; (8005578 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	0800be78 	.word	0x0800be78

0800557c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff ffe5 	bl	800555c <_ZN3ros11Subscriber_C1Ev>
 8005592:	4a0b      	ldr	r2, [pc, #44]	; (80055c0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	3310      	adds	r3, #16
 800559c:	4618      	mov	r0, r3
 800559e:	f7fd fcc7 	bl	8002f30 <_ZN13geometry_msgs5TwistC1Ev>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	659a      	str	r2, [r3, #88]	; 0x58
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	609a      	str	r2, [r3, #8]
  };
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	0800bdd4 	.word	0x0800bdd4

080055c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3304      	adds	r3, #4
  }
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr

080055da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80055da:	b580      	push	{r7, lr}
 80055dc:	b082      	sub	sp, #8
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3304      	adds	r3, #4
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fc ff16 	bl	8002418 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 800560c:	bf00      	nop
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
    return SPIN_OK;
  }


  /* Are we connected to the PC? */
  virtual bool connected()
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  {
    return configured_;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8005622:	4618      	mov	r0, r3
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	bc80      	pop	{r7}
 800562a:	4770      	bx	lr

0800562c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3304      	adds	r3, #4
 8005638:	4618      	mov	r0, r3
 800563a:	f7fc ffdd 	bl	80025f8 <_ZN13STM32Hardware4timeEv>
 800563e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800564e:	4293      	cmp	r3, r2
 8005650:	d903      	bls.n	800565a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005660:	2b00      	cmp	r3, #0
 8005662:	d009      	beq.n	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	429a      	cmp	r2, r3
 800566e:	d903      	bls.n	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800567e:	2b00      	cmp	r3, #0
 8005680:	d014      	beq.n	80056ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3304      	adds	r3, #4
 8005686:	4618      	mov	r0, r3
 8005688:	f7fc ffb6 	bl	80025f8 <_ZN13STM32Hardware4timeEv>
 800568c:	4602      	mov	r2, r0
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	1ad2      	subs	r2, r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005698:	429a      	cmp	r2, r3
 800569a:	bf8c      	ite	hi
 800569c:	2301      	movhi	r3, #1
 800569e:	2300      	movls	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80056a6:	f06f 0301 	mvn.w	r3, #1
 80056aa:	e194      	b.n	80059d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3304      	adds	r3, #4
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fc fecf 	bl	8002454 <_ZN13STM32Hardware4readEv>
 80056b6:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f2c0 8174 	blt.w	80059a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	441a      	add	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80056d6:	2b07      	cmp	r3, #7
 80056d8:	d11e      	bne.n	8005718 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80056e0:	1c59      	adds	r1, r3, #1
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	b2d1      	uxtb	r1, r2
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	4413      	add	r3, r2
 80056f0:	460a      	mov	r2, r1
 80056f2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80056fc:	1e5a      	subs	r2, r3, #1
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1b4      	bne.n	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2208      	movs	r2, #8
 8005712:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005716:	e7af      	b.n	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800571e:	2b00      	cmp	r3, #0
 8005720:	d128      	bne.n	8005774 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2bff      	cmp	r3, #255	; 0xff
 8005726:	d10d      	bne.n	8005744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f103 0214 	add.w	r2, r3, #20
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8005742:	e799      	b.n	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3304      	adds	r3, #4
 8005748:	4618      	mov	r0, r3
 800574a:	f7fc ff55 	bl	80025f8 <_ZN13STM32Hardware4timeEv>
 800574e:	4602      	mov	r2, r0
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	f241 3288 	movw	r2, #5000	; 0x1388
 8005758:	4293      	cmp	r3, r2
 800575a:	bf8c      	ite	hi
 800575c:	2301      	movhi	r3, #1
 800575e:	2300      	movls	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d088      	beq.n	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800576e:	f06f 0301 	mvn.w	r3, #1
 8005772:	e130      	b.n	80059d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800577a:	2b01      	cmp	r3, #1
 800577c:	d118      	bne.n	80057b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2bfe      	cmp	r3, #254	; 0xfe
 8005782:	d107      	bne.n	8005794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005792:	e771      	b.n	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f47f af68 	bne.w	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fae1 	bl	8005d70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80057ae:	e763      	b.n	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d113      	bne.n	80057e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80057e0:	e74a      	b.n	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d110      	bne.n	800580e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	021b      	lsls	r3, r3, #8
 80057f6:	441a      	add	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800580c:	e734      	b.n	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005814:	2b04      	cmp	r3, #4
 8005816:	d116      	bne.n	8005846 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800581e:	425a      	negs	r2, r3
 8005820:	b2db      	uxtb	r3, r3
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	bf58      	it	pl
 8005826:	4253      	negpl	r3, r2
 8005828:	2bff      	cmp	r3, #255	; 0xff
 800582a:	d107      	bne.n	800583c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800583a:	e71d      	b.n	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005844:	e718      	b.n	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800584c:	2b05      	cmp	r3, #5
 800584e:	d10f      	bne.n	8005870 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800586e:	e703      	b.n	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005876:	2b06      	cmp	r3, #6
 8005878:	d117      	bne.n	80058aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	021b      	lsls	r3, r3, #8
 8005884:	441a      	add	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2207      	movs	r2, #7
 8005890:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800589a:	2b00      	cmp	r3, #0
 800589c:	f47f aeec 	bne.w	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2208      	movs	r2, #8
 80058a4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80058a8:	e6e6      	b.n	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	f47f aee1 	bne.w	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80058c4:	425a      	negs	r2, r3
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	bf58      	it	pl
 80058cc:	4253      	negpl	r3, r2
 80058ce:	2bff      	cmp	r3, #255	; 0xff
 80058d0:	f47f aed2 	bne.w	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d110      	bne.n	8005900 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fa46 	bl	8005d70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f8e1 	bl	8005aac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80058fa:	f04f 33ff 	mov.w	r3, #4294967295
 80058fe:	e06a      	b.n	80059d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005906:	2b0a      	cmp	r3, #10
 8005908:	d107      	bne.n	800591a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005910:	4619      	mov	r1, r3
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fa4a 	bl	8005dac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8005918:	e6ae      	b.n	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005920:	2b06      	cmp	r3, #6
 8005922:	d10e      	bne.n	8005942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005930:	4619      	mov	r1, r3
 8005932:	4610      	mov	r0, r2
 8005934:	f7fc fb83 	bl	800203e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8005940:	e69a      	b.n	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005948:	2b0b      	cmp	r3, #11
 800594a:	d104      	bne.n	8005956 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8005954:	e690      	b.n	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800595c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800596a:	2b00      	cmp	r3, #0
 800596c:	f43f ae84 	beq.w	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005976:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005980:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800598a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80059a2:	4611      	mov	r1, r2
 80059a4:	4798      	blx	r3
    while (true)
 80059a6:	e667      	b.n	8005678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80059a8:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00f      	beq.n	80059d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d906      	bls.n	80059d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f9d2 	bl	8005d70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80059d4:	2300      	movs	r3, #0
  }
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>:
public:
  void logdebug(const char* msg)
  {
    log(rosserial_msgs::Log::ROSDEBUG, msg);
  }
  void loginfo(const char * msg)
 80059de:	b580      	push	{r7, lr}
 80059e0:	b082      	sub	sp, #8
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::INFO, msg);
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	2101      	movs	r1, #1
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fa29 	bl	8005e44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80059fa:	b480      	push	{r7}
 80059fc:	b085      	sub	sp, #20
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b18      	cmp	r3, #24
 8005a0c:	dc1e      	bgt.n	8005a4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d111      	bne.n	8005a44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	60da      	str	r2, [r3, #12]
        return true;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e004      	b.n	8005a4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3301      	adds	r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	e7dd      	b.n	8005a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8005a4c:	2300      	movs	r3, #0
  }
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bc80      	pop	{r7}
 8005a56:	4770      	bx	lr

08005a58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005a62:	2300      	movs	r3, #0
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b18      	cmp	r3, #24
 8005a6a:	dc19      	bgt.n	8005aa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10d      	bne.n	8005a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	605a      	str	r2, [r3, #4]
        return true;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e004      	b.n	8005aa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	e7e2      	b.n	8005a66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
    return false;
 8005aa0:	2300      	movs	r3, #0
  }
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr

08005aac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 8005aac:	b590      	push	{r4, r7, lr}
 8005aae:	b08b      	sub	sp, #44	; 0x2c
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 8005ab4:	f107 030c 	add.w	r3, r7, #12
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fb fe87 	bl	80017cc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005abe:	2300      	movs	r3, #0
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	2b18      	cmp	r3, #24
 8005ac6:	dc63      	bgt.n	8005b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
      if (publishers[i] != 0) // non-empty slot
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d056      	beq.n	8005b88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
        ti.topic_id = publishers[i]->id_;
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	6859      	ldr	r1, [r3, #4]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3308      	adds	r3, #8
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4608      	mov	r0, r1
 8005b28:	4798      	blx	r3
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	6859      	ldr	r1, [r3, #4]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	330c      	adds	r3, #12
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4608      	mov	r0, r1
 8005b56:	4798      	blx	r3
 8005b58:	4603      	mov	r3, r0
 8005b5a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8005b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b60:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681c      	ldr	r4, [r3, #0]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fc fc14 	bl	80023a4 <_ZN3ros9Publisher15getEndpointTypeEv>
 8005b7c:	4601      	mov	r1, r0
 8005b7e:	f107 030c 	add.w	r3, r7, #12
 8005b82:	461a      	mov	r2, r3
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b8e:	e798      	b.n	8005ac2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005b90:	2300      	movs	r3, #0
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	2b18      	cmp	r3, #24
 8005b98:	dc5f      	bgt.n	8005c5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
      if (subscribers[i] != 0) // non-empty slot
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b9e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d053      	beq.n	8005c52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
        ti.topic_id = subscribers[i]->id_;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bae:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005bd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bdc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3308      	adds	r3, #8
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4608      	mov	r0, r1
 8005bec:	4798      	blx	r3
 8005bee:	4603      	mov	r3, r0
 8005bf0:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005bfa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c02:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	330c      	adds	r3, #12
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4608      	mov	r0, r1
 8005c12:	4798      	blx	r3
 8005c14:	4603      	mov	r3, r0
 8005c16:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8005c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c1c:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681c      	ldr	r4, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c28:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005c2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c34:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4608      	mov	r0, r1
 8005c44:	4798      	blx	r3
 8005c46:	4601      	mov	r1, r0
 8005c48:	f107 030c 	add.w	r3, r7, #12
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	3301      	adds	r3, #1
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
 8005c58:	e79c      	b.n	8005b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
    configured_ = true;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8005c62:	bf00      	nop
 8005c64:	372c      	adds	r7, #44	; 0x2c
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd90      	pop	{r4, r7, pc}
	...

08005c6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii>:
        logwarn("Failed to get param: length mismatch");
      }
    }
    return false;
  }
  bool getParam(const char* name, float* param, int length = 1, int timeout = 1000)
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	603b      	str	r3, [r7, #0]
  {
    if (requestParam(name, timeout))
 8005c7a:	6a3a      	ldr	r2, [r7, #32]
 8005c7c:	68b9      	ldr	r1, [r7, #8]
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f98e 	bl	8005fa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d021      	beq.n	8005cce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii+0x62>
    {
      if (length == req_param_resp.floats_length)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8d3 2924 	ldr.w	r2, [r3, #2340]	; 0x924
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d117      	bne.n	8005cc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii+0x5a>
      {
        //copy it over
        for (int i = 0; i < length; i++)
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	da0f      	bge.n	8005cc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii+0x56>
          param[i] = req_param_resp.floats[i];
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f8d3 292c 	ldr.w	r2, [r3, #2348]	; 0x92c
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	441a      	add	r2, r3
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	6879      	ldr	r1, [r7, #4]
 8005cb4:	440b      	add	r3, r1
 8005cb6:	6812      	ldr	r2, [r2, #0]
 8005cb8:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < length; i++)
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	e7eb      	b.n	8005c9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii+0x2e>
        return true;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e004      	b.n	8005cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii+0x64>
      }
      else
      {
        logwarn("Failed to get param: length mismatch");
 8005cc6:	4904      	ldr	r1, [pc, #16]	; (8005cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8getParamEPKcPfii+0x6c>)
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 f843 	bl	8005d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7logwarnEPKc>
      }
    }
    return false;
 8005cce:	2300      	movs	r3, #0
  }
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	0800bad0 	.word	0x0800bad0

08005cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>:
  Time now()
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fc fc84 	bl	80025f8 <_ZN13STM32Hardware4timeEv>
 8005cf0:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fb fc5f 	bl	80015b6 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4a14      	ldr	r2, [pc, #80]	; (8005d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 8005cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005d00:	099a      	lsrs	r2, r3, #6
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8005d08:	441a      	add	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4b0e      	ldr	r3, [pc, #56]	; (8005d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 8005d12:	fba3 1302 	umull	r1, r3, r3, r2
 8005d16:	099b      	lsrs	r3, r3, #6
 8005d18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005d1c:	fb01 f303 	mul.w	r3, r1, r3
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	4a0b      	ldr	r2, [pc, #44]	; (8005d50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x74>)
 8005d24:	fb02 f203 	mul.w	r2, r2, r3
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8005d2e:	441a      	add	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3304      	adds	r3, #4
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fdd0 	bl	80068e0 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8005d40:	bf00      	nop
  }
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	10624dd3 	.word	0x10624dd3
 8005d50:	000f4240 	.word	0x000f4240

08005d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7logwarnEPKc>:
  void logwarn(const char *msg)
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
    log(rosserial_msgs::Log::WARN, msg);
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	2102      	movs	r1, #2
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f86e 	bl	8005e44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8005d68:	bf00      	nop
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8005d78:	f107 030c 	add.w	r3, r7, #12
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fb fc3b 	bl	80015f8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f107 020c 	add.w	r2, r7, #12
 8005d8c:	210a      	movs	r1, #10
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	4798      	blx	r3
    rt_time = hardware_.time();
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3304      	adds	r3, #4
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fc fc2e 	bl	80025f8 <_ZN13STM32Hardware4timeEv>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8005da4:	bf00      	nop
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8005db6:	f107 0308 	add.w	r3, r7, #8
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fb fc1c 	bl	80015f8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fc fc17 	bl	80025f8 <_ZN13STM32Hardware4timeEv>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8005dd6:	f107 0308 	add.w	r3, r7, #8
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fb fc7a 	bl	80016d6 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	4915      	ldr	r1, [pc, #84]	; (8005e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8005de8:	fba1 1303 	umull	r1, r3, r1, r3
 8005dec:	099b      	lsrs	r3, r3, #6
 8005dee:	4413      	add	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8005df2:	6939      	ldr	r1, [r7, #16]
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	4b11      	ldr	r3, [pc, #68]	; (8005e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8005df8:	fba3 0302 	umull	r0, r3, r3, r2
 8005dfc:	099b      	lsrs	r3, r3, #6
 8005dfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e02:	fb00 f303 	mul.w	r3, r0, r3
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	4a0d      	ldr	r2, [pc, #52]	; (8005e40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8005e0a:	fb02 f303 	mul.w	r3, r2, r3
 8005e0e:	440b      	add	r3, r1
 8005e10:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8005e12:	f107 0308 	add.w	r3, r7, #8
 8005e16:	3304      	adds	r3, #4
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f908 	bl	8006030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3304      	adds	r3, #4
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7fc fbe7 	bl	80025f8 <_ZN13STM32Hardware4timeEv>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8005e32:	bf00      	nop
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	10624dd3 	.word	0x10624dd3
 8005e40:	000f4240 	.word	0x000f4240

08005e44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b088      	sub	sp, #32
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8005e52:	f107 0314 	add.w	r3, r7, #20
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fb fe78 	bl	8001b4c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8005e5c:	7afb      	ldrb	r3, [r7, #11]
 8005e5e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f107 0214 	add.w	r2, r7, #20
 8005e6e:	2107      	movs	r1, #7
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	4798      	blx	r3
  }
 8005e74:	bf00      	nop
 8005e76:	3720      	adds	r7, #32
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg)
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b63      	cmp	r3, #99	; 0x63
 8005e8c:	dd09      	ble.n	8005ea2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8005e94:	f083 0301 	eor.w	r3, r3, #1
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e077      	b.n	8005f92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    int l = msg->serialize(message_out + 7);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8005eae:	3207      	adds	r2, #7
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	4798      	blx	r3
 8005eb6:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	22ff      	movs	r2, #255	; 0xff
 8005ebc:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	22fe      	movs	r2, #254	; 0xfe
 8005ec4:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	121b      	asrs	r3, r3, #8
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8005eec:	4413      	add	r3, r2
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	b21b      	sxth	r3, r3
 8005f08:	121b      	asrs	r3, r3, #8
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
    int chk = 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005f16:	2305      	movs	r3, #5
 8005f18:	61bb      	str	r3, [r7, #24]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	3306      	adds	r3, #6
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	dc0d      	bgt.n	8005f40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	461a      	mov	r2, r3
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	4413      	add	r3, r2
 8005f36:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	61bb      	str	r3, [r7, #24]
 8005f3e:	e7ec      	b.n	8005f1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	3307      	adds	r3, #7
 8005f44:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	425a      	negs	r2, r3
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	bf58      	it	pl
 8005f50:	4253      	negpl	r3, r2
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	1c59      	adds	r1, r3, #1
 8005f58:	6179      	str	r1, [r7, #20]
 8005f5a:	43d2      	mvns	r2, r2
 8005f5c:	b2d1      	uxtb	r1, r2
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4413      	add	r3, r2
 8005f62:	460a      	mov	r2, r1
 8005f64:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    if (l <= OUTPUT_SIZE)
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f6e:	dc0a      	bgt.n	8005f86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
      hardware_.write(message_out, l);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	1d18      	adds	r0, r3, #4
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	f7fc faf5 	bl	800256c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	e005      	b.n	8005f92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
      logerror("Message from device dropped: message larger than buffer.");
 8005f86:	4905      	ldr	r1, [pc, #20]	; (8005f9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f891 	bl	80060b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8005f92:	4618      	mov	r0, r3
 8005f94:	3720      	adds	r7, #32
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	0800baf8 	.word	0x0800baf8

08005fa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci>:
  bool requestParam(const char * name, int time_out =  1000)
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
    param_recieved = false;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
    rosserial_msgs::RequestParamRequest req;
 8005fb4:	f107 0314 	add.w	r3, r7, #20
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fb fe73 	bl	8001ca4 <_ZN14rosserial_msgs19RequestParamRequestC1Ev>
    req.name  = (char*)name;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	61bb      	str	r3, [r7, #24]
    publish(TopicInfo::ID_PARAMETER_REQUEST, &req);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f107 0214 	add.w	r2, r7, #20
 8005fcc:	2106      	movs	r1, #6
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	4798      	blx	r3
    uint32_t end_time = hardware_.time() + time_out;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fc fb0e 	bl	80025f8 <_ZN13STM32Hardware4timeEv>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	61fb      	str	r3, [r7, #28]
    while (!param_recieved)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d119      	bne.n	8006022 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci+0x82>
      spinOnce();
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	4798      	blx	r3
      if (hardware_.time() > end_time)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fc fafa 	bl	80025f8 <_ZN13STM32Hardware4timeEv>
 8006004:	4602      	mov	r2, r0
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	4293      	cmp	r3, r2
 800600a:	bf34      	ite	cc
 800600c:	2301      	movcc	r3, #1
 800600e:	2300      	movcs	r3, #0
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0e6      	beq.n	8005fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci+0x44>
        logwarn("Failed to get param: timeout expired");
 8006016:	4905      	ldr	r1, [pc, #20]	; (800602c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci+0x8c>)
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f7ff fe9b 	bl	8005d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7logwarnEPKc>
        return false;
 800601e:	2300      	movs	r3, #0
 8006020:	e000      	b.n	8006024 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE12requestParamEPKci+0x84>
    return true;
 8006022:	2301      	movs	r3, #1
  }
 8006024:	4618      	mov	r0, r3
 8006026:	3720      	adds	r7, #32
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	0800bb34 	.word	0x0800bb34

08006030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3304      	adds	r3, #4
 800603e:	4618      	mov	r0, r3
 8006040:	f7fc fada 	bl	80025f8 <_ZN13STM32Hardware4timeEv>
 8006044:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4915      	ldr	r1, [pc, #84]	; (80060a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800604e:	fba1 1303 	umull	r1, r3, r1, r3
 8006052:	099b      	lsrs	r3, r3, #6
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	1e5a      	subs	r2, r3, #1
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	6859      	ldr	r1, [r3, #4]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4b0f      	ldr	r3, [pc, #60]	; (80060a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8006066:	fba3 0302 	umull	r0, r3, r3, r2
 800606a:	099b      	lsrs	r3, r3, #6
 800606c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006070:	fb00 f303 	mul.w	r3, r0, r3
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	4a0c      	ldr	r2, [pc, #48]	; (80060a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8006078:	fb02 f303 	mul.w	r3, r2, r3
 800607c:	1aca      	subs	r2, r1, r3
 800607e:	4b0b      	ldr	r3, [pc, #44]	; (80060ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8006080:	4413      	add	r3, r2
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006094:	4619      	mov	r1, r3
 8006096:	4610      	mov	r0, r2
 8006098:	f000 fc22 	bl	80068e0 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800609c:	bf00      	nop
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	10624dd3 	.word	0x10624dd3
 80060a8:	000f4240 	.word	0x000f4240
 80060ac:	3b9aca00 	.word	0x3b9aca00

080060b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  void logerror(const char*msg)
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
    log(rosserial_msgs::Log::ERROR, msg);
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	2103      	movs	r1, #3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff fec0 	bl	8005e44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80060c4:	bf00      	nop
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <_Z41__static_initialization_and_destruction_0ii>:
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d125      	bne.n	8006128 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d120      	bne.n	8006128 <_Z41__static_initialization_and_destruction_0ii+0x5c>
ros::NodeHandle nh;
 80060e6:	4812      	ldr	r0, [pc, #72]	; (8006130 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80060e8:	f7ff f9b8 	bl	800545c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist wheelFeedback_msgs;
 80060ec:	4811      	ldr	r0, [pc, #68]	; (8006134 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80060ee:	f7fc ff1f 	bl	8002f30 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher wheelFeedback_pub("wheelFeedback", &wheelFeedback_msgs);
 80060f2:	2300      	movs	r3, #0
 80060f4:	4a0f      	ldr	r2, [pc, #60]	; (8006134 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80060f6:	4910      	ldr	r1, [pc, #64]	; (8006138 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80060f8:	4810      	ldr	r0, [pc, #64]	; (800613c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80060fa:	f7fc f929 	bl	8002350 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
sensor_msgs::Imu imu_msg;
 80060fe:	4810      	ldr	r0, [pc, #64]	; (8006140 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8006100:	f7fd ff32 	bl	8003f68 <_ZN11sensor_msgs3ImuC1Ev>
ros::Publisher imu("imu", &imu_msg);
 8006104:	2300      	movs	r3, #0
 8006106:	4a0e      	ldr	r2, [pc, #56]	; (8006140 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8006108:	490e      	ldr	r1, [pc, #56]	; (8006144 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800610a:	480f      	ldr	r0, [pc, #60]	; (8006148 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800610c:	f7fc f920 	bl	8002350 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> _sub("/cmd_vel", &cmd_velCallBack);
 8006110:	2301      	movs	r3, #1
 8006112:	4a0e      	ldr	r2, [pc, #56]	; (800614c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006114:	490e      	ldr	r1, [pc, #56]	; (8006150 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006116:	480f      	ldr	r0, [pc, #60]	; (8006154 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006118:	f7ff fa30 	bl	800557c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Time current_time;
 800611c:	480e      	ldr	r0, [pc, #56]	; (8006158 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800611e:	f7fb fa4a 	bl	80015b6 <_ZN3ros4TimeC1Ev>
ros::Time last_time;
 8006122:	480e      	ldr	r0, [pc, #56]	; (800615c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006124:	f7fb fa47 	bl	80015b6 <_ZN3ros4TimeC1Ev>
}
 8006128:	bf00      	nop
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	2000017c 	.word	0x2000017c
 8006134:	20000ad8 	.word	0x20000ad8
 8006138:	0800bb5c 	.word	0x0800bb5c
 800613c:	20000b20 	.word	0x20000b20
 8006140:	20000b38 	.word	0x20000b38
 8006144:	0800bb6c 	.word	0x0800bb6c
 8006148:	20000c90 	.word	0x20000c90
 800614c:	08004d21 	.word	0x08004d21
 8006150:	0800bb70 	.word	0x0800bb70
 8006154:	20000ca8 	.word	0x20000ca8
 8006158:	20000d20 	.word	0x20000d20
 800615c:	20000d28 	.word	0x20000d28

08006160 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3310      	adds	r3, #16
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	4618      	mov	r0, r3
 8006172:	f7fc ff1f 	bl	8002fb4 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	3210      	adds	r2, #16
 800617e:	4610      	mov	r0, r2
 8006180:	4798      	blx	r3
  }
 8006182:	bf00      	nop
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8006196:	4618      	mov	r0, r3
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	bc80      	pop	{r7}
 800619e:	4770      	bx	lr

080061a0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3310      	adds	r3, #16
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fc ff27 	bl	8003000 <_ZN13geometry_msgs5Twist7getTypeEv>
 80061b2:	4603      	mov	r3, r0
  }
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3310      	adds	r3, #16
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fc ff25 	bl	8003018 <_ZN13geometry_msgs5Twist6getMD5Ev>
 80061ce:	4603      	mov	r3, r0
  }
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <_GLOBAL__sub_I__huart>:
 80061d8:	b580      	push	{r7, lr}
 80061da:	af00      	add	r7, sp, #0
 80061dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80061e0:	2001      	movs	r0, #1
 80061e2:	f7ff ff73 	bl	80060cc <_Z41__static_initialization_and_destruction_0ii>
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80061ee:	4b15      	ldr	r3, [pc, #84]	; (8006244 <HAL_MspInit+0x5c>)
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	4a14      	ldr	r2, [pc, #80]	; (8006244 <HAL_MspInit+0x5c>)
 80061f4:	f043 0301 	orr.w	r3, r3, #1
 80061f8:	6193      	str	r3, [r2, #24]
 80061fa:	4b12      	ldr	r3, [pc, #72]	; (8006244 <HAL_MspInit+0x5c>)
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	60bb      	str	r3, [r7, #8]
 8006204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006206:	4b0f      	ldr	r3, [pc, #60]	; (8006244 <HAL_MspInit+0x5c>)
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	4a0e      	ldr	r2, [pc, #56]	; (8006244 <HAL_MspInit+0x5c>)
 800620c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006210:	61d3      	str	r3, [r2, #28]
 8006212:	4b0c      	ldr	r3, [pc, #48]	; (8006244 <HAL_MspInit+0x5c>)
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621a:	607b      	str	r3, [r7, #4]
 800621c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800621e:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <HAL_MspInit+0x60>)
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	4a04      	ldr	r2, [pc, #16]	; (8006248 <HAL_MspInit+0x60>)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800623a:	bf00      	nop
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	bc80      	pop	{r7}
 8006242:	4770      	bx	lr
 8006244:	40021000 	.word	0x40021000
 8006248:	40010000 	.word	0x40010000

0800624c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006254:	f107 0310 	add.w	r3, r7, #16
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	605a      	str	r2, [r3, #4]
 800625e:	609a      	str	r2, [r3, #8]
 8006260:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a15      	ldr	r2, [pc, #84]	; (80062bc <HAL_I2C_MspInit+0x70>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d123      	bne.n	80062b4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800626c:	4b14      	ldr	r3, [pc, #80]	; (80062c0 <HAL_I2C_MspInit+0x74>)
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	4a13      	ldr	r2, [pc, #76]	; (80062c0 <HAL_I2C_MspInit+0x74>)
 8006272:	f043 0308 	orr.w	r3, r3, #8
 8006276:	6193      	str	r3, [r2, #24]
 8006278:	4b11      	ldr	r3, [pc, #68]	; (80062c0 <HAL_I2C_MspInit+0x74>)
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	f003 0308 	and.w	r3, r3, #8
 8006280:	60fb      	str	r3, [r7, #12]
 8006282:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006284:	23c0      	movs	r3, #192	; 0xc0
 8006286:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006288:	2312      	movs	r3, #18
 800628a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800628c:	2303      	movs	r3, #3
 800628e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006290:	f107 0310 	add.w	r3, r7, #16
 8006294:	4619      	mov	r1, r3
 8006296:	480b      	ldr	r0, [pc, #44]	; (80062c4 <HAL_I2C_MspInit+0x78>)
 8006298:	f001 fa1a 	bl	80076d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800629c:	4b08      	ldr	r3, [pc, #32]	; (80062c0 <HAL_I2C_MspInit+0x74>)
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	4a07      	ldr	r2, [pc, #28]	; (80062c0 <HAL_I2C_MspInit+0x74>)
 80062a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062a6:	61d3      	str	r3, [r2, #28]
 80062a8:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <HAL_I2C_MspInit+0x74>)
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062b0:	60bb      	str	r3, [r7, #8]
 80062b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80062b4:	bf00      	nop
 80062b6:	3720      	adds	r7, #32
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	40005400 	.word	0x40005400
 80062c0:	40021000 	.word	0x40021000
 80062c4:	40010c00 	.word	0x40010c00

080062c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	; 0x28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062d0:	f107 0318 	add.w	r3, r7, #24
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	605a      	str	r2, [r3, #4]
 80062da:	609a      	str	r2, [r3, #8]
 80062dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a88      	ldr	r2, [pc, #544]	; (8006504 <HAL_UART_MspInit+0x23c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	f040 8089 	bne.w	80063fc <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80062ea:	4b87      	ldr	r3, [pc, #540]	; (8006508 <HAL_UART_MspInit+0x240>)
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	4a86      	ldr	r2, [pc, #536]	; (8006508 <HAL_UART_MspInit+0x240>)
 80062f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062f4:	6193      	str	r3, [r2, #24]
 80062f6:	4b84      	ldr	r3, [pc, #528]	; (8006508 <HAL_UART_MspInit+0x240>)
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006302:	4b81      	ldr	r3, [pc, #516]	; (8006508 <HAL_UART_MspInit+0x240>)
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	4a80      	ldr	r2, [pc, #512]	; (8006508 <HAL_UART_MspInit+0x240>)
 8006308:	f043 0304 	orr.w	r3, r3, #4
 800630c:	6193      	str	r3, [r2, #24]
 800630e:	4b7e      	ldr	r3, [pc, #504]	; (8006508 <HAL_UART_MspInit+0x240>)
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	f003 0304 	and.w	r3, r3, #4
 8006316:	613b      	str	r3, [r7, #16]
 8006318:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800631a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800631e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006320:	2302      	movs	r3, #2
 8006322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006324:	2303      	movs	r3, #3
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006328:	f107 0318 	add.w	r3, r7, #24
 800632c:	4619      	mov	r1, r3
 800632e:	4877      	ldr	r0, [pc, #476]	; (800650c <HAL_UART_MspInit+0x244>)
 8006330:	f001 f9ce 	bl	80076d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800633a:	2300      	movs	r3, #0
 800633c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800633e:	2300      	movs	r3, #0
 8006340:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006342:	f107 0318 	add.w	r3, r7, #24
 8006346:	4619      	mov	r1, r3
 8006348:	4870      	ldr	r0, [pc, #448]	; (800650c <HAL_UART_MspInit+0x244>)
 800634a:	f001 f9c1 	bl	80076d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800634e:	4b70      	ldr	r3, [pc, #448]	; (8006510 <HAL_UART_MspInit+0x248>)
 8006350:	4a70      	ldr	r2, [pc, #448]	; (8006514 <HAL_UART_MspInit+0x24c>)
 8006352:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006354:	4b6e      	ldr	r3, [pc, #440]	; (8006510 <HAL_UART_MspInit+0x248>)
 8006356:	2200      	movs	r2, #0
 8006358:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800635a:	4b6d      	ldr	r3, [pc, #436]	; (8006510 <HAL_UART_MspInit+0x248>)
 800635c:	2200      	movs	r2, #0
 800635e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006360:	4b6b      	ldr	r3, [pc, #428]	; (8006510 <HAL_UART_MspInit+0x248>)
 8006362:	2280      	movs	r2, #128	; 0x80
 8006364:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006366:	4b6a      	ldr	r3, [pc, #424]	; (8006510 <HAL_UART_MspInit+0x248>)
 8006368:	2200      	movs	r2, #0
 800636a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800636c:	4b68      	ldr	r3, [pc, #416]	; (8006510 <HAL_UART_MspInit+0x248>)
 800636e:	2200      	movs	r2, #0
 8006370:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006372:	4b67      	ldr	r3, [pc, #412]	; (8006510 <HAL_UART_MspInit+0x248>)
 8006374:	2220      	movs	r2, #32
 8006376:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006378:	4b65      	ldr	r3, [pc, #404]	; (8006510 <HAL_UART_MspInit+0x248>)
 800637a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800637e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006380:	4863      	ldr	r0, [pc, #396]	; (8006510 <HAL_UART_MspInit+0x248>)
 8006382:	f000 ff07 	bl	8007194 <HAL_DMA_Init>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 800638c:	f7fb f90e 	bl	80015ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a5f      	ldr	r2, [pc, #380]	; (8006510 <HAL_UART_MspInit+0x248>)
 8006394:	635a      	str	r2, [r3, #52]	; 0x34
 8006396:	4a5e      	ldr	r2, [pc, #376]	; (8006510 <HAL_UART_MspInit+0x248>)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800639c:	4b5e      	ldr	r3, [pc, #376]	; (8006518 <HAL_UART_MspInit+0x250>)
 800639e:	4a5f      	ldr	r2, [pc, #380]	; (800651c <HAL_UART_MspInit+0x254>)
 80063a0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80063a2:	4b5d      	ldr	r3, [pc, #372]	; (8006518 <HAL_UART_MspInit+0x250>)
 80063a4:	2210      	movs	r2, #16
 80063a6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063a8:	4b5b      	ldr	r3, [pc, #364]	; (8006518 <HAL_UART_MspInit+0x250>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80063ae:	4b5a      	ldr	r3, [pc, #360]	; (8006518 <HAL_UART_MspInit+0x250>)
 80063b0:	2280      	movs	r2, #128	; 0x80
 80063b2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063b4:	4b58      	ldr	r3, [pc, #352]	; (8006518 <HAL_UART_MspInit+0x250>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063ba:	4b57      	ldr	r3, [pc, #348]	; (8006518 <HAL_UART_MspInit+0x250>)
 80063bc:	2200      	movs	r2, #0
 80063be:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80063c0:	4b55      	ldr	r3, [pc, #340]	; (8006518 <HAL_UART_MspInit+0x250>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80063c6:	4b54      	ldr	r3, [pc, #336]	; (8006518 <HAL_UART_MspInit+0x250>)
 80063c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80063cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80063ce:	4852      	ldr	r0, [pc, #328]	; (8006518 <HAL_UART_MspInit+0x250>)
 80063d0:	f000 fee0 	bl	8007194 <HAL_DMA_Init>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80063da:	f7fb f8e7 	bl	80015ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a4d      	ldr	r2, [pc, #308]	; (8006518 <HAL_UART_MspInit+0x250>)
 80063e2:	631a      	str	r2, [r3, #48]	; 0x30
 80063e4:	4a4c      	ldr	r2, [pc, #304]	; (8006518 <HAL_UART_MspInit+0x250>)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80063ea:	2200      	movs	r2, #0
 80063ec:	2100      	movs	r1, #0
 80063ee:	2025      	movs	r0, #37	; 0x25
 80063f0:	f000 fea5 	bl	800713e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80063f4:	2025      	movs	r0, #37	; 0x25
 80063f6:	f000 febe 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80063fa:	e07f      	b.n	80064fc <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART3)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a47      	ldr	r2, [pc, #284]	; (8006520 <HAL_UART_MspInit+0x258>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d17a      	bne.n	80064fc <HAL_UART_MspInit+0x234>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006406:	4b40      	ldr	r3, [pc, #256]	; (8006508 <HAL_UART_MspInit+0x240>)
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	4a3f      	ldr	r2, [pc, #252]	; (8006508 <HAL_UART_MspInit+0x240>)
 800640c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006410:	61d3      	str	r3, [r2, #28]
 8006412:	4b3d      	ldr	r3, [pc, #244]	; (8006508 <HAL_UART_MspInit+0x240>)
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800641e:	4b3a      	ldr	r3, [pc, #232]	; (8006508 <HAL_UART_MspInit+0x240>)
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	4a39      	ldr	r2, [pc, #228]	; (8006508 <HAL_UART_MspInit+0x240>)
 8006424:	f043 0308 	orr.w	r3, r3, #8
 8006428:	6193      	str	r3, [r2, #24]
 800642a:	4b37      	ldr	r3, [pc, #220]	; (8006508 <HAL_UART_MspInit+0x240>)
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f003 0308 	and.w	r3, r3, #8
 8006432:	60bb      	str	r3, [r7, #8]
 8006434:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800643a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800643c:	2312      	movs	r3, #18
 800643e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006440:	2303      	movs	r3, #3
 8006442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006444:	f107 0318 	add.w	r3, r7, #24
 8006448:	4619      	mov	r1, r3
 800644a:	4836      	ldr	r0, [pc, #216]	; (8006524 <HAL_UART_MspInit+0x25c>)
 800644c:	f001 f940 	bl	80076d0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8006450:	4b35      	ldr	r3, [pc, #212]	; (8006528 <HAL_UART_MspInit+0x260>)
 8006452:	4a36      	ldr	r2, [pc, #216]	; (800652c <HAL_UART_MspInit+0x264>)
 8006454:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006456:	4b34      	ldr	r3, [pc, #208]	; (8006528 <HAL_UART_MspInit+0x260>)
 8006458:	2200      	movs	r2, #0
 800645a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800645c:	4b32      	ldr	r3, [pc, #200]	; (8006528 <HAL_UART_MspInit+0x260>)
 800645e:	2200      	movs	r2, #0
 8006460:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006462:	4b31      	ldr	r3, [pc, #196]	; (8006528 <HAL_UART_MspInit+0x260>)
 8006464:	2280      	movs	r2, #128	; 0x80
 8006466:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006468:	4b2f      	ldr	r3, [pc, #188]	; (8006528 <HAL_UART_MspInit+0x260>)
 800646a:	2200      	movs	r2, #0
 800646c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800646e:	4b2e      	ldr	r3, [pc, #184]	; (8006528 <HAL_UART_MspInit+0x260>)
 8006470:	2200      	movs	r2, #0
 8006472:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8006474:	4b2c      	ldr	r3, [pc, #176]	; (8006528 <HAL_UART_MspInit+0x260>)
 8006476:	2220      	movs	r2, #32
 8006478:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800647a:	4b2b      	ldr	r3, [pc, #172]	; (8006528 <HAL_UART_MspInit+0x260>)
 800647c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006480:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006482:	4829      	ldr	r0, [pc, #164]	; (8006528 <HAL_UART_MspInit+0x260>)
 8006484:	f000 fe86 	bl	8007194 <HAL_DMA_Init>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 800648e:	f7fb f88d 	bl	80015ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a24      	ldr	r2, [pc, #144]	; (8006528 <HAL_UART_MspInit+0x260>)
 8006496:	635a      	str	r2, [r3, #52]	; 0x34
 8006498:	4a23      	ldr	r2, [pc, #140]	; (8006528 <HAL_UART_MspInit+0x260>)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800649e:	4b24      	ldr	r3, [pc, #144]	; (8006530 <HAL_UART_MspInit+0x268>)
 80064a0:	4a24      	ldr	r2, [pc, #144]	; (8006534 <HAL_UART_MspInit+0x26c>)
 80064a2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064a4:	4b22      	ldr	r3, [pc, #136]	; (8006530 <HAL_UART_MspInit+0x268>)
 80064a6:	2210      	movs	r2, #16
 80064a8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064aa:	4b21      	ldr	r3, [pc, #132]	; (8006530 <HAL_UART_MspInit+0x268>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80064b0:	4b1f      	ldr	r3, [pc, #124]	; (8006530 <HAL_UART_MspInit+0x268>)
 80064b2:	2280      	movs	r2, #128	; 0x80
 80064b4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064b6:	4b1e      	ldr	r3, [pc, #120]	; (8006530 <HAL_UART_MspInit+0x268>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064bc:	4b1c      	ldr	r3, [pc, #112]	; (8006530 <HAL_UART_MspInit+0x268>)
 80064be:	2200      	movs	r2, #0
 80064c0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80064c2:	4b1b      	ldr	r3, [pc, #108]	; (8006530 <HAL_UART_MspInit+0x268>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80064c8:	4b19      	ldr	r3, [pc, #100]	; (8006530 <HAL_UART_MspInit+0x268>)
 80064ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80064d0:	4817      	ldr	r0, [pc, #92]	; (8006530 <HAL_UART_MspInit+0x268>)
 80064d2:	f000 fe5f 	bl	8007194 <HAL_DMA_Init>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <HAL_UART_MspInit+0x218>
      Error_Handler();
 80064dc:	f7fb f866 	bl	80015ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a13      	ldr	r2, [pc, #76]	; (8006530 <HAL_UART_MspInit+0x268>)
 80064e4:	631a      	str	r2, [r3, #48]	; 0x30
 80064e6:	4a12      	ldr	r2, [pc, #72]	; (8006530 <HAL_UART_MspInit+0x268>)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80064ec:	2200      	movs	r2, #0
 80064ee:	2100      	movs	r1, #0
 80064f0:	2027      	movs	r0, #39	; 0x27
 80064f2:	f000 fe24 	bl	800713e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80064f6:	2027      	movs	r0, #39	; 0x27
 80064f8:	f000 fe3d 	bl	8007176 <HAL_NVIC_EnableIRQ>
}
 80064fc:	bf00      	nop
 80064fe:	3728      	adds	r7, #40	; 0x28
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	40013800 	.word	0x40013800
 8006508:	40021000 	.word	0x40021000
 800650c:	40010800 	.word	0x40010800
 8006510:	20000ec4 	.word	0x20000ec4
 8006514:	40020058 	.word	0x40020058
 8006518:	20000e80 	.word	0x20000e80
 800651c:	40020044 	.word	0x40020044
 8006520:	40004800 	.word	0x40004800
 8006524:	40010c00 	.word	0x40010c00
 8006528:	20000d64 	.word	0x20000d64
 800652c:	40020030 	.word	0x40020030
 8006530:	20000e3c 	.word	0x20000e3c
 8006534:	4002001c 	.word	0x4002001c

08006538 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08c      	sub	sp, #48	; 0x30
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006540:	2300      	movs	r3, #0
 8006542:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006544:	2300      	movs	r3, #0
 8006546:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8006548:	2200      	movs	r2, #0
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	2019      	movs	r0, #25
 800654e:	f000 fdf6 	bl	800713e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8006552:	2019      	movs	r0, #25
 8006554:	f000 fe0f 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006558:	4b1e      	ldr	r3, [pc, #120]	; (80065d4 <HAL_InitTick+0x9c>)
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	4a1d      	ldr	r2, [pc, #116]	; (80065d4 <HAL_InitTick+0x9c>)
 800655e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006562:	6193      	str	r3, [r2, #24]
 8006564:	4b1b      	ldr	r3, [pc, #108]	; (80065d4 <HAL_InitTick+0x9c>)
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006570:	f107 0210 	add.w	r2, r7, #16
 8006574:	f107 0314 	add.w	r3, r7, #20
 8006578:	4611      	mov	r1, r2
 800657a:	4618      	mov	r0, r3
 800657c:	f002 fe40 	bl	8009200 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006580:	f002 fe2a 	bl	80091d8 <HAL_RCC_GetPCLK2Freq>
 8006584:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006588:	4a13      	ldr	r2, [pc, #76]	; (80065d8 <HAL_InitTick+0xa0>)
 800658a:	fba2 2303 	umull	r2, r3, r2, r3
 800658e:	0c9b      	lsrs	r3, r3, #18
 8006590:	3b01      	subs	r3, #1
 8006592:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006594:	4b11      	ldr	r3, [pc, #68]	; (80065dc <HAL_InitTick+0xa4>)
 8006596:	4a12      	ldr	r2, [pc, #72]	; (80065e0 <HAL_InitTick+0xa8>)
 8006598:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800659a:	4b10      	ldr	r3, [pc, #64]	; (80065dc <HAL_InitTick+0xa4>)
 800659c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80065a0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80065a2:	4a0e      	ldr	r2, [pc, #56]	; (80065dc <HAL_InitTick+0xa4>)
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80065a8:	4b0c      	ldr	r3, [pc, #48]	; (80065dc <HAL_InitTick+0xa4>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065ae:	4b0b      	ldr	r3, [pc, #44]	; (80065dc <HAL_InitTick+0xa4>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80065b4:	4809      	ldr	r0, [pc, #36]	; (80065dc <HAL_InitTick+0xa4>)
 80065b6:	f002 fe71 	bl	800929c <HAL_TIM_Base_Init>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d104      	bne.n	80065ca <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80065c0:	4806      	ldr	r0, [pc, #24]	; (80065dc <HAL_InitTick+0xa4>)
 80065c2:	f002 fec3 	bl	800934c <HAL_TIM_Base_Start_IT>
 80065c6:	4603      	mov	r3, r0
 80065c8:	e000      	b.n	80065cc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3730      	adds	r7, #48	; 0x30
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	40021000 	.word	0x40021000
 80065d8:	431bde83 	.word	0x431bde83
 80065dc:	20000f48 	.word	0x20000f48
 80065e0:	40012c00 	.word	0x40012c00

080065e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80065e8:	e7fe      	b.n	80065e8 <NMI_Handler+0x4>

080065ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065ea:	b480      	push	{r7}
 80065ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80065ee:	e7fe      	b.n	80065ee <HardFault_Handler+0x4>

080065f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80065f4:	e7fe      	b.n	80065f4 <MemManage_Handler+0x4>

080065f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065f6:	b480      	push	{r7}
 80065f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80065fa:	e7fe      	b.n	80065fa <BusFault_Handler+0x4>

080065fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006600:	e7fe      	b.n	8006600 <UsageFault_Handler+0x4>

08006602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006602:	b480      	push	{r7}
 8006604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006606:	bf00      	nop
 8006608:	46bd      	mov	sp, r7
 800660a:	bc80      	pop	{r7}
 800660c:	4770      	bx	lr

0800660e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800660e:	b480      	push	{r7}
 8006610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006612:	bf00      	nop
 8006614:	46bd      	mov	sp, r7
 8006616:	bc80      	pop	{r7}
 8006618:	4770      	bx	lr

0800661a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800661a:	b480      	push	{r7}
 800661c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800661e:	bf00      	nop
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	4770      	bx	lr

08006626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006626:	b480      	push	{r7}
 8006628:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800662a:	bf00      	nop
 800662c:	46bd      	mov	sp, r7
 800662e:	bc80      	pop	{r7}
 8006630:	4770      	bx	lr
	...

08006634 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006638:	4802      	ldr	r0, [pc, #8]	; (8006644 <DMA1_Channel2_IRQHandler+0x10>)
 800663a:	f000 ff15 	bl	8007468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800663e:	bf00      	nop
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	20000e3c 	.word	0x20000e3c

08006648 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */


  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800664c:	4802      	ldr	r0, [pc, #8]	; (8006658 <DMA1_Channel3_IRQHandler+0x10>)
 800664e:	f000 ff0b 	bl	8007468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8006652:	bf00      	nop
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20000d64 	.word	0x20000d64

0800665c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006660:	4802      	ldr	r0, [pc, #8]	; (800666c <DMA1_Channel4_IRQHandler+0x10>)
 8006662:	f000 ff01 	bl	8007468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006666:	bf00      	nop
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	20000e80 	.word	0x20000e80

08006670 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006674:	4802      	ldr	r0, [pc, #8]	; (8006680 <DMA1_Channel5_IRQHandler+0x10>)
 8006676:	f000 fef7 	bl	8007468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800667a:	bf00      	nop
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20000ec4 	.word	0x20000ec4

08006684 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006688:	4802      	ldr	r0, [pc, #8]	; (8006694 <TIM1_UP_IRQHandler+0x10>)
 800668a:	f002 feb1 	bl	80093f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800668e:	bf00      	nop
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	20000f48 	.word	0x20000f48

08006698 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800669c:	4802      	ldr	r0, [pc, #8]	; (80066a8 <USART1_IRQHandler+0x10>)
 800669e:	f003 fac3 	bl	8009c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80066a2:	bf00      	nop
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20000f08 	.word	0x20000f08

080066ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80066b2:	4821      	ldr	r0, [pc, #132]	; (8006738 <USART3_IRQHandler+0x8c>)
 80066b4:	f003 fab8 	bl	8009c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
	if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET) {
 80066b8:	4b1f      	ldr	r3, [pc, #124]	; (8006738 <USART3_IRQHandler+0x8c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d034      	beq.n	8006730 <USART3_IRQHandler+0x84>
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 80066c6:	2300      	movs	r3, #0
 80066c8:	607b      	str	r3, [r7, #4]
 80066ca:	4b1b      	ldr	r3, [pc, #108]	; (8006738 <USART3_IRQHandler+0x8c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	607b      	str	r3, [r7, #4]
 80066d2:	4b19      	ldr	r3, [pc, #100]	; (8006738 <USART3_IRQHandler+0x8c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	607b      	str	r3, [r7, #4]
 80066da:	687b      	ldr	r3, [r7, #4]
		count++;
 80066dc:	4b17      	ldr	r3, [pc, #92]	; (800673c <USART3_IRQHandler+0x90>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3301      	adds	r3, #1
 80066e2:	4a16      	ldr	r2, [pc, #88]	; (800673c <USART3_IRQHandler+0x90>)
 80066e4:	6013      	str	r3, [r2, #0]
		if(count == _expected_return_msgs)
 80066e6:	4b16      	ldr	r3, [pc, #88]	; (8006740 <USART3_IRQHandler+0x94>)
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	4b13      	ldr	r3, [pc, #76]	; (800673c <USART3_IRQHandler+0x90>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d11d      	bne.n	8006730 <USART3_IRQHandler+0x84>
		{
		HAL_UART_DMAStop(&huart3) ;
 80066f4:	4810      	ldr	r0, [pc, #64]	; (8006738 <USART3_IRQHandler+0x8c>)
 80066f6:	f003 fa3b 	bl	8009b70 <HAL_UART_DMAStop>

		_data.dataSize  = MAX_DATA_LENGTH - __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 80066fa:	4b12      	ldr	r3, [pc, #72]	; (8006744 <USART3_IRQHandler+0x98>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	b29b      	uxth	r3, r3
 8006702:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006706:	b29a      	uxth	r2, r3
 8006708:	4b0f      	ldr	r3, [pc, #60]	; (8006748 <USART3_IRQHandler+0x9c>)
 800670a:	801a      	strh	r2, [r3, #0]
		memcpy(_data.data,rx_buffer,_data.dataSize);
 800670c:	4b0e      	ldr	r3, [pc, #56]	; (8006748 <USART3_IRQHandler+0x9c>)
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	461a      	mov	r2, r3
 8006712:	490e      	ldr	r1, [pc, #56]	; (800674c <USART3_IRQHandler+0xa0>)
 8006714:	480e      	ldr	r0, [pc, #56]	; (8006750 <USART3_IRQHandler+0xa4>)
 8006716:	f003 ff17 	bl	800a548 <memcpy>
		xl430_setRxData(&_data);
 800671a:	480b      	ldr	r0, [pc, #44]	; (8006748 <USART3_IRQHandler+0x9c>)
 800671c:	f000 fbc2 	bl	8006ea4 <xl430_setRxData>
		HAL_UART_Receive_DMA(&huart3, rx_buffer, 64);
 8006720:	2240      	movs	r2, #64	; 0x40
 8006722:	490a      	ldr	r1, [pc, #40]	; (800674c <USART3_IRQHandler+0xa0>)
 8006724:	4804      	ldr	r0, [pc, #16]	; (8006738 <USART3_IRQHandler+0x8c>)
 8006726:	f003 f9a3 	bl	8009a70 <HAL_UART_Receive_DMA>
		count =0;
 800672a:	4b04      	ldr	r3, [pc, #16]	; (800673c <USART3_IRQHandler+0x90>)
 800672c:	2200      	movs	r2, #0
 800672e:	601a      	str	r2, [r3, #0]
		}
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8006730:	bf00      	nop
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	20000da8 	.word	0x20000da8
 800673c:	20000d54 	.word	0x20000d54
 8006740:	20000024 	.word	0x20000024
 8006744:	20000d64 	.word	0x20000d64
 8006748:	20000f90 	.word	0x20000f90
 800674c:	200000f4 	.word	0x200000f4
 8006750:	20000f92 	.word	0x20000f92

08006754 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006754:	b480      	push	{r7}
 8006756:	af00      	add	r7, sp, #0
	return 1;
 8006758:	2301      	movs	r3, #1
}
 800675a:	4618      	mov	r0, r3
 800675c:	46bd      	mov	sp, r7
 800675e:	bc80      	pop	{r7}
 8006760:	4770      	bx	lr

08006762 <_kill>:

int _kill(int pid, int sig)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800676c:	f003 fec2 	bl	800a4f4 <__errno>
 8006770:	4603      	mov	r3, r0
 8006772:	2216      	movs	r2, #22
 8006774:	601a      	str	r2, [r3, #0]
	return -1;
 8006776:	f04f 33ff 	mov.w	r3, #4294967295
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <_exit>:

void _exit (int status)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800678a:	f04f 31ff 	mov.w	r1, #4294967295
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff ffe7 	bl	8006762 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006794:	e7fe      	b.n	8006794 <_exit+0x12>

08006796 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b086      	sub	sp, #24
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067a2:	2300      	movs	r3, #0
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	e00a      	b.n	80067be <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80067a8:	f3af 8000 	nop.w
 80067ac:	4601      	mov	r1, r0
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	60ba      	str	r2, [r7, #8]
 80067b4:	b2ca      	uxtb	r2, r1
 80067b6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	3301      	adds	r3, #1
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	dbf0      	blt.n	80067a8 <_read+0x12>
	}

return len;
 80067c6:	687b      	ldr	r3, [r7, #4]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067dc:	2300      	movs	r3, #0
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	e009      	b.n	80067f6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	60ba      	str	r2, [r7, #8]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	3301      	adds	r3, #1
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	dbf1      	blt.n	80067e2 <_write+0x12>
	}
	return len;
 80067fe:	687b      	ldr	r3, [r7, #4]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <_close>:

int _close(int file)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
	return -1;
 8006810:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	bc80      	pop	{r7}
 800681c:	4770      	bx	lr

0800681e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800681e:	b480      	push	{r7}
 8006820:	b083      	sub	sp, #12
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800682e:	605a      	str	r2, [r3, #4]
	return 0;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	bc80      	pop	{r7}
 800683a:	4770      	bx	lr

0800683c <_isatty>:

int _isatty(int file)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
	return 1;
 8006844:	2301      	movs	r3, #1
}
 8006846:	4618      	mov	r0, r3
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	bc80      	pop	{r7}
 800684e:	4770      	bx	lr

08006850 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
	return 0;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	bc80      	pop	{r7}
 8006866:	4770      	bx	lr

08006868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006870:	4a14      	ldr	r2, [pc, #80]	; (80068c4 <_sbrk+0x5c>)
 8006872:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <_sbrk+0x60>)
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800687c:	4b13      	ldr	r3, [pc, #76]	; (80068cc <_sbrk+0x64>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d102      	bne.n	800688a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006884:	4b11      	ldr	r3, [pc, #68]	; (80068cc <_sbrk+0x64>)
 8006886:	4a12      	ldr	r2, [pc, #72]	; (80068d0 <_sbrk+0x68>)
 8006888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800688a:	4b10      	ldr	r3, [pc, #64]	; (80068cc <_sbrk+0x64>)
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4413      	add	r3, r2
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	429a      	cmp	r2, r3
 8006896:	d207      	bcs.n	80068a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006898:	f003 fe2c 	bl	800a4f4 <__errno>
 800689c:	4603      	mov	r3, r0
 800689e:	220c      	movs	r2, #12
 80068a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80068a2:	f04f 33ff 	mov.w	r3, #4294967295
 80068a6:	e009      	b.n	80068bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80068a8:	4b08      	ldr	r3, [pc, #32]	; (80068cc <_sbrk+0x64>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80068ae:	4b07      	ldr	r3, [pc, #28]	; (80068cc <_sbrk+0x64>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4413      	add	r3, r2
 80068b6:	4a05      	ldr	r2, [pc, #20]	; (80068cc <_sbrk+0x64>)
 80068b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80068ba:	68fb      	ldr	r3, [r7, #12]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	20005000 	.word	0x20005000
 80068c8:	00000400 	.word	0x00000400
 80068cc:	20000d58 	.word	0x20000d58
 80068d0:	20000fe8 	.word	0x20000fe8

080068d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80068d8:	bf00      	nop
 80068da:	46bd      	mov	sp, r7
 80068dc:	bc80      	pop	{r7}
 80068de:	4770      	bx	lr

080068e0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	0a5a      	lsrs	r2, r3, #9
 80068f0:	490f      	ldr	r1, [pc, #60]	; (8006930 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80068f2:	fba1 1202 	umull	r1, r2, r1, r2
 80068f6:	09d2      	lsrs	r2, r2, #7
 80068f8:	490e      	ldr	r1, [pc, #56]	; (8006934 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80068fa:	fb01 f202 	mul.w	r2, r1, r2
 80068fe:	1a9b      	subs	r3, r3, r2
 8006900:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	0a5b      	lsrs	r3, r3, #9
 8006908:	4a09      	ldr	r2, [pc, #36]	; (8006930 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800690a:	fba2 2303 	umull	r2, r3, r2, r3
 800690e:	09db      	lsrs	r3, r3, #7
 8006910:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	441a      	add	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	601a      	str	r2, [r3, #0]
}
 8006924:	bf00      	nop
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	bc80      	pop	{r7}
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	00044b83 	.word	0x00044b83
 8006934:	3b9aca00 	.word	0x3b9aca00

08006938 <xl430_int>:

extern uint8_t rx_buffer[64];
uint8_t _expected_return_msgs =1;

void xl430_int(UART_HandleTypeDef *huart)
{
 8006938:	b5b0      	push	{r4, r5, r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
	_huart = *huart;
 8006940:	4a0c      	ldr	r2, [pc, #48]	; (8006974 <xl430_int+0x3c>)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4614      	mov	r4, r2
 8006946:	461d      	mov	r5, r3
 8006948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800694a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800694c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800694e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006954:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006958:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Receive_DMA(&_huart, rx_buffer, 64);
 800695c:	2240      	movs	r2, #64	; 0x40
 800695e:	4906      	ldr	r1, [pc, #24]	; (8006978 <xl430_int+0x40>)
 8006960:	4804      	ldr	r0, [pc, #16]	; (8006974 <xl430_int+0x3c>)
 8006962:	f003 f885 	bl	8009a70 <HAL_UART_Receive_DMA>
	HAL_HalfDuplex_EnableReceiver(&_huart);
 8006966:	4803      	ldr	r0, [pc, #12]	; (8006974 <xl430_int+0x3c>)
 8006968:	f003 faac 	bl	8009ec4 <HAL_HalfDuplex_EnableReceiver>
}
 800696c:	bf00      	nop
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bdb0      	pop	{r4, r5, r7, pc}
 8006974:	200000b4 	.word	0x200000b4
 8006978:	200000f4 	.word	0x200000f4

0800697c <xl430_writebuffer>:

void xl430_writebuffer(uint8_t * dataBuf,uint16_t data_length)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	460b      	mov	r3, r1
 8006986:	807b      	strh	r3, [r7, #2]
	HAL_HalfDuplex_EnableTransmitter(&_huart);
 8006988:	4807      	ldr	r0, [pc, #28]	; (80069a8 <xl430_writebuffer+0x2c>)
 800698a:	f003 fa68 	bl	8009e5e <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&_huart, dataBuf, data_length, 100);
 800698e:	887a      	ldrh	r2, [r7, #2]
 8006990:	2364      	movs	r3, #100	; 0x64
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	4804      	ldr	r0, [pc, #16]	; (80069a8 <xl430_writebuffer+0x2c>)
 8006996:	f002 ff6d 	bl	8009874 <HAL_UART_Transmit>
	HAL_HalfDuplex_EnableReceiver(&_huart);
 800699a:	4803      	ldr	r0, [pc, #12]	; (80069a8 <xl430_writebuffer+0x2c>)
 800699c:	f003 fa92 	bl	8009ec4 <HAL_HalfDuplex_EnableReceiver>

}
 80069a0:	bf00      	nop
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	200000b4 	.word	0x200000b4

080069ac <xl430_readBroadcastBuffer>:
	return _retData;

}

void xl430_readBroadcastBuffer(uint8_t numOf_IDs, struct prsRxData *_rxDataArr)
{
 80069ac:	b590      	push	{r4, r7, lr}
 80069ae:	b099      	sub	sp, #100	; 0x64
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	4603      	mov	r3, r0
 80069b4:	6039      	str	r1, [r7, #0]
 80069b6:	71fb      	strb	r3, [r7, #7]
	struct prsRxData _retData;
	uint16_t partialDataLen = _rxData.dataSize/numOf_IDs;
 80069b8:	4b6f      	ldr	r3, [pc, #444]	; (8006b78 <xl430_readBroadcastBuffer+0x1cc>)
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	461a      	mov	r2, r3
 80069be:	79fb      	ldrb	r3, [r7, #7]
 80069c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80069c4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint8_t __dataBucket[64];

	 memcpy (__dataBucket,_rxData.data,_rxData.dataSize);
 80069c8:	4b6b      	ldr	r3, [pc, #428]	; (8006b78 <xl430_readBroadcastBuffer+0x1cc>)
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	f107 0308 	add.w	r3, r7, #8
 80069d2:	496a      	ldr	r1, [pc, #424]	; (8006b7c <xl430_readBroadcastBuffer+0x1d0>)
 80069d4:	4618      	mov	r0, r3
 80069d6:	f003 fdb7 	bl	800a548 <memcpy>

	for(uint8_t i =0; i <numOf_IDs;i++ )
 80069da:	2300      	movs	r3, #0
 80069dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80069e0:	e0be      	b.n	8006b60 <xl430_readBroadcastBuffer+0x1b4>
	{
	_retData.id 		= __dataBucket[4+(partialDataLen*i)];
 80069e2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80069e6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80069ea:	fb02 f303 	mul.w	r3, r2, r3
 80069ee:	3304      	adds	r3, #4
 80069f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80069f4:	4413      	add	r3, r2
 80069f6:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80069fa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	_retData.errorFlag 	= __dataBucket[8+(partialDataLen*i)];
 80069fe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006a02:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8006a06:	fb02 f303 	mul.w	r3, r2, r3
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006a10:	4413      	add	r3, r2
 8006a12:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8006a16:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	/* need to double check math and logic*/
	_retData.crc_rx 	= __dataBucket[partialDataLen-2+(partialDataLen*i)] | (__dataBucket[partialDataLen-1+(partialDataLen*i)] <<8);
 8006a1a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006a1e:	1e9a      	subs	r2, r3, #2
 8006a20:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006a24:	f897 105f 	ldrb.w	r1, [r7, #95]	; 0x5f
 8006a28:	fb01 f303 	mul.w	r3, r1, r3
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006a32:	4413      	add	r3, r2
 8006a34:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8006a38:	b21a      	sxth	r2, r3
 8006a3a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006a3e:	1e59      	subs	r1, r3, #1
 8006a40:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006a44:	f897 005f 	ldrb.w	r0, [r7, #95]	; 0x5f
 8006a48:	fb00 f303 	mul.w	r3, r0, r3
 8006a4c:	440b      	add	r3, r1
 8006a4e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006a52:	440b      	add	r3, r1
 8006a54:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8006a58:	021b      	lsls	r3, r3, #8
 8006a5a:	b21b      	sxth	r3, r3
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	b21b      	sxth	r3, r3
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	_retData.crc_cal 	= update_crc(0, __dataBucket+(partialDataLen*i), partialDataLen-2);
 8006a66:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006a6a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8006a6e:	fb02 f303 	mul.w	r3, r2, r3
 8006a72:	461a      	mov	r2, r3
 8006a74:	f107 0308 	add.w	r3, r7, #8
 8006a78:	1899      	adds	r1, r3, r2
 8006a7a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006a7e:	3b02      	subs	r3, #2
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	2000      	movs	r0, #0
 8006a86:	f000 f87b 	bl	8006b80 <update_crc>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	_retData.dat_len 	= __dataBucket[5+(partialDataLen*i)] | (__dataBucket[6+(partialDataLen*i)] <<8);
 8006a90:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006a94:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8006a98:	fb02 f303 	mul.w	r3, r2, r3
 8006a9c:	3305      	adds	r3, #5
 8006a9e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8006aa8:	b21a      	sxth	r2, r3
 8006aaa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006aae:	f897 105f 	ldrb.w	r1, [r7, #95]	; 0x5f
 8006ab2:	fb01 f303 	mul.w	r3, r1, r3
 8006ab6:	3306      	adds	r3, #6
 8006ab8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006abc:	440b      	add	r3, r1
 8006abe:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8006ac2:	021b      	lsls	r3, r3, #8
 8006ac4:	b21b      	sxth	r3, r3
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	b21b      	sxth	r3, r3
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	_retData.data = 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	653b      	str	r3, [r7, #80]	; 0x50
	/*-------------------------*/

	if(_retData.crc_cal == _retData.crc_rx)
 8006ad4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006ad8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d103      	bne.n	8006ae8 <xl430_readBroadcastBuffer+0x13c>
	{
		_retData.crc_check = true;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8006ae6:	e002      	b.n	8006aee <xl430_readBroadcastBuffer+0x142>
	}
	else
	{
		_retData.crc_check = false;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	}

	for(uint16_t n =0; n<_retData.dat_len-4;n++)
 8006aee:	2300      	movs	r3, #0
 8006af0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006af4:	e01d      	b.n	8006b32 <xl430_readBroadcastBuffer+0x186>
	{
		_retData.data = _retData.data | (__dataBucket[9+n+((partialDataLen*i))] <<8*n);
 8006af6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006af8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006afc:	f103 0109 	add.w	r1, r3, #9
 8006b00:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006b04:	f897 005f 	ldrb.w	r0, [r7, #95]	; 0x5f
 8006b08:	fb00 f303 	mul.w	r3, r0, r3
 8006b0c:	440b      	add	r3, r1
 8006b0e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006b12:	440b      	add	r3, r1
 8006b14:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	fa01 f303 	lsl.w	r3, r1, r3
 8006b24:	4313      	orrs	r3, r2
 8006b26:	653b      	str	r3, [r7, #80]	; 0x50
	for(uint16_t n =0; n<_retData.dat_len-4;n++)
 8006b28:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006b32:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8006b36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b3a:	3b04      	subs	r3, #4
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	dbda      	blt.n	8006af6 <xl430_readBroadcastBuffer+0x14a>
	}
	_rxDataArr[i] = _retData ;
 8006b40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b44:	011b      	lsls	r3, r3, #4
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	4413      	add	r3, r2
 8006b4a:	461c      	mov	r4, r3
 8006b4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006b50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(uint8_t i =0; i <numOf_IDs;i++ )
 8006b56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006b60:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8006b64:	79fb      	ldrb	r3, [r7, #7]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	f4ff af3b 	bcc.w	80069e2 <xl430_readBroadcastBuffer+0x36>
	}//end of for loop



}
 8006b6c:	bf00      	nop
 8006b6e:	bf00      	nop
 8006b70:	3764      	adds	r7, #100	; 0x64
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd90      	pop	{r4, r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20000134 	.word	0x20000134
 8006b7c:	20000136 	.word	0x20000136

08006b80 <update_crc>:

uint16_t update_crc(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	463b      	mov	r3, r7
 8006b8a:	6019      	str	r1, [r3, #0]
 8006b8c:	4611      	mov	r1, r2
 8006b8e:	1dbb      	adds	r3, r7, #6
 8006b90:	4602      	mov	r2, r0
 8006b92:	801a      	strh	r2, [r3, #0]
 8006b94:	1d3b      	adds	r3, r7, #4
 8006b96:	460a      	mov	r2, r1
 8006b98:	801a      	strh	r2, [r3, #0]
    uint16_t i, j;
    uint16_t crc_table[256] = {
 8006b9a:	f107 030c 	add.w	r3, r7, #12
 8006b9e:	4a1e      	ldr	r2, [pc, #120]	; (8006c18 <update_crc+0x98>)
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ba8:	461a      	mov	r2, r3
 8006baa:	f003 fccd 	bl	800a548 <memcpy>
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
    };

    for(j = 0; j < data_blk_size; j++)
 8006bae:	2300      	movs	r3, #0
 8006bb0:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8006bb4:	e023      	b.n	8006bfe <update_crc+0x7e>
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8006bb6:	1dbb      	adds	r3, r7, #6
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	0a1b      	lsrs	r3, r3, #8
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8006bc2:	4639      	mov	r1, r7
 8006bc4:	6809      	ldr	r1, [r1, #0]
 8006bc6:	440b      	add	r3, r1
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	4053      	eors	r3, r2
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
        crc_accum = (crc_accum << 8) ^ crc_table[i];
 8006bd6:	1dbb      	adds	r3, r7, #6
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	021b      	lsls	r3, r3, #8
 8006bdc:	b21a      	sxth	r2, r3
 8006bde:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8006be2:	f107 030c 	add.w	r3, r7, #12
 8006be6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006bea:	b21b      	sxth	r3, r3
 8006bec:	4053      	eors	r3, r2
 8006bee:	b21a      	sxth	r2, r3
 8006bf0:	1dbb      	adds	r3, r7, #6
 8006bf2:	801a      	strh	r2, [r3, #0]
    for(j = 0; j < data_blk_size; j++)
 8006bf4:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8006bfe:	1d3b      	adds	r3, r7, #4
 8006c00:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d3d5      	bcc.n	8006bb6 <update_crc+0x36>
    }

    return crc_accum;
 8006c0a:	1dbb      	adds	r3, r7, #6
 8006c0c:	881b      	ldrh	r3, [r3, #0]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	0800bb7c 	.word	0x0800bb7c

08006c1c <xl430_writeToAddress>:


}

void xl430_writeToAddress(uint8_t Id ,int tx_data,const uint16_t *address,const uint8_t *__inst)
{
 8006c1c:	b5b0      	push	{r4, r5, r7, lr}
 8006c1e:	b08a      	sub	sp, #40	; 0x28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	607a      	str	r2, [r7, #4]
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	4603      	mov	r3, r0
 8006c2a:	73fb      	strb	r3, [r7, #15]
 8006c2c:	466b      	mov	r3, sp
 8006c2e:	461d      	mov	r5, r3
	  uint16_t mem_size=12;
 8006c30:	230c      	movs	r3, #12
 8006c32:	84fb      	strh	r3, [r7, #38]	; 0x26
	  uint16_t crc;
	  char crc_[2];
	  uint8_t data_size =4;
 8006c34:	2304      	movs	r3, #4
 8006c36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	  uint8_t data_array[4];



	  data_array[0] = tx_data & 0x000000FF;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	753b      	strb	r3, [r7, #20]
	  data_array[1] = (tx_data>>8) & 0x000000FF;
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	121b      	asrs	r3, r3, #8
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	757b      	strb	r3, [r7, #21]
	  data_array[2] = (tx_data>>16) & 0x000000FF;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	141b      	asrs	r3, r3, #16
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	75bb      	strb	r3, [r7, #22]
	  data_array[3] = (tx_data>>24) & 0x000000FF;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	0e1b      	lsrs	r3, r3, #24
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	75fb      	strb	r3, [r7, #23]

	  mem_size += data_size;
 8006c58:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c60:	4413      	add	r3, r2
 8006c62:	84fb      	strh	r3, [r7, #38]	; 0x26
	  uint8_t m_tx_buffer [mem_size];
 8006c64:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8006c66:	4623      	mov	r3, r4
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	623b      	str	r3, [r7, #32]
 8006c6c:	b2a0      	uxth	r0, r4
 8006c6e:	f04f 0100 	mov.w	r1, #0
 8006c72:	f04f 0200 	mov.w	r2, #0
 8006c76:	f04f 0300 	mov.w	r3, #0
 8006c7a:	00cb      	lsls	r3, r1, #3
 8006c7c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006c80:	00c2      	lsls	r2, r0, #3
 8006c82:	b2a0      	uxth	r0, r4
 8006c84:	f04f 0100 	mov.w	r1, #0
 8006c88:	f04f 0200 	mov.w	r2, #0
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	00cb      	lsls	r3, r1, #3
 8006c92:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006c96:	00c2      	lsls	r2, r0, #3
 8006c98:	4623      	mov	r3, r4
 8006c9a:	3307      	adds	r3, #7
 8006c9c:	08db      	lsrs	r3, r3, #3
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	ebad 0d03 	sub.w	sp, sp, r3
 8006ca4:	466b      	mov	r3, sp
 8006ca6:	3300      	adds	r3, #0
 8006ca8:	61fb      	str	r3, [r7, #28]
	  uint16_t m_len =data_size+5;
 8006caa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	3305      	adds	r3, #5
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	827b      	strh	r3, [r7, #18]


	  memcpy (m_tx_buffer,header,6);
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	2206      	movs	r2, #6
 8006cba:	4926      	ldr	r1, [pc, #152]	; (8006d54 <xl430_writeToAddress+0x138>)
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f003 fc43 	bl	800a548 <memcpy>
	  memcpy (m_tx_buffer+sizeof(header),&Id,1);
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	7bfa      	ldrb	r2, [r7, #15]
 8006cc8:	701a      	strb	r2, [r3, #0]
	  memcpy (m_tx_buffer+sizeof(header)+1,&m_len,2);
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	3305      	adds	r3, #5
 8006cce:	8a7a      	ldrh	r2, [r7, #18]
 8006cd0:	801a      	strh	r2, [r3, #0]
	  memcpy (m_tx_buffer+sizeof(header)+3,__inst,1);
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	3307      	adds	r3, #7
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	7812      	ldrb	r2, [r2, #0]
 8006cda:	701a      	strb	r2, [r3, #0]
	  memcpy (m_tx_buffer+sizeof(header)+4,address,2);
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	3308      	adds	r3, #8
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	8812      	ldrh	r2, [r2, #0]
 8006ce4:	b292      	uxth	r2, r2
 8006ce6:	801a      	strh	r2, [r3, #0]
	  memcpy (m_tx_buffer+sizeof(header)+6,data_array,data_size);
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	330a      	adds	r3, #10
 8006cec:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8006cf0:	f107 0114 	add.w	r1, r7, #20
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f003 fc27 	bl	800a548 <memcpy>

	  crc = update_crc(0,m_tx_buffer,mem_size -2);
 8006cfa:	69f9      	ldr	r1, [r7, #28]
 8006cfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006cfe:	3b02      	subs	r3, #2
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	461a      	mov	r2, r3
 8006d04:	2000      	movs	r0, #0
 8006d06:	f7ff ff3b 	bl	8006b80 <update_crc>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	837b      	strh	r3, [r7, #26]
	  crc_[0]=crc & 0x00FF;
 8006d0e:	8b7b      	ldrh	r3, [r7, #26]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	763b      	strb	r3, [r7, #24]
	  crc_[1]=(crc>>8) & 0x00FF;
 8006d14:	8b7b      	ldrh	r3, [r7, #26]
 8006d16:	0a1b      	lsrs	r3, r3, #8
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	767b      	strb	r3, [r7, #25]
	  memcpy (m_tx_buffer+sizeof(header)+6+data_size,crc_,2);
 8006d1e:	69fa      	ldr	r2, [r7, #28]
 8006d20:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006d24:	330a      	adds	r3, #10
 8006d26:	4413      	add	r3, r2
 8006d28:	8b3a      	ldrh	r2, [r7, #24]
 8006d2a:	801a      	strh	r2, [r3, #0]


	  if(Id == 0xFE)
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	2bfe      	cmp	r3, #254	; 0xfe
 8006d30:	d103      	bne.n	8006d3a <xl430_writeToAddress+0x11e>
	  {
		  _expected_return_msgs = 2;
 8006d32:	4b09      	ldr	r3, [pc, #36]	; (8006d58 <xl430_writeToAddress+0x13c>)
 8006d34:	2202      	movs	r2, #2
 8006d36:	701a      	strb	r2, [r3, #0]
 8006d38:	e002      	b.n	8006d40 <xl430_writeToAddress+0x124>
	  }
	  else
	  {
		  _expected_return_msgs = 1;
 8006d3a:	4b07      	ldr	r3, [pc, #28]	; (8006d58 <xl430_writeToAddress+0x13c>)
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	701a      	strb	r2, [r3, #0]
	  }
	    xl430_writebuffer(m_tx_buffer,sizeof(m_tx_buffer));
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	4621      	mov	r1, r4
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff fe19 	bl	800697c <xl430_writebuffer>
 8006d4a:	46ad      	mov	sp, r5



}
 8006d4c:	bf00      	nop
 8006d4e:	3728      	adds	r7, #40	; 0x28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bdb0      	pop	{r4, r5, r7, pc}
 8006d54:	0800bf44 	.word	0x0800bf44
 8006d58:	20000024 	.word	0x20000024

08006d5c <xl430_Action>:

void xl430_Action()
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
  uint8_t _dataArr[]={0xFF,0xFF,0xFD,0x00,0xFE,0x03,0x00,0x05,0x00,0x00};
 8006d62:	4a0e      	ldr	r2, [pc, #56]	; (8006d9c <xl430_Action+0x40>)
 8006d64:	1d3b      	adds	r3, r7, #4
 8006d66:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d68:	c303      	stmia	r3!, {r0, r1}
 8006d6a:	801a      	strh	r2, [r3, #0]
  uint16_t crc;
  crc = update_crc(0,_dataArr,8);
 8006d6c:	1d3b      	adds	r3, r7, #4
 8006d6e:	2208      	movs	r2, #8
 8006d70:	4619      	mov	r1, r3
 8006d72:	2000      	movs	r0, #0
 8006d74:	f7ff ff04 	bl	8006b80 <update_crc>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	807b      	strh	r3, [r7, #2]
  memcpy (_dataArr+8,&crc,2);
 8006d7c:	1d3b      	adds	r3, r7, #4
 8006d7e:	3308      	adds	r3, #8
 8006d80:	887a      	ldrh	r2, [r7, #2]
 8006d82:	801a      	strh	r2, [r3, #0]
  _expected_return_msgs=1;
 8006d84:	4b06      	ldr	r3, [pc, #24]	; (8006da0 <xl430_Action+0x44>)
 8006d86:	2201      	movs	r2, #1
 8006d88:	701a      	strb	r2, [r3, #0]
  xl430_writebuffer(_dataArr,10);
 8006d8a:	1d3b      	adds	r3, r7, #4
 8006d8c:	210a      	movs	r1, #10
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7ff fdf4 	bl	800697c <xl430_writebuffer>

}
 8006d94:	bf00      	nop
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	0800bd88 	.word	0x0800bd88
 8006da0:	20000024 	.word	0x20000024

08006da4 <xl430_syncRead>:



void xl430_syncRead(const uint16_t *address,const uint8_t *ID_array, uint8_t sizeofArray)
{
 8006da4:	b5b0      	push	{r4, r5, r7, lr}
 8006da6:	b08a      	sub	sp, #40	; 0x28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	4613      	mov	r3, r2
 8006db0:	71fb      	strb	r3, [r7, #7]
 8006db2:	466b      	mov	r3, sp
 8006db4:	461d      	mov	r5, r3
  uint16_t mem_size=14+sizeofArray;
 8006db6:	79fb      	ldrb	r3, [r7, #7]
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	330e      	adds	r3, #14
 8006dbc:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t crc;
  uint16_t data_length = 4;
 8006dbe:	2304      	movs	r3, #4
 8006dc0:	833b      	strh	r3, [r7, #24]

  uint8_t m_tx_buffer [mem_size];
 8006dc2:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8006dc4:	4623      	mov	r3, r4
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	623b      	str	r3, [r7, #32]
 8006dca:	b2a0      	uxth	r0, r4
 8006dcc:	f04f 0100 	mov.w	r1, #0
 8006dd0:	f04f 0200 	mov.w	r2, #0
 8006dd4:	f04f 0300 	mov.w	r3, #0
 8006dd8:	00cb      	lsls	r3, r1, #3
 8006dda:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006dde:	00c2      	lsls	r2, r0, #3
 8006de0:	b2a0      	uxth	r0, r4
 8006de2:	f04f 0100 	mov.w	r1, #0
 8006de6:	f04f 0200 	mov.w	r2, #0
 8006dea:	f04f 0300 	mov.w	r3, #0
 8006dee:	00cb      	lsls	r3, r1, #3
 8006df0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006df4:	00c2      	lsls	r2, r0, #3
 8006df6:	4623      	mov	r3, r4
 8006df8:	3307      	adds	r3, #7
 8006dfa:	08db      	lsrs	r3, r3, #3
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	ebad 0d03 	sub.w	sp, sp, r3
 8006e02:	466b      	mov	r3, sp
 8006e04:	3300      	adds	r3, #0
 8006e06:	61fb      	str	r3, [r7, #28]
  uint16_t m_len =7+sizeofArray;
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	3307      	adds	r3, #7
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	82fb      	strh	r3, [r7, #22]

  memcpy (m_tx_buffer,header,6);
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	2206      	movs	r2, #6
 8006e16:	4920      	ldr	r1, [pc, #128]	; (8006e98 <xl430_syncRead+0xf4>)
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f003 fb95 	bl	800a548 <memcpy>
  memcpy (m_tx_buffer+sizeof(header),servo_ID+2,1); //broadcast ID
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	3304      	adds	r3, #4
 8006e22:	4a1e      	ldr	r2, [pc, #120]	; (8006e9c <xl430_syncRead+0xf8>)
 8006e24:	7812      	ldrb	r2, [r2, #0]
 8006e26:	701a      	strb	r2, [r3, #0]
  memcpy (m_tx_buffer+sizeof(header)+1,&m_len,2);
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	3305      	adds	r3, #5
 8006e2c:	8afa      	ldrh	r2, [r7, #22]
 8006e2e:	801a      	strh	r2, [r3, #0]
  memcpy (m_tx_buffer+sizeof(header)+3,&SYNC_RD,1);
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	3307      	adds	r3, #7
 8006e34:	2282      	movs	r2, #130	; 0x82
 8006e36:	701a      	strb	r2, [r3, #0]
  memcpy (m_tx_buffer+sizeof(header)+4,address,2);
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	3308      	adds	r3, #8
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	8812      	ldrh	r2, [r2, #0]
 8006e40:	b292      	uxth	r2, r2
 8006e42:	801a      	strh	r2, [r3, #0]
  memcpy (m_tx_buffer+sizeof(header)+6,&data_length,2);
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	330a      	adds	r3, #10
 8006e48:	8b3a      	ldrh	r2, [r7, #24]
 8006e4a:	801a      	strh	r2, [r3, #0]
  memcpy (m_tx_buffer+sizeof(header)+8,ID_array,sizeofArray);
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	330c      	adds	r3, #12
 8006e50:	79fa      	ldrb	r2, [r7, #7]
 8006e52:	68b9      	ldr	r1, [r7, #8]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f003 fb77 	bl	800a548 <memcpy>
  crc = update_crc(0,m_tx_buffer,mem_size -2);
 8006e5a:	69f9      	ldr	r1, [r7, #28]
 8006e5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e5e:	3b02      	subs	r3, #2
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	2000      	movs	r0, #0
 8006e66:	f7ff fe8b 	bl	8006b80 <update_crc>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	837b      	strh	r3, [r7, #26]
  memcpy (m_tx_buffer+mem_size-2,&crc,2);
 8006e6e:	69fa      	ldr	r2, [r7, #28]
 8006e70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e72:	3b02      	subs	r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	8b7a      	ldrh	r2, [r7, #26]
 8006e78:	801a      	strh	r2, [r3, #0]
 _expected_return_msgs = 2;
 8006e7a:	4b09      	ldr	r3, [pc, #36]	; (8006ea0 <xl430_syncRead+0xfc>)
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	701a      	strb	r2, [r3, #0]
 xl430_writebuffer(m_tx_buffer, mem_size);
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e84:	4611      	mov	r1, r2
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7ff fd78 	bl	800697c <xl430_writebuffer>
 8006e8c:	46ad      	mov	sp, r5
}
 8006e8e:	bf00      	nop
 8006e90:	3728      	adds	r7, #40	; 0x28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bdb0      	pop	{r4, r5, r7, pc}
 8006e96:	bf00      	nop
 8006e98:	0800bf44 	.word	0x0800bf44
 8006e9c:	0800bf4a 	.word	0x0800bf4a
 8006ea0:	20000024 	.word	0x20000024

08006ea4 <xl430_setRxData>:




void xl430_setRxData(struct rxData *data)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
	_rxData = *data;
 8006eac:	4a09      	ldr	r2, [pc, #36]	; (8006ed4 <xl430_setRxData+0x30>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	2342      	movs	r3, #66	; 0x42
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f003 fb46 	bl	800a548 <memcpy>
	memset(rx_buffer,0,data->dataSize);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	4804      	ldr	r0, [pc, #16]	; (8006ed8 <xl430_setRxData+0x34>)
 8006ec6:	f003 fb4d 	bl	800a564 <memset>
}
 8006eca:	bf00      	nop
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	20000134 	.word	0x20000134
 8006ed8:	200000f4 	.word	0x200000f4

08006edc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006edc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006ede:	e003      	b.n	8006ee8 <LoopCopyDataInit>

08006ee0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006ee2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006ee4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006ee6:	3104      	adds	r1, #4

08006ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006ee8:	480a      	ldr	r0, [pc, #40]	; (8006f14 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006eea:	4b0b      	ldr	r3, [pc, #44]	; (8006f18 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006eec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006eee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006ef0:	d3f6      	bcc.n	8006ee0 <CopyDataInit>
  ldr r2, =_sbss
 8006ef2:	4a0a      	ldr	r2, [pc, #40]	; (8006f1c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006ef4:	e002      	b.n	8006efc <LoopFillZerobss>

08006ef6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006ef6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006ef8:	f842 3b04 	str.w	r3, [r2], #4

08006efc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006efc:	4b08      	ldr	r3, [pc, #32]	; (8006f20 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006efe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006f00:	d3f9      	bcc.n	8006ef6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006f02:	f7ff fce7 	bl	80068d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006f06:	f003 fafb 	bl	800a500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006f0a:	f7fa f9b1 	bl	8001270 <main>
  bx lr
 8006f0e:	4770      	bx	lr
  ldr r3, =_sidata
 8006f10:	0800bff0 	.word	0x0800bff0
  ldr r0, =_sdata
 8006f14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006f18:	20000098 	.word	0x20000098
  ldr r2, =_sbss
 8006f1c:	20000098 	.word	0x20000098
  ldr r3, = _ebss
 8006f20:	20000fe8 	.word	0x20000fe8

08006f24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006f24:	e7fe      	b.n	8006f24 <ADC1_2_IRQHandler>
	...

08006f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006f2c:	4b08      	ldr	r3, [pc, #32]	; (8006f50 <HAL_Init+0x28>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a07      	ldr	r2, [pc, #28]	; (8006f50 <HAL_Init+0x28>)
 8006f32:	f043 0310 	orr.w	r3, r3, #16
 8006f36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f38:	2003      	movs	r0, #3
 8006f3a:	f000 f8f5 	bl	8007128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006f3e:	2000      	movs	r0, #0
 8006f40:	f7ff fafa 	bl	8006538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006f44:	f7ff f950 	bl	80061e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	40022000 	.word	0x40022000

08006f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f54:	b480      	push	{r7}
 8006f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f58:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <HAL_IncTick+0x1c>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <HAL_IncTick+0x20>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4413      	add	r3, r2
 8006f64:	4a03      	ldr	r2, [pc, #12]	; (8006f74 <HAL_IncTick+0x20>)
 8006f66:	6013      	str	r3, [r2, #0]
}
 8006f68:	bf00      	nop
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bc80      	pop	{r7}
 8006f6e:	4770      	bx	lr
 8006f70:	2000002c 	.word	0x2000002c
 8006f74:	20000fd4 	.word	0x20000fd4

08006f78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8006f7c:	4b02      	ldr	r3, [pc, #8]	; (8006f88 <HAL_GetTick+0x10>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bc80      	pop	{r7}
 8006f86:	4770      	bx	lr
 8006f88:	20000fd4 	.word	0x20000fd4

08006f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f94:	f7ff fff0 	bl	8006f78 <HAL_GetTick>
 8006f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa4:	d005      	beq.n	8006fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006fa6:	4b0a      	ldr	r3, [pc, #40]	; (8006fd0 <HAL_Delay+0x44>)
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4413      	add	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006fb2:	bf00      	nop
 8006fb4:	f7ff ffe0 	bl	8006f78 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d8f7      	bhi.n	8006fb4 <HAL_Delay+0x28>
  {
  }
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	2000002c 	.word	0x2000002c

08006fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f003 0307 	and.w	r3, r3, #7
 8006fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fe4:	4b0c      	ldr	r3, [pc, #48]	; (8007018 <__NVIC_SetPriorityGrouping+0x44>)
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007006:	4a04      	ldr	r2, [pc, #16]	; (8007018 <__NVIC_SetPriorityGrouping+0x44>)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	60d3      	str	r3, [r2, #12]
}
 800700c:	bf00      	nop
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	bc80      	pop	{r7}
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	e000ed00 	.word	0xe000ed00

0800701c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800701c:	b480      	push	{r7}
 800701e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007020:	4b04      	ldr	r3, [pc, #16]	; (8007034 <__NVIC_GetPriorityGrouping+0x18>)
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	0a1b      	lsrs	r3, r3, #8
 8007026:	f003 0307 	and.w	r3, r3, #7
}
 800702a:	4618      	mov	r0, r3
 800702c:	46bd      	mov	sp, r7
 800702e:	bc80      	pop	{r7}
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	e000ed00 	.word	0xe000ed00

08007038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007046:	2b00      	cmp	r3, #0
 8007048:	db0b      	blt.n	8007062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800704a:	79fb      	ldrb	r3, [r7, #7]
 800704c:	f003 021f 	and.w	r2, r3, #31
 8007050:	4906      	ldr	r1, [pc, #24]	; (800706c <__NVIC_EnableIRQ+0x34>)
 8007052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007056:	095b      	lsrs	r3, r3, #5
 8007058:	2001      	movs	r0, #1
 800705a:	fa00 f202 	lsl.w	r2, r0, r2
 800705e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007062:	bf00      	nop
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	bc80      	pop	{r7}
 800706a:	4770      	bx	lr
 800706c:	e000e100 	.word	0xe000e100

08007070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	6039      	str	r1, [r7, #0]
 800707a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800707c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007080:	2b00      	cmp	r3, #0
 8007082:	db0a      	blt.n	800709a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	b2da      	uxtb	r2, r3
 8007088:	490c      	ldr	r1, [pc, #48]	; (80070bc <__NVIC_SetPriority+0x4c>)
 800708a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800708e:	0112      	lsls	r2, r2, #4
 8007090:	b2d2      	uxtb	r2, r2
 8007092:	440b      	add	r3, r1
 8007094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007098:	e00a      	b.n	80070b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	b2da      	uxtb	r2, r3
 800709e:	4908      	ldr	r1, [pc, #32]	; (80070c0 <__NVIC_SetPriority+0x50>)
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	f003 030f 	and.w	r3, r3, #15
 80070a6:	3b04      	subs	r3, #4
 80070a8:	0112      	lsls	r2, r2, #4
 80070aa:	b2d2      	uxtb	r2, r2
 80070ac:	440b      	add	r3, r1
 80070ae:	761a      	strb	r2, [r3, #24]
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bc80      	pop	{r7}
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	e000e100 	.word	0xe000e100
 80070c0:	e000ed00 	.word	0xe000ed00

080070c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b089      	sub	sp, #36	; 0x24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	f1c3 0307 	rsb	r3, r3, #7
 80070de:	2b04      	cmp	r3, #4
 80070e0:	bf28      	it	cs
 80070e2:	2304      	movcs	r3, #4
 80070e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	3304      	adds	r3, #4
 80070ea:	2b06      	cmp	r3, #6
 80070ec:	d902      	bls.n	80070f4 <NVIC_EncodePriority+0x30>
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	3b03      	subs	r3, #3
 80070f2:	e000      	b.n	80070f6 <NVIC_EncodePriority+0x32>
 80070f4:	2300      	movs	r3, #0
 80070f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070f8:	f04f 32ff 	mov.w	r2, #4294967295
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007102:	43da      	mvns	r2, r3
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	401a      	ands	r2, r3
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800710c:	f04f 31ff 	mov.w	r1, #4294967295
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	fa01 f303 	lsl.w	r3, r1, r3
 8007116:	43d9      	mvns	r1, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800711c:	4313      	orrs	r3, r2
         );
}
 800711e:	4618      	mov	r0, r3
 8007120:	3724      	adds	r7, #36	; 0x24
 8007122:	46bd      	mov	sp, r7
 8007124:	bc80      	pop	{r7}
 8007126:	4770      	bx	lr

08007128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7ff ff4f 	bl	8006fd4 <__NVIC_SetPriorityGrouping>
}
 8007136:	bf00      	nop
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800713e:	b580      	push	{r7, lr}
 8007140:	b086      	sub	sp, #24
 8007142:	af00      	add	r7, sp, #0
 8007144:	4603      	mov	r3, r0
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	607a      	str	r2, [r7, #4]
 800714a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800714c:	2300      	movs	r3, #0
 800714e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007150:	f7ff ff64 	bl	800701c <__NVIC_GetPriorityGrouping>
 8007154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	68b9      	ldr	r1, [r7, #8]
 800715a:	6978      	ldr	r0, [r7, #20]
 800715c:	f7ff ffb2 	bl	80070c4 <NVIC_EncodePriority>
 8007160:	4602      	mov	r2, r0
 8007162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007166:	4611      	mov	r1, r2
 8007168:	4618      	mov	r0, r3
 800716a:	f7ff ff81 	bl	8007070 <__NVIC_SetPriority>
}
 800716e:	bf00      	nop
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	4603      	mov	r3, r0
 800717e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff ff57 	bl	8007038 <__NVIC_EnableIRQ>
}
 800718a:	bf00      	nop
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e043      	b.n	8007232 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	4b22      	ldr	r3, [pc, #136]	; (800723c <HAL_DMA_Init+0xa8>)
 80071b2:	4413      	add	r3, r2
 80071b4:	4a22      	ldr	r2, [pc, #136]	; (8007240 <HAL_DMA_Init+0xac>)
 80071b6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ba:	091b      	lsrs	r3, r3, #4
 80071bc:	009a      	lsls	r2, r3, #2
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a1f      	ldr	r2, [pc, #124]	; (8007244 <HAL_DMA_Init+0xb0>)
 80071c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80071de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80071e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80071ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007204:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	4313      	orrs	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr
 800723c:	bffdfff8 	.word	0xbffdfff8
 8007240:	cccccccd 	.word	0xcccccccd
 8007244:	40020000 	.word	0x40020000

08007248 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <HAL_DMA_Start_IT+0x20>
 8007264:	2302      	movs	r3, #2
 8007266:	e04a      	b.n	80072fe <HAL_DMA_Start_IT+0xb6>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007276:	2b01      	cmp	r3, #1
 8007278:	d13a      	bne.n	80072f0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2202      	movs	r2, #2
 800727e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f022 0201 	bic.w	r2, r2, #1
 8007296:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	68b9      	ldr	r1, [r7, #8]
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 f9e8 	bl	8007674 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d008      	beq.n	80072be <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 020e 	orr.w	r2, r2, #14
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	e00f      	b.n	80072de <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f022 0204 	bic.w	r2, r2, #4
 80072cc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f042 020a 	orr.w	r2, r2, #10
 80072dc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f042 0201 	orr.w	r2, r2, #1
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	e005      	b.n	80072fc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80072f8:	2302      	movs	r3, #2
 80072fa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80072fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007306:	b480      	push	{r7}
 8007308:	b085      	sub	sp, #20
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007318:	2b02      	cmp	r3, #2
 800731a:	d008      	beq.n	800732e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2204      	movs	r2, #4
 8007320:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e020      	b.n	8007370 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 020e 	bic.w	r2, r2, #14
 800733c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 0201 	bic.w	r2, r2, #1
 800734c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007356:	2101      	movs	r1, #1
 8007358:	fa01 f202 	lsl.w	r2, r1, r2
 800735c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800736e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	bc80      	pop	{r7}
 8007378:	4770      	bx	lr
	...

0800737c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007384:	2300      	movs	r3, #0
 8007386:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800738e:	2b02      	cmp	r3, #2
 8007390:	d005      	beq.n	800739e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2204      	movs	r2, #4
 8007396:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	73fb      	strb	r3, [r7, #15]
 800739c:	e051      	b.n	8007442 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f022 020e 	bic.w	r2, r2, #14
 80073ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0201 	bic.w	r2, r2, #1
 80073bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a22      	ldr	r2, [pc, #136]	; (800744c <HAL_DMA_Abort_IT+0xd0>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d029      	beq.n	800741c <HAL_DMA_Abort_IT+0xa0>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a20      	ldr	r2, [pc, #128]	; (8007450 <HAL_DMA_Abort_IT+0xd4>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d022      	beq.n	8007418 <HAL_DMA_Abort_IT+0x9c>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a1f      	ldr	r2, [pc, #124]	; (8007454 <HAL_DMA_Abort_IT+0xd8>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d01a      	beq.n	8007412 <HAL_DMA_Abort_IT+0x96>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a1d      	ldr	r2, [pc, #116]	; (8007458 <HAL_DMA_Abort_IT+0xdc>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d012      	beq.n	800740c <HAL_DMA_Abort_IT+0x90>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a1c      	ldr	r2, [pc, #112]	; (800745c <HAL_DMA_Abort_IT+0xe0>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d00a      	beq.n	8007406 <HAL_DMA_Abort_IT+0x8a>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a1a      	ldr	r2, [pc, #104]	; (8007460 <HAL_DMA_Abort_IT+0xe4>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d102      	bne.n	8007400 <HAL_DMA_Abort_IT+0x84>
 80073fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80073fe:	e00e      	b.n	800741e <HAL_DMA_Abort_IT+0xa2>
 8007400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007404:	e00b      	b.n	800741e <HAL_DMA_Abort_IT+0xa2>
 8007406:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800740a:	e008      	b.n	800741e <HAL_DMA_Abort_IT+0xa2>
 800740c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007410:	e005      	b.n	800741e <HAL_DMA_Abort_IT+0xa2>
 8007412:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007416:	e002      	b.n	800741e <HAL_DMA_Abort_IT+0xa2>
 8007418:	2310      	movs	r3, #16
 800741a:	e000      	b.n	800741e <HAL_DMA_Abort_IT+0xa2>
 800741c:	2301      	movs	r3, #1
 800741e:	4a11      	ldr	r2, [pc, #68]	; (8007464 <HAL_DMA_Abort_IT+0xe8>)
 8007420:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	4798      	blx	r3
    } 
  }
  return status;
 8007442:	7bfb      	ldrb	r3, [r7, #15]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	40020008 	.word	0x40020008
 8007450:	4002001c 	.word	0x4002001c
 8007454:	40020030 	.word	0x40020030
 8007458:	40020044 	.word	0x40020044
 800745c:	40020058 	.word	0x40020058
 8007460:	4002006c 	.word	0x4002006c
 8007464:	40020000 	.word	0x40020000

08007468 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	2204      	movs	r2, #4
 8007486:	409a      	lsls	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4013      	ands	r3, r2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d04f      	beq.n	8007530 <HAL_DMA_IRQHandler+0xc8>
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f003 0304 	and.w	r3, r3, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	d04a      	beq.n	8007530 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0320 	and.w	r3, r3, #32
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d107      	bne.n	80074b8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f022 0204 	bic.w	r2, r2, #4
 80074b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a66      	ldr	r2, [pc, #408]	; (8007658 <HAL_DMA_IRQHandler+0x1f0>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d029      	beq.n	8007516 <HAL_DMA_IRQHandler+0xae>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a65      	ldr	r2, [pc, #404]	; (800765c <HAL_DMA_IRQHandler+0x1f4>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d022      	beq.n	8007512 <HAL_DMA_IRQHandler+0xaa>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a63      	ldr	r2, [pc, #396]	; (8007660 <HAL_DMA_IRQHandler+0x1f8>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d01a      	beq.n	800750c <HAL_DMA_IRQHandler+0xa4>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a62      	ldr	r2, [pc, #392]	; (8007664 <HAL_DMA_IRQHandler+0x1fc>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d012      	beq.n	8007506 <HAL_DMA_IRQHandler+0x9e>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a60      	ldr	r2, [pc, #384]	; (8007668 <HAL_DMA_IRQHandler+0x200>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d00a      	beq.n	8007500 <HAL_DMA_IRQHandler+0x98>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a5f      	ldr	r2, [pc, #380]	; (800766c <HAL_DMA_IRQHandler+0x204>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d102      	bne.n	80074fa <HAL_DMA_IRQHandler+0x92>
 80074f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80074f8:	e00e      	b.n	8007518 <HAL_DMA_IRQHandler+0xb0>
 80074fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80074fe:	e00b      	b.n	8007518 <HAL_DMA_IRQHandler+0xb0>
 8007500:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007504:	e008      	b.n	8007518 <HAL_DMA_IRQHandler+0xb0>
 8007506:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800750a:	e005      	b.n	8007518 <HAL_DMA_IRQHandler+0xb0>
 800750c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007510:	e002      	b.n	8007518 <HAL_DMA_IRQHandler+0xb0>
 8007512:	2340      	movs	r3, #64	; 0x40
 8007514:	e000      	b.n	8007518 <HAL_DMA_IRQHandler+0xb0>
 8007516:	2304      	movs	r3, #4
 8007518:	4a55      	ldr	r2, [pc, #340]	; (8007670 <HAL_DMA_IRQHandler+0x208>)
 800751a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 8094 	beq.w	800764e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800752e:	e08e      	b.n	800764e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007534:	2202      	movs	r2, #2
 8007536:	409a      	lsls	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4013      	ands	r3, r2
 800753c:	2b00      	cmp	r3, #0
 800753e:	d056      	beq.n	80075ee <HAL_DMA_IRQHandler+0x186>
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d051      	beq.n	80075ee <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0320 	and.w	r3, r3, #32
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10b      	bne.n	8007570 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f022 020a 	bic.w	r2, r2, #10
 8007566:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a38      	ldr	r2, [pc, #224]	; (8007658 <HAL_DMA_IRQHandler+0x1f0>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d029      	beq.n	80075ce <HAL_DMA_IRQHandler+0x166>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a37      	ldr	r2, [pc, #220]	; (800765c <HAL_DMA_IRQHandler+0x1f4>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d022      	beq.n	80075ca <HAL_DMA_IRQHandler+0x162>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a35      	ldr	r2, [pc, #212]	; (8007660 <HAL_DMA_IRQHandler+0x1f8>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d01a      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x15c>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a34      	ldr	r2, [pc, #208]	; (8007664 <HAL_DMA_IRQHandler+0x1fc>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d012      	beq.n	80075be <HAL_DMA_IRQHandler+0x156>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a32      	ldr	r2, [pc, #200]	; (8007668 <HAL_DMA_IRQHandler+0x200>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d00a      	beq.n	80075b8 <HAL_DMA_IRQHandler+0x150>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a31      	ldr	r2, [pc, #196]	; (800766c <HAL_DMA_IRQHandler+0x204>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d102      	bne.n	80075b2 <HAL_DMA_IRQHandler+0x14a>
 80075ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80075b0:	e00e      	b.n	80075d0 <HAL_DMA_IRQHandler+0x168>
 80075b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075b6:	e00b      	b.n	80075d0 <HAL_DMA_IRQHandler+0x168>
 80075b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80075bc:	e008      	b.n	80075d0 <HAL_DMA_IRQHandler+0x168>
 80075be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075c2:	e005      	b.n	80075d0 <HAL_DMA_IRQHandler+0x168>
 80075c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075c8:	e002      	b.n	80075d0 <HAL_DMA_IRQHandler+0x168>
 80075ca:	2320      	movs	r3, #32
 80075cc:	e000      	b.n	80075d0 <HAL_DMA_IRQHandler+0x168>
 80075ce:	2302      	movs	r3, #2
 80075d0:	4a27      	ldr	r2, [pc, #156]	; (8007670 <HAL_DMA_IRQHandler+0x208>)
 80075d2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d034      	beq.n	800764e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80075ec:	e02f      	b.n	800764e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	2208      	movs	r2, #8
 80075f4:	409a      	lsls	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4013      	ands	r3, r2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d028      	beq.n	8007650 <HAL_DMA_IRQHandler+0x1e8>
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	f003 0308 	and.w	r3, r3, #8
 8007604:	2b00      	cmp	r3, #0
 8007606:	d023      	beq.n	8007650 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f022 020e 	bic.w	r2, r2, #14
 8007616:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007620:	2101      	movs	r1, #1
 8007622:	fa01 f202 	lsl.w	r2, r1, r2
 8007626:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007642:	2b00      	cmp	r3, #0
 8007644:	d004      	beq.n	8007650 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	4798      	blx	r3
    }
  }
  return;
 800764e:	bf00      	nop
 8007650:	bf00      	nop
}
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	40020008 	.word	0x40020008
 800765c:	4002001c 	.word	0x4002001c
 8007660:	40020030 	.word	0x40020030
 8007664:	40020044 	.word	0x40020044
 8007668:	40020058 	.word	0x40020058
 800766c:	4002006c 	.word	0x4002006c
 8007670:	40020000 	.word	0x40020000

08007674 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800768a:	2101      	movs	r1, #1
 800768c:	fa01 f202 	lsl.w	r2, r1, r2
 8007690:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	2b10      	cmp	r3, #16
 80076a0:	d108      	bne.n	80076b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80076b2:	e007      	b.n	80076c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	60da      	str	r2, [r3, #12]
}
 80076c4:	bf00      	nop
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bc80      	pop	{r7}
 80076cc:	4770      	bx	lr
	...

080076d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b08b      	sub	sp, #44	; 0x2c
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80076da:	2300      	movs	r3, #0
 80076dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80076de:	2300      	movs	r3, #0
 80076e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80076e2:	e169      	b.n	80079b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80076e4:	2201      	movs	r2, #1
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	4013      	ands	r3, r2
 80076f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	f040 8158 	bne.w	80079b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	4a9a      	ldr	r2, [pc, #616]	; (8007970 <HAL_GPIO_Init+0x2a0>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d05e      	beq.n	80077ca <HAL_GPIO_Init+0xfa>
 800770c:	4a98      	ldr	r2, [pc, #608]	; (8007970 <HAL_GPIO_Init+0x2a0>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d875      	bhi.n	80077fe <HAL_GPIO_Init+0x12e>
 8007712:	4a98      	ldr	r2, [pc, #608]	; (8007974 <HAL_GPIO_Init+0x2a4>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d058      	beq.n	80077ca <HAL_GPIO_Init+0xfa>
 8007718:	4a96      	ldr	r2, [pc, #600]	; (8007974 <HAL_GPIO_Init+0x2a4>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d86f      	bhi.n	80077fe <HAL_GPIO_Init+0x12e>
 800771e:	4a96      	ldr	r2, [pc, #600]	; (8007978 <HAL_GPIO_Init+0x2a8>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d052      	beq.n	80077ca <HAL_GPIO_Init+0xfa>
 8007724:	4a94      	ldr	r2, [pc, #592]	; (8007978 <HAL_GPIO_Init+0x2a8>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d869      	bhi.n	80077fe <HAL_GPIO_Init+0x12e>
 800772a:	4a94      	ldr	r2, [pc, #592]	; (800797c <HAL_GPIO_Init+0x2ac>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d04c      	beq.n	80077ca <HAL_GPIO_Init+0xfa>
 8007730:	4a92      	ldr	r2, [pc, #584]	; (800797c <HAL_GPIO_Init+0x2ac>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d863      	bhi.n	80077fe <HAL_GPIO_Init+0x12e>
 8007736:	4a92      	ldr	r2, [pc, #584]	; (8007980 <HAL_GPIO_Init+0x2b0>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d046      	beq.n	80077ca <HAL_GPIO_Init+0xfa>
 800773c:	4a90      	ldr	r2, [pc, #576]	; (8007980 <HAL_GPIO_Init+0x2b0>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d85d      	bhi.n	80077fe <HAL_GPIO_Init+0x12e>
 8007742:	2b12      	cmp	r3, #18
 8007744:	d82a      	bhi.n	800779c <HAL_GPIO_Init+0xcc>
 8007746:	2b12      	cmp	r3, #18
 8007748:	d859      	bhi.n	80077fe <HAL_GPIO_Init+0x12e>
 800774a:	a201      	add	r2, pc, #4	; (adr r2, 8007750 <HAL_GPIO_Init+0x80>)
 800774c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007750:	080077cb 	.word	0x080077cb
 8007754:	080077a5 	.word	0x080077a5
 8007758:	080077b7 	.word	0x080077b7
 800775c:	080077f9 	.word	0x080077f9
 8007760:	080077ff 	.word	0x080077ff
 8007764:	080077ff 	.word	0x080077ff
 8007768:	080077ff 	.word	0x080077ff
 800776c:	080077ff 	.word	0x080077ff
 8007770:	080077ff 	.word	0x080077ff
 8007774:	080077ff 	.word	0x080077ff
 8007778:	080077ff 	.word	0x080077ff
 800777c:	080077ff 	.word	0x080077ff
 8007780:	080077ff 	.word	0x080077ff
 8007784:	080077ff 	.word	0x080077ff
 8007788:	080077ff 	.word	0x080077ff
 800778c:	080077ff 	.word	0x080077ff
 8007790:	080077ff 	.word	0x080077ff
 8007794:	080077ad 	.word	0x080077ad
 8007798:	080077c1 	.word	0x080077c1
 800779c:	4a79      	ldr	r2, [pc, #484]	; (8007984 <HAL_GPIO_Init+0x2b4>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d013      	beq.n	80077ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80077a2:	e02c      	b.n	80077fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	623b      	str	r3, [r7, #32]
          break;
 80077aa:	e029      	b.n	8007800 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	3304      	adds	r3, #4
 80077b2:	623b      	str	r3, [r7, #32]
          break;
 80077b4:	e024      	b.n	8007800 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	3308      	adds	r3, #8
 80077bc:	623b      	str	r3, [r7, #32]
          break;
 80077be:	e01f      	b.n	8007800 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	330c      	adds	r3, #12
 80077c6:	623b      	str	r3, [r7, #32]
          break;
 80077c8:	e01a      	b.n	8007800 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d102      	bne.n	80077d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80077d2:	2304      	movs	r3, #4
 80077d4:	623b      	str	r3, [r7, #32]
          break;
 80077d6:	e013      	b.n	8007800 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d105      	bne.n	80077ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80077e0:	2308      	movs	r3, #8
 80077e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	611a      	str	r2, [r3, #16]
          break;
 80077ea:	e009      	b.n	8007800 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80077ec:	2308      	movs	r3, #8
 80077ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	69fa      	ldr	r2, [r7, #28]
 80077f4:	615a      	str	r2, [r3, #20]
          break;
 80077f6:	e003      	b.n	8007800 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80077f8:	2300      	movs	r3, #0
 80077fa:	623b      	str	r3, [r7, #32]
          break;
 80077fc:	e000      	b.n	8007800 <HAL_GPIO_Init+0x130>
          break;
 80077fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	2bff      	cmp	r3, #255	; 0xff
 8007804:	d801      	bhi.n	800780a <HAL_GPIO_Init+0x13a>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	e001      	b.n	800780e <HAL_GPIO_Init+0x13e>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3304      	adds	r3, #4
 800780e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	2bff      	cmp	r3, #255	; 0xff
 8007814:	d802      	bhi.n	800781c <HAL_GPIO_Init+0x14c>
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	e002      	b.n	8007822 <HAL_GPIO_Init+0x152>
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	3b08      	subs	r3, #8
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	210f      	movs	r1, #15
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	fa01 f303 	lsl.w	r3, r1, r3
 8007830:	43db      	mvns	r3, r3
 8007832:	401a      	ands	r2, r3
 8007834:	6a39      	ldr	r1, [r7, #32]
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	fa01 f303 	lsl.w	r3, r1, r3
 800783c:	431a      	orrs	r2, r3
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 80b1 	beq.w	80079b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007850:	4b4d      	ldr	r3, [pc, #308]	; (8007988 <HAL_GPIO_Init+0x2b8>)
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	4a4c      	ldr	r2, [pc, #304]	; (8007988 <HAL_GPIO_Init+0x2b8>)
 8007856:	f043 0301 	orr.w	r3, r3, #1
 800785a:	6193      	str	r3, [r2, #24]
 800785c:	4b4a      	ldr	r3, [pc, #296]	; (8007988 <HAL_GPIO_Init+0x2b8>)
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	60bb      	str	r3, [r7, #8]
 8007866:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007868:	4a48      	ldr	r2, [pc, #288]	; (800798c <HAL_GPIO_Init+0x2bc>)
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	089b      	lsrs	r3, r3, #2
 800786e:	3302      	adds	r3, #2
 8007870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007874:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	f003 0303 	and.w	r3, r3, #3
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	220f      	movs	r2, #15
 8007880:	fa02 f303 	lsl.w	r3, r2, r3
 8007884:	43db      	mvns	r3, r3
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	4013      	ands	r3, r2
 800788a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a40      	ldr	r2, [pc, #256]	; (8007990 <HAL_GPIO_Init+0x2c0>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d013      	beq.n	80078bc <HAL_GPIO_Init+0x1ec>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a3f      	ldr	r2, [pc, #252]	; (8007994 <HAL_GPIO_Init+0x2c4>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d00d      	beq.n	80078b8 <HAL_GPIO_Init+0x1e8>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a3e      	ldr	r2, [pc, #248]	; (8007998 <HAL_GPIO_Init+0x2c8>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d007      	beq.n	80078b4 <HAL_GPIO_Init+0x1e4>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a3d      	ldr	r2, [pc, #244]	; (800799c <HAL_GPIO_Init+0x2cc>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d101      	bne.n	80078b0 <HAL_GPIO_Init+0x1e0>
 80078ac:	2303      	movs	r3, #3
 80078ae:	e006      	b.n	80078be <HAL_GPIO_Init+0x1ee>
 80078b0:	2304      	movs	r3, #4
 80078b2:	e004      	b.n	80078be <HAL_GPIO_Init+0x1ee>
 80078b4:	2302      	movs	r3, #2
 80078b6:	e002      	b.n	80078be <HAL_GPIO_Init+0x1ee>
 80078b8:	2301      	movs	r3, #1
 80078ba:	e000      	b.n	80078be <HAL_GPIO_Init+0x1ee>
 80078bc:	2300      	movs	r3, #0
 80078be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c0:	f002 0203 	and.w	r2, r2, #3
 80078c4:	0092      	lsls	r2, r2, #2
 80078c6:	4093      	lsls	r3, r2
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80078ce:	492f      	ldr	r1, [pc, #188]	; (800798c <HAL_GPIO_Init+0x2bc>)
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	089b      	lsrs	r3, r3, #2
 80078d4:	3302      	adds	r3, #2
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d006      	beq.n	80078f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80078e8:	4b2d      	ldr	r3, [pc, #180]	; (80079a0 <HAL_GPIO_Init+0x2d0>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	492c      	ldr	r1, [pc, #176]	; (80079a0 <HAL_GPIO_Init+0x2d0>)
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	600b      	str	r3, [r1, #0]
 80078f4:	e006      	b.n	8007904 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80078f6:	4b2a      	ldr	r3, [pc, #168]	; (80079a0 <HAL_GPIO_Init+0x2d0>)
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	43db      	mvns	r3, r3
 80078fe:	4928      	ldr	r1, [pc, #160]	; (80079a0 <HAL_GPIO_Init+0x2d0>)
 8007900:	4013      	ands	r3, r2
 8007902:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d006      	beq.n	800791e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007910:	4b23      	ldr	r3, [pc, #140]	; (80079a0 <HAL_GPIO_Init+0x2d0>)
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	4922      	ldr	r1, [pc, #136]	; (80079a0 <HAL_GPIO_Init+0x2d0>)
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	4313      	orrs	r3, r2
 800791a:	604b      	str	r3, [r1, #4]
 800791c:	e006      	b.n	800792c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800791e:	4b20      	ldr	r3, [pc, #128]	; (80079a0 <HAL_GPIO_Init+0x2d0>)
 8007920:	685a      	ldr	r2, [r3, #4]
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	43db      	mvns	r3, r3
 8007926:	491e      	ldr	r1, [pc, #120]	; (80079a0 <HAL_GPIO_Init+0x2d0>)
 8007928:	4013      	ands	r3, r2
 800792a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d006      	beq.n	8007946 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007938:	4b19      	ldr	r3, [pc, #100]	; (80079a0 <HAL_GPIO_Init+0x2d0>)
 800793a:	689a      	ldr	r2, [r3, #8]
 800793c:	4918      	ldr	r1, [pc, #96]	; (80079a0 <HAL_GPIO_Init+0x2d0>)
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	4313      	orrs	r3, r2
 8007942:	608b      	str	r3, [r1, #8]
 8007944:	e006      	b.n	8007954 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007946:	4b16      	ldr	r3, [pc, #88]	; (80079a0 <HAL_GPIO_Init+0x2d0>)
 8007948:	689a      	ldr	r2, [r3, #8]
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	43db      	mvns	r3, r3
 800794e:	4914      	ldr	r1, [pc, #80]	; (80079a0 <HAL_GPIO_Init+0x2d0>)
 8007950:	4013      	ands	r3, r2
 8007952:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d021      	beq.n	80079a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007960:	4b0f      	ldr	r3, [pc, #60]	; (80079a0 <HAL_GPIO_Init+0x2d0>)
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	490e      	ldr	r1, [pc, #56]	; (80079a0 <HAL_GPIO_Init+0x2d0>)
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	4313      	orrs	r3, r2
 800796a:	60cb      	str	r3, [r1, #12]
 800796c:	e021      	b.n	80079b2 <HAL_GPIO_Init+0x2e2>
 800796e:	bf00      	nop
 8007970:	10320000 	.word	0x10320000
 8007974:	10310000 	.word	0x10310000
 8007978:	10220000 	.word	0x10220000
 800797c:	10210000 	.word	0x10210000
 8007980:	10120000 	.word	0x10120000
 8007984:	10110000 	.word	0x10110000
 8007988:	40021000 	.word	0x40021000
 800798c:	40010000 	.word	0x40010000
 8007990:	40010800 	.word	0x40010800
 8007994:	40010c00 	.word	0x40010c00
 8007998:	40011000 	.word	0x40011000
 800799c:	40011400 	.word	0x40011400
 80079a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80079a4:	4b0b      	ldr	r3, [pc, #44]	; (80079d4 <HAL_GPIO_Init+0x304>)
 80079a6:	68da      	ldr	r2, [r3, #12]
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	43db      	mvns	r3, r3
 80079ac:	4909      	ldr	r1, [pc, #36]	; (80079d4 <HAL_GPIO_Init+0x304>)
 80079ae:	4013      	ands	r3, r2
 80079b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b4:	3301      	adds	r3, #1
 80079b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	fa22 f303 	lsr.w	r3, r2, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f47f ae8e 	bne.w	80076e4 <HAL_GPIO_Init+0x14>
  }
}
 80079c8:	bf00      	nop
 80079ca:	bf00      	nop
 80079cc:	372c      	adds	r7, #44	; 0x2c
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr
 80079d4:	40010400 	.word	0x40010400

080079d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	807b      	strh	r3, [r7, #2]
 80079e4:	4613      	mov	r3, r2
 80079e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80079e8:	787b      	ldrb	r3, [r7, #1]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80079ee:	887a      	ldrh	r2, [r7, #2]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80079f4:	e003      	b.n	80079fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80079f6:	887b      	ldrh	r3, [r7, #2]
 80079f8:	041a      	lsls	r2, r3, #16
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	611a      	str	r2, [r3, #16]
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bc80      	pop	{r7}
 8007a06:	4770      	bx	lr

08007a08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	460b      	mov	r3, r1
 8007a12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007a1a:	887a      	ldrh	r2, [r7, #2]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	041a      	lsls	r2, r3, #16
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	43d9      	mvns	r1, r3
 8007a26:	887b      	ldrh	r3, [r7, #2]
 8007a28:	400b      	ands	r3, r1
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	611a      	str	r2, [r3, #16]
}
 8007a30:	bf00      	nop
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bc80      	pop	{r7}
 8007a38:	4770      	bx	lr
	...

08007a3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e12b      	b.n	8007ca6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d106      	bne.n	8007a68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7fe fbf2 	bl	800624c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2224      	movs	r2, #36	; 0x24
 8007a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0201 	bic.w	r2, r2, #1
 8007a7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007aa0:	f001 fb86 	bl	80091b0 <HAL_RCC_GetPCLK1Freq>
 8007aa4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	4a81      	ldr	r2, [pc, #516]	; (8007cb0 <HAL_I2C_Init+0x274>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d807      	bhi.n	8007ac0 <HAL_I2C_Init+0x84>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4a80      	ldr	r2, [pc, #512]	; (8007cb4 <HAL_I2C_Init+0x278>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	bf94      	ite	ls
 8007ab8:	2301      	movls	r3, #1
 8007aba:	2300      	movhi	r3, #0
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	e006      	b.n	8007ace <HAL_I2C_Init+0x92>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4a7d      	ldr	r2, [pc, #500]	; (8007cb8 <HAL_I2C_Init+0x27c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	bf94      	ite	ls
 8007ac8:	2301      	movls	r3, #1
 8007aca:	2300      	movhi	r3, #0
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e0e7      	b.n	8007ca6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	4a78      	ldr	r2, [pc, #480]	; (8007cbc <HAL_I2C_Init+0x280>)
 8007ada:	fba2 2303 	umull	r2, r3, r2, r3
 8007ade:	0c9b      	lsrs	r3, r3, #18
 8007ae0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	4a6a      	ldr	r2, [pc, #424]	; (8007cb0 <HAL_I2C_Init+0x274>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d802      	bhi.n	8007b10 <HAL_I2C_Init+0xd4>
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	e009      	b.n	8007b24 <HAL_I2C_Init+0xe8>
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007b16:	fb02 f303 	mul.w	r3, r2, r3
 8007b1a:	4a69      	ldr	r2, [pc, #420]	; (8007cc0 <HAL_I2C_Init+0x284>)
 8007b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b20:	099b      	lsrs	r3, r3, #6
 8007b22:	3301      	adds	r3, #1
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	6812      	ldr	r2, [r2, #0]
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007b36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	495c      	ldr	r1, [pc, #368]	; (8007cb0 <HAL_I2C_Init+0x274>)
 8007b40:	428b      	cmp	r3, r1
 8007b42:	d819      	bhi.n	8007b78 <HAL_I2C_Init+0x13c>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	1e59      	subs	r1, r3, #1
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b52:	1c59      	adds	r1, r3, #1
 8007b54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007b58:	400b      	ands	r3, r1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <HAL_I2C_Init+0x138>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	1e59      	subs	r1, r3, #1
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b72:	e051      	b.n	8007c18 <HAL_I2C_Init+0x1dc>
 8007b74:	2304      	movs	r3, #4
 8007b76:	e04f      	b.n	8007c18 <HAL_I2C_Init+0x1dc>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d111      	bne.n	8007ba4 <HAL_I2C_Init+0x168>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	1e58      	subs	r0, r3, #1
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6859      	ldr	r1, [r3, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	005b      	lsls	r3, r3, #1
 8007b8c:	440b      	add	r3, r1
 8007b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b92:	3301      	adds	r3, #1
 8007b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	bf0c      	ite	eq
 8007b9c:	2301      	moveq	r3, #1
 8007b9e:	2300      	movne	r3, #0
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	e012      	b.n	8007bca <HAL_I2C_Init+0x18e>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	1e58      	subs	r0, r3, #1
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6859      	ldr	r1, [r3, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	440b      	add	r3, r1
 8007bb2:	0099      	lsls	r1, r3, #2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007bba:	3301      	adds	r3, #1
 8007bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	bf0c      	ite	eq
 8007bc4:	2301      	moveq	r3, #1
 8007bc6:	2300      	movne	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <HAL_I2C_Init+0x196>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e022      	b.n	8007c18 <HAL_I2C_Init+0x1dc>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10e      	bne.n	8007bf8 <HAL_I2C_Init+0x1bc>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	1e58      	subs	r0, r3, #1
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6859      	ldr	r1, [r3, #4]
 8007be2:	460b      	mov	r3, r1
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	440b      	add	r3, r1
 8007be8:	fbb0 f3f3 	udiv	r3, r0, r3
 8007bec:	3301      	adds	r3, #1
 8007bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf6:	e00f      	b.n	8007c18 <HAL_I2C_Init+0x1dc>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	1e58      	subs	r0, r3, #1
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6859      	ldr	r1, [r3, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	440b      	add	r3, r1
 8007c06:	0099      	lsls	r1, r3, #2
 8007c08:	440b      	add	r3, r1
 8007c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c0e:	3301      	adds	r3, #1
 8007c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c18:	6879      	ldr	r1, [r7, #4]
 8007c1a:	6809      	ldr	r1, [r1, #0]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	69da      	ldr	r2, [r3, #28]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	431a      	orrs	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007c46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	6911      	ldr	r1, [r2, #16]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	68d2      	ldr	r2, [r2, #12]
 8007c52:	4311      	orrs	r1, r2
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	6812      	ldr	r2, [r2, #0]
 8007c58:	430b      	orrs	r3, r1
 8007c5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	695a      	ldr	r2, [r3, #20]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	431a      	orrs	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f042 0201 	orr.w	r2, r2, #1
 8007c86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2220      	movs	r2, #32
 8007c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	000186a0 	.word	0x000186a0
 8007cb4:	001e847f 	.word	0x001e847f
 8007cb8:	003d08ff 	.word	0x003d08ff
 8007cbc:	431bde83 	.word	0x431bde83
 8007cc0:	10624dd3 	.word	0x10624dd3

08007cc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b088      	sub	sp, #32
 8007cc8:	af02      	add	r7, sp, #8
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	607a      	str	r2, [r7, #4]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	817b      	strh	r3, [r7, #10]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007cd8:	f7ff f94e 	bl	8006f78 <HAL_GetTick>
 8007cdc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b20      	cmp	r3, #32
 8007ce8:	f040 80e0 	bne.w	8007eac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	2319      	movs	r3, #25
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	4970      	ldr	r1, [pc, #448]	; (8007eb8 <HAL_I2C_Master_Transmit+0x1f4>)
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f000 fcaa 	bl	8008650 <I2C_WaitOnFlagUntilTimeout>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007d02:	2302      	movs	r3, #2
 8007d04:	e0d3      	b.n	8007eae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d101      	bne.n	8007d14 <HAL_I2C_Master_Transmit+0x50>
 8007d10:	2302      	movs	r3, #2
 8007d12:	e0cc      	b.n	8007eae <HAL_I2C_Master_Transmit+0x1ea>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d007      	beq.n	8007d3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f042 0201 	orr.w	r2, r2, #1
 8007d38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2221      	movs	r2, #33	; 0x21
 8007d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2210      	movs	r2, #16
 8007d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	893a      	ldrh	r2, [r7, #8]
 8007d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	4a50      	ldr	r2, [pc, #320]	; (8007ebc <HAL_I2C_Master_Transmit+0x1f8>)
 8007d7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007d7c:	8979      	ldrh	r1, [r7, #10]
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	6a3a      	ldr	r2, [r7, #32]
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f000 fb14 	bl	80083b0 <I2C_MasterRequestWrite>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e08d      	b.n	8007eae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d92:	2300      	movs	r3, #0
 8007d94:	613b      	str	r3, [r7, #16]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	613b      	str	r3, [r7, #16]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	613b      	str	r3, [r7, #16]
 8007da6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007da8:	e066      	b.n	8007e78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	6a39      	ldr	r1, [r7, #32]
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f000 fd24 	bl	80087fc <I2C_WaitOnTXEFlagUntilTimeout>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00d      	beq.n	8007dd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbe:	2b04      	cmp	r3, #4
 8007dc0:	d107      	bne.n	8007dd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e06b      	b.n	8007eae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dda:	781a      	ldrb	r2, [r3, #0]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de6:	1c5a      	adds	r2, r3, #1
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	f003 0304 	and.w	r3, r3, #4
 8007e10:	2b04      	cmp	r3, #4
 8007e12:	d11b      	bne.n	8007e4c <HAL_I2C_Master_Transmit+0x188>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d017      	beq.n	8007e4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	781a      	ldrb	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e44:	3b01      	subs	r3, #1
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	6a39      	ldr	r1, [r7, #32]
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 fd14 	bl	800887e <I2C_WaitOnBTFFlagUntilTimeout>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00d      	beq.n	8007e78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e60:	2b04      	cmp	r3, #4
 8007e62:	d107      	bne.n	8007e74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e01a      	b.n	8007eae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d194      	bne.n	8007daa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2220      	movs	r2, #32
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	e000      	b.n	8007eae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007eac:	2302      	movs	r3, #2
  }
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	00100002 	.word	0x00100002
 8007ebc:	ffff0000 	.word	0xffff0000

08007ec0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08c      	sub	sp, #48	; 0x30
 8007ec4:	af02      	add	r7, sp, #8
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	607a      	str	r2, [r7, #4]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	460b      	mov	r3, r1
 8007ece:	817b      	strh	r3, [r7, #10]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ed8:	f7ff f84e 	bl	8006f78 <HAL_GetTick>
 8007edc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b20      	cmp	r3, #32
 8007ee8:	f040 823f 	bne.w	800836a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	2319      	movs	r3, #25
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	497f      	ldr	r1, [pc, #508]	; (80080f4 <HAL_I2C_Master_Receive+0x234>)
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f000 fbaa 	bl	8008650 <I2C_WaitOnFlagUntilTimeout>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8007f02:	2302      	movs	r3, #2
 8007f04:	e232      	b.n	800836c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d101      	bne.n	8007f14 <HAL_I2C_Master_Receive+0x54>
 8007f10:	2302      	movs	r3, #2
 8007f12:	e22b      	b.n	800836c <HAL_I2C_Master_Receive+0x4ac>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d007      	beq.n	8007f3a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f042 0201 	orr.w	r2, r2, #1
 8007f38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2222      	movs	r2, #34	; 0x22
 8007f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2210      	movs	r2, #16
 8007f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	893a      	ldrh	r2, [r7, #8]
 8007f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	4a5f      	ldr	r2, [pc, #380]	; (80080f8 <HAL_I2C_Master_Receive+0x238>)
 8007f7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007f7c:	8979      	ldrh	r1, [r7, #10]
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 fa96 	bl	80084b4 <I2C_MasterRequestRead>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e1ec      	b.n	800836c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d113      	bne.n	8007fc2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	61fb      	str	r3, [r7, #28]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	695b      	ldr	r3, [r3, #20]
 8007fa4:	61fb      	str	r3, [r7, #28]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	61fb      	str	r3, [r7, #28]
 8007fae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fbe:	601a      	str	r2, [r3, #0]
 8007fc0:	e1c0      	b.n	8008344 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d11e      	bne.n	8008008 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fd8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007fda:	b672      	cpsid	i
}
 8007fdc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fde:	2300      	movs	r3, #0
 8007fe0:	61bb      	str	r3, [r7, #24]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	695b      	ldr	r3, [r3, #20]
 8007fe8:	61bb      	str	r3, [r7, #24]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	61bb      	str	r3, [r7, #24]
 8007ff2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008002:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008004:	b662      	cpsie	i
}
 8008006:	e035      	b.n	8008074 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800800c:	2b02      	cmp	r3, #2
 800800e:	d11e      	bne.n	800804e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800801e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008020:	b672      	cpsid	i
}
 8008022:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008024:	2300      	movs	r3, #0
 8008026:	617b      	str	r3, [r7, #20]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	617b      	str	r3, [r7, #20]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	617b      	str	r3, [r7, #20]
 8008038:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008048:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800804a:	b662      	cpsie	i
}
 800804c:	e012      	b.n	8008074 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800805c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800805e:	2300      	movs	r3, #0
 8008060:	613b      	str	r3, [r7, #16]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	613b      	str	r3, [r7, #16]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	613b      	str	r3, [r7, #16]
 8008072:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008074:	e166      	b.n	8008344 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800807a:	2b03      	cmp	r3, #3
 800807c:	f200 811f 	bhi.w	80082be <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008084:	2b01      	cmp	r3, #1
 8008086:	d123      	bne.n	80080d0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800808a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f000 fc37 	bl	8008900 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e167      	b.n	800836c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	691a      	ldr	r2, [r3, #16]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	b2d2      	uxtb	r2, r2
 80080a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080b8:	3b01      	subs	r3, #1
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	3b01      	subs	r3, #1
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080ce:	e139      	b.n	8008344 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d152      	bne.n	800817e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	2200      	movs	r2, #0
 80080e0:	4906      	ldr	r1, [pc, #24]	; (80080fc <HAL_I2C_Master_Receive+0x23c>)
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 fab4 	bl	8008650 <I2C_WaitOnFlagUntilTimeout>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d008      	beq.n	8008100 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e13c      	b.n	800836c <HAL_I2C_Master_Receive+0x4ac>
 80080f2:	bf00      	nop
 80080f4:	00100002 	.word	0x00100002
 80080f8:	ffff0000 	.word	0xffff0000
 80080fc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008100:	b672      	cpsid	i
}
 8008102:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008112:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	691a      	ldr	r2, [r3, #16]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	b2d2      	uxtb	r2, r2
 8008120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	1c5a      	adds	r2, r3, #1
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008130:	3b01      	subs	r3, #1
 8008132:	b29a      	uxth	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800813c:	b29b      	uxth	r3, r3
 800813e:	3b01      	subs	r3, #1
 8008140:	b29a      	uxth	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008146:	b662      	cpsie	i
}
 8008148:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	691a      	ldr	r2, [r3, #16]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008154:	b2d2      	uxtb	r2, r2
 8008156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	1c5a      	adds	r2, r3, #1
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008166:	3b01      	subs	r3, #1
 8008168:	b29a      	uxth	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008172:	b29b      	uxth	r3, r3
 8008174:	3b01      	subs	r3, #1
 8008176:	b29a      	uxth	r2, r3
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800817c:	e0e2      	b.n	8008344 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	2200      	movs	r2, #0
 8008186:	497b      	ldr	r1, [pc, #492]	; (8008374 <HAL_I2C_Master_Receive+0x4b4>)
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 fa61 	bl	8008650 <I2C_WaitOnFlagUntilTimeout>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e0e9      	b.n	800836c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80081a8:	b672      	cpsid	i
}
 80081aa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	691a      	ldr	r2, [r3, #16]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	b2d2      	uxtb	r2, r2
 80081b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081be:	1c5a      	adds	r2, r3, #1
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c8:	3b01      	subs	r3, #1
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	3b01      	subs	r3, #1
 80081d8:	b29a      	uxth	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80081de:	4b66      	ldr	r3, [pc, #408]	; (8008378 <HAL_I2C_Master_Receive+0x4b8>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	08db      	lsrs	r3, r3, #3
 80081e4:	4a65      	ldr	r2, [pc, #404]	; (800837c <HAL_I2C_Master_Receive+0x4bc>)
 80081e6:	fba2 2303 	umull	r2, r3, r2, r3
 80081ea:	0a1a      	lsrs	r2, r3, #8
 80081ec:	4613      	mov	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4413      	add	r3, r2
 80081f2:	00da      	lsls	r2, r3, #3
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	3b01      	subs	r3, #1
 80081fc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d118      	bne.n	8008236 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2220      	movs	r2, #32
 800820e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	f043 0220 	orr.w	r2, r3, #32
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008226:	b662      	cpsie	i
}
 8008228:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e09a      	b.n	800836c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b04      	cmp	r3, #4
 8008242:	d1d9      	bne.n	80081f8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	691a      	ldr	r2, [r3, #16]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825e:	b2d2      	uxtb	r2, r2
 8008260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008270:	3b01      	subs	r3, #1
 8008272:	b29a      	uxth	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800827c:	b29b      	uxth	r3, r3
 800827e:	3b01      	subs	r3, #1
 8008280:	b29a      	uxth	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008286:	b662      	cpsie	i
}
 8008288:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	691a      	ldr	r2, [r3, #16]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008294:	b2d2      	uxtb	r2, r2
 8008296:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829c:	1c5a      	adds	r2, r3, #1
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082a6:	3b01      	subs	r3, #1
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	3b01      	subs	r3, #1
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80082bc:	e042      	b.n	8008344 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 fb1c 	bl	8008900 <I2C_WaitOnRXNEFlagUntilTimeout>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e04c      	b.n	800836c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	691a      	ldr	r2, [r3, #16]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082dc:	b2d2      	uxtb	r2, r2
 80082de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	1c5a      	adds	r2, r3, #1
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ee:	3b01      	subs	r3, #1
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	3b01      	subs	r3, #1
 80082fe:	b29a      	uxth	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	f003 0304 	and.w	r3, r3, #4
 800830e:	2b04      	cmp	r3, #4
 8008310:	d118      	bne.n	8008344 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	691a      	ldr	r2, [r3, #16]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831c:	b2d2      	uxtb	r2, r2
 800831e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008324:	1c5a      	adds	r2, r3, #1
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800832e:	3b01      	subs	r3, #1
 8008330:	b29a      	uxth	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800833a:	b29b      	uxth	r3, r3
 800833c:	3b01      	subs	r3, #1
 800833e:	b29a      	uxth	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008348:	2b00      	cmp	r3, #0
 800834a:	f47f ae94 	bne.w	8008076 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2220      	movs	r2, #32
 8008352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	e000      	b.n	800836c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800836a:	2302      	movs	r3, #2
  }
}
 800836c:	4618      	mov	r0, r3
 800836e:	3728      	adds	r7, #40	; 0x28
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	00010004 	.word	0x00010004
 8008378:	20000020 	.word	0x20000020
 800837c:	14f8b589 	.word	0x14f8b589

08008380 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800838e:	b2db      	uxtb	r3, r3
}
 8008390:	4618      	mov	r0, r3
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	bc80      	pop	{r7}
 8008398:	4770      	bx	lr

0800839a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800839a:	b480      	push	{r7}
 800839c:	b083      	sub	sp, #12
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bc80      	pop	{r7}
 80083ae:	4770      	bx	lr

080083b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	607a      	str	r2, [r7, #4]
 80083ba:	603b      	str	r3, [r7, #0]
 80083bc:	460b      	mov	r3, r1
 80083be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d006      	beq.n	80083da <I2C_MasterRequestWrite+0x2a>
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d003      	beq.n	80083da <I2C_MasterRequestWrite+0x2a>
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80083d8:	d108      	bne.n	80083ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083e8:	601a      	str	r2, [r3, #0]
 80083ea:	e00b      	b.n	8008404 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f0:	2b12      	cmp	r3, #18
 80083f2:	d107      	bne.n	8008404 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008402:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f000 f91d 	bl	8008650 <I2C_WaitOnFlagUntilTimeout>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00d      	beq.n	8008438 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800842a:	d103      	bne.n	8008434 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008432:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e035      	b.n	80084a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008440:	d108      	bne.n	8008454 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008442:	897b      	ldrh	r3, [r7, #10]
 8008444:	b2db      	uxtb	r3, r3
 8008446:	461a      	mov	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008450:	611a      	str	r2, [r3, #16]
 8008452:	e01b      	b.n	800848c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008454:	897b      	ldrh	r3, [r7, #10]
 8008456:	11db      	asrs	r3, r3, #7
 8008458:	b2db      	uxtb	r3, r3
 800845a:	f003 0306 	and.w	r3, r3, #6
 800845e:	b2db      	uxtb	r3, r3
 8008460:	f063 030f 	orn	r3, r3, #15
 8008464:	b2da      	uxtb	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	490e      	ldr	r1, [pc, #56]	; (80084ac <I2C_MasterRequestWrite+0xfc>)
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f000 f943 	bl	80086fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e010      	b.n	80084a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008482:	897b      	ldrh	r3, [r7, #10]
 8008484:	b2da      	uxtb	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	4907      	ldr	r1, [pc, #28]	; (80084b0 <I2C_MasterRequestWrite+0x100>)
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 f933 	bl	80086fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e000      	b.n	80084a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	00010008 	.word	0x00010008
 80084b0:	00010002 	.word	0x00010002

080084b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af02      	add	r7, sp, #8
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	607a      	str	r2, [r7, #4]
 80084be:	603b      	str	r3, [r7, #0]
 80084c0:	460b      	mov	r3, r1
 80084c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	2b08      	cmp	r3, #8
 80084de:	d006      	beq.n	80084ee <I2C_MasterRequestRead+0x3a>
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d003      	beq.n	80084ee <I2C_MasterRequestRead+0x3a>
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80084ec:	d108      	bne.n	8008500 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	e00b      	b.n	8008518 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008504:	2b11      	cmp	r3, #17
 8008506:	d107      	bne.n	8008518 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008516:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f000 f893 	bl	8008650 <I2C_WaitOnFlagUntilTimeout>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00d      	beq.n	800854c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800853a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800853e:	d103      	bne.n	8008548 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008546:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e079      	b.n	8008640 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008554:	d108      	bne.n	8008568 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008556:	897b      	ldrh	r3, [r7, #10]
 8008558:	b2db      	uxtb	r3, r3
 800855a:	f043 0301 	orr.w	r3, r3, #1
 800855e:	b2da      	uxtb	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	611a      	str	r2, [r3, #16]
 8008566:	e05f      	b.n	8008628 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008568:	897b      	ldrh	r3, [r7, #10]
 800856a:	11db      	asrs	r3, r3, #7
 800856c:	b2db      	uxtb	r3, r3
 800856e:	f003 0306 	and.w	r3, r3, #6
 8008572:	b2db      	uxtb	r3, r3
 8008574:	f063 030f 	orn	r3, r3, #15
 8008578:	b2da      	uxtb	r2, r3
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	4930      	ldr	r1, [pc, #192]	; (8008648 <I2C_MasterRequestRead+0x194>)
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f000 f8b9 	bl	80086fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e054      	b.n	8008640 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008596:	897b      	ldrh	r3, [r7, #10]
 8008598:	b2da      	uxtb	r2, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	4929      	ldr	r1, [pc, #164]	; (800864c <I2C_MasterRequestRead+0x198>)
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f000 f8a9 	bl	80086fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e044      	b.n	8008640 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085b6:	2300      	movs	r3, #0
 80085b8:	613b      	str	r3, [r7, #16]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	695b      	ldr	r3, [r3, #20]
 80085c0:	613b      	str	r3, [r7, #16]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	613b      	str	r3, [r7, #16]
 80085ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f000 f831 	bl	8008650 <I2C_WaitOnFlagUntilTimeout>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00d      	beq.n	8008610 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008602:	d103      	bne.n	800860c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800860a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800860c:	2303      	movs	r3, #3
 800860e:	e017      	b.n	8008640 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008610:	897b      	ldrh	r3, [r7, #10]
 8008612:	11db      	asrs	r3, r3, #7
 8008614:	b2db      	uxtb	r3, r3
 8008616:	f003 0306 	and.w	r3, r3, #6
 800861a:	b2db      	uxtb	r3, r3
 800861c:	f063 030e 	orn	r3, r3, #14
 8008620:	b2da      	uxtb	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	4907      	ldr	r1, [pc, #28]	; (800864c <I2C_MasterRequestRead+0x198>)
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f000 f865 	bl	80086fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e000      	b.n	8008640 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3718      	adds	r7, #24
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	00010008 	.word	0x00010008
 800864c:	00010002 	.word	0x00010002

08008650 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	603b      	str	r3, [r7, #0]
 800865c:	4613      	mov	r3, r2
 800865e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008660:	e025      	b.n	80086ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008668:	d021      	beq.n	80086ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800866a:	f7fe fc85 	bl	8006f78 <HAL_GetTick>
 800866e:	4602      	mov	r2, r0
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	683a      	ldr	r2, [r7, #0]
 8008676:	429a      	cmp	r2, r3
 8008678:	d302      	bcc.n	8008680 <I2C_WaitOnFlagUntilTimeout+0x30>
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d116      	bne.n	80086ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2220      	movs	r2, #32
 800868a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	f043 0220 	orr.w	r2, r3, #32
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e023      	b.n	80086f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	0c1b      	lsrs	r3, r3, #16
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d10d      	bne.n	80086d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	43da      	mvns	r2, r3
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	4013      	ands	r3, r2
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	bf0c      	ite	eq
 80086ca:	2301      	moveq	r3, #1
 80086cc:	2300      	movne	r3, #0
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	461a      	mov	r2, r3
 80086d2:	e00c      	b.n	80086ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	43da      	mvns	r2, r3
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	4013      	ands	r3, r2
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	bf0c      	ite	eq
 80086e6:	2301      	moveq	r3, #1
 80086e8:	2300      	movne	r3, #0
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	461a      	mov	r2, r3
 80086ee:	79fb      	ldrb	r3, [r7, #7]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d0b6      	beq.n	8008662 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	60f8      	str	r0, [r7, #12]
 8008706:	60b9      	str	r1, [r7, #8]
 8008708:	607a      	str	r2, [r7, #4]
 800870a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800870c:	e051      	b.n	80087b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800871c:	d123      	bne.n	8008766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800872c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008736:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2220      	movs	r2, #32
 8008742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008752:	f043 0204 	orr.w	r2, r3, #4
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e046      	b.n	80087f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876c:	d021      	beq.n	80087b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800876e:	f7fe fc03 	bl	8006f78 <HAL_GetTick>
 8008772:	4602      	mov	r2, r0
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	429a      	cmp	r2, r3
 800877c:	d302      	bcc.n	8008784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d116      	bne.n	80087b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2220      	movs	r2, #32
 800878e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879e:	f043 0220 	orr.w	r2, r3, #32
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e020      	b.n	80087f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	0c1b      	lsrs	r3, r3, #16
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d10c      	bne.n	80087d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	43da      	mvns	r2, r3
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	4013      	ands	r3, r2
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	bf14      	ite	ne
 80087ce:	2301      	movne	r3, #1
 80087d0:	2300      	moveq	r3, #0
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	e00b      	b.n	80087ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	43da      	mvns	r2, r3
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	4013      	ands	r3, r2
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	bf14      	ite	ne
 80087e8:	2301      	movne	r3, #1
 80087ea:	2300      	moveq	r3, #0
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d18d      	bne.n	800870e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008808:	e02d      	b.n	8008866 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f000 f8ce 	bl	80089ac <I2C_IsAcknowledgeFailed>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e02d      	b.n	8008876 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008820:	d021      	beq.n	8008866 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008822:	f7fe fba9 	bl	8006f78 <HAL_GetTick>
 8008826:	4602      	mov	r2, r0
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	429a      	cmp	r2, r3
 8008830:	d302      	bcc.n	8008838 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d116      	bne.n	8008866 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2220      	movs	r2, #32
 8008842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008852:	f043 0220 	orr.w	r2, r3, #32
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e007      	b.n	8008876 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008870:	2b80      	cmp	r3, #128	; 0x80
 8008872:	d1ca      	bne.n	800880a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	60f8      	str	r0, [r7, #12]
 8008886:	60b9      	str	r1, [r7, #8]
 8008888:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800888a:	e02d      	b.n	80088e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 f88d 	bl	80089ac <I2C_IsAcknowledgeFailed>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e02d      	b.n	80088f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a2:	d021      	beq.n	80088e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088a4:	f7fe fb68 	bl	8006f78 <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d302      	bcc.n	80088ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d116      	bne.n	80088e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2220      	movs	r2, #32
 80088c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d4:	f043 0220 	orr.w	r2, r3, #32
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e007      	b.n	80088f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	f003 0304 	and.w	r3, r3, #4
 80088f2:	2b04      	cmp	r3, #4
 80088f4:	d1ca      	bne.n	800888c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800890c:	e042      	b.n	8008994 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	695b      	ldr	r3, [r3, #20]
 8008914:	f003 0310 	and.w	r3, r3, #16
 8008918:	2b10      	cmp	r3, #16
 800891a:	d119      	bne.n	8008950 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f06f 0210 	mvn.w	r2, #16
 8008924:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2220      	movs	r2, #32
 8008930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e029      	b.n	80089a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008950:	f7fe fb12 	bl	8006f78 <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	429a      	cmp	r2, r3
 800895e:	d302      	bcc.n	8008966 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d116      	bne.n	8008994 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2220      	movs	r2, #32
 8008970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008980:	f043 0220 	orr.w	r2, r3, #32
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e007      	b.n	80089a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800899e:	2b40      	cmp	r3, #64	; 0x40
 80089a0:	d1b5      	bne.n	800890e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089c2:	d11b      	bne.n	80089fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80089cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2220      	movs	r2, #32
 80089d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e8:	f043 0204 	orr.w	r2, r3, #4
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e000      	b.n	80089fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	370c      	adds	r7, #12
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bc80      	pop	{r7}
 8008a06:	4770      	bx	lr

08008a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e26c      	b.n	8008ef4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 8087 	beq.w	8008b36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a28:	4b92      	ldr	r3, [pc, #584]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	f003 030c 	and.w	r3, r3, #12
 8008a30:	2b04      	cmp	r3, #4
 8008a32:	d00c      	beq.n	8008a4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008a34:	4b8f      	ldr	r3, [pc, #572]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	f003 030c 	and.w	r3, r3, #12
 8008a3c:	2b08      	cmp	r3, #8
 8008a3e:	d112      	bne.n	8008a66 <HAL_RCC_OscConfig+0x5e>
 8008a40:	4b8c      	ldr	r3, [pc, #560]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a4c:	d10b      	bne.n	8008a66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a4e:	4b89      	ldr	r3, [pc, #548]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d06c      	beq.n	8008b34 <HAL_RCC_OscConfig+0x12c>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d168      	bne.n	8008b34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e246      	b.n	8008ef4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a6e:	d106      	bne.n	8008a7e <HAL_RCC_OscConfig+0x76>
 8008a70:	4b80      	ldr	r3, [pc, #512]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a7f      	ldr	r2, [pc, #508]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a7a:	6013      	str	r3, [r2, #0]
 8008a7c:	e02e      	b.n	8008adc <HAL_RCC_OscConfig+0xd4>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10c      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x98>
 8008a86:	4b7b      	ldr	r3, [pc, #492]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a7a      	ldr	r2, [pc, #488]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a90:	6013      	str	r3, [r2, #0]
 8008a92:	4b78      	ldr	r3, [pc, #480]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a77      	ldr	r2, [pc, #476]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a9c:	6013      	str	r3, [r2, #0]
 8008a9e:	e01d      	b.n	8008adc <HAL_RCC_OscConfig+0xd4>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008aa8:	d10c      	bne.n	8008ac4 <HAL_RCC_OscConfig+0xbc>
 8008aaa:	4b72      	ldr	r3, [pc, #456]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a71      	ldr	r2, [pc, #452]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ab4:	6013      	str	r3, [r2, #0]
 8008ab6:	4b6f      	ldr	r3, [pc, #444]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a6e      	ldr	r2, [pc, #440]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ac0:	6013      	str	r3, [r2, #0]
 8008ac2:	e00b      	b.n	8008adc <HAL_RCC_OscConfig+0xd4>
 8008ac4:	4b6b      	ldr	r3, [pc, #428]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a6a      	ldr	r2, [pc, #424]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	4b68      	ldr	r3, [pc, #416]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a67      	ldr	r2, [pc, #412]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ada:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d013      	beq.n	8008b0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ae4:	f7fe fa48 	bl	8006f78 <HAL_GetTick>
 8008ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008aea:	e008      	b.n	8008afe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008aec:	f7fe fa44 	bl	8006f78 <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	2b64      	cmp	r3, #100	; 0x64
 8008af8:	d901      	bls.n	8008afe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e1fa      	b.n	8008ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008afe:	4b5d      	ldr	r3, [pc, #372]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d0f0      	beq.n	8008aec <HAL_RCC_OscConfig+0xe4>
 8008b0a:	e014      	b.n	8008b36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b0c:	f7fe fa34 	bl	8006f78 <HAL_GetTick>
 8008b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b12:	e008      	b.n	8008b26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b14:	f7fe fa30 	bl	8006f78 <HAL_GetTick>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	2b64      	cmp	r3, #100	; 0x64
 8008b20:	d901      	bls.n	8008b26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008b22:	2303      	movs	r3, #3
 8008b24:	e1e6      	b.n	8008ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b26:	4b53      	ldr	r3, [pc, #332]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1f0      	bne.n	8008b14 <HAL_RCC_OscConfig+0x10c>
 8008b32:	e000      	b.n	8008b36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 0302 	and.w	r3, r3, #2
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d063      	beq.n	8008c0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b42:	4b4c      	ldr	r3, [pc, #304]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	f003 030c 	and.w	r3, r3, #12
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00b      	beq.n	8008b66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008b4e:	4b49      	ldr	r3, [pc, #292]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f003 030c 	and.w	r3, r3, #12
 8008b56:	2b08      	cmp	r3, #8
 8008b58:	d11c      	bne.n	8008b94 <HAL_RCC_OscConfig+0x18c>
 8008b5a:	4b46      	ldr	r3, [pc, #280]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d116      	bne.n	8008b94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b66:	4b43      	ldr	r3, [pc, #268]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0302 	and.w	r3, r3, #2
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d005      	beq.n	8008b7e <HAL_RCC_OscConfig+0x176>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d001      	beq.n	8008b7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e1ba      	b.n	8008ef4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b7e:	4b3d      	ldr	r3, [pc, #244]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	695b      	ldr	r3, [r3, #20]
 8008b8a:	00db      	lsls	r3, r3, #3
 8008b8c:	4939      	ldr	r1, [pc, #228]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b92:	e03a      	b.n	8008c0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d020      	beq.n	8008bde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b9c:	4b36      	ldr	r3, [pc, #216]	; (8008c78 <HAL_RCC_OscConfig+0x270>)
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ba2:	f7fe f9e9 	bl	8006f78 <HAL_GetTick>
 8008ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ba8:	e008      	b.n	8008bbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008baa:	f7fe f9e5 	bl	8006f78 <HAL_GetTick>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d901      	bls.n	8008bbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e19b      	b.n	8008ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bbc:	4b2d      	ldr	r3, [pc, #180]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0302 	and.w	r3, r3, #2
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d0f0      	beq.n	8008baa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bc8:	4b2a      	ldr	r3, [pc, #168]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	695b      	ldr	r3, [r3, #20]
 8008bd4:	00db      	lsls	r3, r3, #3
 8008bd6:	4927      	ldr	r1, [pc, #156]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	600b      	str	r3, [r1, #0]
 8008bdc:	e015      	b.n	8008c0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bde:	4b26      	ldr	r3, [pc, #152]	; (8008c78 <HAL_RCC_OscConfig+0x270>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008be4:	f7fe f9c8 	bl	8006f78 <HAL_GetTick>
 8008be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bea:	e008      	b.n	8008bfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bec:	f7fe f9c4 	bl	8006f78 <HAL_GetTick>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d901      	bls.n	8008bfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e17a      	b.n	8008ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bfe:	4b1d      	ldr	r3, [pc, #116]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 0302 	and.w	r3, r3, #2
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1f0      	bne.n	8008bec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0308 	and.w	r3, r3, #8
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d03a      	beq.n	8008c8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d019      	beq.n	8008c52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c1e:	4b17      	ldr	r3, [pc, #92]	; (8008c7c <HAL_RCC_OscConfig+0x274>)
 8008c20:	2201      	movs	r2, #1
 8008c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c24:	f7fe f9a8 	bl	8006f78 <HAL_GetTick>
 8008c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c2a:	e008      	b.n	8008c3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c2c:	f7fe f9a4 	bl	8006f78 <HAL_GetTick>
 8008c30:	4602      	mov	r2, r0
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d901      	bls.n	8008c3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e15a      	b.n	8008ef4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c3e:	4b0d      	ldr	r3, [pc, #52]	; (8008c74 <HAL_RCC_OscConfig+0x26c>)
 8008c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c42:	f003 0302 	and.w	r3, r3, #2
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0f0      	beq.n	8008c2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008c4a:	2001      	movs	r0, #1
 8008c4c:	f000 fb08 	bl	8009260 <RCC_Delay>
 8008c50:	e01c      	b.n	8008c8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c52:	4b0a      	ldr	r3, [pc, #40]	; (8008c7c <HAL_RCC_OscConfig+0x274>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c58:	f7fe f98e 	bl	8006f78 <HAL_GetTick>
 8008c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c5e:	e00f      	b.n	8008c80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c60:	f7fe f98a 	bl	8006f78 <HAL_GetTick>
 8008c64:	4602      	mov	r2, r0
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	1ad3      	subs	r3, r2, r3
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d908      	bls.n	8008c80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e140      	b.n	8008ef4 <HAL_RCC_OscConfig+0x4ec>
 8008c72:	bf00      	nop
 8008c74:	40021000 	.word	0x40021000
 8008c78:	42420000 	.word	0x42420000
 8008c7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c80:	4b9e      	ldr	r3, [pc, #632]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	f003 0302 	and.w	r3, r3, #2
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1e9      	bne.n	8008c60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f000 80a6 	beq.w	8008de6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c9e:	4b97      	ldr	r3, [pc, #604]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008ca0:	69db      	ldr	r3, [r3, #28]
 8008ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10d      	bne.n	8008cc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008caa:	4b94      	ldr	r3, [pc, #592]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008cac:	69db      	ldr	r3, [r3, #28]
 8008cae:	4a93      	ldr	r2, [pc, #588]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cb4:	61d3      	str	r3, [r2, #28]
 8008cb6:	4b91      	ldr	r3, [pc, #580]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cbe:	60bb      	str	r3, [r7, #8]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cc6:	4b8e      	ldr	r3, [pc, #568]	; (8008f00 <HAL_RCC_OscConfig+0x4f8>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d118      	bne.n	8008d04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008cd2:	4b8b      	ldr	r3, [pc, #556]	; (8008f00 <HAL_RCC_OscConfig+0x4f8>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a8a      	ldr	r2, [pc, #552]	; (8008f00 <HAL_RCC_OscConfig+0x4f8>)
 8008cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cde:	f7fe f94b 	bl	8006f78 <HAL_GetTick>
 8008ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ce4:	e008      	b.n	8008cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ce6:	f7fe f947 	bl	8006f78 <HAL_GetTick>
 8008cea:	4602      	mov	r2, r0
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	2b64      	cmp	r3, #100	; 0x64
 8008cf2:	d901      	bls.n	8008cf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	e0fd      	b.n	8008ef4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cf8:	4b81      	ldr	r3, [pc, #516]	; (8008f00 <HAL_RCC_OscConfig+0x4f8>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d0f0      	beq.n	8008ce6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d106      	bne.n	8008d1a <HAL_RCC_OscConfig+0x312>
 8008d0c:	4b7b      	ldr	r3, [pc, #492]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008d0e:	6a1b      	ldr	r3, [r3, #32]
 8008d10:	4a7a      	ldr	r2, [pc, #488]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008d12:	f043 0301 	orr.w	r3, r3, #1
 8008d16:	6213      	str	r3, [r2, #32]
 8008d18:	e02d      	b.n	8008d76 <HAL_RCC_OscConfig+0x36e>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10c      	bne.n	8008d3c <HAL_RCC_OscConfig+0x334>
 8008d22:	4b76      	ldr	r3, [pc, #472]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008d24:	6a1b      	ldr	r3, [r3, #32]
 8008d26:	4a75      	ldr	r2, [pc, #468]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008d28:	f023 0301 	bic.w	r3, r3, #1
 8008d2c:	6213      	str	r3, [r2, #32]
 8008d2e:	4b73      	ldr	r3, [pc, #460]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	4a72      	ldr	r2, [pc, #456]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008d34:	f023 0304 	bic.w	r3, r3, #4
 8008d38:	6213      	str	r3, [r2, #32]
 8008d3a:	e01c      	b.n	8008d76 <HAL_RCC_OscConfig+0x36e>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	2b05      	cmp	r3, #5
 8008d42:	d10c      	bne.n	8008d5e <HAL_RCC_OscConfig+0x356>
 8008d44:	4b6d      	ldr	r3, [pc, #436]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008d46:	6a1b      	ldr	r3, [r3, #32]
 8008d48:	4a6c      	ldr	r2, [pc, #432]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008d4a:	f043 0304 	orr.w	r3, r3, #4
 8008d4e:	6213      	str	r3, [r2, #32]
 8008d50:	4b6a      	ldr	r3, [pc, #424]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008d52:	6a1b      	ldr	r3, [r3, #32]
 8008d54:	4a69      	ldr	r2, [pc, #420]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008d56:	f043 0301 	orr.w	r3, r3, #1
 8008d5a:	6213      	str	r3, [r2, #32]
 8008d5c:	e00b      	b.n	8008d76 <HAL_RCC_OscConfig+0x36e>
 8008d5e:	4b67      	ldr	r3, [pc, #412]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	4a66      	ldr	r2, [pc, #408]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008d64:	f023 0301 	bic.w	r3, r3, #1
 8008d68:	6213      	str	r3, [r2, #32]
 8008d6a:	4b64      	ldr	r3, [pc, #400]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	4a63      	ldr	r2, [pc, #396]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008d70:	f023 0304 	bic.w	r3, r3, #4
 8008d74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d015      	beq.n	8008daa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d7e:	f7fe f8fb 	bl	8006f78 <HAL_GetTick>
 8008d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d84:	e00a      	b.n	8008d9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d86:	f7fe f8f7 	bl	8006f78 <HAL_GetTick>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d901      	bls.n	8008d9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	e0ab      	b.n	8008ef4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d9c:	4b57      	ldr	r3, [pc, #348]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008d9e:	6a1b      	ldr	r3, [r3, #32]
 8008da0:	f003 0302 	and.w	r3, r3, #2
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d0ee      	beq.n	8008d86 <HAL_RCC_OscConfig+0x37e>
 8008da8:	e014      	b.n	8008dd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008daa:	f7fe f8e5 	bl	8006f78 <HAL_GetTick>
 8008dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008db0:	e00a      	b.n	8008dc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008db2:	f7fe f8e1 	bl	8006f78 <HAL_GetTick>
 8008db6:	4602      	mov	r2, r0
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d901      	bls.n	8008dc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e095      	b.n	8008ef4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dc8:	4b4c      	ldr	r3, [pc, #304]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008dca:	6a1b      	ldr	r3, [r3, #32]
 8008dcc:	f003 0302 	and.w	r3, r3, #2
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1ee      	bne.n	8008db2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008dd4:	7dfb      	ldrb	r3, [r7, #23]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d105      	bne.n	8008de6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dda:	4b48      	ldr	r3, [pc, #288]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008ddc:	69db      	ldr	r3, [r3, #28]
 8008dde:	4a47      	ldr	r2, [pc, #284]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008de4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f000 8081 	beq.w	8008ef2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008df0:	4b42      	ldr	r3, [pc, #264]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	f003 030c 	and.w	r3, r3, #12
 8008df8:	2b08      	cmp	r3, #8
 8008dfa:	d061      	beq.n	8008ec0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	69db      	ldr	r3, [r3, #28]
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d146      	bne.n	8008e92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e04:	4b3f      	ldr	r3, [pc, #252]	; (8008f04 <HAL_RCC_OscConfig+0x4fc>)
 8008e06:	2200      	movs	r2, #0
 8008e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e0a:	f7fe f8b5 	bl	8006f78 <HAL_GetTick>
 8008e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e10:	e008      	b.n	8008e24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e12:	f7fe f8b1 	bl	8006f78 <HAL_GetTick>
 8008e16:	4602      	mov	r2, r0
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d901      	bls.n	8008e24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e067      	b.n	8008ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e24:	4b35      	ldr	r3, [pc, #212]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1f0      	bne.n	8008e12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a1b      	ldr	r3, [r3, #32]
 8008e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e38:	d108      	bne.n	8008e4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008e3a:	4b30      	ldr	r3, [pc, #192]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	492d      	ldr	r1, [pc, #180]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e4c:	4b2b      	ldr	r3, [pc, #172]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a19      	ldr	r1, [r3, #32]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5c:	430b      	orrs	r3, r1
 8008e5e:	4927      	ldr	r1, [pc, #156]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008e60:	4313      	orrs	r3, r2
 8008e62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e64:	4b27      	ldr	r3, [pc, #156]	; (8008f04 <HAL_RCC_OscConfig+0x4fc>)
 8008e66:	2201      	movs	r2, #1
 8008e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e6a:	f7fe f885 	bl	8006f78 <HAL_GetTick>
 8008e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008e70:	e008      	b.n	8008e84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e72:	f7fe f881 	bl	8006f78 <HAL_GetTick>
 8008e76:	4602      	mov	r2, r0
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d901      	bls.n	8008e84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e037      	b.n	8008ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008e84:	4b1d      	ldr	r3, [pc, #116]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d0f0      	beq.n	8008e72 <HAL_RCC_OscConfig+0x46a>
 8008e90:	e02f      	b.n	8008ef2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e92:	4b1c      	ldr	r3, [pc, #112]	; (8008f04 <HAL_RCC_OscConfig+0x4fc>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e98:	f7fe f86e 	bl	8006f78 <HAL_GetTick>
 8008e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e9e:	e008      	b.n	8008eb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ea0:	f7fe f86a 	bl	8006f78 <HAL_GetTick>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d901      	bls.n	8008eb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e020      	b.n	8008ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008eb2:	4b12      	ldr	r3, [pc, #72]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1f0      	bne.n	8008ea0 <HAL_RCC_OscConfig+0x498>
 8008ebe:	e018      	b.n	8008ef2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	69db      	ldr	r3, [r3, #28]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d101      	bne.n	8008ecc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e013      	b.n	8008ef4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008ecc:	4b0b      	ldr	r3, [pc, #44]	; (8008efc <HAL_RCC_OscConfig+0x4f4>)
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d106      	bne.n	8008eee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d001      	beq.n	8008ef2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e000      	b.n	8008ef4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3718      	adds	r7, #24
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	40021000 	.word	0x40021000
 8008f00:	40007000 	.word	0x40007000
 8008f04:	42420060 	.word	0x42420060

08008f08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d101      	bne.n	8008f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e0d0      	b.n	80090be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f1c:	4b6a      	ldr	r3, [pc, #424]	; (80090c8 <HAL_RCC_ClockConfig+0x1c0>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 0307 	and.w	r3, r3, #7
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d910      	bls.n	8008f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f2a:	4b67      	ldr	r3, [pc, #412]	; (80090c8 <HAL_RCC_ClockConfig+0x1c0>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f023 0207 	bic.w	r2, r3, #7
 8008f32:	4965      	ldr	r1, [pc, #404]	; (80090c8 <HAL_RCC_ClockConfig+0x1c0>)
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f3a:	4b63      	ldr	r3, [pc, #396]	; (80090c8 <HAL_RCC_ClockConfig+0x1c0>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 0307 	and.w	r3, r3, #7
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d001      	beq.n	8008f4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e0b8      	b.n	80090be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0302 	and.w	r3, r3, #2
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d020      	beq.n	8008f9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 0304 	and.w	r3, r3, #4
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d005      	beq.n	8008f70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f64:	4b59      	ldr	r3, [pc, #356]	; (80090cc <HAL_RCC_ClockConfig+0x1c4>)
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	4a58      	ldr	r2, [pc, #352]	; (80090cc <HAL_RCC_ClockConfig+0x1c4>)
 8008f6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008f6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0308 	and.w	r3, r3, #8
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d005      	beq.n	8008f88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008f7c:	4b53      	ldr	r3, [pc, #332]	; (80090cc <HAL_RCC_ClockConfig+0x1c4>)
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	4a52      	ldr	r2, [pc, #328]	; (80090cc <HAL_RCC_ClockConfig+0x1c4>)
 8008f82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008f86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f88:	4b50      	ldr	r3, [pc, #320]	; (80090cc <HAL_RCC_ClockConfig+0x1c4>)
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	494d      	ldr	r1, [pc, #308]	; (80090cc <HAL_RCC_ClockConfig+0x1c4>)
 8008f96:	4313      	orrs	r3, r2
 8008f98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d040      	beq.n	8009028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d107      	bne.n	8008fbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fae:	4b47      	ldr	r3, [pc, #284]	; (80090cc <HAL_RCC_ClockConfig+0x1c4>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d115      	bne.n	8008fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e07f      	b.n	80090be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d107      	bne.n	8008fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fc6:	4b41      	ldr	r3, [pc, #260]	; (80090cc <HAL_RCC_ClockConfig+0x1c4>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d109      	bne.n	8008fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e073      	b.n	80090be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fd6:	4b3d      	ldr	r3, [pc, #244]	; (80090cc <HAL_RCC_ClockConfig+0x1c4>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0302 	and.w	r3, r3, #2
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d101      	bne.n	8008fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e06b      	b.n	80090be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008fe6:	4b39      	ldr	r3, [pc, #228]	; (80090cc <HAL_RCC_ClockConfig+0x1c4>)
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f023 0203 	bic.w	r2, r3, #3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	4936      	ldr	r1, [pc, #216]	; (80090cc <HAL_RCC_ClockConfig+0x1c4>)
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ff8:	f7fd ffbe 	bl	8006f78 <HAL_GetTick>
 8008ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ffe:	e00a      	b.n	8009016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009000:	f7fd ffba 	bl	8006f78 <HAL_GetTick>
 8009004:	4602      	mov	r2, r0
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	f241 3288 	movw	r2, #5000	; 0x1388
 800900e:	4293      	cmp	r3, r2
 8009010:	d901      	bls.n	8009016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009012:	2303      	movs	r3, #3
 8009014:	e053      	b.n	80090be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009016:	4b2d      	ldr	r3, [pc, #180]	; (80090cc <HAL_RCC_ClockConfig+0x1c4>)
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	f003 020c 	and.w	r2, r3, #12
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	429a      	cmp	r2, r3
 8009026:	d1eb      	bne.n	8009000 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009028:	4b27      	ldr	r3, [pc, #156]	; (80090c8 <HAL_RCC_ClockConfig+0x1c0>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0307 	and.w	r3, r3, #7
 8009030:	683a      	ldr	r2, [r7, #0]
 8009032:	429a      	cmp	r2, r3
 8009034:	d210      	bcs.n	8009058 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009036:	4b24      	ldr	r3, [pc, #144]	; (80090c8 <HAL_RCC_ClockConfig+0x1c0>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f023 0207 	bic.w	r2, r3, #7
 800903e:	4922      	ldr	r1, [pc, #136]	; (80090c8 <HAL_RCC_ClockConfig+0x1c0>)
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	4313      	orrs	r3, r2
 8009044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009046:	4b20      	ldr	r3, [pc, #128]	; (80090c8 <HAL_RCC_ClockConfig+0x1c0>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0307 	and.w	r3, r3, #7
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	429a      	cmp	r2, r3
 8009052:	d001      	beq.n	8009058 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e032      	b.n	80090be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0304 	and.w	r3, r3, #4
 8009060:	2b00      	cmp	r3, #0
 8009062:	d008      	beq.n	8009076 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009064:	4b19      	ldr	r3, [pc, #100]	; (80090cc <HAL_RCC_ClockConfig+0x1c4>)
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	4916      	ldr	r1, [pc, #88]	; (80090cc <HAL_RCC_ClockConfig+0x1c4>)
 8009072:	4313      	orrs	r3, r2
 8009074:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 0308 	and.w	r3, r3, #8
 800907e:	2b00      	cmp	r3, #0
 8009080:	d009      	beq.n	8009096 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009082:	4b12      	ldr	r3, [pc, #72]	; (80090cc <HAL_RCC_ClockConfig+0x1c4>)
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	00db      	lsls	r3, r3, #3
 8009090:	490e      	ldr	r1, [pc, #56]	; (80090cc <HAL_RCC_ClockConfig+0x1c4>)
 8009092:	4313      	orrs	r3, r2
 8009094:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009096:	f000 f821 	bl	80090dc <HAL_RCC_GetSysClockFreq>
 800909a:	4602      	mov	r2, r0
 800909c:	4b0b      	ldr	r3, [pc, #44]	; (80090cc <HAL_RCC_ClockConfig+0x1c4>)
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	091b      	lsrs	r3, r3, #4
 80090a2:	f003 030f 	and.w	r3, r3, #15
 80090a6:	490a      	ldr	r1, [pc, #40]	; (80090d0 <HAL_RCC_ClockConfig+0x1c8>)
 80090a8:	5ccb      	ldrb	r3, [r1, r3]
 80090aa:	fa22 f303 	lsr.w	r3, r2, r3
 80090ae:	4a09      	ldr	r2, [pc, #36]	; (80090d4 <HAL_RCC_ClockConfig+0x1cc>)
 80090b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80090b2:	4b09      	ldr	r3, [pc, #36]	; (80090d8 <HAL_RCC_ClockConfig+0x1d0>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fd fa3e 	bl	8006538 <HAL_InitTick>

  return HAL_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	40022000 	.word	0x40022000
 80090cc:	40021000 	.word	0x40021000
 80090d0:	0800bf2c 	.word	0x0800bf2c
 80090d4:	20000020 	.word	0x20000020
 80090d8:	20000028 	.word	0x20000028

080090dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090dc:	b490      	push	{r4, r7}
 80090de:	b08a      	sub	sp, #40	; 0x28
 80090e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80090e2:	4b2a      	ldr	r3, [pc, #168]	; (800918c <HAL_RCC_GetSysClockFreq+0xb0>)
 80090e4:	1d3c      	adds	r4, r7, #4
 80090e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80090e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80090ec:	f240 2301 	movw	r3, #513	; 0x201
 80090f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80090f2:	2300      	movs	r3, #0
 80090f4:	61fb      	str	r3, [r7, #28]
 80090f6:	2300      	movs	r3, #0
 80090f8:	61bb      	str	r3, [r7, #24]
 80090fa:	2300      	movs	r3, #0
 80090fc:	627b      	str	r3, [r7, #36]	; 0x24
 80090fe:	2300      	movs	r3, #0
 8009100:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009102:	2300      	movs	r3, #0
 8009104:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009106:	4b22      	ldr	r3, [pc, #136]	; (8009190 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	f003 030c 	and.w	r3, r3, #12
 8009112:	2b04      	cmp	r3, #4
 8009114:	d002      	beq.n	800911c <HAL_RCC_GetSysClockFreq+0x40>
 8009116:	2b08      	cmp	r3, #8
 8009118:	d003      	beq.n	8009122 <HAL_RCC_GetSysClockFreq+0x46>
 800911a:	e02d      	b.n	8009178 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800911c:	4b1d      	ldr	r3, [pc, #116]	; (8009194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800911e:	623b      	str	r3, [r7, #32]
      break;
 8009120:	e02d      	b.n	800917e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	0c9b      	lsrs	r3, r3, #18
 8009126:	f003 030f 	and.w	r3, r3, #15
 800912a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800912e:	4413      	add	r3, r2
 8009130:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009134:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d013      	beq.n	8009168 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009140:	4b13      	ldr	r3, [pc, #76]	; (8009190 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	0c5b      	lsrs	r3, r3, #17
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800914e:	4413      	add	r3, r2
 8009150:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009154:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	4a0e      	ldr	r2, [pc, #56]	; (8009194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800915a:	fb02 f203 	mul.w	r2, r2, r3
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	fbb2 f3f3 	udiv	r3, r2, r3
 8009164:	627b      	str	r3, [r7, #36]	; 0x24
 8009166:	e004      	b.n	8009172 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	4a0b      	ldr	r2, [pc, #44]	; (8009198 <HAL_RCC_GetSysClockFreq+0xbc>)
 800916c:	fb02 f303 	mul.w	r3, r2, r3
 8009170:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8009172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009174:	623b      	str	r3, [r7, #32]
      break;
 8009176:	e002      	b.n	800917e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009178:	4b06      	ldr	r3, [pc, #24]	; (8009194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800917a:	623b      	str	r3, [r7, #32]
      break;
 800917c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800917e:	6a3b      	ldr	r3, [r7, #32]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3728      	adds	r7, #40	; 0x28
 8009184:	46bd      	mov	sp, r7
 8009186:	bc90      	pop	{r4, r7}
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	0800bd94 	.word	0x0800bd94
 8009190:	40021000 	.word	0x40021000
 8009194:	007a1200 	.word	0x007a1200
 8009198:	003d0900 	.word	0x003d0900

0800919c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800919c:	b480      	push	{r7}
 800919e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091a0:	4b02      	ldr	r3, [pc, #8]	; (80091ac <HAL_RCC_GetHCLKFreq+0x10>)
 80091a2:	681b      	ldr	r3, [r3, #0]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bc80      	pop	{r7}
 80091aa:	4770      	bx	lr
 80091ac:	20000020 	.word	0x20000020

080091b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80091b4:	f7ff fff2 	bl	800919c <HAL_RCC_GetHCLKFreq>
 80091b8:	4602      	mov	r2, r0
 80091ba:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	0a1b      	lsrs	r3, r3, #8
 80091c0:	f003 0307 	and.w	r3, r3, #7
 80091c4:	4903      	ldr	r1, [pc, #12]	; (80091d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80091c6:	5ccb      	ldrb	r3, [r1, r3]
 80091c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	40021000 	.word	0x40021000
 80091d4:	0800bf3c 	.word	0x0800bf3c

080091d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80091dc:	f7ff ffde 	bl	800919c <HAL_RCC_GetHCLKFreq>
 80091e0:	4602      	mov	r2, r0
 80091e2:	4b05      	ldr	r3, [pc, #20]	; (80091f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	0adb      	lsrs	r3, r3, #11
 80091e8:	f003 0307 	and.w	r3, r3, #7
 80091ec:	4903      	ldr	r1, [pc, #12]	; (80091fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80091ee:	5ccb      	ldrb	r3, [r1, r3]
 80091f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	40021000 	.word	0x40021000
 80091fc:	0800bf3c 	.word	0x0800bf3c

08009200 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	220f      	movs	r2, #15
 800920e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009210:	4b11      	ldr	r3, [pc, #68]	; (8009258 <HAL_RCC_GetClockConfig+0x58>)
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f003 0203 	and.w	r2, r3, #3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800921c:	4b0e      	ldr	r3, [pc, #56]	; (8009258 <HAL_RCC_GetClockConfig+0x58>)
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009228:	4b0b      	ldr	r3, [pc, #44]	; (8009258 <HAL_RCC_GetClockConfig+0x58>)
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009234:	4b08      	ldr	r3, [pc, #32]	; (8009258 <HAL_RCC_GetClockConfig+0x58>)
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	08db      	lsrs	r3, r3, #3
 800923a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009242:	4b06      	ldr	r3, [pc, #24]	; (800925c <HAL_RCC_GetClockConfig+0x5c>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0207 	and.w	r2, r3, #7
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800924e:	bf00      	nop
 8009250:	370c      	adds	r7, #12
 8009252:	46bd      	mov	sp, r7
 8009254:	bc80      	pop	{r7}
 8009256:	4770      	bx	lr
 8009258:	40021000 	.word	0x40021000
 800925c:	40022000 	.word	0x40022000

08009260 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009268:	4b0a      	ldr	r3, [pc, #40]	; (8009294 <RCC_Delay+0x34>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a0a      	ldr	r2, [pc, #40]	; (8009298 <RCC_Delay+0x38>)
 800926e:	fba2 2303 	umull	r2, r3, r2, r3
 8009272:	0a5b      	lsrs	r3, r3, #9
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	fb02 f303 	mul.w	r3, r2, r3
 800927a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800927c:	bf00      	nop
  }
  while (Delay --);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	1e5a      	subs	r2, r3, #1
 8009282:	60fa      	str	r2, [r7, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1f9      	bne.n	800927c <RCC_Delay+0x1c>
}
 8009288:	bf00      	nop
 800928a:	bf00      	nop
 800928c:	3714      	adds	r7, #20
 800928e:	46bd      	mov	sp, r7
 8009290:	bc80      	pop	{r7}
 8009292:	4770      	bx	lr
 8009294:	20000020 	.word	0x20000020
 8009298:	10624dd3 	.word	0x10624dd3

0800929c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e041      	b.n	8009332 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d106      	bne.n	80092c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f839 	bl	800933a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2202      	movs	r2, #2
 80092cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	3304      	adds	r3, #4
 80092d8:	4619      	mov	r1, r3
 80092da:	4610      	mov	r0, r2
 80092dc:	f000 f9b4 	bl	8009648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800933a:	b480      	push	{r7}
 800933c:	b083      	sub	sp, #12
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009342:	bf00      	nop
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	bc80      	pop	{r7}
 800934a:	4770      	bx	lr

0800934c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800935a:	b2db      	uxtb	r3, r3
 800935c:	2b01      	cmp	r3, #1
 800935e:	d001      	beq.n	8009364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e03a      	b.n	80093da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2202      	movs	r2, #2
 8009368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68da      	ldr	r2, [r3, #12]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f042 0201 	orr.w	r2, r2, #1
 800937a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a18      	ldr	r2, [pc, #96]	; (80093e4 <HAL_TIM_Base_Start_IT+0x98>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d00e      	beq.n	80093a4 <HAL_TIM_Base_Start_IT+0x58>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800938e:	d009      	beq.n	80093a4 <HAL_TIM_Base_Start_IT+0x58>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a14      	ldr	r2, [pc, #80]	; (80093e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d004      	beq.n	80093a4 <HAL_TIM_Base_Start_IT+0x58>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a13      	ldr	r2, [pc, #76]	; (80093ec <HAL_TIM_Base_Start_IT+0xa0>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d111      	bne.n	80093c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	f003 0307 	and.w	r3, r3, #7
 80093ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2b06      	cmp	r3, #6
 80093b4:	d010      	beq.n	80093d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f042 0201 	orr.w	r2, r2, #1
 80093c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093c6:	e007      	b.n	80093d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f042 0201 	orr.w	r2, r2, #1
 80093d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3714      	adds	r7, #20
 80093de:	46bd      	mov	sp, r7
 80093e0:	bc80      	pop	{r7}
 80093e2:	4770      	bx	lr
 80093e4:	40012c00 	.word	0x40012c00
 80093e8:	40000400 	.word	0x40000400
 80093ec:	40000800 	.word	0x40000800

080093f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	f003 0302 	and.w	r3, r3, #2
 8009402:	2b02      	cmp	r3, #2
 8009404:	d122      	bne.n	800944c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	f003 0302 	and.w	r3, r3, #2
 8009410:	2b02      	cmp	r3, #2
 8009412:	d11b      	bne.n	800944c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f06f 0202 	mvn.w	r2, #2
 800941c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2201      	movs	r2, #1
 8009422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	f003 0303 	and.w	r3, r3, #3
 800942e:	2b00      	cmp	r3, #0
 8009430:	d003      	beq.n	800943a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f8ed 	bl	8009612 <HAL_TIM_IC_CaptureCallback>
 8009438:	e005      	b.n	8009446 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f8e0 	bl	8009600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 f8ef 	bl	8009624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	f003 0304 	and.w	r3, r3, #4
 8009456:	2b04      	cmp	r3, #4
 8009458:	d122      	bne.n	80094a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	f003 0304 	and.w	r3, r3, #4
 8009464:	2b04      	cmp	r3, #4
 8009466:	d11b      	bne.n	80094a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f06f 0204 	mvn.w	r2, #4
 8009470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2202      	movs	r2, #2
 8009476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009482:	2b00      	cmp	r3, #0
 8009484:	d003      	beq.n	800948e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f8c3 	bl	8009612 <HAL_TIM_IC_CaptureCallback>
 800948c:	e005      	b.n	800949a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f8b6 	bl	8009600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f8c5 	bl	8009624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	f003 0308 	and.w	r3, r3, #8
 80094aa:	2b08      	cmp	r3, #8
 80094ac:	d122      	bne.n	80094f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	f003 0308 	and.w	r3, r3, #8
 80094b8:	2b08      	cmp	r3, #8
 80094ba:	d11b      	bne.n	80094f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f06f 0208 	mvn.w	r2, #8
 80094c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2204      	movs	r2, #4
 80094ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	69db      	ldr	r3, [r3, #28]
 80094d2:	f003 0303 	and.w	r3, r3, #3
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d003      	beq.n	80094e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f899 	bl	8009612 <HAL_TIM_IC_CaptureCallback>
 80094e0:	e005      	b.n	80094ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f88c 	bl	8009600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f89b 	bl	8009624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	f003 0310 	and.w	r3, r3, #16
 80094fe:	2b10      	cmp	r3, #16
 8009500:	d122      	bne.n	8009548 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	f003 0310 	and.w	r3, r3, #16
 800950c:	2b10      	cmp	r3, #16
 800950e:	d11b      	bne.n	8009548 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f06f 0210 	mvn.w	r2, #16
 8009518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2208      	movs	r2, #8
 800951e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800952a:	2b00      	cmp	r3, #0
 800952c:	d003      	beq.n	8009536 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f86f 	bl	8009612 <HAL_TIM_IC_CaptureCallback>
 8009534:	e005      	b.n	8009542 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f862 	bl	8009600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f871 	bl	8009624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	2b01      	cmp	r3, #1
 8009554:	d10e      	bne.n	8009574 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	2b01      	cmp	r3, #1
 8009562:	d107      	bne.n	8009574 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f06f 0201 	mvn.w	r2, #1
 800956c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7f8 f80a 	bl	8001588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800957e:	2b80      	cmp	r3, #128	; 0x80
 8009580:	d10e      	bne.n	80095a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800958c:	2b80      	cmp	r3, #128	; 0x80
 800958e:	d107      	bne.n	80095a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f8bf 	bl	800971e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095aa:	2b40      	cmp	r3, #64	; 0x40
 80095ac:	d10e      	bne.n	80095cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b8:	2b40      	cmp	r3, #64	; 0x40
 80095ba:	d107      	bne.n	80095cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f835 	bl	8009636 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	691b      	ldr	r3, [r3, #16]
 80095d2:	f003 0320 	and.w	r3, r3, #32
 80095d6:	2b20      	cmp	r3, #32
 80095d8:	d10e      	bne.n	80095f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	f003 0320 	and.w	r3, r3, #32
 80095e4:	2b20      	cmp	r3, #32
 80095e6:	d107      	bne.n	80095f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f06f 0220 	mvn.w	r2, #32
 80095f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f88a 	bl	800970c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095f8:	bf00      	nop
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	bc80      	pop	{r7}
 8009610:	4770      	bx	lr

08009612 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009612:	b480      	push	{r7}
 8009614:	b083      	sub	sp, #12
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800961a:	bf00      	nop
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	bc80      	pop	{r7}
 8009622:	4770      	bx	lr

08009624 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	bc80      	pop	{r7}
 8009634:	4770      	bx	lr

08009636 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009636:	b480      	push	{r7}
 8009638:	b083      	sub	sp, #12
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800963e:	bf00      	nop
 8009640:	370c      	adds	r7, #12
 8009642:	46bd      	mov	sp, r7
 8009644:	bc80      	pop	{r7}
 8009646:	4770      	bx	lr

08009648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a29      	ldr	r2, [pc, #164]	; (8009700 <TIM_Base_SetConfig+0xb8>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d00b      	beq.n	8009678 <TIM_Base_SetConfig+0x30>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009666:	d007      	beq.n	8009678 <TIM_Base_SetConfig+0x30>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a26      	ldr	r2, [pc, #152]	; (8009704 <TIM_Base_SetConfig+0xbc>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d003      	beq.n	8009678 <TIM_Base_SetConfig+0x30>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a25      	ldr	r2, [pc, #148]	; (8009708 <TIM_Base_SetConfig+0xc0>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d108      	bne.n	800968a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800967e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	4313      	orrs	r3, r2
 8009688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a1c      	ldr	r2, [pc, #112]	; (8009700 <TIM_Base_SetConfig+0xb8>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d00b      	beq.n	80096aa <TIM_Base_SetConfig+0x62>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009698:	d007      	beq.n	80096aa <TIM_Base_SetConfig+0x62>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a19      	ldr	r2, [pc, #100]	; (8009704 <TIM_Base_SetConfig+0xbc>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d003      	beq.n	80096aa <TIM_Base_SetConfig+0x62>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a18      	ldr	r2, [pc, #96]	; (8009708 <TIM_Base_SetConfig+0xc0>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d108      	bne.n	80096bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	689a      	ldr	r2, [r3, #8]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a07      	ldr	r2, [pc, #28]	; (8009700 <TIM_Base_SetConfig+0xb8>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d103      	bne.n	80096f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	691a      	ldr	r2, [r3, #16]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	615a      	str	r2, [r3, #20]
}
 80096f6:	bf00      	nop
 80096f8:	3714      	adds	r7, #20
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bc80      	pop	{r7}
 80096fe:	4770      	bx	lr
 8009700:	40012c00 	.word	0x40012c00
 8009704:	40000400 	.word	0x40000400
 8009708:	40000800 	.word	0x40000800

0800970c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	bc80      	pop	{r7}
 800971c:	4770      	bx	lr

0800971e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800971e:	b480      	push	{r7}
 8009720:	b083      	sub	sp, #12
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009726:	bf00      	nop
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	bc80      	pop	{r7}
 800972e:	4770      	bx	lr

08009730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d101      	bne.n	8009742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e03f      	b.n	80097c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b00      	cmp	r3, #0
 800974c:	d106      	bne.n	800975c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7fc fdb6 	bl	80062c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2224      	movs	r2, #36	; 0x24
 8009760:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68da      	ldr	r2, [r3, #12]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fe13 	bl	800a3a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	691a      	ldr	r2, [r3, #16]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	695a      	ldr	r2, [r3, #20]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68da      	ldr	r2, [r3, #12]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80097a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2220      	movs	r2, #32
 80097b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2220      	movs	r2, #32
 80097bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b082      	sub	sp, #8
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d101      	bne.n	80097dc <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	e047      	b.n	800986c <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d106      	bne.n	80097f6 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7fc fd69 	bl	80062c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2224      	movs	r2, #36	; 0x24
 80097fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68da      	ldr	r2, [r3, #12]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800980c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fdc6 	bl	800a3a0 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	691a      	ldr	r2, [r3, #16]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009822:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	695a      	ldr	r2, [r3, #20]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8009832:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	695a      	ldr	r2, [r3, #20]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f042 0208 	orr.w	r2, r2, #8
 8009842:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68da      	ldr	r2, [r3, #12]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009852:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2220      	movs	r2, #32
 800985e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2220      	movs	r2, #32
 8009866:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08a      	sub	sp, #40	; 0x28
 8009878:	af02      	add	r7, sp, #8
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	603b      	str	r3, [r7, #0]
 8009880:	4613      	mov	r3, r2
 8009882:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009884:	2300      	movs	r3, #0
 8009886:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b20      	cmp	r3, #32
 8009892:	d17c      	bne.n	800998e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d002      	beq.n	80098a0 <HAL_UART_Transmit+0x2c>
 800989a:	88fb      	ldrh	r3, [r7, #6]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e075      	b.n	8009990 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d101      	bne.n	80098b2 <HAL_UART_Transmit+0x3e>
 80098ae:	2302      	movs	r3, #2
 80098b0:	e06e      	b.n	8009990 <HAL_UART_Transmit+0x11c>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2221      	movs	r2, #33	; 0x21
 80098c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80098c8:	f7fd fb56 	bl	8006f78 <HAL_GetTick>
 80098cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	88fa      	ldrh	r2, [r7, #6]
 80098d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	88fa      	ldrh	r2, [r7, #6]
 80098d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098e2:	d108      	bne.n	80098f6 <HAL_UART_Transmit+0x82>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d104      	bne.n	80098f6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80098ec:	2300      	movs	r3, #0
 80098ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	61bb      	str	r3, [r7, #24]
 80098f4:	e003      	b.n	80098fe <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80098fa:	2300      	movs	r3, #0
 80098fc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8009906:	e02a      	b.n	800995e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	2200      	movs	r2, #0
 8009910:	2180      	movs	r1, #128	; 0x80
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f000 fbcc 	bl	800a0b0 <UART_WaitOnFlagUntilTimeout>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800991e:	2303      	movs	r3, #3
 8009920:	e036      	b.n	8009990 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10b      	bne.n	8009940 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	881b      	ldrh	r3, [r3, #0]
 800992c:	461a      	mov	r2, r3
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009936:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	3302      	adds	r3, #2
 800993c:	61bb      	str	r3, [r7, #24]
 800993e:	e007      	b.n	8009950 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	781a      	ldrb	r2, [r3, #0]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	3301      	adds	r3, #1
 800994e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009954:	b29b      	uxth	r3, r3
 8009956:	3b01      	subs	r3, #1
 8009958:	b29a      	uxth	r2, r3
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009962:	b29b      	uxth	r3, r3
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1cf      	bne.n	8009908 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	2200      	movs	r2, #0
 8009970:	2140      	movs	r1, #64	; 0x40
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 fb9c 	bl	800a0b0 <UART_WaitOnFlagUntilTimeout>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800997e:	2303      	movs	r3, #3
 8009980:	e006      	b.n	8009990 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2220      	movs	r2, #32
 8009986:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800998a:	2300      	movs	r3, #0
 800998c:	e000      	b.n	8009990 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800998e:	2302      	movs	r3, #2
  }
}
 8009990:	4618      	mov	r0, r3
 8009992:	3720      	adds	r7, #32
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	4613      	mov	r3, r2
 80099a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	2b20      	cmp	r3, #32
 80099b0:	d153      	bne.n	8009a5a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <HAL_UART_Transmit_DMA+0x26>
 80099b8:	88fb      	ldrh	r3, [r7, #6]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d101      	bne.n	80099c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e04c      	b.n	8009a5c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d101      	bne.n	80099d0 <HAL_UART_Transmit_DMA+0x38>
 80099cc:	2302      	movs	r3, #2
 80099ce:	e045      	b.n	8009a5c <HAL_UART_Transmit_DMA+0xc4>
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	88fa      	ldrh	r2, [r7, #6]
 80099e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	88fa      	ldrh	r2, [r7, #6]
 80099e8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2221      	movs	r2, #33	; 0x21
 80099f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fc:	4a19      	ldr	r2, [pc, #100]	; (8009a64 <HAL_UART_Transmit_DMA+0xcc>)
 80099fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a04:	4a18      	ldr	r2, [pc, #96]	; (8009a68 <HAL_UART_Transmit_DMA+0xd0>)
 8009a06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a0c:	4a17      	ldr	r2, [pc, #92]	; (8009a6c <HAL_UART_Transmit_DMA+0xd4>)
 8009a0e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a14:	2200      	movs	r2, #0
 8009a16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8009a18:	f107 0308 	add.w	r3, r7, #8
 8009a1c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	6819      	ldr	r1, [r3, #0]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3304      	adds	r3, #4
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	88fb      	ldrh	r3, [r7, #6]
 8009a30:	f7fd fc0a 	bl	8007248 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a3c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	695a      	ldr	r2, [r3, #20]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009a54:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	e000      	b.n	8009a5c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8009a5a:	2302      	movs	r3, #2
  }
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3718      	adds	r7, #24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	08009f2b 	.word	0x08009f2b
 8009a68:	08009f7d 	.word	0x08009f7d
 8009a6c:	0800a01d 	.word	0x0800a01d

08009a70 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b20      	cmp	r3, #32
 8009a88:	d166      	bne.n	8009b58 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d002      	beq.n	8009a96 <HAL_UART_Receive_DMA+0x26>
 8009a90:	88fb      	ldrh	r3, [r7, #6]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d101      	bne.n	8009a9a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e05f      	b.n	8009b5a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d101      	bne.n	8009aa8 <HAL_UART_Receive_DMA+0x38>
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	e058      	b.n	8009b5a <HAL_UART_Receive_DMA+0xea>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009ab0:	68ba      	ldr	r2, [r7, #8]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	88fa      	ldrh	r2, [r7, #6]
 8009aba:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2222      	movs	r2, #34	; 0x22
 8009ac6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ace:	4a25      	ldr	r2, [pc, #148]	; (8009b64 <HAL_UART_Receive_DMA+0xf4>)
 8009ad0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ad6:	4a24      	ldr	r2, [pc, #144]	; (8009b68 <HAL_UART_Receive_DMA+0xf8>)
 8009ad8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ade:	4a23      	ldr	r2, [pc, #140]	; (8009b6c <HAL_UART_Receive_DMA+0xfc>)
 8009ae0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8009aea:	f107 0308 	add.w	r3, r7, #8
 8009aee:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3304      	adds	r3, #4
 8009afa:	4619      	mov	r1, r3
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	88fb      	ldrh	r3, [r7, #6]
 8009b02:	f7fd fba1 	bl	8007248 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8009b06:	2300      	movs	r3, #0
 8009b08:	613b      	str	r3, [r7, #16]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	613b      	str	r3, [r7, #16]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	613b      	str	r3, [r7, #16]
 8009b1a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68da      	ldr	r2, [r3, #12]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b32:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	695a      	ldr	r2, [r3, #20]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f042 0201 	orr.w	r2, r2, #1
 8009b42:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	695a      	ldr	r2, [r3, #20]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b52:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	e000      	b.n	8009b5a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009b58:	2302      	movs	r3, #2
  }
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3718      	adds	r7, #24
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	08009f99 	.word	0x08009f99
 8009b68:	0800a001 	.word	0x0800a001
 8009b6c:	0800a01d 	.word	0x0800a01d

08009b70 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	695b      	ldr	r3, [r3, #20]
 8009b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	bf14      	ite	ne
 8009b8a:	2301      	movne	r3, #1
 8009b8c:	2300      	moveq	r3, #0
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b21      	cmp	r3, #33	; 0x21
 8009b9c:	d116      	bne.n	8009bcc <HAL_UART_DMAStop+0x5c>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d013      	beq.n	8009bcc <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	695a      	ldr	r2, [r3, #20]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009bb2:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d004      	beq.n	8009bc6 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7fd fba0 	bl	8007306 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fabc 	bl	800a144 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	695b      	ldr	r3, [r3, #20]
 8009bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	bf14      	ite	ne
 8009bda:	2301      	movne	r3, #1
 8009bdc:	2300      	moveq	r3, #0
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	2b22      	cmp	r3, #34	; 0x22
 8009bec:	d116      	bne.n	8009c1c <HAL_UART_DMAStop+0xac>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d013      	beq.n	8009c1c <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	695a      	ldr	r2, [r3, #20]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c02:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d004      	beq.n	8009c16 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7fd fb78 	bl	8007306 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 faa9 	bl	800a16e <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
	...

08009c28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b088      	sub	sp, #32
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	695b      	ldr	r3, [r3, #20]
 8009c46:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	f003 030f 	and.w	r3, r3, #15
 8009c56:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10d      	bne.n	8009c7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	f003 0320 	and.w	r3, r3, #32
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d008      	beq.n	8009c7a <HAL_UART_IRQHandler+0x52>
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	f003 0320 	and.w	r3, r3, #32
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fb13 	bl	800a29e <UART_Receive_IT>
      return;
 8009c78:	e0d0      	b.n	8009e1c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f000 80b0 	beq.w	8009de2 <HAL_UART_IRQHandler+0x1ba>
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	f003 0301 	and.w	r3, r3, #1
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d105      	bne.n	8009c98 <HAL_UART_IRQHandler+0x70>
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f000 80a5 	beq.w	8009de2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00a      	beq.n	8009cb8 <HAL_UART_IRQHandler+0x90>
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d005      	beq.n	8009cb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cb0:	f043 0201 	orr.w	r2, r3, #1
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	f003 0304 	and.w	r3, r3, #4
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00a      	beq.n	8009cd8 <HAL_UART_IRQHandler+0xb0>
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	f003 0301 	and.w	r3, r3, #1
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d005      	beq.n	8009cd8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd0:	f043 0202 	orr.w	r2, r3, #2
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	f003 0302 	and.w	r3, r3, #2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00a      	beq.n	8009cf8 <HAL_UART_IRQHandler+0xd0>
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	f003 0301 	and.w	r3, r3, #1
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d005      	beq.n	8009cf8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cf0:	f043 0204 	orr.w	r2, r3, #4
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	f003 0308 	and.w	r3, r3, #8
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00f      	beq.n	8009d22 <HAL_UART_IRQHandler+0xfa>
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	f003 0320 	and.w	r3, r3, #32
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d104      	bne.n	8009d16 <HAL_UART_IRQHandler+0xee>
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d005      	beq.n	8009d22 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d1a:	f043 0208 	orr.w	r2, r3, #8
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d077      	beq.n	8009e1a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	f003 0320 	and.w	r3, r3, #32
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d007      	beq.n	8009d44 <HAL_UART_IRQHandler+0x11c>
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	f003 0320 	and.w	r3, r3, #32
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d002      	beq.n	8009d44 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 faad 	bl	800a29e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	bf14      	ite	ne
 8009d52:	2301      	movne	r3, #1
 8009d54:	2300      	moveq	r3, #0
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d5e:	f003 0308 	and.w	r3, r3, #8
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d102      	bne.n	8009d6c <HAL_UART_IRQHandler+0x144>
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d031      	beq.n	8009dd0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 f9fe 	bl	800a16e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d023      	beq.n	8009dc8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	695a      	ldr	r2, [r3, #20]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d8e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d013      	beq.n	8009dc0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d9c:	4a21      	ldr	r2, [pc, #132]	; (8009e24 <HAL_UART_IRQHandler+0x1fc>)
 8009d9e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7fd fae9 	bl	800737c <HAL_DMA_Abort_IT>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d016      	beq.n	8009dde <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009dba:	4610      	mov	r0, r2
 8009dbc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dbe:	e00e      	b.n	8009dde <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 f843 	bl	8009e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dc6:	e00a      	b.n	8009dde <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f83f 	bl	8009e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dce:	e006      	b.n	8009dde <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 f83b 	bl	8009e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009ddc:	e01d      	b.n	8009e1a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dde:	bf00      	nop
    return;
 8009de0:	e01b      	b.n	8009e1a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d008      	beq.n	8009dfe <HAL_UART_IRQHandler+0x1d6>
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d003      	beq.n	8009dfe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f9ea 	bl	800a1d0 <UART_Transmit_IT>
    return;
 8009dfc:	e00e      	b.n	8009e1c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d009      	beq.n	8009e1c <HAL_UART_IRQHandler+0x1f4>
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d004      	beq.n	8009e1c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fa2b 	bl	800a26e <UART_EndTransmit_IT>
    return;
 8009e18:	e000      	b.n	8009e1c <HAL_UART_IRQHandler+0x1f4>
    return;
 8009e1a:	bf00      	nop
  }
}
 8009e1c:	3720      	adds	r7, #32
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	0800a1a9 	.word	0x0800a1a9

08009e28 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bc80      	pop	{r7}
 8009e38:	4770      	bx	lr

08009e3a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b083      	sub	sp, #12
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009e42:	bf00      	nop
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bc80      	pop	{r7}
 8009e4a:	4770      	bx	lr

08009e4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bc80      	pop	{r7}
 8009e5c:	4770      	bx	lr

08009e5e <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8009e5e:	b480      	push	{r7}
 8009e60:	b085      	sub	sp, #20
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8009e66:	2300      	movs	r3, #0
 8009e68:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d101      	bne.n	8009e78 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8009e74:	2302      	movs	r3, #2
 8009e76:	e020      	b.n	8009eba <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2224      	movs	r2, #36	; 0x24
 8009e84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f023 030c 	bic.w	r3, r3, #12
 8009e96:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f043 0308 	orr.w	r3, r3, #8
 8009e9e:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2220      	movs	r2, #32
 8009eac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3714      	adds	r7, #20
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bc80      	pop	{r7}
 8009ec2:	4770      	bx	lr

08009ec4 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d101      	bne.n	8009ede <HAL_HalfDuplex_EnableReceiver+0x1a>
 8009eda:	2302      	movs	r3, #2
 8009edc:	e020      	b.n	8009f20 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2224      	movs	r2, #36	; 0x24
 8009eea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f023 030c 	bic.w	r3, r3, #12
 8009efc:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f043 0304 	orr.w	r3, r3, #4
 8009f04:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2220      	movs	r2, #32
 8009f12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bc80      	pop	{r7}
 8009f28:	4770      	bx	lr

08009f2a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f36:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 0320 	and.w	r3, r3, #32
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d113      	bne.n	8009f6e <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	695a      	ldr	r2, [r3, #20]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f5a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68da      	ldr	r2, [r3, #12]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f6a:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f6c:	e002      	b.n	8009f74 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f7fa febe 	bl	8004cf0 <HAL_UART_TxCpltCallback>
}
 8009f74:	bf00      	nop
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f88:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f7ff ff4c 	bl	8009e28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f90:	bf00      	nop
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0320 	and.w	r3, r3, #32
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d11e      	bne.n	8009ff2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68da      	ldr	r2, [r3, #12]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009fc8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	695a      	ldr	r2, [r3, #20]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f022 0201 	bic.w	r2, r2, #1
 8009fd8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	695a      	ldr	r2, [r3, #20]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fe8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2220      	movs	r2, #32
 8009fee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f7fa ff48 	bl	8004e88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ff8:	bf00      	nop
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800a00e:	68f8      	ldr	r0, [r7, #12]
 800a010:	f7ff ff13 	bl	8009e3a <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a014:	bf00      	nop
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a024:	2300      	movs	r3, #0
 800a026:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	695b      	ldr	r3, [r3, #20]
 800a034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a038:	2b00      	cmp	r3, #0
 800a03a:	bf14      	ite	ne
 800a03c:	2301      	movne	r3, #1
 800a03e:	2300      	moveq	r3, #0
 800a040:	b2db      	uxtb	r3, r3
 800a042:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	2b21      	cmp	r3, #33	; 0x21
 800a04e:	d108      	bne.n	800a062 <UART_DMAError+0x46>
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d005      	beq.n	800a062 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	2200      	movs	r2, #0
 800a05a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a05c:	68b8      	ldr	r0, [r7, #8]
 800a05e:	f000 f871 	bl	800a144 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	695b      	ldr	r3, [r3, #20]
 800a068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	bf14      	ite	ne
 800a070:	2301      	movne	r3, #1
 800a072:	2300      	moveq	r3, #0
 800a074:	b2db      	uxtb	r3, r3
 800a076:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	2b22      	cmp	r3, #34	; 0x22
 800a082:	d108      	bne.n	800a096 <UART_DMAError+0x7a>
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d005      	beq.n	800a096 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	2200      	movs	r2, #0
 800a08e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a090:	68b8      	ldr	r0, [r7, #8]
 800a092:	f000 f86c 	bl	800a16e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a09a:	f043 0210 	orr.w	r2, r3, #16
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0a2:	68b8      	ldr	r0, [r7, #8]
 800a0a4:	f7ff fed2 	bl	8009e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0a8:	bf00      	nop
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	603b      	str	r3, [r7, #0]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0c0:	e02c      	b.n	800a11c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c8:	d028      	beq.n	800a11c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d007      	beq.n	800a0e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0d0:	f7fc ff52 	bl	8006f78 <HAL_GetTick>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	69ba      	ldr	r2, [r7, #24]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d21d      	bcs.n	800a11c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	68da      	ldr	r2, [r3, #12]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a0ee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	695a      	ldr	r2, [r3, #20]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f022 0201 	bic.w	r2, r2, #1
 800a0fe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2220      	movs	r2, #32
 800a104:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2220      	movs	r2, #32
 800a10c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a118:	2303      	movs	r3, #3
 800a11a:	e00f      	b.n	800a13c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	4013      	ands	r3, r2
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	429a      	cmp	r2, r3
 800a12a:	bf0c      	ite	eq
 800a12c:	2301      	moveq	r3, #1
 800a12e:	2300      	movne	r3, #0
 800a130:	b2db      	uxtb	r3, r3
 800a132:	461a      	mov	r2, r3
 800a134:	79fb      	ldrb	r3, [r7, #7]
 800a136:	429a      	cmp	r2, r3
 800a138:	d0c3      	beq.n	800a0c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3710      	adds	r7, #16
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68da      	ldr	r2, [r3, #12]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a15a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2220      	movs	r2, #32
 800a160:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800a164:	bf00      	nop
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	bc80      	pop	{r7}
 800a16c:	4770      	bx	lr

0800a16e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a16e:	b480      	push	{r7}
 800a170:	b083      	sub	sp, #12
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	68da      	ldr	r2, [r3, #12]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a184:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	695a      	ldr	r2, [r3, #20]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f022 0201 	bic.w	r2, r2, #1
 800a194:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2220      	movs	r2, #32
 800a19a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a19e:	bf00      	nop
 800a1a0:	370c      	adds	r7, #12
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bc80      	pop	{r7}
 800a1a6:	4770      	bx	lr

0800a1a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f7ff fe42 	bl	8009e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1c8:	bf00      	nop
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	2b21      	cmp	r3, #33	; 0x21
 800a1e2:	d13e      	bne.n	800a262 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ec:	d114      	bne.n	800a218 <UART_Transmit_IT+0x48>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d110      	bne.n	800a218 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	881b      	ldrh	r3, [r3, #0]
 800a200:	461a      	mov	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a20a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a1b      	ldr	r3, [r3, #32]
 800a210:	1c9a      	adds	r2, r3, #2
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	621a      	str	r2, [r3, #32]
 800a216:	e008      	b.n	800a22a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a1b      	ldr	r3, [r3, #32]
 800a21c:	1c59      	adds	r1, r3, #1
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	6211      	str	r1, [r2, #32]
 800a222:	781a      	ldrb	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a22e:	b29b      	uxth	r3, r3
 800a230:	3b01      	subs	r3, #1
 800a232:	b29b      	uxth	r3, r3
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	4619      	mov	r1, r3
 800a238:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d10f      	bne.n	800a25e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68da      	ldr	r2, [r3, #12]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a24c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68da      	ldr	r2, [r3, #12]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a25c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a25e:	2300      	movs	r3, #0
 800a260:	e000      	b.n	800a264 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a262:	2302      	movs	r3, #2
  }
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	bc80      	pop	{r7}
 800a26c:	4770      	bx	lr

0800a26e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b082      	sub	sp, #8
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68da      	ldr	r2, [r3, #12]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a284:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2220      	movs	r2, #32
 800a28a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f7fa fd2e 	bl	8004cf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b084      	sub	sp, #16
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	2b22      	cmp	r3, #34	; 0x22
 800a2b0:	d170      	bne.n	800a394 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2ba:	d117      	bne.n	800a2ec <UART_Receive_IT+0x4e>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d113      	bne.n	800a2ec <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2cc:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2da:	b29a      	uxth	r2, r3
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e4:	1c9a      	adds	r2, r3, #2
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	629a      	str	r2, [r3, #40]	; 0x28
 800a2ea:	e026      	b.n	800a33a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f0:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2fe:	d007      	beq.n	800a310 <UART_Receive_IT+0x72>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10a      	bne.n	800a31e <UART_Receive_IT+0x80>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d106      	bne.n	800a31e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	b2da      	uxtb	r2, r3
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	701a      	strb	r2, [r3, #0]
 800a31c:	e008      	b.n	800a330 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	b2db      	uxtb	r3, r3
 800a326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a334:	1c5a      	adds	r2, r3, #1
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a33e:	b29b      	uxth	r3, r3
 800a340:	3b01      	subs	r3, #1
 800a342:	b29b      	uxth	r3, r3
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	4619      	mov	r1, r3
 800a348:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d120      	bne.n	800a390 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	68da      	ldr	r2, [r3, #12]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f022 0220 	bic.w	r2, r2, #32
 800a35c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	68da      	ldr	r2, [r3, #12]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a36c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	695a      	ldr	r2, [r3, #20]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f022 0201 	bic.w	r2, r2, #1
 800a37c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2220      	movs	r2, #32
 800a382:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7fa fd7e 	bl	8004e88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	e002      	b.n	800a396 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800a390:	2300      	movs	r3, #0
 800a392:	e000      	b.n	800a396 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800a394:	2302      	movs	r3, #2
  }
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
	...

0800a3a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	68da      	ldr	r2, [r3, #12]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	430a      	orrs	r2, r1
 800a3bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	689a      	ldr	r2, [r3, #8]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	691b      	ldr	r3, [r3, #16]
 800a3c6:	431a      	orrs	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	695b      	ldr	r3, [r3, #20]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a3da:	f023 030c 	bic.w	r3, r3, #12
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	6812      	ldr	r2, [r2, #0]
 800a3e2:	68b9      	ldr	r1, [r7, #8]
 800a3e4:	430b      	orrs	r3, r1
 800a3e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	695b      	ldr	r3, [r3, #20]
 800a3ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	699a      	ldr	r2, [r3, #24]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	430a      	orrs	r2, r1
 800a3fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a2c      	ldr	r2, [pc, #176]	; (800a4b4 <UART_SetConfig+0x114>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d103      	bne.n	800a410 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a408:	f7fe fee6 	bl	80091d8 <HAL_RCC_GetPCLK2Freq>
 800a40c:	60f8      	str	r0, [r7, #12]
 800a40e:	e002      	b.n	800a416 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a410:	f7fe fece 	bl	80091b0 <HAL_RCC_GetPCLK1Freq>
 800a414:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	4613      	mov	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4413      	add	r3, r2
 800a41e:	009a      	lsls	r2, r3, #2
 800a420:	441a      	add	r2, r3
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	fbb2 f3f3 	udiv	r3, r2, r3
 800a42c:	4a22      	ldr	r2, [pc, #136]	; (800a4b8 <UART_SetConfig+0x118>)
 800a42e:	fba2 2303 	umull	r2, r3, r2, r3
 800a432:	095b      	lsrs	r3, r3, #5
 800a434:	0119      	lsls	r1, r3, #4
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	4613      	mov	r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	4413      	add	r3, r2
 800a43e:	009a      	lsls	r2, r3, #2
 800a440:	441a      	add	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	fbb2 f2f3 	udiv	r2, r2, r3
 800a44c:	4b1a      	ldr	r3, [pc, #104]	; (800a4b8 <UART_SetConfig+0x118>)
 800a44e:	fba3 0302 	umull	r0, r3, r3, r2
 800a452:	095b      	lsrs	r3, r3, #5
 800a454:	2064      	movs	r0, #100	; 0x64
 800a456:	fb00 f303 	mul.w	r3, r0, r3
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	011b      	lsls	r3, r3, #4
 800a45e:	3332      	adds	r3, #50	; 0x32
 800a460:	4a15      	ldr	r2, [pc, #84]	; (800a4b8 <UART_SetConfig+0x118>)
 800a462:	fba2 2303 	umull	r2, r3, r2, r3
 800a466:	095b      	lsrs	r3, r3, #5
 800a468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a46c:	4419      	add	r1, r3
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	4613      	mov	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4413      	add	r3, r2
 800a476:	009a      	lsls	r2, r3, #2
 800a478:	441a      	add	r2, r3
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	fbb2 f2f3 	udiv	r2, r2, r3
 800a484:	4b0c      	ldr	r3, [pc, #48]	; (800a4b8 <UART_SetConfig+0x118>)
 800a486:	fba3 0302 	umull	r0, r3, r3, r2
 800a48a:	095b      	lsrs	r3, r3, #5
 800a48c:	2064      	movs	r0, #100	; 0x64
 800a48e:	fb00 f303 	mul.w	r3, r0, r3
 800a492:	1ad3      	subs	r3, r2, r3
 800a494:	011b      	lsls	r3, r3, #4
 800a496:	3332      	adds	r3, #50	; 0x32
 800a498:	4a07      	ldr	r2, [pc, #28]	; (800a4b8 <UART_SetConfig+0x118>)
 800a49a:	fba2 2303 	umull	r2, r3, r2, r3
 800a49e:	095b      	lsrs	r3, r3, #5
 800a4a0:	f003 020f 	and.w	r2, r3, #15
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	440a      	add	r2, r1
 800a4aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a4ac:	bf00      	nop
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	40013800 	.word	0x40013800
 800a4b8:	51eb851f 	.word	0x51eb851f

0800a4bc <__cxa_pure_virtual>:
 800a4bc:	b508      	push	{r3, lr}
 800a4be:	f000 f80d 	bl	800a4dc <_ZSt9terminatev>

0800a4c2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a4c2:	b508      	push	{r3, lr}
 800a4c4:	4780      	blx	r0
 800a4c6:	f000 f80e 	bl	800a4e6 <abort>
	...

0800a4cc <_ZSt13get_terminatev>:
 800a4cc:	4b02      	ldr	r3, [pc, #8]	; (800a4d8 <_ZSt13get_terminatev+0xc>)
 800a4ce:	6818      	ldr	r0, [r3, #0]
 800a4d0:	f3bf 8f5b 	dmb	ish
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	20000030 	.word	0x20000030

0800a4dc <_ZSt9terminatev>:
 800a4dc:	b508      	push	{r3, lr}
 800a4de:	f7ff fff5 	bl	800a4cc <_ZSt13get_terminatev>
 800a4e2:	f7ff ffee 	bl	800a4c2 <_ZN10__cxxabiv111__terminateEPFvvE>

0800a4e6 <abort>:
 800a4e6:	2006      	movs	r0, #6
 800a4e8:	b508      	push	{r3, lr}
 800a4ea:	f000 f901 	bl	800a6f0 <raise>
 800a4ee:	2001      	movs	r0, #1
 800a4f0:	f7fc f947 	bl	8006782 <_exit>

0800a4f4 <__errno>:
 800a4f4:	4b01      	ldr	r3, [pc, #4]	; (800a4fc <__errno+0x8>)
 800a4f6:	6818      	ldr	r0, [r3, #0]
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	20000034 	.word	0x20000034

0800a500 <__libc_init_array>:
 800a500:	b570      	push	{r4, r5, r6, lr}
 800a502:	2600      	movs	r6, #0
 800a504:	4d0c      	ldr	r5, [pc, #48]	; (800a538 <__libc_init_array+0x38>)
 800a506:	4c0d      	ldr	r4, [pc, #52]	; (800a53c <__libc_init_array+0x3c>)
 800a508:	1b64      	subs	r4, r4, r5
 800a50a:	10a4      	asrs	r4, r4, #2
 800a50c:	42a6      	cmp	r6, r4
 800a50e:	d109      	bne.n	800a524 <__libc_init_array+0x24>
 800a510:	f001 f880 	bl	800b614 <_init>
 800a514:	2600      	movs	r6, #0
 800a516:	4d0a      	ldr	r5, [pc, #40]	; (800a540 <__libc_init_array+0x40>)
 800a518:	4c0a      	ldr	r4, [pc, #40]	; (800a544 <__libc_init_array+0x44>)
 800a51a:	1b64      	subs	r4, r4, r5
 800a51c:	10a4      	asrs	r4, r4, #2
 800a51e:	42a6      	cmp	r6, r4
 800a520:	d105      	bne.n	800a52e <__libc_init_array+0x2e>
 800a522:	bd70      	pop	{r4, r5, r6, pc}
 800a524:	f855 3b04 	ldr.w	r3, [r5], #4
 800a528:	4798      	blx	r3
 800a52a:	3601      	adds	r6, #1
 800a52c:	e7ee      	b.n	800a50c <__libc_init_array+0xc>
 800a52e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a532:	4798      	blx	r3
 800a534:	3601      	adds	r6, #1
 800a536:	e7f2      	b.n	800a51e <__libc_init_array+0x1e>
 800a538:	0800bfe4 	.word	0x0800bfe4
 800a53c:	0800bfe4 	.word	0x0800bfe4
 800a540:	0800bfe4 	.word	0x0800bfe4
 800a544:	0800bfec 	.word	0x0800bfec

0800a548 <memcpy>:
 800a548:	440a      	add	r2, r1
 800a54a:	4291      	cmp	r1, r2
 800a54c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a550:	d100      	bne.n	800a554 <memcpy+0xc>
 800a552:	4770      	bx	lr
 800a554:	b510      	push	{r4, lr}
 800a556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a55a:	4291      	cmp	r1, r2
 800a55c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a560:	d1f9      	bne.n	800a556 <memcpy+0xe>
 800a562:	bd10      	pop	{r4, pc}

0800a564 <memset>:
 800a564:	4603      	mov	r3, r0
 800a566:	4402      	add	r2, r0
 800a568:	4293      	cmp	r3, r2
 800a56a:	d100      	bne.n	800a56e <memset+0xa>
 800a56c:	4770      	bx	lr
 800a56e:	f803 1b01 	strb.w	r1, [r3], #1
 800a572:	e7f9      	b.n	800a568 <memset+0x4>

0800a574 <iprintf>:
 800a574:	b40f      	push	{r0, r1, r2, r3}
 800a576:	4b0a      	ldr	r3, [pc, #40]	; (800a5a0 <iprintf+0x2c>)
 800a578:	b513      	push	{r0, r1, r4, lr}
 800a57a:	681c      	ldr	r4, [r3, #0]
 800a57c:	b124      	cbz	r4, 800a588 <iprintf+0x14>
 800a57e:	69a3      	ldr	r3, [r4, #24]
 800a580:	b913      	cbnz	r3, 800a588 <iprintf+0x14>
 800a582:	4620      	mov	r0, r4
 800a584:	f000 faaa 	bl	800aadc <__sinit>
 800a588:	ab05      	add	r3, sp, #20
 800a58a:	4620      	mov	r0, r4
 800a58c:	9a04      	ldr	r2, [sp, #16]
 800a58e:	68a1      	ldr	r1, [r4, #8]
 800a590:	9301      	str	r3, [sp, #4]
 800a592:	f000 fc9b 	bl	800aecc <_vfiprintf_r>
 800a596:	b002      	add	sp, #8
 800a598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a59c:	b004      	add	sp, #16
 800a59e:	4770      	bx	lr
 800a5a0:	20000034 	.word	0x20000034

0800a5a4 <_puts_r>:
 800a5a4:	b570      	push	{r4, r5, r6, lr}
 800a5a6:	460e      	mov	r6, r1
 800a5a8:	4605      	mov	r5, r0
 800a5aa:	b118      	cbz	r0, 800a5b4 <_puts_r+0x10>
 800a5ac:	6983      	ldr	r3, [r0, #24]
 800a5ae:	b90b      	cbnz	r3, 800a5b4 <_puts_r+0x10>
 800a5b0:	f000 fa94 	bl	800aadc <__sinit>
 800a5b4:	69ab      	ldr	r3, [r5, #24]
 800a5b6:	68ac      	ldr	r4, [r5, #8]
 800a5b8:	b913      	cbnz	r3, 800a5c0 <_puts_r+0x1c>
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	f000 fa8e 	bl	800aadc <__sinit>
 800a5c0:	4b2c      	ldr	r3, [pc, #176]	; (800a674 <_puts_r+0xd0>)
 800a5c2:	429c      	cmp	r4, r3
 800a5c4:	d120      	bne.n	800a608 <_puts_r+0x64>
 800a5c6:	686c      	ldr	r4, [r5, #4]
 800a5c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5ca:	07db      	lsls	r3, r3, #31
 800a5cc:	d405      	bmi.n	800a5da <_puts_r+0x36>
 800a5ce:	89a3      	ldrh	r3, [r4, #12]
 800a5d0:	0598      	lsls	r0, r3, #22
 800a5d2:	d402      	bmi.n	800a5da <_puts_r+0x36>
 800a5d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5d6:	f000 fb1f 	bl	800ac18 <__retarget_lock_acquire_recursive>
 800a5da:	89a3      	ldrh	r3, [r4, #12]
 800a5dc:	0719      	lsls	r1, r3, #28
 800a5de:	d51d      	bpl.n	800a61c <_puts_r+0x78>
 800a5e0:	6923      	ldr	r3, [r4, #16]
 800a5e2:	b1db      	cbz	r3, 800a61c <_puts_r+0x78>
 800a5e4:	3e01      	subs	r6, #1
 800a5e6:	68a3      	ldr	r3, [r4, #8]
 800a5e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	60a3      	str	r3, [r4, #8]
 800a5f0:	bb39      	cbnz	r1, 800a642 <_puts_r+0x9e>
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	da38      	bge.n	800a668 <_puts_r+0xc4>
 800a5f6:	4622      	mov	r2, r4
 800a5f8:	210a      	movs	r1, #10
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	f000 f894 	bl	800a728 <__swbuf_r>
 800a600:	3001      	adds	r0, #1
 800a602:	d011      	beq.n	800a628 <_puts_r+0x84>
 800a604:	250a      	movs	r5, #10
 800a606:	e011      	b.n	800a62c <_puts_r+0x88>
 800a608:	4b1b      	ldr	r3, [pc, #108]	; (800a678 <_puts_r+0xd4>)
 800a60a:	429c      	cmp	r4, r3
 800a60c:	d101      	bne.n	800a612 <_puts_r+0x6e>
 800a60e:	68ac      	ldr	r4, [r5, #8]
 800a610:	e7da      	b.n	800a5c8 <_puts_r+0x24>
 800a612:	4b1a      	ldr	r3, [pc, #104]	; (800a67c <_puts_r+0xd8>)
 800a614:	429c      	cmp	r4, r3
 800a616:	bf08      	it	eq
 800a618:	68ec      	ldreq	r4, [r5, #12]
 800a61a:	e7d5      	b.n	800a5c8 <_puts_r+0x24>
 800a61c:	4621      	mov	r1, r4
 800a61e:	4628      	mov	r0, r5
 800a620:	f000 f8d4 	bl	800a7cc <__swsetup_r>
 800a624:	2800      	cmp	r0, #0
 800a626:	d0dd      	beq.n	800a5e4 <_puts_r+0x40>
 800a628:	f04f 35ff 	mov.w	r5, #4294967295
 800a62c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a62e:	07da      	lsls	r2, r3, #31
 800a630:	d405      	bmi.n	800a63e <_puts_r+0x9a>
 800a632:	89a3      	ldrh	r3, [r4, #12]
 800a634:	059b      	lsls	r3, r3, #22
 800a636:	d402      	bmi.n	800a63e <_puts_r+0x9a>
 800a638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a63a:	f000 faee 	bl	800ac1a <__retarget_lock_release_recursive>
 800a63e:	4628      	mov	r0, r5
 800a640:	bd70      	pop	{r4, r5, r6, pc}
 800a642:	2b00      	cmp	r3, #0
 800a644:	da04      	bge.n	800a650 <_puts_r+0xac>
 800a646:	69a2      	ldr	r2, [r4, #24]
 800a648:	429a      	cmp	r2, r3
 800a64a:	dc06      	bgt.n	800a65a <_puts_r+0xb6>
 800a64c:	290a      	cmp	r1, #10
 800a64e:	d004      	beq.n	800a65a <_puts_r+0xb6>
 800a650:	6823      	ldr	r3, [r4, #0]
 800a652:	1c5a      	adds	r2, r3, #1
 800a654:	6022      	str	r2, [r4, #0]
 800a656:	7019      	strb	r1, [r3, #0]
 800a658:	e7c5      	b.n	800a5e6 <_puts_r+0x42>
 800a65a:	4622      	mov	r2, r4
 800a65c:	4628      	mov	r0, r5
 800a65e:	f000 f863 	bl	800a728 <__swbuf_r>
 800a662:	3001      	adds	r0, #1
 800a664:	d1bf      	bne.n	800a5e6 <_puts_r+0x42>
 800a666:	e7df      	b.n	800a628 <_puts_r+0x84>
 800a668:	250a      	movs	r5, #10
 800a66a:	6823      	ldr	r3, [r4, #0]
 800a66c:	1c5a      	adds	r2, r3, #1
 800a66e:	6022      	str	r2, [r4, #0]
 800a670:	701d      	strb	r5, [r3, #0]
 800a672:	e7db      	b.n	800a62c <_puts_r+0x88>
 800a674:	0800bf70 	.word	0x0800bf70
 800a678:	0800bf90 	.word	0x0800bf90
 800a67c:	0800bf50 	.word	0x0800bf50

0800a680 <puts>:
 800a680:	4b02      	ldr	r3, [pc, #8]	; (800a68c <puts+0xc>)
 800a682:	4601      	mov	r1, r0
 800a684:	6818      	ldr	r0, [r3, #0]
 800a686:	f7ff bf8d 	b.w	800a5a4 <_puts_r>
 800a68a:	bf00      	nop
 800a68c:	20000034 	.word	0x20000034

0800a690 <realloc>:
 800a690:	4b02      	ldr	r3, [pc, #8]	; (800a69c <realloc+0xc>)
 800a692:	460a      	mov	r2, r1
 800a694:	4601      	mov	r1, r0
 800a696:	6818      	ldr	r0, [r3, #0]
 800a698:	f000 bbca 	b.w	800ae30 <_realloc_r>
 800a69c:	20000034 	.word	0x20000034

0800a6a0 <_raise_r>:
 800a6a0:	291f      	cmp	r1, #31
 800a6a2:	b538      	push	{r3, r4, r5, lr}
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	460d      	mov	r5, r1
 800a6a8:	d904      	bls.n	800a6b4 <_raise_r+0x14>
 800a6aa:	2316      	movs	r3, #22
 800a6ac:	6003      	str	r3, [r0, #0]
 800a6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b2:	bd38      	pop	{r3, r4, r5, pc}
 800a6b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a6b6:	b112      	cbz	r2, 800a6be <_raise_r+0x1e>
 800a6b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6bc:	b94b      	cbnz	r3, 800a6d2 <_raise_r+0x32>
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f000 f830 	bl	800a724 <_getpid_r>
 800a6c4:	462a      	mov	r2, r5
 800a6c6:	4601      	mov	r1, r0
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6ce:	f000 b817 	b.w	800a700 <_kill_r>
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d00a      	beq.n	800a6ec <_raise_r+0x4c>
 800a6d6:	1c59      	adds	r1, r3, #1
 800a6d8:	d103      	bne.n	800a6e2 <_raise_r+0x42>
 800a6da:	2316      	movs	r3, #22
 800a6dc:	6003      	str	r3, [r0, #0]
 800a6de:	2001      	movs	r0, #1
 800a6e0:	e7e7      	b.n	800a6b2 <_raise_r+0x12>
 800a6e2:	2400      	movs	r4, #0
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6ea:	4798      	blx	r3
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	e7e0      	b.n	800a6b2 <_raise_r+0x12>

0800a6f0 <raise>:
 800a6f0:	4b02      	ldr	r3, [pc, #8]	; (800a6fc <raise+0xc>)
 800a6f2:	4601      	mov	r1, r0
 800a6f4:	6818      	ldr	r0, [r3, #0]
 800a6f6:	f7ff bfd3 	b.w	800a6a0 <_raise_r>
 800a6fa:	bf00      	nop
 800a6fc:	20000034 	.word	0x20000034

0800a700 <_kill_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	2300      	movs	r3, #0
 800a704:	4d06      	ldr	r5, [pc, #24]	; (800a720 <_kill_r+0x20>)
 800a706:	4604      	mov	r4, r0
 800a708:	4608      	mov	r0, r1
 800a70a:	4611      	mov	r1, r2
 800a70c:	602b      	str	r3, [r5, #0]
 800a70e:	f7fc f828 	bl	8006762 <_kill>
 800a712:	1c43      	adds	r3, r0, #1
 800a714:	d102      	bne.n	800a71c <_kill_r+0x1c>
 800a716:	682b      	ldr	r3, [r5, #0]
 800a718:	b103      	cbz	r3, 800a71c <_kill_r+0x1c>
 800a71a:	6023      	str	r3, [r4, #0]
 800a71c:	bd38      	pop	{r3, r4, r5, pc}
 800a71e:	bf00      	nop
 800a720:	20000fe4 	.word	0x20000fe4

0800a724 <_getpid_r>:
 800a724:	f7fc b816 	b.w	8006754 <_getpid>

0800a728 <__swbuf_r>:
 800a728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72a:	460e      	mov	r6, r1
 800a72c:	4614      	mov	r4, r2
 800a72e:	4605      	mov	r5, r0
 800a730:	b118      	cbz	r0, 800a73a <__swbuf_r+0x12>
 800a732:	6983      	ldr	r3, [r0, #24]
 800a734:	b90b      	cbnz	r3, 800a73a <__swbuf_r+0x12>
 800a736:	f000 f9d1 	bl	800aadc <__sinit>
 800a73a:	4b21      	ldr	r3, [pc, #132]	; (800a7c0 <__swbuf_r+0x98>)
 800a73c:	429c      	cmp	r4, r3
 800a73e:	d12b      	bne.n	800a798 <__swbuf_r+0x70>
 800a740:	686c      	ldr	r4, [r5, #4]
 800a742:	69a3      	ldr	r3, [r4, #24]
 800a744:	60a3      	str	r3, [r4, #8]
 800a746:	89a3      	ldrh	r3, [r4, #12]
 800a748:	071a      	lsls	r2, r3, #28
 800a74a:	d52f      	bpl.n	800a7ac <__swbuf_r+0x84>
 800a74c:	6923      	ldr	r3, [r4, #16]
 800a74e:	b36b      	cbz	r3, 800a7ac <__swbuf_r+0x84>
 800a750:	6923      	ldr	r3, [r4, #16]
 800a752:	6820      	ldr	r0, [r4, #0]
 800a754:	b2f6      	uxtb	r6, r6
 800a756:	1ac0      	subs	r0, r0, r3
 800a758:	6963      	ldr	r3, [r4, #20]
 800a75a:	4637      	mov	r7, r6
 800a75c:	4283      	cmp	r3, r0
 800a75e:	dc04      	bgt.n	800a76a <__swbuf_r+0x42>
 800a760:	4621      	mov	r1, r4
 800a762:	4628      	mov	r0, r5
 800a764:	f000 f926 	bl	800a9b4 <_fflush_r>
 800a768:	bb30      	cbnz	r0, 800a7b8 <__swbuf_r+0x90>
 800a76a:	68a3      	ldr	r3, [r4, #8]
 800a76c:	3001      	adds	r0, #1
 800a76e:	3b01      	subs	r3, #1
 800a770:	60a3      	str	r3, [r4, #8]
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	1c5a      	adds	r2, r3, #1
 800a776:	6022      	str	r2, [r4, #0]
 800a778:	701e      	strb	r6, [r3, #0]
 800a77a:	6963      	ldr	r3, [r4, #20]
 800a77c:	4283      	cmp	r3, r0
 800a77e:	d004      	beq.n	800a78a <__swbuf_r+0x62>
 800a780:	89a3      	ldrh	r3, [r4, #12]
 800a782:	07db      	lsls	r3, r3, #31
 800a784:	d506      	bpl.n	800a794 <__swbuf_r+0x6c>
 800a786:	2e0a      	cmp	r6, #10
 800a788:	d104      	bne.n	800a794 <__swbuf_r+0x6c>
 800a78a:	4621      	mov	r1, r4
 800a78c:	4628      	mov	r0, r5
 800a78e:	f000 f911 	bl	800a9b4 <_fflush_r>
 800a792:	b988      	cbnz	r0, 800a7b8 <__swbuf_r+0x90>
 800a794:	4638      	mov	r0, r7
 800a796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a798:	4b0a      	ldr	r3, [pc, #40]	; (800a7c4 <__swbuf_r+0x9c>)
 800a79a:	429c      	cmp	r4, r3
 800a79c:	d101      	bne.n	800a7a2 <__swbuf_r+0x7a>
 800a79e:	68ac      	ldr	r4, [r5, #8]
 800a7a0:	e7cf      	b.n	800a742 <__swbuf_r+0x1a>
 800a7a2:	4b09      	ldr	r3, [pc, #36]	; (800a7c8 <__swbuf_r+0xa0>)
 800a7a4:	429c      	cmp	r4, r3
 800a7a6:	bf08      	it	eq
 800a7a8:	68ec      	ldreq	r4, [r5, #12]
 800a7aa:	e7ca      	b.n	800a742 <__swbuf_r+0x1a>
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	f000 f80c 	bl	800a7cc <__swsetup_r>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	d0cb      	beq.n	800a750 <__swbuf_r+0x28>
 800a7b8:	f04f 37ff 	mov.w	r7, #4294967295
 800a7bc:	e7ea      	b.n	800a794 <__swbuf_r+0x6c>
 800a7be:	bf00      	nop
 800a7c0:	0800bf70 	.word	0x0800bf70
 800a7c4:	0800bf90 	.word	0x0800bf90
 800a7c8:	0800bf50 	.word	0x0800bf50

0800a7cc <__swsetup_r>:
 800a7cc:	4b32      	ldr	r3, [pc, #200]	; (800a898 <__swsetup_r+0xcc>)
 800a7ce:	b570      	push	{r4, r5, r6, lr}
 800a7d0:	681d      	ldr	r5, [r3, #0]
 800a7d2:	4606      	mov	r6, r0
 800a7d4:	460c      	mov	r4, r1
 800a7d6:	b125      	cbz	r5, 800a7e2 <__swsetup_r+0x16>
 800a7d8:	69ab      	ldr	r3, [r5, #24]
 800a7da:	b913      	cbnz	r3, 800a7e2 <__swsetup_r+0x16>
 800a7dc:	4628      	mov	r0, r5
 800a7de:	f000 f97d 	bl	800aadc <__sinit>
 800a7e2:	4b2e      	ldr	r3, [pc, #184]	; (800a89c <__swsetup_r+0xd0>)
 800a7e4:	429c      	cmp	r4, r3
 800a7e6:	d10f      	bne.n	800a808 <__swsetup_r+0x3c>
 800a7e8:	686c      	ldr	r4, [r5, #4]
 800a7ea:	89a3      	ldrh	r3, [r4, #12]
 800a7ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7f0:	0719      	lsls	r1, r3, #28
 800a7f2:	d42c      	bmi.n	800a84e <__swsetup_r+0x82>
 800a7f4:	06dd      	lsls	r5, r3, #27
 800a7f6:	d411      	bmi.n	800a81c <__swsetup_r+0x50>
 800a7f8:	2309      	movs	r3, #9
 800a7fa:	6033      	str	r3, [r6, #0]
 800a7fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a800:	f04f 30ff 	mov.w	r0, #4294967295
 800a804:	81a3      	strh	r3, [r4, #12]
 800a806:	e03e      	b.n	800a886 <__swsetup_r+0xba>
 800a808:	4b25      	ldr	r3, [pc, #148]	; (800a8a0 <__swsetup_r+0xd4>)
 800a80a:	429c      	cmp	r4, r3
 800a80c:	d101      	bne.n	800a812 <__swsetup_r+0x46>
 800a80e:	68ac      	ldr	r4, [r5, #8]
 800a810:	e7eb      	b.n	800a7ea <__swsetup_r+0x1e>
 800a812:	4b24      	ldr	r3, [pc, #144]	; (800a8a4 <__swsetup_r+0xd8>)
 800a814:	429c      	cmp	r4, r3
 800a816:	bf08      	it	eq
 800a818:	68ec      	ldreq	r4, [r5, #12]
 800a81a:	e7e6      	b.n	800a7ea <__swsetup_r+0x1e>
 800a81c:	0758      	lsls	r0, r3, #29
 800a81e:	d512      	bpl.n	800a846 <__swsetup_r+0x7a>
 800a820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a822:	b141      	cbz	r1, 800a836 <__swsetup_r+0x6a>
 800a824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a828:	4299      	cmp	r1, r3
 800a82a:	d002      	beq.n	800a832 <__swsetup_r+0x66>
 800a82c:	4630      	mov	r0, r6
 800a82e:	f000 fa59 	bl	800ace4 <_free_r>
 800a832:	2300      	movs	r3, #0
 800a834:	6363      	str	r3, [r4, #52]	; 0x34
 800a836:	89a3      	ldrh	r3, [r4, #12]
 800a838:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a83c:	81a3      	strh	r3, [r4, #12]
 800a83e:	2300      	movs	r3, #0
 800a840:	6063      	str	r3, [r4, #4]
 800a842:	6923      	ldr	r3, [r4, #16]
 800a844:	6023      	str	r3, [r4, #0]
 800a846:	89a3      	ldrh	r3, [r4, #12]
 800a848:	f043 0308 	orr.w	r3, r3, #8
 800a84c:	81a3      	strh	r3, [r4, #12]
 800a84e:	6923      	ldr	r3, [r4, #16]
 800a850:	b94b      	cbnz	r3, 800a866 <__swsetup_r+0x9a>
 800a852:	89a3      	ldrh	r3, [r4, #12]
 800a854:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a85c:	d003      	beq.n	800a866 <__swsetup_r+0x9a>
 800a85e:	4621      	mov	r1, r4
 800a860:	4630      	mov	r0, r6
 800a862:	f000 f9ff 	bl	800ac64 <__smakebuf_r>
 800a866:	89a0      	ldrh	r0, [r4, #12]
 800a868:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a86c:	f010 0301 	ands.w	r3, r0, #1
 800a870:	d00a      	beq.n	800a888 <__swsetup_r+0xbc>
 800a872:	2300      	movs	r3, #0
 800a874:	60a3      	str	r3, [r4, #8]
 800a876:	6963      	ldr	r3, [r4, #20]
 800a878:	425b      	negs	r3, r3
 800a87a:	61a3      	str	r3, [r4, #24]
 800a87c:	6923      	ldr	r3, [r4, #16]
 800a87e:	b943      	cbnz	r3, 800a892 <__swsetup_r+0xc6>
 800a880:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a884:	d1ba      	bne.n	800a7fc <__swsetup_r+0x30>
 800a886:	bd70      	pop	{r4, r5, r6, pc}
 800a888:	0781      	lsls	r1, r0, #30
 800a88a:	bf58      	it	pl
 800a88c:	6963      	ldrpl	r3, [r4, #20]
 800a88e:	60a3      	str	r3, [r4, #8]
 800a890:	e7f4      	b.n	800a87c <__swsetup_r+0xb0>
 800a892:	2000      	movs	r0, #0
 800a894:	e7f7      	b.n	800a886 <__swsetup_r+0xba>
 800a896:	bf00      	nop
 800a898:	20000034 	.word	0x20000034
 800a89c:	0800bf70 	.word	0x0800bf70
 800a8a0:	0800bf90 	.word	0x0800bf90
 800a8a4:	0800bf50 	.word	0x0800bf50

0800a8a8 <__sflush_r>:
 800a8a8:	898a      	ldrh	r2, [r1, #12]
 800a8aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	0710      	lsls	r0, r2, #28
 800a8b2:	460c      	mov	r4, r1
 800a8b4:	d458      	bmi.n	800a968 <__sflush_r+0xc0>
 800a8b6:	684b      	ldr	r3, [r1, #4]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	dc05      	bgt.n	800a8c8 <__sflush_r+0x20>
 800a8bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	dc02      	bgt.n	800a8c8 <__sflush_r+0x20>
 800a8c2:	2000      	movs	r0, #0
 800a8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8ca:	2e00      	cmp	r6, #0
 800a8cc:	d0f9      	beq.n	800a8c2 <__sflush_r+0x1a>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8d4:	682f      	ldr	r7, [r5, #0]
 800a8d6:	602b      	str	r3, [r5, #0]
 800a8d8:	d032      	beq.n	800a940 <__sflush_r+0x98>
 800a8da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8dc:	89a3      	ldrh	r3, [r4, #12]
 800a8de:	075a      	lsls	r2, r3, #29
 800a8e0:	d505      	bpl.n	800a8ee <__sflush_r+0x46>
 800a8e2:	6863      	ldr	r3, [r4, #4]
 800a8e4:	1ac0      	subs	r0, r0, r3
 800a8e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8e8:	b10b      	cbz	r3, 800a8ee <__sflush_r+0x46>
 800a8ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8ec:	1ac0      	subs	r0, r0, r3
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	6a21      	ldr	r1, [r4, #32]
 800a8f8:	47b0      	blx	r6
 800a8fa:	1c43      	adds	r3, r0, #1
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	d106      	bne.n	800a90e <__sflush_r+0x66>
 800a900:	6829      	ldr	r1, [r5, #0]
 800a902:	291d      	cmp	r1, #29
 800a904:	d82c      	bhi.n	800a960 <__sflush_r+0xb8>
 800a906:	4a2a      	ldr	r2, [pc, #168]	; (800a9b0 <__sflush_r+0x108>)
 800a908:	40ca      	lsrs	r2, r1
 800a90a:	07d6      	lsls	r6, r2, #31
 800a90c:	d528      	bpl.n	800a960 <__sflush_r+0xb8>
 800a90e:	2200      	movs	r2, #0
 800a910:	6062      	str	r2, [r4, #4]
 800a912:	6922      	ldr	r2, [r4, #16]
 800a914:	04d9      	lsls	r1, r3, #19
 800a916:	6022      	str	r2, [r4, #0]
 800a918:	d504      	bpl.n	800a924 <__sflush_r+0x7c>
 800a91a:	1c42      	adds	r2, r0, #1
 800a91c:	d101      	bne.n	800a922 <__sflush_r+0x7a>
 800a91e:	682b      	ldr	r3, [r5, #0]
 800a920:	b903      	cbnz	r3, 800a924 <__sflush_r+0x7c>
 800a922:	6560      	str	r0, [r4, #84]	; 0x54
 800a924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a926:	602f      	str	r7, [r5, #0]
 800a928:	2900      	cmp	r1, #0
 800a92a:	d0ca      	beq.n	800a8c2 <__sflush_r+0x1a>
 800a92c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a930:	4299      	cmp	r1, r3
 800a932:	d002      	beq.n	800a93a <__sflush_r+0x92>
 800a934:	4628      	mov	r0, r5
 800a936:	f000 f9d5 	bl	800ace4 <_free_r>
 800a93a:	2000      	movs	r0, #0
 800a93c:	6360      	str	r0, [r4, #52]	; 0x34
 800a93e:	e7c1      	b.n	800a8c4 <__sflush_r+0x1c>
 800a940:	6a21      	ldr	r1, [r4, #32]
 800a942:	2301      	movs	r3, #1
 800a944:	4628      	mov	r0, r5
 800a946:	47b0      	blx	r6
 800a948:	1c41      	adds	r1, r0, #1
 800a94a:	d1c7      	bne.n	800a8dc <__sflush_r+0x34>
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d0c4      	beq.n	800a8dc <__sflush_r+0x34>
 800a952:	2b1d      	cmp	r3, #29
 800a954:	d001      	beq.n	800a95a <__sflush_r+0xb2>
 800a956:	2b16      	cmp	r3, #22
 800a958:	d101      	bne.n	800a95e <__sflush_r+0xb6>
 800a95a:	602f      	str	r7, [r5, #0]
 800a95c:	e7b1      	b.n	800a8c2 <__sflush_r+0x1a>
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a964:	81a3      	strh	r3, [r4, #12]
 800a966:	e7ad      	b.n	800a8c4 <__sflush_r+0x1c>
 800a968:	690f      	ldr	r7, [r1, #16]
 800a96a:	2f00      	cmp	r7, #0
 800a96c:	d0a9      	beq.n	800a8c2 <__sflush_r+0x1a>
 800a96e:	0793      	lsls	r3, r2, #30
 800a970:	bf18      	it	ne
 800a972:	2300      	movne	r3, #0
 800a974:	680e      	ldr	r6, [r1, #0]
 800a976:	bf08      	it	eq
 800a978:	694b      	ldreq	r3, [r1, #20]
 800a97a:	eba6 0807 	sub.w	r8, r6, r7
 800a97e:	600f      	str	r7, [r1, #0]
 800a980:	608b      	str	r3, [r1, #8]
 800a982:	f1b8 0f00 	cmp.w	r8, #0
 800a986:	dd9c      	ble.n	800a8c2 <__sflush_r+0x1a>
 800a988:	4643      	mov	r3, r8
 800a98a:	463a      	mov	r2, r7
 800a98c:	4628      	mov	r0, r5
 800a98e:	6a21      	ldr	r1, [r4, #32]
 800a990:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a992:	47b0      	blx	r6
 800a994:	2800      	cmp	r0, #0
 800a996:	dc06      	bgt.n	800a9a6 <__sflush_r+0xfe>
 800a998:	89a3      	ldrh	r3, [r4, #12]
 800a99a:	f04f 30ff 	mov.w	r0, #4294967295
 800a99e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9a2:	81a3      	strh	r3, [r4, #12]
 800a9a4:	e78e      	b.n	800a8c4 <__sflush_r+0x1c>
 800a9a6:	4407      	add	r7, r0
 800a9a8:	eba8 0800 	sub.w	r8, r8, r0
 800a9ac:	e7e9      	b.n	800a982 <__sflush_r+0xda>
 800a9ae:	bf00      	nop
 800a9b0:	20400001 	.word	0x20400001

0800a9b4 <_fflush_r>:
 800a9b4:	b538      	push	{r3, r4, r5, lr}
 800a9b6:	690b      	ldr	r3, [r1, #16]
 800a9b8:	4605      	mov	r5, r0
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	b913      	cbnz	r3, 800a9c4 <_fflush_r+0x10>
 800a9be:	2500      	movs	r5, #0
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	bd38      	pop	{r3, r4, r5, pc}
 800a9c4:	b118      	cbz	r0, 800a9ce <_fflush_r+0x1a>
 800a9c6:	6983      	ldr	r3, [r0, #24]
 800a9c8:	b90b      	cbnz	r3, 800a9ce <_fflush_r+0x1a>
 800a9ca:	f000 f887 	bl	800aadc <__sinit>
 800a9ce:	4b14      	ldr	r3, [pc, #80]	; (800aa20 <_fflush_r+0x6c>)
 800a9d0:	429c      	cmp	r4, r3
 800a9d2:	d11b      	bne.n	800aa0c <_fflush_r+0x58>
 800a9d4:	686c      	ldr	r4, [r5, #4]
 800a9d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d0ef      	beq.n	800a9be <_fflush_r+0xa>
 800a9de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a9e0:	07d0      	lsls	r0, r2, #31
 800a9e2:	d404      	bmi.n	800a9ee <_fflush_r+0x3a>
 800a9e4:	0599      	lsls	r1, r3, #22
 800a9e6:	d402      	bmi.n	800a9ee <_fflush_r+0x3a>
 800a9e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9ea:	f000 f915 	bl	800ac18 <__retarget_lock_acquire_recursive>
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	4621      	mov	r1, r4
 800a9f2:	f7ff ff59 	bl	800a8a8 <__sflush_r>
 800a9f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9f8:	4605      	mov	r5, r0
 800a9fa:	07da      	lsls	r2, r3, #31
 800a9fc:	d4e0      	bmi.n	800a9c0 <_fflush_r+0xc>
 800a9fe:	89a3      	ldrh	r3, [r4, #12]
 800aa00:	059b      	lsls	r3, r3, #22
 800aa02:	d4dd      	bmi.n	800a9c0 <_fflush_r+0xc>
 800aa04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa06:	f000 f908 	bl	800ac1a <__retarget_lock_release_recursive>
 800aa0a:	e7d9      	b.n	800a9c0 <_fflush_r+0xc>
 800aa0c:	4b05      	ldr	r3, [pc, #20]	; (800aa24 <_fflush_r+0x70>)
 800aa0e:	429c      	cmp	r4, r3
 800aa10:	d101      	bne.n	800aa16 <_fflush_r+0x62>
 800aa12:	68ac      	ldr	r4, [r5, #8]
 800aa14:	e7df      	b.n	800a9d6 <_fflush_r+0x22>
 800aa16:	4b04      	ldr	r3, [pc, #16]	; (800aa28 <_fflush_r+0x74>)
 800aa18:	429c      	cmp	r4, r3
 800aa1a:	bf08      	it	eq
 800aa1c:	68ec      	ldreq	r4, [r5, #12]
 800aa1e:	e7da      	b.n	800a9d6 <_fflush_r+0x22>
 800aa20:	0800bf70 	.word	0x0800bf70
 800aa24:	0800bf90 	.word	0x0800bf90
 800aa28:	0800bf50 	.word	0x0800bf50

0800aa2c <std>:
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	b510      	push	{r4, lr}
 800aa30:	4604      	mov	r4, r0
 800aa32:	e9c0 3300 	strd	r3, r3, [r0]
 800aa36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa3a:	6083      	str	r3, [r0, #8]
 800aa3c:	8181      	strh	r1, [r0, #12]
 800aa3e:	6643      	str	r3, [r0, #100]	; 0x64
 800aa40:	81c2      	strh	r2, [r0, #14]
 800aa42:	6183      	str	r3, [r0, #24]
 800aa44:	4619      	mov	r1, r3
 800aa46:	2208      	movs	r2, #8
 800aa48:	305c      	adds	r0, #92	; 0x5c
 800aa4a:	f7ff fd8b 	bl	800a564 <memset>
 800aa4e:	4b05      	ldr	r3, [pc, #20]	; (800aa64 <std+0x38>)
 800aa50:	6224      	str	r4, [r4, #32]
 800aa52:	6263      	str	r3, [r4, #36]	; 0x24
 800aa54:	4b04      	ldr	r3, [pc, #16]	; (800aa68 <std+0x3c>)
 800aa56:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa58:	4b04      	ldr	r3, [pc, #16]	; (800aa6c <std+0x40>)
 800aa5a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa5c:	4b04      	ldr	r3, [pc, #16]	; (800aa70 <std+0x44>)
 800aa5e:	6323      	str	r3, [r4, #48]	; 0x30
 800aa60:	bd10      	pop	{r4, pc}
 800aa62:	bf00      	nop
 800aa64:	0800b479 	.word	0x0800b479
 800aa68:	0800b49b 	.word	0x0800b49b
 800aa6c:	0800b4d3 	.word	0x0800b4d3
 800aa70:	0800b4f7 	.word	0x0800b4f7

0800aa74 <_cleanup_r>:
 800aa74:	4901      	ldr	r1, [pc, #4]	; (800aa7c <_cleanup_r+0x8>)
 800aa76:	f000 b8af 	b.w	800abd8 <_fwalk_reent>
 800aa7a:	bf00      	nop
 800aa7c:	0800a9b5 	.word	0x0800a9b5

0800aa80 <__sfmoreglue>:
 800aa80:	b570      	push	{r4, r5, r6, lr}
 800aa82:	2568      	movs	r5, #104	; 0x68
 800aa84:	1e4a      	subs	r2, r1, #1
 800aa86:	4355      	muls	r5, r2
 800aa88:	460e      	mov	r6, r1
 800aa8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa8e:	f000 f975 	bl	800ad7c <_malloc_r>
 800aa92:	4604      	mov	r4, r0
 800aa94:	b140      	cbz	r0, 800aaa8 <__sfmoreglue+0x28>
 800aa96:	2100      	movs	r1, #0
 800aa98:	e9c0 1600 	strd	r1, r6, [r0]
 800aa9c:	300c      	adds	r0, #12
 800aa9e:	60a0      	str	r0, [r4, #8]
 800aaa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aaa4:	f7ff fd5e 	bl	800a564 <memset>
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	bd70      	pop	{r4, r5, r6, pc}

0800aaac <__sfp_lock_acquire>:
 800aaac:	4801      	ldr	r0, [pc, #4]	; (800aab4 <__sfp_lock_acquire+0x8>)
 800aaae:	f000 b8b3 	b.w	800ac18 <__retarget_lock_acquire_recursive>
 800aab2:	bf00      	nop
 800aab4:	20000fe0 	.word	0x20000fe0

0800aab8 <__sfp_lock_release>:
 800aab8:	4801      	ldr	r0, [pc, #4]	; (800aac0 <__sfp_lock_release+0x8>)
 800aaba:	f000 b8ae 	b.w	800ac1a <__retarget_lock_release_recursive>
 800aabe:	bf00      	nop
 800aac0:	20000fe0 	.word	0x20000fe0

0800aac4 <__sinit_lock_acquire>:
 800aac4:	4801      	ldr	r0, [pc, #4]	; (800aacc <__sinit_lock_acquire+0x8>)
 800aac6:	f000 b8a7 	b.w	800ac18 <__retarget_lock_acquire_recursive>
 800aaca:	bf00      	nop
 800aacc:	20000fdb 	.word	0x20000fdb

0800aad0 <__sinit_lock_release>:
 800aad0:	4801      	ldr	r0, [pc, #4]	; (800aad8 <__sinit_lock_release+0x8>)
 800aad2:	f000 b8a2 	b.w	800ac1a <__retarget_lock_release_recursive>
 800aad6:	bf00      	nop
 800aad8:	20000fdb 	.word	0x20000fdb

0800aadc <__sinit>:
 800aadc:	b510      	push	{r4, lr}
 800aade:	4604      	mov	r4, r0
 800aae0:	f7ff fff0 	bl	800aac4 <__sinit_lock_acquire>
 800aae4:	69a3      	ldr	r3, [r4, #24]
 800aae6:	b11b      	cbz	r3, 800aaf0 <__sinit+0x14>
 800aae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaec:	f7ff bff0 	b.w	800aad0 <__sinit_lock_release>
 800aaf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aaf4:	6523      	str	r3, [r4, #80]	; 0x50
 800aaf6:	4b13      	ldr	r3, [pc, #76]	; (800ab44 <__sinit+0x68>)
 800aaf8:	4a13      	ldr	r2, [pc, #76]	; (800ab48 <__sinit+0x6c>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	62a2      	str	r2, [r4, #40]	; 0x28
 800aafe:	42a3      	cmp	r3, r4
 800ab00:	bf08      	it	eq
 800ab02:	2301      	moveq	r3, #1
 800ab04:	4620      	mov	r0, r4
 800ab06:	bf08      	it	eq
 800ab08:	61a3      	streq	r3, [r4, #24]
 800ab0a:	f000 f81f 	bl	800ab4c <__sfp>
 800ab0e:	6060      	str	r0, [r4, #4]
 800ab10:	4620      	mov	r0, r4
 800ab12:	f000 f81b 	bl	800ab4c <__sfp>
 800ab16:	60a0      	str	r0, [r4, #8]
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f000 f817 	bl	800ab4c <__sfp>
 800ab1e:	2200      	movs	r2, #0
 800ab20:	2104      	movs	r1, #4
 800ab22:	60e0      	str	r0, [r4, #12]
 800ab24:	6860      	ldr	r0, [r4, #4]
 800ab26:	f7ff ff81 	bl	800aa2c <std>
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	2109      	movs	r1, #9
 800ab2e:	68a0      	ldr	r0, [r4, #8]
 800ab30:	f7ff ff7c 	bl	800aa2c <std>
 800ab34:	2202      	movs	r2, #2
 800ab36:	2112      	movs	r1, #18
 800ab38:	68e0      	ldr	r0, [r4, #12]
 800ab3a:	f7ff ff77 	bl	800aa2c <std>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	61a3      	str	r3, [r4, #24]
 800ab42:	e7d1      	b.n	800aae8 <__sinit+0xc>
 800ab44:	0800bf4c 	.word	0x0800bf4c
 800ab48:	0800aa75 	.word	0x0800aa75

0800ab4c <__sfp>:
 800ab4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4e:	4607      	mov	r7, r0
 800ab50:	f7ff ffac 	bl	800aaac <__sfp_lock_acquire>
 800ab54:	4b1e      	ldr	r3, [pc, #120]	; (800abd0 <__sfp+0x84>)
 800ab56:	681e      	ldr	r6, [r3, #0]
 800ab58:	69b3      	ldr	r3, [r6, #24]
 800ab5a:	b913      	cbnz	r3, 800ab62 <__sfp+0x16>
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	f7ff ffbd 	bl	800aadc <__sinit>
 800ab62:	3648      	adds	r6, #72	; 0x48
 800ab64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	d503      	bpl.n	800ab74 <__sfp+0x28>
 800ab6c:	6833      	ldr	r3, [r6, #0]
 800ab6e:	b30b      	cbz	r3, 800abb4 <__sfp+0x68>
 800ab70:	6836      	ldr	r6, [r6, #0]
 800ab72:	e7f7      	b.n	800ab64 <__sfp+0x18>
 800ab74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab78:	b9d5      	cbnz	r5, 800abb0 <__sfp+0x64>
 800ab7a:	4b16      	ldr	r3, [pc, #88]	; (800abd4 <__sfp+0x88>)
 800ab7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab80:	60e3      	str	r3, [r4, #12]
 800ab82:	6665      	str	r5, [r4, #100]	; 0x64
 800ab84:	f000 f847 	bl	800ac16 <__retarget_lock_init_recursive>
 800ab88:	f7ff ff96 	bl	800aab8 <__sfp_lock_release>
 800ab8c:	2208      	movs	r2, #8
 800ab8e:	4629      	mov	r1, r5
 800ab90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab98:	6025      	str	r5, [r4, #0]
 800ab9a:	61a5      	str	r5, [r4, #24]
 800ab9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aba0:	f7ff fce0 	bl	800a564 <memset>
 800aba4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aba8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800abac:	4620      	mov	r0, r4
 800abae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abb0:	3468      	adds	r4, #104	; 0x68
 800abb2:	e7d9      	b.n	800ab68 <__sfp+0x1c>
 800abb4:	2104      	movs	r1, #4
 800abb6:	4638      	mov	r0, r7
 800abb8:	f7ff ff62 	bl	800aa80 <__sfmoreglue>
 800abbc:	4604      	mov	r4, r0
 800abbe:	6030      	str	r0, [r6, #0]
 800abc0:	2800      	cmp	r0, #0
 800abc2:	d1d5      	bne.n	800ab70 <__sfp+0x24>
 800abc4:	f7ff ff78 	bl	800aab8 <__sfp_lock_release>
 800abc8:	230c      	movs	r3, #12
 800abca:	603b      	str	r3, [r7, #0]
 800abcc:	e7ee      	b.n	800abac <__sfp+0x60>
 800abce:	bf00      	nop
 800abd0:	0800bf4c 	.word	0x0800bf4c
 800abd4:	ffff0001 	.word	0xffff0001

0800abd8 <_fwalk_reent>:
 800abd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abdc:	4606      	mov	r6, r0
 800abde:	4688      	mov	r8, r1
 800abe0:	2700      	movs	r7, #0
 800abe2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800abe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abea:	f1b9 0901 	subs.w	r9, r9, #1
 800abee:	d505      	bpl.n	800abfc <_fwalk_reent+0x24>
 800abf0:	6824      	ldr	r4, [r4, #0]
 800abf2:	2c00      	cmp	r4, #0
 800abf4:	d1f7      	bne.n	800abe6 <_fwalk_reent+0xe>
 800abf6:	4638      	mov	r0, r7
 800abf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abfc:	89ab      	ldrh	r3, [r5, #12]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d907      	bls.n	800ac12 <_fwalk_reent+0x3a>
 800ac02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac06:	3301      	adds	r3, #1
 800ac08:	d003      	beq.n	800ac12 <_fwalk_reent+0x3a>
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	4630      	mov	r0, r6
 800ac0e:	47c0      	blx	r8
 800ac10:	4307      	orrs	r7, r0
 800ac12:	3568      	adds	r5, #104	; 0x68
 800ac14:	e7e9      	b.n	800abea <_fwalk_reent+0x12>

0800ac16 <__retarget_lock_init_recursive>:
 800ac16:	4770      	bx	lr

0800ac18 <__retarget_lock_acquire_recursive>:
 800ac18:	4770      	bx	lr

0800ac1a <__retarget_lock_release_recursive>:
 800ac1a:	4770      	bx	lr

0800ac1c <__swhatbuf_r>:
 800ac1c:	b570      	push	{r4, r5, r6, lr}
 800ac1e:	460e      	mov	r6, r1
 800ac20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac24:	4614      	mov	r4, r2
 800ac26:	2900      	cmp	r1, #0
 800ac28:	461d      	mov	r5, r3
 800ac2a:	b096      	sub	sp, #88	; 0x58
 800ac2c:	da07      	bge.n	800ac3e <__swhatbuf_r+0x22>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	602b      	str	r3, [r5, #0]
 800ac32:	89b3      	ldrh	r3, [r6, #12]
 800ac34:	061a      	lsls	r2, r3, #24
 800ac36:	d410      	bmi.n	800ac5a <__swhatbuf_r+0x3e>
 800ac38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac3c:	e00e      	b.n	800ac5c <__swhatbuf_r+0x40>
 800ac3e:	466a      	mov	r2, sp
 800ac40:	f000 fc80 	bl	800b544 <_fstat_r>
 800ac44:	2800      	cmp	r0, #0
 800ac46:	dbf2      	blt.n	800ac2e <__swhatbuf_r+0x12>
 800ac48:	9a01      	ldr	r2, [sp, #4]
 800ac4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac52:	425a      	negs	r2, r3
 800ac54:	415a      	adcs	r2, r3
 800ac56:	602a      	str	r2, [r5, #0]
 800ac58:	e7ee      	b.n	800ac38 <__swhatbuf_r+0x1c>
 800ac5a:	2340      	movs	r3, #64	; 0x40
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	6023      	str	r3, [r4, #0]
 800ac60:	b016      	add	sp, #88	; 0x58
 800ac62:	bd70      	pop	{r4, r5, r6, pc}

0800ac64 <__smakebuf_r>:
 800ac64:	898b      	ldrh	r3, [r1, #12]
 800ac66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac68:	079d      	lsls	r5, r3, #30
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	460c      	mov	r4, r1
 800ac6e:	d507      	bpl.n	800ac80 <__smakebuf_r+0x1c>
 800ac70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac74:	6023      	str	r3, [r4, #0]
 800ac76:	6123      	str	r3, [r4, #16]
 800ac78:	2301      	movs	r3, #1
 800ac7a:	6163      	str	r3, [r4, #20]
 800ac7c:	b002      	add	sp, #8
 800ac7e:	bd70      	pop	{r4, r5, r6, pc}
 800ac80:	466a      	mov	r2, sp
 800ac82:	ab01      	add	r3, sp, #4
 800ac84:	f7ff ffca 	bl	800ac1c <__swhatbuf_r>
 800ac88:	9900      	ldr	r1, [sp, #0]
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	f000 f875 	bl	800ad7c <_malloc_r>
 800ac92:	b948      	cbnz	r0, 800aca8 <__smakebuf_r+0x44>
 800ac94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac98:	059a      	lsls	r2, r3, #22
 800ac9a:	d4ef      	bmi.n	800ac7c <__smakebuf_r+0x18>
 800ac9c:	f023 0303 	bic.w	r3, r3, #3
 800aca0:	f043 0302 	orr.w	r3, r3, #2
 800aca4:	81a3      	strh	r3, [r4, #12]
 800aca6:	e7e3      	b.n	800ac70 <__smakebuf_r+0xc>
 800aca8:	4b0d      	ldr	r3, [pc, #52]	; (800ace0 <__smakebuf_r+0x7c>)
 800acaa:	62b3      	str	r3, [r6, #40]	; 0x28
 800acac:	89a3      	ldrh	r3, [r4, #12]
 800acae:	6020      	str	r0, [r4, #0]
 800acb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acb4:	81a3      	strh	r3, [r4, #12]
 800acb6:	9b00      	ldr	r3, [sp, #0]
 800acb8:	6120      	str	r0, [r4, #16]
 800acba:	6163      	str	r3, [r4, #20]
 800acbc:	9b01      	ldr	r3, [sp, #4]
 800acbe:	b15b      	cbz	r3, 800acd8 <__smakebuf_r+0x74>
 800acc0:	4630      	mov	r0, r6
 800acc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acc6:	f000 fc4f 	bl	800b568 <_isatty_r>
 800acca:	b128      	cbz	r0, 800acd8 <__smakebuf_r+0x74>
 800accc:	89a3      	ldrh	r3, [r4, #12]
 800acce:	f023 0303 	bic.w	r3, r3, #3
 800acd2:	f043 0301 	orr.w	r3, r3, #1
 800acd6:	81a3      	strh	r3, [r4, #12]
 800acd8:	89a0      	ldrh	r0, [r4, #12]
 800acda:	4305      	orrs	r5, r0
 800acdc:	81a5      	strh	r5, [r4, #12]
 800acde:	e7cd      	b.n	800ac7c <__smakebuf_r+0x18>
 800ace0:	0800aa75 	.word	0x0800aa75

0800ace4 <_free_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	4605      	mov	r5, r0
 800ace8:	2900      	cmp	r1, #0
 800acea:	d043      	beq.n	800ad74 <_free_r+0x90>
 800acec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acf0:	1f0c      	subs	r4, r1, #4
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	bfb8      	it	lt
 800acf6:	18e4      	addlt	r4, r4, r3
 800acf8:	f000 fc66 	bl	800b5c8 <__malloc_lock>
 800acfc:	4a1e      	ldr	r2, [pc, #120]	; (800ad78 <_free_r+0x94>)
 800acfe:	6813      	ldr	r3, [r2, #0]
 800ad00:	4610      	mov	r0, r2
 800ad02:	b933      	cbnz	r3, 800ad12 <_free_r+0x2e>
 800ad04:	6063      	str	r3, [r4, #4]
 800ad06:	6014      	str	r4, [r2, #0]
 800ad08:	4628      	mov	r0, r5
 800ad0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad0e:	f000 bc61 	b.w	800b5d4 <__malloc_unlock>
 800ad12:	42a3      	cmp	r3, r4
 800ad14:	d90a      	bls.n	800ad2c <_free_r+0x48>
 800ad16:	6821      	ldr	r1, [r4, #0]
 800ad18:	1862      	adds	r2, r4, r1
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	bf01      	itttt	eq
 800ad1e:	681a      	ldreq	r2, [r3, #0]
 800ad20:	685b      	ldreq	r3, [r3, #4]
 800ad22:	1852      	addeq	r2, r2, r1
 800ad24:	6022      	streq	r2, [r4, #0]
 800ad26:	6063      	str	r3, [r4, #4]
 800ad28:	6004      	str	r4, [r0, #0]
 800ad2a:	e7ed      	b.n	800ad08 <_free_r+0x24>
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	b10b      	cbz	r3, 800ad36 <_free_r+0x52>
 800ad32:	42a3      	cmp	r3, r4
 800ad34:	d9fa      	bls.n	800ad2c <_free_r+0x48>
 800ad36:	6811      	ldr	r1, [r2, #0]
 800ad38:	1850      	adds	r0, r2, r1
 800ad3a:	42a0      	cmp	r0, r4
 800ad3c:	d10b      	bne.n	800ad56 <_free_r+0x72>
 800ad3e:	6820      	ldr	r0, [r4, #0]
 800ad40:	4401      	add	r1, r0
 800ad42:	1850      	adds	r0, r2, r1
 800ad44:	4283      	cmp	r3, r0
 800ad46:	6011      	str	r1, [r2, #0]
 800ad48:	d1de      	bne.n	800ad08 <_free_r+0x24>
 800ad4a:	6818      	ldr	r0, [r3, #0]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	4401      	add	r1, r0
 800ad50:	6011      	str	r1, [r2, #0]
 800ad52:	6053      	str	r3, [r2, #4]
 800ad54:	e7d8      	b.n	800ad08 <_free_r+0x24>
 800ad56:	d902      	bls.n	800ad5e <_free_r+0x7a>
 800ad58:	230c      	movs	r3, #12
 800ad5a:	602b      	str	r3, [r5, #0]
 800ad5c:	e7d4      	b.n	800ad08 <_free_r+0x24>
 800ad5e:	6820      	ldr	r0, [r4, #0]
 800ad60:	1821      	adds	r1, r4, r0
 800ad62:	428b      	cmp	r3, r1
 800ad64:	bf01      	itttt	eq
 800ad66:	6819      	ldreq	r1, [r3, #0]
 800ad68:	685b      	ldreq	r3, [r3, #4]
 800ad6a:	1809      	addeq	r1, r1, r0
 800ad6c:	6021      	streq	r1, [r4, #0]
 800ad6e:	6063      	str	r3, [r4, #4]
 800ad70:	6054      	str	r4, [r2, #4]
 800ad72:	e7c9      	b.n	800ad08 <_free_r+0x24>
 800ad74:	bd38      	pop	{r3, r4, r5, pc}
 800ad76:	bf00      	nop
 800ad78:	20000d5c 	.word	0x20000d5c

0800ad7c <_malloc_r>:
 800ad7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7e:	1ccd      	adds	r5, r1, #3
 800ad80:	f025 0503 	bic.w	r5, r5, #3
 800ad84:	3508      	adds	r5, #8
 800ad86:	2d0c      	cmp	r5, #12
 800ad88:	bf38      	it	cc
 800ad8a:	250c      	movcc	r5, #12
 800ad8c:	2d00      	cmp	r5, #0
 800ad8e:	4606      	mov	r6, r0
 800ad90:	db01      	blt.n	800ad96 <_malloc_r+0x1a>
 800ad92:	42a9      	cmp	r1, r5
 800ad94:	d903      	bls.n	800ad9e <_malloc_r+0x22>
 800ad96:	230c      	movs	r3, #12
 800ad98:	6033      	str	r3, [r6, #0]
 800ad9a:	2000      	movs	r0, #0
 800ad9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad9e:	f000 fc13 	bl	800b5c8 <__malloc_lock>
 800ada2:	4921      	ldr	r1, [pc, #132]	; (800ae28 <_malloc_r+0xac>)
 800ada4:	680a      	ldr	r2, [r1, #0]
 800ada6:	4614      	mov	r4, r2
 800ada8:	b99c      	cbnz	r4, 800add2 <_malloc_r+0x56>
 800adaa:	4f20      	ldr	r7, [pc, #128]	; (800ae2c <_malloc_r+0xb0>)
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	b923      	cbnz	r3, 800adba <_malloc_r+0x3e>
 800adb0:	4621      	mov	r1, r4
 800adb2:	4630      	mov	r0, r6
 800adb4:	f000 fb50 	bl	800b458 <_sbrk_r>
 800adb8:	6038      	str	r0, [r7, #0]
 800adba:	4629      	mov	r1, r5
 800adbc:	4630      	mov	r0, r6
 800adbe:	f000 fb4b 	bl	800b458 <_sbrk_r>
 800adc2:	1c43      	adds	r3, r0, #1
 800adc4:	d123      	bne.n	800ae0e <_malloc_r+0x92>
 800adc6:	230c      	movs	r3, #12
 800adc8:	4630      	mov	r0, r6
 800adca:	6033      	str	r3, [r6, #0]
 800adcc:	f000 fc02 	bl	800b5d4 <__malloc_unlock>
 800add0:	e7e3      	b.n	800ad9a <_malloc_r+0x1e>
 800add2:	6823      	ldr	r3, [r4, #0]
 800add4:	1b5b      	subs	r3, r3, r5
 800add6:	d417      	bmi.n	800ae08 <_malloc_r+0x8c>
 800add8:	2b0b      	cmp	r3, #11
 800adda:	d903      	bls.n	800ade4 <_malloc_r+0x68>
 800addc:	6023      	str	r3, [r4, #0]
 800adde:	441c      	add	r4, r3
 800ade0:	6025      	str	r5, [r4, #0]
 800ade2:	e004      	b.n	800adee <_malloc_r+0x72>
 800ade4:	6863      	ldr	r3, [r4, #4]
 800ade6:	42a2      	cmp	r2, r4
 800ade8:	bf0c      	ite	eq
 800adea:	600b      	streq	r3, [r1, #0]
 800adec:	6053      	strne	r3, [r2, #4]
 800adee:	4630      	mov	r0, r6
 800adf0:	f000 fbf0 	bl	800b5d4 <__malloc_unlock>
 800adf4:	f104 000b 	add.w	r0, r4, #11
 800adf8:	1d23      	adds	r3, r4, #4
 800adfa:	f020 0007 	bic.w	r0, r0, #7
 800adfe:	1ac2      	subs	r2, r0, r3
 800ae00:	d0cc      	beq.n	800ad9c <_malloc_r+0x20>
 800ae02:	1a1b      	subs	r3, r3, r0
 800ae04:	50a3      	str	r3, [r4, r2]
 800ae06:	e7c9      	b.n	800ad9c <_malloc_r+0x20>
 800ae08:	4622      	mov	r2, r4
 800ae0a:	6864      	ldr	r4, [r4, #4]
 800ae0c:	e7cc      	b.n	800ada8 <_malloc_r+0x2c>
 800ae0e:	1cc4      	adds	r4, r0, #3
 800ae10:	f024 0403 	bic.w	r4, r4, #3
 800ae14:	42a0      	cmp	r0, r4
 800ae16:	d0e3      	beq.n	800ade0 <_malloc_r+0x64>
 800ae18:	1a21      	subs	r1, r4, r0
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	f000 fb1c 	bl	800b458 <_sbrk_r>
 800ae20:	3001      	adds	r0, #1
 800ae22:	d1dd      	bne.n	800ade0 <_malloc_r+0x64>
 800ae24:	e7cf      	b.n	800adc6 <_malloc_r+0x4a>
 800ae26:	bf00      	nop
 800ae28:	20000d5c 	.word	0x20000d5c
 800ae2c:	20000d60 	.word	0x20000d60

0800ae30 <_realloc_r>:
 800ae30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae32:	4607      	mov	r7, r0
 800ae34:	4614      	mov	r4, r2
 800ae36:	460e      	mov	r6, r1
 800ae38:	b921      	cbnz	r1, 800ae44 <_realloc_r+0x14>
 800ae3a:	4611      	mov	r1, r2
 800ae3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ae40:	f7ff bf9c 	b.w	800ad7c <_malloc_r>
 800ae44:	b922      	cbnz	r2, 800ae50 <_realloc_r+0x20>
 800ae46:	f7ff ff4d 	bl	800ace4 <_free_r>
 800ae4a:	4625      	mov	r5, r4
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae50:	f000 fbc6 	bl	800b5e0 <_malloc_usable_size_r>
 800ae54:	42a0      	cmp	r0, r4
 800ae56:	d20f      	bcs.n	800ae78 <_realloc_r+0x48>
 800ae58:	4621      	mov	r1, r4
 800ae5a:	4638      	mov	r0, r7
 800ae5c:	f7ff ff8e 	bl	800ad7c <_malloc_r>
 800ae60:	4605      	mov	r5, r0
 800ae62:	2800      	cmp	r0, #0
 800ae64:	d0f2      	beq.n	800ae4c <_realloc_r+0x1c>
 800ae66:	4631      	mov	r1, r6
 800ae68:	4622      	mov	r2, r4
 800ae6a:	f7ff fb6d 	bl	800a548 <memcpy>
 800ae6e:	4631      	mov	r1, r6
 800ae70:	4638      	mov	r0, r7
 800ae72:	f7ff ff37 	bl	800ace4 <_free_r>
 800ae76:	e7e9      	b.n	800ae4c <_realloc_r+0x1c>
 800ae78:	4635      	mov	r5, r6
 800ae7a:	e7e7      	b.n	800ae4c <_realloc_r+0x1c>

0800ae7c <__sfputc_r>:
 800ae7c:	6893      	ldr	r3, [r2, #8]
 800ae7e:	b410      	push	{r4}
 800ae80:	3b01      	subs	r3, #1
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	6093      	str	r3, [r2, #8]
 800ae86:	da07      	bge.n	800ae98 <__sfputc_r+0x1c>
 800ae88:	6994      	ldr	r4, [r2, #24]
 800ae8a:	42a3      	cmp	r3, r4
 800ae8c:	db01      	blt.n	800ae92 <__sfputc_r+0x16>
 800ae8e:	290a      	cmp	r1, #10
 800ae90:	d102      	bne.n	800ae98 <__sfputc_r+0x1c>
 800ae92:	bc10      	pop	{r4}
 800ae94:	f7ff bc48 	b.w	800a728 <__swbuf_r>
 800ae98:	6813      	ldr	r3, [r2, #0]
 800ae9a:	1c58      	adds	r0, r3, #1
 800ae9c:	6010      	str	r0, [r2, #0]
 800ae9e:	7019      	strb	r1, [r3, #0]
 800aea0:	4608      	mov	r0, r1
 800aea2:	bc10      	pop	{r4}
 800aea4:	4770      	bx	lr

0800aea6 <__sfputs_r>:
 800aea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea8:	4606      	mov	r6, r0
 800aeaa:	460f      	mov	r7, r1
 800aeac:	4614      	mov	r4, r2
 800aeae:	18d5      	adds	r5, r2, r3
 800aeb0:	42ac      	cmp	r4, r5
 800aeb2:	d101      	bne.n	800aeb8 <__sfputs_r+0x12>
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	e007      	b.n	800aec8 <__sfputs_r+0x22>
 800aeb8:	463a      	mov	r2, r7
 800aeba:	4630      	mov	r0, r6
 800aebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec0:	f7ff ffdc 	bl	800ae7c <__sfputc_r>
 800aec4:	1c43      	adds	r3, r0, #1
 800aec6:	d1f3      	bne.n	800aeb0 <__sfputs_r+0xa>
 800aec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aecc <_vfiprintf_r>:
 800aecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed0:	460d      	mov	r5, r1
 800aed2:	4614      	mov	r4, r2
 800aed4:	4698      	mov	r8, r3
 800aed6:	4606      	mov	r6, r0
 800aed8:	b09d      	sub	sp, #116	; 0x74
 800aeda:	b118      	cbz	r0, 800aee4 <_vfiprintf_r+0x18>
 800aedc:	6983      	ldr	r3, [r0, #24]
 800aede:	b90b      	cbnz	r3, 800aee4 <_vfiprintf_r+0x18>
 800aee0:	f7ff fdfc 	bl	800aadc <__sinit>
 800aee4:	4b89      	ldr	r3, [pc, #548]	; (800b10c <_vfiprintf_r+0x240>)
 800aee6:	429d      	cmp	r5, r3
 800aee8:	d11b      	bne.n	800af22 <_vfiprintf_r+0x56>
 800aeea:	6875      	ldr	r5, [r6, #4]
 800aeec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aeee:	07d9      	lsls	r1, r3, #31
 800aef0:	d405      	bmi.n	800aefe <_vfiprintf_r+0x32>
 800aef2:	89ab      	ldrh	r3, [r5, #12]
 800aef4:	059a      	lsls	r2, r3, #22
 800aef6:	d402      	bmi.n	800aefe <_vfiprintf_r+0x32>
 800aef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aefa:	f7ff fe8d 	bl	800ac18 <__retarget_lock_acquire_recursive>
 800aefe:	89ab      	ldrh	r3, [r5, #12]
 800af00:	071b      	lsls	r3, r3, #28
 800af02:	d501      	bpl.n	800af08 <_vfiprintf_r+0x3c>
 800af04:	692b      	ldr	r3, [r5, #16]
 800af06:	b9eb      	cbnz	r3, 800af44 <_vfiprintf_r+0x78>
 800af08:	4629      	mov	r1, r5
 800af0a:	4630      	mov	r0, r6
 800af0c:	f7ff fc5e 	bl	800a7cc <__swsetup_r>
 800af10:	b1c0      	cbz	r0, 800af44 <_vfiprintf_r+0x78>
 800af12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af14:	07dc      	lsls	r4, r3, #31
 800af16:	d50e      	bpl.n	800af36 <_vfiprintf_r+0x6a>
 800af18:	f04f 30ff 	mov.w	r0, #4294967295
 800af1c:	b01d      	add	sp, #116	; 0x74
 800af1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af22:	4b7b      	ldr	r3, [pc, #492]	; (800b110 <_vfiprintf_r+0x244>)
 800af24:	429d      	cmp	r5, r3
 800af26:	d101      	bne.n	800af2c <_vfiprintf_r+0x60>
 800af28:	68b5      	ldr	r5, [r6, #8]
 800af2a:	e7df      	b.n	800aeec <_vfiprintf_r+0x20>
 800af2c:	4b79      	ldr	r3, [pc, #484]	; (800b114 <_vfiprintf_r+0x248>)
 800af2e:	429d      	cmp	r5, r3
 800af30:	bf08      	it	eq
 800af32:	68f5      	ldreq	r5, [r6, #12]
 800af34:	e7da      	b.n	800aeec <_vfiprintf_r+0x20>
 800af36:	89ab      	ldrh	r3, [r5, #12]
 800af38:	0598      	lsls	r0, r3, #22
 800af3a:	d4ed      	bmi.n	800af18 <_vfiprintf_r+0x4c>
 800af3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af3e:	f7ff fe6c 	bl	800ac1a <__retarget_lock_release_recursive>
 800af42:	e7e9      	b.n	800af18 <_vfiprintf_r+0x4c>
 800af44:	2300      	movs	r3, #0
 800af46:	9309      	str	r3, [sp, #36]	; 0x24
 800af48:	2320      	movs	r3, #32
 800af4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af4e:	2330      	movs	r3, #48	; 0x30
 800af50:	f04f 0901 	mov.w	r9, #1
 800af54:	f8cd 800c 	str.w	r8, [sp, #12]
 800af58:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b118 <_vfiprintf_r+0x24c>
 800af5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af60:	4623      	mov	r3, r4
 800af62:	469a      	mov	sl, r3
 800af64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af68:	b10a      	cbz	r2, 800af6e <_vfiprintf_r+0xa2>
 800af6a:	2a25      	cmp	r2, #37	; 0x25
 800af6c:	d1f9      	bne.n	800af62 <_vfiprintf_r+0x96>
 800af6e:	ebba 0b04 	subs.w	fp, sl, r4
 800af72:	d00b      	beq.n	800af8c <_vfiprintf_r+0xc0>
 800af74:	465b      	mov	r3, fp
 800af76:	4622      	mov	r2, r4
 800af78:	4629      	mov	r1, r5
 800af7a:	4630      	mov	r0, r6
 800af7c:	f7ff ff93 	bl	800aea6 <__sfputs_r>
 800af80:	3001      	adds	r0, #1
 800af82:	f000 80aa 	beq.w	800b0da <_vfiprintf_r+0x20e>
 800af86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af88:	445a      	add	r2, fp
 800af8a:	9209      	str	r2, [sp, #36]	; 0x24
 800af8c:	f89a 3000 	ldrb.w	r3, [sl]
 800af90:	2b00      	cmp	r3, #0
 800af92:	f000 80a2 	beq.w	800b0da <_vfiprintf_r+0x20e>
 800af96:	2300      	movs	r3, #0
 800af98:	f04f 32ff 	mov.w	r2, #4294967295
 800af9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afa0:	f10a 0a01 	add.w	sl, sl, #1
 800afa4:	9304      	str	r3, [sp, #16]
 800afa6:	9307      	str	r3, [sp, #28]
 800afa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afac:	931a      	str	r3, [sp, #104]	; 0x68
 800afae:	4654      	mov	r4, sl
 800afb0:	2205      	movs	r2, #5
 800afb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb6:	4858      	ldr	r0, [pc, #352]	; (800b118 <_vfiprintf_r+0x24c>)
 800afb8:	f000 faf8 	bl	800b5ac <memchr>
 800afbc:	9a04      	ldr	r2, [sp, #16]
 800afbe:	b9d8      	cbnz	r0, 800aff8 <_vfiprintf_r+0x12c>
 800afc0:	06d1      	lsls	r1, r2, #27
 800afc2:	bf44      	itt	mi
 800afc4:	2320      	movmi	r3, #32
 800afc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afca:	0713      	lsls	r3, r2, #28
 800afcc:	bf44      	itt	mi
 800afce:	232b      	movmi	r3, #43	; 0x2b
 800afd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afd4:	f89a 3000 	ldrb.w	r3, [sl]
 800afd8:	2b2a      	cmp	r3, #42	; 0x2a
 800afda:	d015      	beq.n	800b008 <_vfiprintf_r+0x13c>
 800afdc:	4654      	mov	r4, sl
 800afde:	2000      	movs	r0, #0
 800afe0:	f04f 0c0a 	mov.w	ip, #10
 800afe4:	9a07      	ldr	r2, [sp, #28]
 800afe6:	4621      	mov	r1, r4
 800afe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afec:	3b30      	subs	r3, #48	; 0x30
 800afee:	2b09      	cmp	r3, #9
 800aff0:	d94e      	bls.n	800b090 <_vfiprintf_r+0x1c4>
 800aff2:	b1b0      	cbz	r0, 800b022 <_vfiprintf_r+0x156>
 800aff4:	9207      	str	r2, [sp, #28]
 800aff6:	e014      	b.n	800b022 <_vfiprintf_r+0x156>
 800aff8:	eba0 0308 	sub.w	r3, r0, r8
 800affc:	fa09 f303 	lsl.w	r3, r9, r3
 800b000:	4313      	orrs	r3, r2
 800b002:	46a2      	mov	sl, r4
 800b004:	9304      	str	r3, [sp, #16]
 800b006:	e7d2      	b.n	800afae <_vfiprintf_r+0xe2>
 800b008:	9b03      	ldr	r3, [sp, #12]
 800b00a:	1d19      	adds	r1, r3, #4
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	9103      	str	r1, [sp, #12]
 800b010:	2b00      	cmp	r3, #0
 800b012:	bfbb      	ittet	lt
 800b014:	425b      	neglt	r3, r3
 800b016:	f042 0202 	orrlt.w	r2, r2, #2
 800b01a:	9307      	strge	r3, [sp, #28]
 800b01c:	9307      	strlt	r3, [sp, #28]
 800b01e:	bfb8      	it	lt
 800b020:	9204      	strlt	r2, [sp, #16]
 800b022:	7823      	ldrb	r3, [r4, #0]
 800b024:	2b2e      	cmp	r3, #46	; 0x2e
 800b026:	d10c      	bne.n	800b042 <_vfiprintf_r+0x176>
 800b028:	7863      	ldrb	r3, [r4, #1]
 800b02a:	2b2a      	cmp	r3, #42	; 0x2a
 800b02c:	d135      	bne.n	800b09a <_vfiprintf_r+0x1ce>
 800b02e:	9b03      	ldr	r3, [sp, #12]
 800b030:	3402      	adds	r4, #2
 800b032:	1d1a      	adds	r2, r3, #4
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	9203      	str	r2, [sp, #12]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	bfb8      	it	lt
 800b03c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b040:	9305      	str	r3, [sp, #20]
 800b042:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b128 <_vfiprintf_r+0x25c>
 800b046:	2203      	movs	r2, #3
 800b048:	4650      	mov	r0, sl
 800b04a:	7821      	ldrb	r1, [r4, #0]
 800b04c:	f000 faae 	bl	800b5ac <memchr>
 800b050:	b140      	cbz	r0, 800b064 <_vfiprintf_r+0x198>
 800b052:	2340      	movs	r3, #64	; 0x40
 800b054:	eba0 000a 	sub.w	r0, r0, sl
 800b058:	fa03 f000 	lsl.w	r0, r3, r0
 800b05c:	9b04      	ldr	r3, [sp, #16]
 800b05e:	3401      	adds	r4, #1
 800b060:	4303      	orrs	r3, r0
 800b062:	9304      	str	r3, [sp, #16]
 800b064:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b068:	2206      	movs	r2, #6
 800b06a:	482c      	ldr	r0, [pc, #176]	; (800b11c <_vfiprintf_r+0x250>)
 800b06c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b070:	f000 fa9c 	bl	800b5ac <memchr>
 800b074:	2800      	cmp	r0, #0
 800b076:	d03f      	beq.n	800b0f8 <_vfiprintf_r+0x22c>
 800b078:	4b29      	ldr	r3, [pc, #164]	; (800b120 <_vfiprintf_r+0x254>)
 800b07a:	bb1b      	cbnz	r3, 800b0c4 <_vfiprintf_r+0x1f8>
 800b07c:	9b03      	ldr	r3, [sp, #12]
 800b07e:	3307      	adds	r3, #7
 800b080:	f023 0307 	bic.w	r3, r3, #7
 800b084:	3308      	adds	r3, #8
 800b086:	9303      	str	r3, [sp, #12]
 800b088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b08a:	443b      	add	r3, r7
 800b08c:	9309      	str	r3, [sp, #36]	; 0x24
 800b08e:	e767      	b.n	800af60 <_vfiprintf_r+0x94>
 800b090:	460c      	mov	r4, r1
 800b092:	2001      	movs	r0, #1
 800b094:	fb0c 3202 	mla	r2, ip, r2, r3
 800b098:	e7a5      	b.n	800afe6 <_vfiprintf_r+0x11a>
 800b09a:	2300      	movs	r3, #0
 800b09c:	f04f 0c0a 	mov.w	ip, #10
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	3401      	adds	r4, #1
 800b0a4:	9305      	str	r3, [sp, #20]
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0ac:	3a30      	subs	r2, #48	; 0x30
 800b0ae:	2a09      	cmp	r2, #9
 800b0b0:	d903      	bls.n	800b0ba <_vfiprintf_r+0x1ee>
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d0c5      	beq.n	800b042 <_vfiprintf_r+0x176>
 800b0b6:	9105      	str	r1, [sp, #20]
 800b0b8:	e7c3      	b.n	800b042 <_vfiprintf_r+0x176>
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	2301      	movs	r3, #1
 800b0be:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0c2:	e7f0      	b.n	800b0a6 <_vfiprintf_r+0x1da>
 800b0c4:	ab03      	add	r3, sp, #12
 800b0c6:	9300      	str	r3, [sp, #0]
 800b0c8:	462a      	mov	r2, r5
 800b0ca:	4630      	mov	r0, r6
 800b0cc:	4b15      	ldr	r3, [pc, #84]	; (800b124 <_vfiprintf_r+0x258>)
 800b0ce:	a904      	add	r1, sp, #16
 800b0d0:	f3af 8000 	nop.w
 800b0d4:	4607      	mov	r7, r0
 800b0d6:	1c78      	adds	r0, r7, #1
 800b0d8:	d1d6      	bne.n	800b088 <_vfiprintf_r+0x1bc>
 800b0da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0dc:	07d9      	lsls	r1, r3, #31
 800b0de:	d405      	bmi.n	800b0ec <_vfiprintf_r+0x220>
 800b0e0:	89ab      	ldrh	r3, [r5, #12]
 800b0e2:	059a      	lsls	r2, r3, #22
 800b0e4:	d402      	bmi.n	800b0ec <_vfiprintf_r+0x220>
 800b0e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0e8:	f7ff fd97 	bl	800ac1a <__retarget_lock_release_recursive>
 800b0ec:	89ab      	ldrh	r3, [r5, #12]
 800b0ee:	065b      	lsls	r3, r3, #25
 800b0f0:	f53f af12 	bmi.w	800af18 <_vfiprintf_r+0x4c>
 800b0f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0f6:	e711      	b.n	800af1c <_vfiprintf_r+0x50>
 800b0f8:	ab03      	add	r3, sp, #12
 800b0fa:	9300      	str	r3, [sp, #0]
 800b0fc:	462a      	mov	r2, r5
 800b0fe:	4630      	mov	r0, r6
 800b100:	4b08      	ldr	r3, [pc, #32]	; (800b124 <_vfiprintf_r+0x258>)
 800b102:	a904      	add	r1, sp, #16
 800b104:	f000 f882 	bl	800b20c <_printf_i>
 800b108:	e7e4      	b.n	800b0d4 <_vfiprintf_r+0x208>
 800b10a:	bf00      	nop
 800b10c:	0800bf70 	.word	0x0800bf70
 800b110:	0800bf90 	.word	0x0800bf90
 800b114:	0800bf50 	.word	0x0800bf50
 800b118:	0800bfb0 	.word	0x0800bfb0
 800b11c:	0800bfba 	.word	0x0800bfba
 800b120:	00000000 	.word	0x00000000
 800b124:	0800aea7 	.word	0x0800aea7
 800b128:	0800bfb6 	.word	0x0800bfb6

0800b12c <_printf_common>:
 800b12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b130:	4616      	mov	r6, r2
 800b132:	4699      	mov	r9, r3
 800b134:	688a      	ldr	r2, [r1, #8]
 800b136:	690b      	ldr	r3, [r1, #16]
 800b138:	4607      	mov	r7, r0
 800b13a:	4293      	cmp	r3, r2
 800b13c:	bfb8      	it	lt
 800b13e:	4613      	movlt	r3, r2
 800b140:	6033      	str	r3, [r6, #0]
 800b142:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b146:	460c      	mov	r4, r1
 800b148:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b14c:	b10a      	cbz	r2, 800b152 <_printf_common+0x26>
 800b14e:	3301      	adds	r3, #1
 800b150:	6033      	str	r3, [r6, #0]
 800b152:	6823      	ldr	r3, [r4, #0]
 800b154:	0699      	lsls	r1, r3, #26
 800b156:	bf42      	ittt	mi
 800b158:	6833      	ldrmi	r3, [r6, #0]
 800b15a:	3302      	addmi	r3, #2
 800b15c:	6033      	strmi	r3, [r6, #0]
 800b15e:	6825      	ldr	r5, [r4, #0]
 800b160:	f015 0506 	ands.w	r5, r5, #6
 800b164:	d106      	bne.n	800b174 <_printf_common+0x48>
 800b166:	f104 0a19 	add.w	sl, r4, #25
 800b16a:	68e3      	ldr	r3, [r4, #12]
 800b16c:	6832      	ldr	r2, [r6, #0]
 800b16e:	1a9b      	subs	r3, r3, r2
 800b170:	42ab      	cmp	r3, r5
 800b172:	dc28      	bgt.n	800b1c6 <_printf_common+0x9a>
 800b174:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b178:	1e13      	subs	r3, r2, #0
 800b17a:	6822      	ldr	r2, [r4, #0]
 800b17c:	bf18      	it	ne
 800b17e:	2301      	movne	r3, #1
 800b180:	0692      	lsls	r2, r2, #26
 800b182:	d42d      	bmi.n	800b1e0 <_printf_common+0xb4>
 800b184:	4649      	mov	r1, r9
 800b186:	4638      	mov	r0, r7
 800b188:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b18c:	47c0      	blx	r8
 800b18e:	3001      	adds	r0, #1
 800b190:	d020      	beq.n	800b1d4 <_printf_common+0xa8>
 800b192:	6823      	ldr	r3, [r4, #0]
 800b194:	68e5      	ldr	r5, [r4, #12]
 800b196:	f003 0306 	and.w	r3, r3, #6
 800b19a:	2b04      	cmp	r3, #4
 800b19c:	bf18      	it	ne
 800b19e:	2500      	movne	r5, #0
 800b1a0:	6832      	ldr	r2, [r6, #0]
 800b1a2:	f04f 0600 	mov.w	r6, #0
 800b1a6:	68a3      	ldr	r3, [r4, #8]
 800b1a8:	bf08      	it	eq
 800b1aa:	1aad      	subeq	r5, r5, r2
 800b1ac:	6922      	ldr	r2, [r4, #16]
 800b1ae:	bf08      	it	eq
 800b1b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	bfc4      	itt	gt
 800b1b8:	1a9b      	subgt	r3, r3, r2
 800b1ba:	18ed      	addgt	r5, r5, r3
 800b1bc:	341a      	adds	r4, #26
 800b1be:	42b5      	cmp	r5, r6
 800b1c0:	d11a      	bne.n	800b1f8 <_printf_common+0xcc>
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	e008      	b.n	800b1d8 <_printf_common+0xac>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	4652      	mov	r2, sl
 800b1ca:	4649      	mov	r1, r9
 800b1cc:	4638      	mov	r0, r7
 800b1ce:	47c0      	blx	r8
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	d103      	bne.n	800b1dc <_printf_common+0xb0>
 800b1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1dc:	3501      	adds	r5, #1
 800b1de:	e7c4      	b.n	800b16a <_printf_common+0x3e>
 800b1e0:	2030      	movs	r0, #48	; 0x30
 800b1e2:	18e1      	adds	r1, r4, r3
 800b1e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1e8:	1c5a      	adds	r2, r3, #1
 800b1ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1ee:	4422      	add	r2, r4
 800b1f0:	3302      	adds	r3, #2
 800b1f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b1f6:	e7c5      	b.n	800b184 <_printf_common+0x58>
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	4622      	mov	r2, r4
 800b1fc:	4649      	mov	r1, r9
 800b1fe:	4638      	mov	r0, r7
 800b200:	47c0      	blx	r8
 800b202:	3001      	adds	r0, #1
 800b204:	d0e6      	beq.n	800b1d4 <_printf_common+0xa8>
 800b206:	3601      	adds	r6, #1
 800b208:	e7d9      	b.n	800b1be <_printf_common+0x92>
	...

0800b20c <_printf_i>:
 800b20c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b210:	460c      	mov	r4, r1
 800b212:	7e27      	ldrb	r7, [r4, #24]
 800b214:	4691      	mov	r9, r2
 800b216:	2f78      	cmp	r7, #120	; 0x78
 800b218:	4680      	mov	r8, r0
 800b21a:	469a      	mov	sl, r3
 800b21c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b21e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b222:	d807      	bhi.n	800b234 <_printf_i+0x28>
 800b224:	2f62      	cmp	r7, #98	; 0x62
 800b226:	d80a      	bhi.n	800b23e <_printf_i+0x32>
 800b228:	2f00      	cmp	r7, #0
 800b22a:	f000 80d9 	beq.w	800b3e0 <_printf_i+0x1d4>
 800b22e:	2f58      	cmp	r7, #88	; 0x58
 800b230:	f000 80a4 	beq.w	800b37c <_printf_i+0x170>
 800b234:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b238:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b23c:	e03a      	b.n	800b2b4 <_printf_i+0xa8>
 800b23e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b242:	2b15      	cmp	r3, #21
 800b244:	d8f6      	bhi.n	800b234 <_printf_i+0x28>
 800b246:	a001      	add	r0, pc, #4	; (adr r0, 800b24c <_printf_i+0x40>)
 800b248:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b24c:	0800b2a5 	.word	0x0800b2a5
 800b250:	0800b2b9 	.word	0x0800b2b9
 800b254:	0800b235 	.word	0x0800b235
 800b258:	0800b235 	.word	0x0800b235
 800b25c:	0800b235 	.word	0x0800b235
 800b260:	0800b235 	.word	0x0800b235
 800b264:	0800b2b9 	.word	0x0800b2b9
 800b268:	0800b235 	.word	0x0800b235
 800b26c:	0800b235 	.word	0x0800b235
 800b270:	0800b235 	.word	0x0800b235
 800b274:	0800b235 	.word	0x0800b235
 800b278:	0800b3c7 	.word	0x0800b3c7
 800b27c:	0800b2e9 	.word	0x0800b2e9
 800b280:	0800b3a9 	.word	0x0800b3a9
 800b284:	0800b235 	.word	0x0800b235
 800b288:	0800b235 	.word	0x0800b235
 800b28c:	0800b3e9 	.word	0x0800b3e9
 800b290:	0800b235 	.word	0x0800b235
 800b294:	0800b2e9 	.word	0x0800b2e9
 800b298:	0800b235 	.word	0x0800b235
 800b29c:	0800b235 	.word	0x0800b235
 800b2a0:	0800b3b1 	.word	0x0800b3b1
 800b2a4:	680b      	ldr	r3, [r1, #0]
 800b2a6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b2aa:	1d1a      	adds	r2, r3, #4
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	600a      	str	r2, [r1, #0]
 800b2b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e0a4      	b.n	800b402 <_printf_i+0x1f6>
 800b2b8:	6825      	ldr	r5, [r4, #0]
 800b2ba:	6808      	ldr	r0, [r1, #0]
 800b2bc:	062e      	lsls	r6, r5, #24
 800b2be:	f100 0304 	add.w	r3, r0, #4
 800b2c2:	d50a      	bpl.n	800b2da <_printf_i+0xce>
 800b2c4:	6805      	ldr	r5, [r0, #0]
 800b2c6:	600b      	str	r3, [r1, #0]
 800b2c8:	2d00      	cmp	r5, #0
 800b2ca:	da03      	bge.n	800b2d4 <_printf_i+0xc8>
 800b2cc:	232d      	movs	r3, #45	; 0x2d
 800b2ce:	426d      	negs	r5, r5
 800b2d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2d4:	230a      	movs	r3, #10
 800b2d6:	485e      	ldr	r0, [pc, #376]	; (800b450 <_printf_i+0x244>)
 800b2d8:	e019      	b.n	800b30e <_printf_i+0x102>
 800b2da:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b2de:	6805      	ldr	r5, [r0, #0]
 800b2e0:	600b      	str	r3, [r1, #0]
 800b2e2:	bf18      	it	ne
 800b2e4:	b22d      	sxthne	r5, r5
 800b2e6:	e7ef      	b.n	800b2c8 <_printf_i+0xbc>
 800b2e8:	680b      	ldr	r3, [r1, #0]
 800b2ea:	6825      	ldr	r5, [r4, #0]
 800b2ec:	1d18      	adds	r0, r3, #4
 800b2ee:	6008      	str	r0, [r1, #0]
 800b2f0:	0628      	lsls	r0, r5, #24
 800b2f2:	d501      	bpl.n	800b2f8 <_printf_i+0xec>
 800b2f4:	681d      	ldr	r5, [r3, #0]
 800b2f6:	e002      	b.n	800b2fe <_printf_i+0xf2>
 800b2f8:	0669      	lsls	r1, r5, #25
 800b2fa:	d5fb      	bpl.n	800b2f4 <_printf_i+0xe8>
 800b2fc:	881d      	ldrh	r5, [r3, #0]
 800b2fe:	2f6f      	cmp	r7, #111	; 0x6f
 800b300:	bf0c      	ite	eq
 800b302:	2308      	moveq	r3, #8
 800b304:	230a      	movne	r3, #10
 800b306:	4852      	ldr	r0, [pc, #328]	; (800b450 <_printf_i+0x244>)
 800b308:	2100      	movs	r1, #0
 800b30a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b30e:	6866      	ldr	r6, [r4, #4]
 800b310:	2e00      	cmp	r6, #0
 800b312:	bfa8      	it	ge
 800b314:	6821      	ldrge	r1, [r4, #0]
 800b316:	60a6      	str	r6, [r4, #8]
 800b318:	bfa4      	itt	ge
 800b31a:	f021 0104 	bicge.w	r1, r1, #4
 800b31e:	6021      	strge	r1, [r4, #0]
 800b320:	b90d      	cbnz	r5, 800b326 <_printf_i+0x11a>
 800b322:	2e00      	cmp	r6, #0
 800b324:	d04d      	beq.n	800b3c2 <_printf_i+0x1b6>
 800b326:	4616      	mov	r6, r2
 800b328:	fbb5 f1f3 	udiv	r1, r5, r3
 800b32c:	fb03 5711 	mls	r7, r3, r1, r5
 800b330:	5dc7      	ldrb	r7, [r0, r7]
 800b332:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b336:	462f      	mov	r7, r5
 800b338:	42bb      	cmp	r3, r7
 800b33a:	460d      	mov	r5, r1
 800b33c:	d9f4      	bls.n	800b328 <_printf_i+0x11c>
 800b33e:	2b08      	cmp	r3, #8
 800b340:	d10b      	bne.n	800b35a <_printf_i+0x14e>
 800b342:	6823      	ldr	r3, [r4, #0]
 800b344:	07df      	lsls	r7, r3, #31
 800b346:	d508      	bpl.n	800b35a <_printf_i+0x14e>
 800b348:	6923      	ldr	r3, [r4, #16]
 800b34a:	6861      	ldr	r1, [r4, #4]
 800b34c:	4299      	cmp	r1, r3
 800b34e:	bfde      	ittt	le
 800b350:	2330      	movle	r3, #48	; 0x30
 800b352:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b356:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b35a:	1b92      	subs	r2, r2, r6
 800b35c:	6122      	str	r2, [r4, #16]
 800b35e:	464b      	mov	r3, r9
 800b360:	4621      	mov	r1, r4
 800b362:	4640      	mov	r0, r8
 800b364:	f8cd a000 	str.w	sl, [sp]
 800b368:	aa03      	add	r2, sp, #12
 800b36a:	f7ff fedf 	bl	800b12c <_printf_common>
 800b36e:	3001      	adds	r0, #1
 800b370:	d14c      	bne.n	800b40c <_printf_i+0x200>
 800b372:	f04f 30ff 	mov.w	r0, #4294967295
 800b376:	b004      	add	sp, #16
 800b378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b37c:	4834      	ldr	r0, [pc, #208]	; (800b450 <_printf_i+0x244>)
 800b37e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b382:	680e      	ldr	r6, [r1, #0]
 800b384:	6823      	ldr	r3, [r4, #0]
 800b386:	f856 5b04 	ldr.w	r5, [r6], #4
 800b38a:	061f      	lsls	r7, r3, #24
 800b38c:	600e      	str	r6, [r1, #0]
 800b38e:	d514      	bpl.n	800b3ba <_printf_i+0x1ae>
 800b390:	07d9      	lsls	r1, r3, #31
 800b392:	bf44      	itt	mi
 800b394:	f043 0320 	orrmi.w	r3, r3, #32
 800b398:	6023      	strmi	r3, [r4, #0]
 800b39a:	b91d      	cbnz	r5, 800b3a4 <_printf_i+0x198>
 800b39c:	6823      	ldr	r3, [r4, #0]
 800b39e:	f023 0320 	bic.w	r3, r3, #32
 800b3a2:	6023      	str	r3, [r4, #0]
 800b3a4:	2310      	movs	r3, #16
 800b3a6:	e7af      	b.n	800b308 <_printf_i+0xfc>
 800b3a8:	6823      	ldr	r3, [r4, #0]
 800b3aa:	f043 0320 	orr.w	r3, r3, #32
 800b3ae:	6023      	str	r3, [r4, #0]
 800b3b0:	2378      	movs	r3, #120	; 0x78
 800b3b2:	4828      	ldr	r0, [pc, #160]	; (800b454 <_printf_i+0x248>)
 800b3b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b3b8:	e7e3      	b.n	800b382 <_printf_i+0x176>
 800b3ba:	065e      	lsls	r6, r3, #25
 800b3bc:	bf48      	it	mi
 800b3be:	b2ad      	uxthmi	r5, r5
 800b3c0:	e7e6      	b.n	800b390 <_printf_i+0x184>
 800b3c2:	4616      	mov	r6, r2
 800b3c4:	e7bb      	b.n	800b33e <_printf_i+0x132>
 800b3c6:	680b      	ldr	r3, [r1, #0]
 800b3c8:	6826      	ldr	r6, [r4, #0]
 800b3ca:	1d1d      	adds	r5, r3, #4
 800b3cc:	6960      	ldr	r0, [r4, #20]
 800b3ce:	600d      	str	r5, [r1, #0]
 800b3d0:	0635      	lsls	r5, r6, #24
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	d501      	bpl.n	800b3da <_printf_i+0x1ce>
 800b3d6:	6018      	str	r0, [r3, #0]
 800b3d8:	e002      	b.n	800b3e0 <_printf_i+0x1d4>
 800b3da:	0671      	lsls	r1, r6, #25
 800b3dc:	d5fb      	bpl.n	800b3d6 <_printf_i+0x1ca>
 800b3de:	8018      	strh	r0, [r3, #0]
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	4616      	mov	r6, r2
 800b3e4:	6123      	str	r3, [r4, #16]
 800b3e6:	e7ba      	b.n	800b35e <_printf_i+0x152>
 800b3e8:	680b      	ldr	r3, [r1, #0]
 800b3ea:	1d1a      	adds	r2, r3, #4
 800b3ec:	600a      	str	r2, [r1, #0]
 800b3ee:	681e      	ldr	r6, [r3, #0]
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	6862      	ldr	r2, [r4, #4]
 800b3f6:	f000 f8d9 	bl	800b5ac <memchr>
 800b3fa:	b108      	cbz	r0, 800b400 <_printf_i+0x1f4>
 800b3fc:	1b80      	subs	r0, r0, r6
 800b3fe:	6060      	str	r0, [r4, #4]
 800b400:	6863      	ldr	r3, [r4, #4]
 800b402:	6123      	str	r3, [r4, #16]
 800b404:	2300      	movs	r3, #0
 800b406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b40a:	e7a8      	b.n	800b35e <_printf_i+0x152>
 800b40c:	4632      	mov	r2, r6
 800b40e:	4649      	mov	r1, r9
 800b410:	4640      	mov	r0, r8
 800b412:	6923      	ldr	r3, [r4, #16]
 800b414:	47d0      	blx	sl
 800b416:	3001      	adds	r0, #1
 800b418:	d0ab      	beq.n	800b372 <_printf_i+0x166>
 800b41a:	6823      	ldr	r3, [r4, #0]
 800b41c:	079b      	lsls	r3, r3, #30
 800b41e:	d413      	bmi.n	800b448 <_printf_i+0x23c>
 800b420:	68e0      	ldr	r0, [r4, #12]
 800b422:	9b03      	ldr	r3, [sp, #12]
 800b424:	4298      	cmp	r0, r3
 800b426:	bfb8      	it	lt
 800b428:	4618      	movlt	r0, r3
 800b42a:	e7a4      	b.n	800b376 <_printf_i+0x16a>
 800b42c:	2301      	movs	r3, #1
 800b42e:	4632      	mov	r2, r6
 800b430:	4649      	mov	r1, r9
 800b432:	4640      	mov	r0, r8
 800b434:	47d0      	blx	sl
 800b436:	3001      	adds	r0, #1
 800b438:	d09b      	beq.n	800b372 <_printf_i+0x166>
 800b43a:	3501      	adds	r5, #1
 800b43c:	68e3      	ldr	r3, [r4, #12]
 800b43e:	9903      	ldr	r1, [sp, #12]
 800b440:	1a5b      	subs	r3, r3, r1
 800b442:	42ab      	cmp	r3, r5
 800b444:	dcf2      	bgt.n	800b42c <_printf_i+0x220>
 800b446:	e7eb      	b.n	800b420 <_printf_i+0x214>
 800b448:	2500      	movs	r5, #0
 800b44a:	f104 0619 	add.w	r6, r4, #25
 800b44e:	e7f5      	b.n	800b43c <_printf_i+0x230>
 800b450:	0800bfc1 	.word	0x0800bfc1
 800b454:	0800bfd2 	.word	0x0800bfd2

0800b458 <_sbrk_r>:
 800b458:	b538      	push	{r3, r4, r5, lr}
 800b45a:	2300      	movs	r3, #0
 800b45c:	4d05      	ldr	r5, [pc, #20]	; (800b474 <_sbrk_r+0x1c>)
 800b45e:	4604      	mov	r4, r0
 800b460:	4608      	mov	r0, r1
 800b462:	602b      	str	r3, [r5, #0]
 800b464:	f7fb fa00 	bl	8006868 <_sbrk>
 800b468:	1c43      	adds	r3, r0, #1
 800b46a:	d102      	bne.n	800b472 <_sbrk_r+0x1a>
 800b46c:	682b      	ldr	r3, [r5, #0]
 800b46e:	b103      	cbz	r3, 800b472 <_sbrk_r+0x1a>
 800b470:	6023      	str	r3, [r4, #0]
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	20000fe4 	.word	0x20000fe4

0800b478 <__sread>:
 800b478:	b510      	push	{r4, lr}
 800b47a:	460c      	mov	r4, r1
 800b47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b480:	f000 f8b6 	bl	800b5f0 <_read_r>
 800b484:	2800      	cmp	r0, #0
 800b486:	bfab      	itete	ge
 800b488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b48a:	89a3      	ldrhlt	r3, [r4, #12]
 800b48c:	181b      	addge	r3, r3, r0
 800b48e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b492:	bfac      	ite	ge
 800b494:	6563      	strge	r3, [r4, #84]	; 0x54
 800b496:	81a3      	strhlt	r3, [r4, #12]
 800b498:	bd10      	pop	{r4, pc}

0800b49a <__swrite>:
 800b49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b49e:	461f      	mov	r7, r3
 800b4a0:	898b      	ldrh	r3, [r1, #12]
 800b4a2:	4605      	mov	r5, r0
 800b4a4:	05db      	lsls	r3, r3, #23
 800b4a6:	460c      	mov	r4, r1
 800b4a8:	4616      	mov	r6, r2
 800b4aa:	d505      	bpl.n	800b4b8 <__swrite+0x1e>
 800b4ac:	2302      	movs	r3, #2
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4b4:	f000 f868 	bl	800b588 <_lseek_r>
 800b4b8:	89a3      	ldrh	r3, [r4, #12]
 800b4ba:	4632      	mov	r2, r6
 800b4bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4c0:	81a3      	strh	r3, [r4, #12]
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	463b      	mov	r3, r7
 800b4c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ce:	f000 b817 	b.w	800b500 <_write_r>

0800b4d2 <__sseek>:
 800b4d2:	b510      	push	{r4, lr}
 800b4d4:	460c      	mov	r4, r1
 800b4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4da:	f000 f855 	bl	800b588 <_lseek_r>
 800b4de:	1c43      	adds	r3, r0, #1
 800b4e0:	89a3      	ldrh	r3, [r4, #12]
 800b4e2:	bf15      	itete	ne
 800b4e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4ee:	81a3      	strheq	r3, [r4, #12]
 800b4f0:	bf18      	it	ne
 800b4f2:	81a3      	strhne	r3, [r4, #12]
 800b4f4:	bd10      	pop	{r4, pc}

0800b4f6 <__sclose>:
 800b4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4fa:	f000 b813 	b.w	800b524 <_close_r>
	...

0800b500 <_write_r>:
 800b500:	b538      	push	{r3, r4, r5, lr}
 800b502:	4604      	mov	r4, r0
 800b504:	4608      	mov	r0, r1
 800b506:	4611      	mov	r1, r2
 800b508:	2200      	movs	r2, #0
 800b50a:	4d05      	ldr	r5, [pc, #20]	; (800b520 <_write_r+0x20>)
 800b50c:	602a      	str	r2, [r5, #0]
 800b50e:	461a      	mov	r2, r3
 800b510:	f7fb f95e 	bl	80067d0 <_write>
 800b514:	1c43      	adds	r3, r0, #1
 800b516:	d102      	bne.n	800b51e <_write_r+0x1e>
 800b518:	682b      	ldr	r3, [r5, #0]
 800b51a:	b103      	cbz	r3, 800b51e <_write_r+0x1e>
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	bd38      	pop	{r3, r4, r5, pc}
 800b520:	20000fe4 	.word	0x20000fe4

0800b524 <_close_r>:
 800b524:	b538      	push	{r3, r4, r5, lr}
 800b526:	2300      	movs	r3, #0
 800b528:	4d05      	ldr	r5, [pc, #20]	; (800b540 <_close_r+0x1c>)
 800b52a:	4604      	mov	r4, r0
 800b52c:	4608      	mov	r0, r1
 800b52e:	602b      	str	r3, [r5, #0]
 800b530:	f7fb f96a 	bl	8006808 <_close>
 800b534:	1c43      	adds	r3, r0, #1
 800b536:	d102      	bne.n	800b53e <_close_r+0x1a>
 800b538:	682b      	ldr	r3, [r5, #0]
 800b53a:	b103      	cbz	r3, 800b53e <_close_r+0x1a>
 800b53c:	6023      	str	r3, [r4, #0]
 800b53e:	bd38      	pop	{r3, r4, r5, pc}
 800b540:	20000fe4 	.word	0x20000fe4

0800b544 <_fstat_r>:
 800b544:	b538      	push	{r3, r4, r5, lr}
 800b546:	2300      	movs	r3, #0
 800b548:	4d06      	ldr	r5, [pc, #24]	; (800b564 <_fstat_r+0x20>)
 800b54a:	4604      	mov	r4, r0
 800b54c:	4608      	mov	r0, r1
 800b54e:	4611      	mov	r1, r2
 800b550:	602b      	str	r3, [r5, #0]
 800b552:	f7fb f964 	bl	800681e <_fstat>
 800b556:	1c43      	adds	r3, r0, #1
 800b558:	d102      	bne.n	800b560 <_fstat_r+0x1c>
 800b55a:	682b      	ldr	r3, [r5, #0]
 800b55c:	b103      	cbz	r3, 800b560 <_fstat_r+0x1c>
 800b55e:	6023      	str	r3, [r4, #0]
 800b560:	bd38      	pop	{r3, r4, r5, pc}
 800b562:	bf00      	nop
 800b564:	20000fe4 	.word	0x20000fe4

0800b568 <_isatty_r>:
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	2300      	movs	r3, #0
 800b56c:	4d05      	ldr	r5, [pc, #20]	; (800b584 <_isatty_r+0x1c>)
 800b56e:	4604      	mov	r4, r0
 800b570:	4608      	mov	r0, r1
 800b572:	602b      	str	r3, [r5, #0]
 800b574:	f7fb f962 	bl	800683c <_isatty>
 800b578:	1c43      	adds	r3, r0, #1
 800b57a:	d102      	bne.n	800b582 <_isatty_r+0x1a>
 800b57c:	682b      	ldr	r3, [r5, #0]
 800b57e:	b103      	cbz	r3, 800b582 <_isatty_r+0x1a>
 800b580:	6023      	str	r3, [r4, #0]
 800b582:	bd38      	pop	{r3, r4, r5, pc}
 800b584:	20000fe4 	.word	0x20000fe4

0800b588 <_lseek_r>:
 800b588:	b538      	push	{r3, r4, r5, lr}
 800b58a:	4604      	mov	r4, r0
 800b58c:	4608      	mov	r0, r1
 800b58e:	4611      	mov	r1, r2
 800b590:	2200      	movs	r2, #0
 800b592:	4d05      	ldr	r5, [pc, #20]	; (800b5a8 <_lseek_r+0x20>)
 800b594:	602a      	str	r2, [r5, #0]
 800b596:	461a      	mov	r2, r3
 800b598:	f7fb f95a 	bl	8006850 <_lseek>
 800b59c:	1c43      	adds	r3, r0, #1
 800b59e:	d102      	bne.n	800b5a6 <_lseek_r+0x1e>
 800b5a0:	682b      	ldr	r3, [r5, #0]
 800b5a2:	b103      	cbz	r3, 800b5a6 <_lseek_r+0x1e>
 800b5a4:	6023      	str	r3, [r4, #0]
 800b5a6:	bd38      	pop	{r3, r4, r5, pc}
 800b5a8:	20000fe4 	.word	0x20000fe4

0800b5ac <memchr>:
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	b510      	push	{r4, lr}
 800b5b0:	b2c9      	uxtb	r1, r1
 800b5b2:	4402      	add	r2, r0
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	d101      	bne.n	800b5be <memchr+0x12>
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	e003      	b.n	800b5c6 <memchr+0x1a>
 800b5be:	7804      	ldrb	r4, [r0, #0]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	428c      	cmp	r4, r1
 800b5c4:	d1f6      	bne.n	800b5b4 <memchr+0x8>
 800b5c6:	bd10      	pop	{r4, pc}

0800b5c8 <__malloc_lock>:
 800b5c8:	4801      	ldr	r0, [pc, #4]	; (800b5d0 <__malloc_lock+0x8>)
 800b5ca:	f7ff bb25 	b.w	800ac18 <__retarget_lock_acquire_recursive>
 800b5ce:	bf00      	nop
 800b5d0:	20000fdc 	.word	0x20000fdc

0800b5d4 <__malloc_unlock>:
 800b5d4:	4801      	ldr	r0, [pc, #4]	; (800b5dc <__malloc_unlock+0x8>)
 800b5d6:	f7ff bb20 	b.w	800ac1a <__retarget_lock_release_recursive>
 800b5da:	bf00      	nop
 800b5dc:	20000fdc 	.word	0x20000fdc

0800b5e0 <_malloc_usable_size_r>:
 800b5e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5e4:	1f18      	subs	r0, r3, #4
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	bfbc      	itt	lt
 800b5ea:	580b      	ldrlt	r3, [r1, r0]
 800b5ec:	18c0      	addlt	r0, r0, r3
 800b5ee:	4770      	bx	lr

0800b5f0 <_read_r>:
 800b5f0:	b538      	push	{r3, r4, r5, lr}
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	4608      	mov	r0, r1
 800b5f6:	4611      	mov	r1, r2
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	4d05      	ldr	r5, [pc, #20]	; (800b610 <_read_r+0x20>)
 800b5fc:	602a      	str	r2, [r5, #0]
 800b5fe:	461a      	mov	r2, r3
 800b600:	f7fb f8c9 	bl	8006796 <_read>
 800b604:	1c43      	adds	r3, r0, #1
 800b606:	d102      	bne.n	800b60e <_read_r+0x1e>
 800b608:	682b      	ldr	r3, [r5, #0]
 800b60a:	b103      	cbz	r3, 800b60e <_read_r+0x1e>
 800b60c:	6023      	str	r3, [r4, #0]
 800b60e:	bd38      	pop	{r3, r4, r5, pc}
 800b610:	20000fe4 	.word	0x20000fe4

0800b614 <_init>:
 800b614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b616:	bf00      	nop
 800b618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b61a:	bc08      	pop	{r3}
 800b61c:	469e      	mov	lr, r3
 800b61e:	4770      	bx	lr

0800b620 <_fini>:
 800b620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b622:	bf00      	nop
 800b624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b626:	bc08      	pop	{r3}
 800b628:	469e      	mov	lr, r3
 800b62a:	4770      	bx	lr
