
RosSearial_templet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c2c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  08007d3c  08007d3c  00017d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008270  08008270  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08008270  08008270  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008270  08008270  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008270  08008270  00018270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008278  08008278  00018278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800827c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025d4  20000088  08008304  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000265c  08008304  0002265c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020572  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003fcf  00000000  00000000  00040623  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001698  00000000  00000000  000445f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001518  00000000  00000000  00045c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005ff8  00000000  00000000  000471a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012dfd  00000000  00000000  0004d1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099b77  00000000  00000000  0005ff9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f9b14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006230  00000000  00000000  000f9b90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d24 	.word	0x08007d24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08007d24 	.word	0x08007d24

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f002 fd00 	bl	8002b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f822 	bl	80001b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f8f6 	bl	800035c <MX_GPIO_Init>
  MX_DMA_Init();
 8000170:	f000 f8be 	bl	80002f0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000174:	f000 f858 	bl	8000228 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000178:	f000 f880 	bl	800027c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  xl430_int(&huart3);
 800017c:	4808      	ldr	r0, [pc, #32]	; (80001a0 <main+0x40>)
 800017e:	f002 faf3 	bl	8002768 <xl430_int>
  setup();
 8000182:	f001 f9ad 	bl	80014e0 <setup>
  //HAL_HalfDuplex_EnableReceiver(&huart3);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000186:	f004 ffa9 	bl	80050dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800018a:	4a06      	ldr	r2, [pc, #24]	; (80001a4 <main+0x44>)
 800018c:	2100      	movs	r1, #0
 800018e:	4806      	ldr	r0, [pc, #24]	; (80001a8 <main+0x48>)
 8000190:	f005 f80a 	bl	80051a8 <osThreadNew>
 8000194:	4602      	mov	r2, r0
 8000196:	4b05      	ldr	r3, [pc, #20]	; (80001ac <main+0x4c>)
 8000198:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800019a:	f004 ffd1 	bl	8005140 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800019e:	e7fe      	b.n	800019e <main+0x3e>
 80001a0:	2000241c 	.word	0x2000241c
 80001a4:	08008154 	.word	0x08008154
 80001a8:	080015d5 	.word	0x080015d5
 80001ac:	200023d4 	.word	0x200023d4

080001b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b090      	sub	sp, #64	; 0x40
 80001b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b6:	f107 0318 	add.w	r3, r7, #24
 80001ba:	2228      	movs	r2, #40	; 0x28
 80001bc:	2100      	movs	r1, #0
 80001be:	4618      	mov	r0, r3
 80001c0:	f007 fc75 	bl	8007aae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]
 80001d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d2:	2302      	movs	r3, #2
 80001d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d6:	2301      	movs	r3, #1
 80001d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001da:	2310      	movs	r3, #16
 80001dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001de:	2300      	movs	r3, #0
 80001e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e2:	f107 0318 	add.w	r3, r7, #24
 80001e6:	4618      	mov	r0, r3
 80001e8:	f003 fa1c 	bl	8003624 <HAL_RCC_OscConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001f2:	f000 f91d 	bl	8000430 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f6:	230f      	movs	r3, #15
 80001f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001fa:	2300      	movs	r3, #0
 80001fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f003 fc88 	bl	8003b24 <HAL_RCC_ClockConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800021a:	f000 f909 	bl	8000430 <Error_Handler>
  }
}
 800021e:	bf00      	nop
 8000220:	3740      	adds	r7, #64	; 0x40
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800022c:	4b11      	ldr	r3, [pc, #68]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 800022e:	4a12      	ldr	r2, [pc, #72]	; (8000278 <MX_USART1_UART_Init+0x50>)
 8000230:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000232:	4b10      	ldr	r3, [pc, #64]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 8000234:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000238:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800023a:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 8000242:	2200      	movs	r2, #0
 8000244:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 8000248:	2200      	movs	r2, #0
 800024a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 800024e:	220c      	movs	r2, #12
 8000250:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 8000254:	2200      	movs	r2, #0
 8000256:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 800025a:	2200      	movs	r2, #0
 800025c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800025e:	4805      	ldr	r0, [pc, #20]	; (8000274 <MX_USART1_UART_Init+0x4c>)
 8000260:	f004 f876 	bl	8004350 <HAL_UART_Init>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800026a:	f000 f8e1 	bl	8000430 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	20002528 	.word	0x20002528
 8000278:	40013800 	.word	0x40013800

0800027c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000280:	4b19      	ldr	r3, [pc, #100]	; (80002e8 <MX_USART3_UART_Init+0x6c>)
 8000282:	4a1a      	ldr	r2, [pc, #104]	; (80002ec <MX_USART3_UART_Init+0x70>)
 8000284:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57200;
 8000286:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <MX_USART3_UART_Init+0x6c>)
 8000288:	f64d 7270 	movw	r2, #57200	; 0xdf70
 800028c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800028e:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <MX_USART3_UART_Init+0x6c>)
 8000290:	2200      	movs	r2, #0
 8000292:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000294:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <MX_USART3_UART_Init+0x6c>)
 8000296:	2200      	movs	r2, #0
 8000298:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800029a:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <MX_USART3_UART_Init+0x6c>)
 800029c:	2200      	movs	r2, #0
 800029e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80002a0:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <MX_USART3_UART_Init+0x6c>)
 80002a2:	220c      	movs	r2, #12
 80002a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <MX_USART3_UART_Init+0x6c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ac:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <MX_USART3_UART_Init+0x6c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 80002b2:	480d      	ldr	r0, [pc, #52]	; (80002e8 <MX_USART3_UART_Init+0x6c>)
 80002b4:	f004 f899 	bl	80043ea <HAL_HalfDuplex_Init>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80002be:	f000 f8b7 	bl	8000430 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <MX_USART3_UART_Init+0x6c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	68da      	ldr	r2, [r3, #12]
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <MX_USART3_UART_Init+0x6c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f042 0210 	orr.w	r2, r2, #16
 80002d0:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 80002d2:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <MX_USART3_UART_Init+0x6c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	68da      	ldr	r2, [r3, #12]
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <MX_USART3_UART_Init+0x6c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80002e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART3_Init 2 */

}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	2000241c 	.word	0x2000241c
 80002ec:	40004800 	.word	0x40004800

080002f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002f6:	4b18      	ldr	r3, [pc, #96]	; (8000358 <MX_DMA_Init+0x68>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4a17      	ldr	r2, [pc, #92]	; (8000358 <MX_DMA_Init+0x68>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6153      	str	r3, [r2, #20]
 8000302:	4b15      	ldr	r3, [pc, #84]	; (8000358 <MX_DMA_Init+0x68>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	607b      	str	r3, [r7, #4]
 800030c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800030e:	2200      	movs	r2, #0
 8000310:	2105      	movs	r1, #5
 8000312:	200c      	movs	r0, #12
 8000314:	f002 fd31 	bl	8002d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000318:	200c      	movs	r0, #12
 800031a:	f002 fd4a 	bl	8002db2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800031e:	2200      	movs	r2, #0
 8000320:	2105      	movs	r1, #5
 8000322:	200d      	movs	r0, #13
 8000324:	f002 fd29 	bl	8002d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000328:	200d      	movs	r0, #13
 800032a:	f002 fd42 	bl	8002db2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800032e:	2200      	movs	r2, #0
 8000330:	2105      	movs	r1, #5
 8000332:	200e      	movs	r0, #14
 8000334:	f002 fd21 	bl	8002d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000338:	200e      	movs	r0, #14
 800033a:	f002 fd3a 	bl	8002db2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800033e:	2200      	movs	r2, #0
 8000340:	2105      	movs	r1, #5
 8000342:	200f      	movs	r0, #15
 8000344:	f002 fd19 	bl	8002d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000348:	200f      	movs	r0, #15
 800034a:	f002 fd32 	bl	8002db2 <HAL_NVIC_EnableIRQ>

}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b088      	sub	sp, #32
 8000360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000370:	4b24      	ldr	r3, [pc, #144]	; (8000404 <MX_GPIO_Init+0xa8>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a23      	ldr	r2, [pc, #140]	; (8000404 <MX_GPIO_Init+0xa8>)
 8000376:	f043 0310 	orr.w	r3, r3, #16
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <MX_GPIO_Init+0xa8>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0310 	and.w	r3, r3, #16
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000388:	4b1e      	ldr	r3, [pc, #120]	; (8000404 <MX_GPIO_Init+0xa8>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a1d      	ldr	r2, [pc, #116]	; (8000404 <MX_GPIO_Init+0xa8>)
 800038e:	f043 0320 	orr.w	r3, r3, #32
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <MX_GPIO_Init+0xa8>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0320 	and.w	r3, r3, #32
 800039c:	60bb      	str	r3, [r7, #8]
 800039e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a0:	4b18      	ldr	r3, [pc, #96]	; (8000404 <MX_GPIO_Init+0xa8>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a17      	ldr	r2, [pc, #92]	; (8000404 <MX_GPIO_Init+0xa8>)
 80003a6:	f043 0308 	orr.w	r3, r3, #8
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b15      	ldr	r3, [pc, #84]	; (8000404 <MX_GPIO_Init+0xa8>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0308 	and.w	r3, r3, #8
 80003b4:	607b      	str	r3, [r7, #4]
 80003b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <MX_GPIO_Init+0xa8>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a11      	ldr	r2, [pc, #68]	; (8000404 <MX_GPIO_Init+0xa8>)
 80003be:	f043 0304 	orr.w	r3, r3, #4
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <MX_GPIO_Init+0xa8>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0304 	and.w	r3, r3, #4
 80003cc:	603b      	str	r3, [r7, #0]
 80003ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d6:	480c      	ldr	r0, [pc, #48]	; (8000408 <MX_GPIO_Init+0xac>)
 80003d8:	f003 f8f2 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e2:	2301      	movs	r3, #1
 80003e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ea:	2302      	movs	r3, #2
 80003ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	4619      	mov	r1, r3
 80003f4:	4804      	ldr	r0, [pc, #16]	; (8000408 <MX_GPIO_Init+0xac>)
 80003f6:	f002 ff89 	bl	800330c <HAL_GPIO_Init>

}
 80003fa:	bf00      	nop
 80003fc:	3720      	adds	r7, #32
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40021000 	.word	0x40021000
 8000408:	40011000 	.word	0x40011000

0800040c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d101      	bne.n	8000422 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800041e:	f002 fbb9 	bl	8002b94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40012c00 	.word	0x40012c00

08000430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000434:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000436:	e7fe      	b.n	8000436 <Error_Handler+0x6>

08000438 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2200      	movs	r2, #0
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4618      	mov	r0, r3
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	4a04      	ldr	r2, [pc, #16]	; (8000474 <_ZN3ros3MsgC1Ev+0x1c>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4618      	mov	r0, r3
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	08008244 	.word	0x08008244

08000478 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
      data()
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ffe8 	bl	8000458 <_ZN3ros3MsgC1Ev>
 8000488:	4a06      	ldr	r2, [pc, #24]	; (80004a4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	3304      	adds	r3, #4
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ffd0 	bl	8000438 <_ZN3ros4TimeC1Ev>
    {
    }
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4618      	mov	r0, r3
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	0800822c 	.word	0x0800822c

080004a8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	6859      	ldr	r1, [r3, #4]
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	683a      	ldr	r2, [r7, #0]
 80004be:	4413      	add	r3, r2
 80004c0:	b2ca      	uxtb	r2, r1
 80004c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	0a19      	lsrs	r1, r3, #8
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	3301      	adds	r3, #1
 80004ce:	683a      	ldr	r2, [r7, #0]
 80004d0:	4413      	add	r3, r2
 80004d2:	b2ca      	uxtb	r2, r1
 80004d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	0c19      	lsrs	r1, r3, #16
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	3302      	adds	r3, #2
 80004e0:	683a      	ldr	r2, [r7, #0]
 80004e2:	4413      	add	r3, r2
 80004e4:	b2ca      	uxtb	r2, r1
 80004e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	0e19      	lsrs	r1, r3, #24
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	3303      	adds	r3, #3
 80004f2:	683a      	ldr	r2, [r7, #0]
 80004f4:	4413      	add	r3, r2
 80004f6:	b2ca      	uxtb	r2, r1
 80004f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	3304      	adds	r3, #4
 80004fe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6899      	ldr	r1, [r3, #8]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	683a      	ldr	r2, [r7, #0]
 8000508:	4413      	add	r3, r2
 800050a:	b2ca      	uxtb	r2, r1
 800050c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	0a19      	lsrs	r1, r3, #8
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	3301      	adds	r3, #1
 8000518:	683a      	ldr	r2, [r7, #0]
 800051a:	4413      	add	r3, r2
 800051c:	b2ca      	uxtb	r2, r1
 800051e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	0c19      	lsrs	r1, r3, #16
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	3302      	adds	r3, #2
 800052a:	683a      	ldr	r2, [r7, #0]
 800052c:	4413      	add	r3, r2
 800052e:	b2ca      	uxtb	r2, r1
 8000530:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	0e19      	lsrs	r1, r3, #24
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	3303      	adds	r3, #3
 800053c:	683a      	ldr	r2, [r7, #0]
 800053e:	4413      	add	r3, r2
 8000540:	b2ca      	uxtb	r2, r1
 8000542:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	3304      	adds	r3, #4
 8000548:	60fb      	str	r3, [r7, #12]
      return offset;
 800054a:	68fb      	ldr	r3, [r7, #12]
    }
 800054c:	4618      	mov	r0, r3
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr

08000556 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000556:	b480      	push	{r7}
 8000558:	b085      	sub	sp, #20
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
 800055e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	683a      	ldr	r2, [r7, #0]
 8000568:	4413      	add	r3, r2
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	461a      	mov	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	685a      	ldr	r2, [r3, #4]
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	3301      	adds	r3, #1
 800057a:	6839      	ldr	r1, [r7, #0]
 800057c:	440b      	add	r3, r1
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	021b      	lsls	r3, r3, #8
 8000582:	431a      	orrs	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	685a      	ldr	r2, [r3, #4]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	3302      	adds	r3, #2
 8000590:	6839      	ldr	r1, [r7, #0]
 8000592:	440b      	add	r3, r1
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	041b      	lsls	r3, r3, #16
 8000598:	431a      	orrs	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	685a      	ldr	r2, [r3, #4]
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	3303      	adds	r3, #3
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	440b      	add	r3, r1
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	061b      	lsls	r3, r3, #24
 80005ae:	431a      	orrs	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	3304      	adds	r3, #4
 80005b8:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	461a      	mov	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	689a      	ldr	r2, [r3, #8]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	3301      	adds	r3, #1
 80005d0:	6839      	ldr	r1, [r7, #0]
 80005d2:	440b      	add	r3, r1
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	021b      	lsls	r3, r3, #8
 80005d8:	431a      	orrs	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	689a      	ldr	r2, [r3, #8]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	3302      	adds	r3, #2
 80005e6:	6839      	ldr	r1, [r7, #0]
 80005e8:	440b      	add	r3, r1
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	041b      	lsls	r3, r3, #16
 80005ee:	431a      	orrs	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	689a      	ldr	r2, [r3, #8]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	3303      	adds	r3, #3
 80005fc:	6839      	ldr	r1, [r7, #0]
 80005fe:	440b      	add	r3, r1
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	061b      	lsls	r3, r3, #24
 8000604:	431a      	orrs	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	3304      	adds	r3, #4
 800060e:	60fb      	str	r3, [r7, #12]
     return offset;
 8000610:	68fb      	ldr	r3, [r7, #12]
    }
 8000612:	4618      	mov	r0, r3
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	4b02      	ldr	r3, [pc, #8]	; (8000630 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	08007d48 	.word	0x08007d48

08000634 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	08007d58 	.word	0x08007d58

0800064c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff fefe 	bl	8000458 <_ZN3ros3MsgC1Ev>
 800065c:	4a0b      	ldr	r2, [pc, #44]	; (800068c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	809a      	strh	r2, [r3, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a09      	ldr	r2, [pc, #36]	; (8000690 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a07      	ldr	r2, [pc, #28]	; (8000690 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a06      	ldr	r2, [pc, #24]	; (8000690 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000678:	611a      	str	r2, [r3, #16]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
    {
    }
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	08008214 	.word	0x08008214
 8000690:	08007d7c 	.word	0x08007d7c

08000694 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	8899      	ldrh	r1, [r3, #4]
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	683a      	ldr	r2, [r7, #0]
 80006aa:	4413      	add	r3, r2
 80006ac:	b2ca      	uxtb	r2, r1
 80006ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	889b      	ldrh	r3, [r3, #4]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	b299      	uxth	r1, r3
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	3301      	adds	r3, #1
 80006bc:	683a      	ldr	r2, [r7, #0]
 80006be:	4413      	add	r3, r2
 80006c0:	b2ca      	uxtb	r2, r1
 80006c2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	3302      	adds	r3, #2
 80006c8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fd3e 	bl	8000150 <strlen>
 80006d4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	683a      	ldr	r2, [r7, #0]
 80006da:	4413      	add	r3, r2
 80006dc:	69b9      	ldr	r1, [r7, #24]
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 ffc2 	bl	8001668 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	3304      	adds	r3, #4
 80006e8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	683a      	ldr	r2, [r7, #0]
 80006ee:	18d0      	adds	r0, r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	69ba      	ldr	r2, [r7, #24]
 80006f6:	4619      	mov	r1, r3
 80006f8:	f007 f9ce 	bl	8007a98 <memcpy>
      offset += length_topic_name;
 80006fc:	69fa      	ldr	r2, [r7, #28]
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	4413      	add	r3, r2
 8000702:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff fd21 	bl	8000150 <strlen>
 800070e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	4413      	add	r3, r2
 8000716:	6979      	ldr	r1, [r7, #20]
 8000718:	4618      	mov	r0, r3
 800071a:	f000 ffa5 	bl	8001668 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3304      	adds	r3, #4
 8000722:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	683a      	ldr	r2, [r7, #0]
 8000728:	18d0      	adds	r0, r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	697a      	ldr	r2, [r7, #20]
 8000730:	4619      	mov	r1, r3
 8000732:	f007 f9b1 	bl	8007a98 <memcpy>
      offset += length_message_type;
 8000736:	69fa      	ldr	r2, [r7, #28]
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	4413      	add	r3, r2
 800073c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	691b      	ldr	r3, [r3, #16]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fd04 	bl	8000150 <strlen>
 8000748:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	683a      	ldr	r2, [r7, #0]
 800074e:	4413      	add	r3, r2
 8000750:	6939      	ldr	r1, [r7, #16]
 8000752:	4618      	mov	r0, r3
 8000754:	f000 ff88 	bl	8001668 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	3304      	adds	r3, #4
 800075c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	18d0      	adds	r0, r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	691b      	ldr	r3, [r3, #16]
 8000768:	693a      	ldr	r2, [r7, #16]
 800076a:	4619      	mov	r1, r3
 800076c:	f007 f994 	bl	8007a98 <memcpy>
      offset += length_md5sum;
 8000770:	69fa      	ldr	r2, [r7, #28]
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	4413      	add	r3, r2
 8000776:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800077e:	68f9      	ldr	r1, [r7, #12]
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	683a      	ldr	r2, [r7, #0]
 8000784:	4413      	add	r3, r2
 8000786:	b2ca      	uxtb	r2, r1
 8000788:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	0a19      	lsrs	r1, r3, #8
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3301      	adds	r3, #1
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	4413      	add	r3, r2
 8000796:	b2ca      	uxtb	r2, r1
 8000798:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	0c19      	lsrs	r1, r3, #16
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3302      	adds	r3, #2
 80007a2:	683a      	ldr	r2, [r7, #0]
 80007a4:	4413      	add	r3, r2
 80007a6:	b2ca      	uxtb	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	0e19      	lsrs	r1, r3, #24
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3303      	adds	r3, #3
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	4413      	add	r3, r2
 80007b6:	b2ca      	uxtb	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3304      	adds	r3, #4
 80007be:	61fb      	str	r3, [r7, #28]
      return offset;
 80007c0:	69fb      	ldr	r3, [r7, #28]
    }
 80007c2:	4618      	mov	r0, r3
 80007c4:	3720      	adds	r7, #32
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b08a      	sub	sp, #40	; 0x28
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	683a      	ldr	r2, [r7, #0]
 80007dc:	4413      	add	r3, r2
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	889b      	ldrh	r3, [r3, #4]
 80007ea:	b21a      	sxth	r2, r3
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	3301      	adds	r3, #1
 80007f0:	6839      	ldr	r1, [r7, #0]
 80007f2:	440b      	add	r3, r1
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	021b      	lsls	r3, r3, #8
 80007f8:	b21b      	sxth	r3, r3
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b21b      	sxth	r3, r3
 80007fe:	b29a      	uxth	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	3302      	adds	r3, #2
 8000808:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	441a      	add	r2, r3
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4611      	mov	r1, r2
 8000816:	4618      	mov	r0, r3
 8000818:	f000 ff43 	bl	80016a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	3304      	adds	r3, #4
 8000820:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000822:	69bb      	ldr	r3, [r7, #24]
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	4413      	add	r3, r2
 800082c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800082e:	429a      	cmp	r2, r3
 8000830:	d20c      	bcs.n	800084c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000836:	441a      	add	r2, r3
 8000838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083a:	3b01      	subs	r3, #1
 800083c:	6839      	ldr	r1, [r7, #0]
 800083e:	440b      	add	r3, r1
 8000840:	7812      	ldrb	r2, [r2, #0]
 8000842:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000846:	3301      	adds	r3, #1
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
 800084a:	e7ec      	b.n	8000826 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800084c:	69ba      	ldr	r2, [r7, #24]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	4413      	add	r3, r2
 8000852:	3b01      	subs	r3, #1
 8000854:	683a      	ldr	r2, [r7, #0]
 8000856:	4413      	add	r3, r2
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	3b01      	subs	r3, #1
 8000860:	683a      	ldr	r2, [r7, #0]
 8000862:	441a      	add	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000868:	69ba      	ldr	r2, [r7, #24]
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	4413      	add	r3, r2
 800086e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	441a      	add	r2, r3
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f000 ff10 	bl	80016a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	3304      	adds	r3, #4
 8000886:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	623b      	str	r3, [r7, #32]
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	4413      	add	r3, r2
 8000892:	6a3a      	ldr	r2, [r7, #32]
 8000894:	429a      	cmp	r2, r3
 8000896:	d20c      	bcs.n	80008b2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000898:	683a      	ldr	r2, [r7, #0]
 800089a:	6a3b      	ldr	r3, [r7, #32]
 800089c:	441a      	add	r2, r3
 800089e:	6a3b      	ldr	r3, [r7, #32]
 80008a0:	3b01      	subs	r3, #1
 80008a2:	6839      	ldr	r1, [r7, #0]
 80008a4:	440b      	add	r3, r1
 80008a6:	7812      	ldrb	r2, [r2, #0]
 80008a8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	3301      	adds	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
 80008b0:	e7ec      	b.n	800088c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	4413      	add	r3, r2
 80008b8:	3b01      	subs	r3, #1
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	4413      	add	r3, r2
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80008c2:	69bb      	ldr	r3, [r7, #24]
 80008c4:	3b01      	subs	r3, #1
 80008c6:	683a      	ldr	r2, [r7, #0]
 80008c8:	441a      	add	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	4413      	add	r3, r2
 80008d4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	683a      	ldr	r2, [r7, #0]
 80008da:	441a      	add	r2, r3
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4611      	mov	r1, r2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fedd 	bl	80016a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	3304      	adds	r3, #4
 80008ec:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80008ee:	69bb      	ldr	r3, [r7, #24]
 80008f0:	61fb      	str	r3, [r7, #28]
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	4413      	add	r3, r2
 80008f8:	69fa      	ldr	r2, [r7, #28]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d20c      	bcs.n	8000918 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	441a      	add	r2, r3
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	3b01      	subs	r3, #1
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	440b      	add	r3, r1
 800090c:	7812      	ldrb	r2, [r2, #0]
 800090e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	3301      	adds	r3, #1
 8000914:	61fb      	str	r3, [r7, #28]
 8000916:	e7ec      	b.n	80008f2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4413      	add	r3, r2
 800091e:	3b01      	subs	r3, #1
 8000920:	683a      	ldr	r2, [r7, #0]
 8000922:	4413      	add	r3, r2
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	3b01      	subs	r3, #1
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	441a      	add	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	4413      	add	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	6839      	ldr	r1, [r7, #0]
 8000946:	440a      	add	r2, r1
 8000948:	7812      	ldrb	r2, [r2, #0]
 800094a:	4313      	orrs	r3, r2
 800094c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	3301      	adds	r3, #1
 8000954:	6839      	ldr	r1, [r7, #0]
 8000956:	440b      	add	r3, r1
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	4313      	orrs	r3, r2
 800095e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000960:	68ba      	ldr	r2, [r7, #8]
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	3302      	adds	r3, #2
 8000966:	6839      	ldr	r1, [r7, #0]
 8000968:	440b      	add	r3, r1
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	041b      	lsls	r3, r3, #16
 800096e:	4313      	orrs	r3, r2
 8000970:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	3303      	adds	r3, #3
 8000978:	6839      	ldr	r1, [r7, #0]
 800097a:	440b      	add	r3, r1
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	061b      	lsls	r3, r3, #24
 8000980:	4313      	orrs	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000984:	68ba      	ldr	r2, [r7, #8]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800098a:	69bb      	ldr	r3, [r7, #24]
 800098c:	3304      	adds	r3, #4
 800098e:	61bb      	str	r3, [r7, #24]
     return offset;
 8000990:	69bb      	ldr	r3, [r7, #24]
    }
 8000992:	4618      	mov	r0, r3
 8000994:	3728      	adds	r7, #40	; 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	4b02      	ldr	r3, [pc, #8]	; (80009b0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	08007d80 	.word	0x08007d80

080009b4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	4b02      	ldr	r3, [pc, #8]	; (80009c8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	08007d9c 	.word	0x08007d9c

080009cc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fd3e 	bl	8000458 <_ZN3ros3MsgC1Ev>
 80009dc:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	711a      	strb	r2, [r3, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a04      	ldr	r2, [pc, #16]	; (80009fc <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80009ec:	609a      	str	r2, [r3, #8]
    {
    }
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	080081fc 	.word	0x080081fc
 80009fc:	08007d7c 	.word	0x08007d7c

08000a00 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	7912      	ldrb	r2, [r2, #4]
 8000a18:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fb93 	bl	8000150 <strlen>
 8000a2a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	4413      	add	r3, r2
 8000a32:	68b9      	ldr	r1, [r7, #8]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fe17 	bl	8001668 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	683a      	ldr	r2, [r7, #0]
 8000a44:	18d0      	adds	r0, r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f007 f823 	bl	8007a98 <memcpy>
      offset += length_msg;
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	4413      	add	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
      return offset;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
    }
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	683a      	ldr	r2, [r7, #0]
 8000a76:	4413      	add	r3, r2
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	3301      	adds	r3, #1
 8000a82:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	683a      	ldr	r2, [r7, #0]
 8000a88:	441a      	add	r2, r3
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 fe06 	bl	80016a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d20c      	bcs.n	8000ac6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	441a      	add	r2, r3
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	6839      	ldr	r1, [r7, #0]
 8000ab8:	440b      	add	r3, r1
 8000aba:	7812      	ldrb	r2, [r2, #0]
 8000abc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	e7ec      	b.n	8000aa0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4413      	add	r3, r2
 8000acc:	3b01      	subs	r3, #1
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	683a      	ldr	r2, [r7, #0]
 8000adc:	441a      	add	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
     return offset;
 8000aea:	693b      	ldr	r3, [r7, #16]
    }
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	4b02      	ldr	r3, [pc, #8]	; (8000b08 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	08007dc0 	.word	0x08007dc0

08000b0c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	08007dd4 	.word	0x08007dd4

08000b24 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fc92 	bl	8000458 <_ZN3ros3MsgC1Ev>
 8000b34:	4a0c      	ldr	r2, [pc, #48]	; (8000b68 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	61da      	str	r2, [r3, #28]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	080081e4 	.word	0x080081e4

08000b6c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6859      	ldr	r1, [r3, #4]
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	b2ca      	uxtb	r2, r1
 8000b86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	0a19      	lsrs	r1, r3, #8
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	3301      	adds	r3, #1
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	4413      	add	r3, r2
 8000b96:	b2ca      	uxtb	r2, r1
 8000b98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	0c19      	lsrs	r1, r3, #16
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b2ca      	uxtb	r2, r1
 8000baa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	0e19      	lsrs	r1, r3, #24
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	3303      	adds	r3, #3
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	4413      	add	r3, r2
 8000bba:	b2ca      	uxtb	r2, r1
 8000bbc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	6a3a      	ldr	r2, [r7, #32]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d22b      	bcs.n	8000c2a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	68da      	ldr	r2, [r3, #12]
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	4413      	add	r3, r2
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000be0:	6939      	ldr	r1, [r7, #16]
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	b2ca      	uxtb	r2, r1
 8000bea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	0a19      	lsrs	r1, r3, #8
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	683a      	ldr	r2, [r7, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b2ca      	uxtb	r2, r1
 8000bfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	0c19      	lsrs	r1, r3, #16
 8000c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c02:	3302      	adds	r3, #2
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	b2ca      	uxtb	r2, r1
 8000c0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	0e19      	lsrs	r1, r3, #24
 8000c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c12:	3303      	adds	r3, #3
 8000c14:	683a      	ldr	r2, [r7, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	b2ca      	uxtb	r2, r1
 8000c1a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1e:	3304      	adds	r3, #4
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000c22:	6a3b      	ldr	r3, [r7, #32]
 8000c24:	3301      	adds	r3, #1
 8000c26:	623b      	str	r3, [r7, #32]
 8000c28:	e7ce      	b.n	8000bc8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6919      	ldr	r1, [r3, #16]
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	b2ca      	uxtb	r2, r1
 8000c36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	0a19      	lsrs	r1, r3, #8
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	3301      	adds	r3, #1
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	4413      	add	r3, r2
 8000c46:	b2ca      	uxtb	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	691b      	ldr	r3, [r3, #16]
 8000c4e:	0c19      	lsrs	r1, r3, #16
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	3302      	adds	r3, #2
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	b2ca      	uxtb	r2, r1
 8000c5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	0e19      	lsrs	r1, r3, #24
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	3303      	adds	r3, #3
 8000c66:	683a      	ldr	r2, [r7, #0]
 8000c68:	4413      	add	r3, r2
 8000c6a:	b2ca      	uxtb	r2, r1
 8000c6c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c70:	3304      	adds	r3, #4
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	69fa      	ldr	r2, [r7, #28]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d22b      	bcs.n	8000cda <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	699a      	ldr	r2, [r3, #24]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000c90:	68f9      	ldr	r1, [r7, #12]
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	b2ca      	uxtb	r2, r1
 8000c9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	0a19      	lsrs	r1, r3, #8
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b2ca      	uxtb	r2, r1
 8000caa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	0c19      	lsrs	r1, r3, #16
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b2ca      	uxtb	r2, r1
 8000cba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	0e19      	lsrs	r1, r3, #24
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	3303      	adds	r3, #3
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2ca      	uxtb	r2, r1
 8000cca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	3304      	adds	r3, #4
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	61fb      	str	r3, [r7, #28]
 8000cd8:	e7ce      	b.n	8000c78 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69d9      	ldr	r1, [r3, #28]
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	683a      	ldr	r2, [r7, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b2ca      	uxtb	r2, r1
 8000ce6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	0a19      	lsrs	r1, r3, #8
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	683a      	ldr	r2, [r7, #0]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b2ca      	uxtb	r2, r1
 8000cf8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	0c19      	lsrs	r1, r3, #16
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	3302      	adds	r3, #2
 8000d04:	683a      	ldr	r2, [r7, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	b2ca      	uxtb	r2, r1
 8000d0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	69db      	ldr	r3, [r3, #28]
 8000d10:	0e19      	lsrs	r1, r3, #24
 8000d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d14:	3303      	adds	r3, #3
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	b2ca      	uxtb	r2, r1
 8000d1c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d20:	3304      	adds	r3, #4
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d228      	bcs.n	8000d84 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fa06 	bl	8000150 <strlen>
 8000d44:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	6979      	ldr	r1, [r7, #20]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 fc8a 	bl	8001668 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	3304      	adds	r3, #4
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	18d0      	adds	r0, r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f006 fe92 	bl	8007a98 <memcpy>
      offset += length_stringsi;
 8000d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	4413      	add	r3, r2
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	61bb      	str	r3, [r7, #24]
 8000d82:	e7d1      	b.n	8000d28 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000d86:	4618      	mov	r0, r3
 8000d88:	3728      	adds	r7, #40	; 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b08e      	sub	sp, #56	; 0x38
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	4413      	add	r3, r2
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da8:	3301      	adds	r3, #1
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	4413      	add	r3, r2
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	6a3a      	ldr	r2, [r7, #32]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dba:	3302      	adds	r3, #2
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	041b      	lsls	r3, r3, #16
 8000dc4:	6a3a      	ldr	r2, [r7, #32]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dcc:	3303      	adds	r3, #3
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	061b      	lsls	r3, r3, #24
 8000dd6:	6a3a      	ldr	r2, [r7, #32]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dde:	3304      	adds	r3, #4
 8000de0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	6a3a      	ldr	r2, [r7, #32]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d90a      	bls.n	8000e02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	6a3b      	ldr	r3, [r7, #32]
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4619      	mov	r1, r3
 8000df6:	4610      	mov	r0, r2
 8000df8:	f006 fe62 	bl	8007ac0 <realloc>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a3a      	ldr	r2, [r7, #32]
 8000e06:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000e08:	2300      	movs	r3, #0
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d236      	bcs.n	8000e84 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e1e:	6839      	ldr	r1, [r7, #0]
 8000e20:	440a      	add	r2, r1
 8000e22:	7812      	ldrb	r2, [r2, #0]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	6839      	ldr	r1, [r7, #0]
 8000e30:	440b      	add	r3, r1
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	021b      	lsls	r3, r3, #8
 8000e36:	4313      	orrs	r3, r2
 8000e38:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e3e:	3302      	adds	r3, #2
 8000e40:	6839      	ldr	r1, [r7, #0]
 8000e42:	440b      	add	r3, r1
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	041b      	lsls	r3, r3, #16
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e50:	3303      	adds	r3, #3
 8000e52:	6839      	ldr	r1, [r7, #0]
 8000e54:	440b      	add	r3, r1
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	061b      	lsls	r3, r3, #24
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e66:	3304      	adds	r3, #4
 8000e68:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	3208      	adds	r2, #8
 8000e78:	6812      	ldr	r2, [r2, #0]
 8000e7a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e7e:	3301      	adds	r3, #1
 8000e80:	633b      	str	r3, [r7, #48]	; 0x30
 8000e82:	e7c3      	b.n	8000e0c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	4413      	add	r3, r2
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e90:	3301      	adds	r3, #1
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	4413      	add	r3, r2
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	021b      	lsls	r3, r3, #8
 8000e9a:	69fa      	ldr	r2, [r7, #28]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	041b      	lsls	r3, r3, #16
 8000eac:	69fa      	ldr	r2, [r7, #28]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eb4:	3303      	adds	r3, #3
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	4413      	add	r3, r2
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	061b      	lsls	r3, r3, #24
 8000ebe:	69fa      	ldr	r2, [r7, #28]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d90a      	bls.n	8000eea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	699a      	ldr	r2, [r3, #24]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4619      	mov	r1, r3
 8000ede:	4610      	mov	r0, r2
 8000ee0:	f006 fdee 	bl	8007ac0 <realloc>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69fa      	ldr	r2, [r7, #28]
 8000eee:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d236      	bcs.n	8000f6c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f06:	6839      	ldr	r1, [r7, #0]
 8000f08:	440a      	add	r2, r1
 8000f0a:	7812      	ldrb	r2, [r2, #0]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f14:	3301      	adds	r3, #1
 8000f16:	6839      	ldr	r1, [r7, #0]
 8000f18:	440b      	add	r3, r1
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	021b      	lsls	r3, r3, #8
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f26:	3302      	adds	r3, #2
 8000f28:	6839      	ldr	r1, [r7, #0]
 8000f2a:	440b      	add	r3, r1
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	041b      	lsls	r3, r3, #16
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f38:	3303      	adds	r3, #3
 8000f3a:	6839      	ldr	r1, [r7, #0]
 8000f3c:	440b      	add	r3, r1
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	061b      	lsls	r3, r3, #24
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8000f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f4e:	3304      	adds	r3, #4
 8000f50:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	699a      	ldr	r2, [r3, #24]
 8000f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	3214      	adds	r2, #20
 8000f60:	6812      	ldr	r2, [r2, #0]
 8000f62:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8000f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f66:	3301      	adds	r3, #1
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f6a:	e7c3      	b.n	8000ef4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	4413      	add	r3, r2
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f78:	3301      	adds	r3, #1
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	041b      	lsls	r3, r3, #16
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f9c:	3303      	adds	r3, #3
 8000f9e:	683a      	ldr	r2, [r7, #0]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	061b      	lsls	r3, r3, #24
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8000fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fae:	3304      	adds	r3, #4
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d90a      	bls.n	8000fd2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	f006 fd7a 	bl	8007ac0 <realloc>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69db      	ldr	r3, [r3, #28]
 8000fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d23f      	bcs.n	8001066 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8000fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	441a      	add	r2, r3
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fb55 	bl	80016a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
 8001002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4413      	add	r3, r2
 8001008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800100a:	429a      	cmp	r2, r3
 800100c:	d20c      	bcs.n	8001028 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	441a      	add	r2, r3
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	3b01      	subs	r3, #1
 8001018:	6839      	ldr	r1, [r7, #0]
 800101a:	440b      	add	r3, r1
 800101c:	7812      	ldrb	r2, [r2, #0]
 800101e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001022:	3301      	adds	r3, #1
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
 8001026:	e7ec      	b.n	8001002 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001028:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4413      	add	r3, r2
 800102e:	3b01      	subs	r3, #1
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	4413      	add	r3, r2
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800103a:	3b01      	subs	r3, #1
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	441a      	add	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4413      	add	r3, r2
 800104a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	3220      	adds	r2, #32
 800105a:	6812      	ldr	r2, [r2, #0]
 800105c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800105e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001060:	3301      	adds	r3, #1
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
 8001064:	e7ba      	b.n	8000fdc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001068:	4618      	mov	r0, r3
 800106a:	3738      	adds	r7, #56	; 0x38
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	4b02      	ldr	r3, [pc, #8]	; (8001084 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	08008178 	.word	0x08008178

08001088 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	4b02      	ldr	r3, [pc, #8]	; (800109c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	08007df8 	.word	0x08007df8

080010a0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	611a      	str	r2, [r3, #16]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4618      	mov	r0, r3
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68d8      	ldr	r0, [r3, #12]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	6891      	ldr	r1, [r2, #8]
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	4798      	blx	r3
 80010ea:	4603      	mov	r3, r0
  };
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
  }
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	425b      	negs	r3, r3
 800111e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <_ZN13STM32HardwareC1Ev+0x34>)
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20002528 	.word	0x20002528

08001164 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f804 	bl	800117a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
     if( HAL_UART_Receive_DMA(huart, rbuf, rbuflen) != HAL_OK)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6818      	ldr	r0, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3304      	adds	r3, #4
 800118a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800118e:	4619      	mov	r1, r3
 8001190:	f003 fa7e 	bl	8004690 <HAL_UART_Receive_DMA>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
    		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    		 HAL_Delay(100);
    		 }*/

     }
    }
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ac:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ffa8 	bl	800110a <_ZN13STM32Hardware10getRdmaIndEv>
 80011ba:	4603      	mov	r3, r0
 80011bc:	429c      	cmp	r4, r3
 80011be:	bf14      	ite	ne
 80011c0:	2301      	movne	r3, #1
 80011c2:	2300      	moveq	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d012      	beq.n	80011f0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011d0:	1c59      	adds	r1, r3, #1
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	4413      	add	r3, r2
 80011dc:	791b      	ldrb	r3, [r3, #4]
 80011de:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80011f0:	68fb      	ldr	r3, [r7, #12]
    }
 80011f2:	4618      	mov	r0, r3
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}
	...

080011fc <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b20      	cmp	r3, #32
 8001210:	d108      	bne.n	8001224 <_ZN13STM32Hardware5flushEv+0x28>
 8001212:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	f083 0301 	eor.w	r3, r3, #1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <_ZN13STM32Hardware5flushEv+0x28>
 8001220:	2301      	movs	r3, #1
 8001222:	e000      	b.n	8001226 <_ZN13STM32Hardware5flushEv+0x2a>
 8001224:	2300      	movs	r3, #0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d03f      	beq.n	80012aa <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <_ZN13STM32Hardware5flushEv+0xb8>)
 800122c:	2201      	movs	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800123c:	429a      	cmp	r2, r3
 800123e:	d031      	beq.n	80012a4 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800124c:	429a      	cmp	r2, r3
 800124e:	d20a      	bcs.n	8001266 <_ZN13STM32Hardware5flushEv+0x6a>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001256:	b29a      	uxth	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800125e:	b29b      	uxth	r3, r3
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	b29b      	uxth	r3, r3
 8001264:	e006      	b.n	8001274 <_ZN13STM32Hardware5flushEv+0x78>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800126c:	b29b      	uxth	r3, r3
 800126e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001272:	b29b      	uxth	r3, r3
 8001274:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001280:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	4413      	add	r3, r2
 8001288:	89fa      	ldrh	r2, [r7, #14]
 800128a:	4619      	mov	r1, r3
 800128c:	f003 f994 	bl	80045b8 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	4413      	add	r3, r2
 800129a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <_ZN13STM32Hardware5flushEv+0xb8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
      }
    }
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000166 	.word	0x20000166

080012b8 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
      int n = length;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012ce:	bfa8      	it	ge
 80012d0:	f44f 7300 	movge.w	r3, #512	; 0x200
 80012d4:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80012dc:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	4293      	cmp	r3, r2
 80012e4:	bf28      	it	cs
 80012e6:	4613      	movcs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80012f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	68b9      	ldr	r1, [r7, #8]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f006 fbcb 	bl	8007a98 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	4413      	add	r3, r2
 800130c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	429a      	cmp	r2, r3
 800131c:	d00b      	beq.n	8001336 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	18d1      	adds	r1, r2, r3
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	461a      	mov	r2, r3
 8001332:	f006 fbb1 	bl	8007a98 <memcpy>
      }

      flush();
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f7ff ff60 	bl	80011fc <_ZN13STM32Hardware5flushEv>
    }
 800133c:	bf00      	nop
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	f001 fc34 	bl	8002bb8 <HAL_GetTick>
 8001350:	4603      	mov	r3, r0
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
      data("")
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f876 	bl	8000458 <_ZN3ros3MsgC1Ev>
 800136c:	4a05      	ldr	r2, [pc, #20]	; (8001384 <_ZN8std_msgs6StringC1Ev+0x28>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001376:	605a      	str	r2, [r3, #4]
    {
    }
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	080081b8 	.word	0x080081b8
 8001388:	08007d7c 	.word	0x08007d7c

0800138c <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7fe fed6 	bl	8000150 <strlen>
 80013a4:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f95a 	bl	8001668 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3304      	adds	r3, #4
 80013b8:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	18d0      	adds	r0, r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	68ba      	ldr	r2, [r7, #8]
 80013c6:	4619      	mov	r1, r3
 80013c8:	f006 fb66 	bl	8007a98 <memcpy>
      offset += length_data;
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	4413      	add	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
      return offset;
 80013d4:	68fb      	ldr	r3, [r7, #12]
    }
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	441a      	add	r2, r3
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 f952 	bl	80016a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	3304      	adds	r3, #4
 8001402:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4413      	add	r3, r2
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	429a      	cmp	r2, r3
 8001412:	d20c      	bcs.n	800142e <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	441a      	add	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	3b01      	subs	r3, #1
 800141e:	6839      	ldr	r1, [r7, #0]
 8001420:	440b      	add	r3, r1
 8001422:	7812      	ldrb	r2, [r2, #0]
 8001424:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	e7ec      	b.n	8001408 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	3b01      	subs	r3, #1
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	4413      	add	r3, r2
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	3b01      	subs	r3, #1
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	441a      	add	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	605a      	str	r2, [r3, #4]
      offset += length_data;
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
     return offset;
 8001452:	693b      	ldr	r3, [r7, #16]
    }
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	4b02      	ldr	r3, [pc, #8]	; (8001470 <_ZN8std_msgs6String7getTypeEv+0x14>)
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	08007e1c 	.word	0x08007e1c

08001474 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	4b02      	ldr	r3, [pc, #8]	; (8001488 <_ZN8std_msgs6String6getMD5Ev+0x14>)
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	08007e2c 	.word	0x08007e2c

0800148c <HAL_UART_TxCpltCallback>:
extern UART_HandleTypeDef huart3;
std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello world!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_UART_TxCpltCallback+0x28>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d106      	bne.n	80014aa <HAL_UART_TxCpltCallback+0x1e>
	{
  nh.getHardware()->flush();
 800149c:	4806      	ldr	r0, [pc, #24]	; (80014b8 <HAL_UART_TxCpltCallback+0x2c>)
 800149e:	f000 f9b5 	bl	800180c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fea9 	bl	80011fc <_ZN13STM32Hardware5flushEv>
	}
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20002528 	.word	0x20002528
 80014b8:	20000168 	.word	0x20000168

080014bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <HAL_UART_RxCpltCallback+0x20>)
 80014c6:	f000 f9a1 	bl	800180c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fe54 	bl	800117a <_ZN13STM32Hardware10reset_rbufEv>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000168 	.word	0x20000168

080014e0 <setup>:

void setup(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	nh.initNode();
 80014e4:	4830      	ldr	r0, [pc, #192]	; (80015a8 <setup+0xc8>)
 80014e6:	f000 f99c 	bl	8001822 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	while(!nh.connected())
 80014ea:	482f      	ldr	r0, [pc, #188]	; (80015a8 <setup+0xc8>)
 80014ec:	f000 f9b6 	bl	800185c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f083 0301 	eor.w	r3, r3, #1
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <setup+0x24>
	 {
	   nh.spinOnce();
 80014fc:	482a      	ldr	r0, [pc, #168]	; (80015a8 <setup+0xc8>)
 80014fe:	f000 f9b9 	bl	8001874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	while(!nh.connected())
 8001502:	e7f2      	b.n	80014ea <setup+0xa>
	 }
	 nh.loginfo("stm32 Connected");
 8001504:	4929      	ldr	r1, [pc, #164]	; (80015ac <setup+0xcc>)
 8001506:	4828      	ldr	r0, [pc, #160]	; (80015a8 <setup+0xc8>)
 8001508:	f000 fb90 	bl	8001c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>

	 nh.loginfo("pinging ID 02..");
 800150c:	4928      	ldr	r1, [pc, #160]	; (80015b0 <setup+0xd0>)
 800150e:	4826      	ldr	r0, [pc, #152]	; (80015a8 <setup+0xc8>)
 8001510:	f000 fb8c 	bl	8001c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
	 while(!xl430_ping(02))
 8001514:	2002      	movs	r0, #2
 8001516:	f001 fa15 	bl	8002944 <xl430_ping>
 800151a:	4603      	mov	r3, r0
 800151c:	f083 0301 	eor.w	r3, r3, #1
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d007      	beq.n	8001536 <setup+0x56>
	  {
	    nh.loginfo("[ID 02] ping Fails");
 8001526:	4923      	ldr	r1, [pc, #140]	; (80015b4 <setup+0xd4>)
 8001528:	481f      	ldr	r0, [pc, #124]	; (80015a8 <setup+0xc8>)
 800152a:	f000 fb7f 	bl	8001c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
	    HAL_Delay(5);
 800152e:	2005      	movs	r0, #5
 8001530:	f001 fb4c 	bl	8002bcc <HAL_Delay>
	 while(!xl430_ping(02))
 8001534:	e7ee      	b.n	8001514 <setup+0x34>
	  }
	 nh.loginfo("[ID 02] ping Success !");
 8001536:	4920      	ldr	r1, [pc, #128]	; (80015b8 <setup+0xd8>)
 8001538:	481b      	ldr	r0, [pc, #108]	; (80015a8 <setup+0xc8>)
 800153a:	f000 fb77 	bl	8001c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
	   HAL_Delay(5);
 800153e:	2005      	movs	r0, #5
 8001540:	f001 fb44 	bl	8002bcc <HAL_Delay>
	nh.loginfo("pinging ID 01..");
 8001544:	491d      	ldr	r1, [pc, #116]	; (80015bc <setup+0xdc>)
 8001546:	4818      	ldr	r0, [pc, #96]	; (80015a8 <setup+0xc8>)
 8001548:	f000 fb70 	bl	8001c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
	 while(!xl430_ping(01))
 800154c:	2001      	movs	r0, #1
 800154e:	f001 f9f9 	bl	8002944 <xl430_ping>
 8001552:	4603      	mov	r3, r0
 8001554:	f083 0301 	eor.w	r3, r3, #1
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <setup+0x8e>
	  {
	   nh.loginfo("[ID 01] ping Fails");
 800155e:	4918      	ldr	r1, [pc, #96]	; (80015c0 <setup+0xe0>)
 8001560:	4811      	ldr	r0, [pc, #68]	; (80015a8 <setup+0xc8>)
 8001562:	f000 fb63 	bl	8001c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
	    HAL_Delay(5);
 8001566:	2005      	movs	r0, #5
 8001568:	f001 fb30 	bl	8002bcc <HAL_Delay>
	 while(!xl430_ping(01))
 800156c:	e7ee      	b.n	800154c <setup+0x6c>
	  }
	nh.loginfo("[ID 01] ping Success !");
 800156e:	4915      	ldr	r1, [pc, #84]	; (80015c4 <setup+0xe4>)
 8001570:	480d      	ldr	r0, [pc, #52]	; (80015a8 <setup+0xc8>)
 8001572:	f000 fb5b 	bl	8001c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>

	 while(! nh.advertise(chatter))
 8001576:	4914      	ldr	r1, [pc, #80]	; (80015c8 <setup+0xe8>)
 8001578:	480b      	ldr	r0, [pc, #44]	; (80015a8 <setup+0xc8>)
 800157a:	f000 fb65 	bl	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
 800157e:	4603      	mov	r3, r0
 8001580:	f083 0301 	eor.w	r3, r3, #1
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <setup+0xb2>
	{
		nh.spinOnce();
 800158a:	4807      	ldr	r0, [pc, #28]	; (80015a8 <setup+0xc8>)
 800158c:	f000 f972 	bl	8001874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	 while(! nh.advertise(chatter))
 8001590:	e7f1      	b.n	8001576 <setup+0x96>
	}
	 nh.negotiateTopics();
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <setup+0xc8>)
 8001594:	f000 fb87 	bl	8001ca6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>

	 xl430_writeToAddress(0xFE, 1, &TORQUE_ENABLE,&WRITE);
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <setup+0xec>)
 800159a:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <setup+0xf0>)
 800159c:	2101      	movs	r1, #1
 800159e:	20fe      	movs	r0, #254	; 0xfe
 80015a0:	f001 fa0c 	bl	80029bc <xl430_writeToAddress>


}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000168 	.word	0x20000168
 80015ac:	08007e50 	.word	0x08007e50
 80015b0:	08007e60 	.word	0x08007e60
 80015b4:	08007e70 	.word	0x08007e70
 80015b8:	08007e84 	.word	0x08007e84
 80015bc:	08007e9c 	.word	0x08007e9c
 80015c0:	08007eac 	.word	0x08007eac
 80015c4:	08007ec0 	.word	0x08007ec0
 80015c8:	20000aac 	.word	0x20000aac
 80015cc:	08008194 	.word	0x08008194
 80015d0:	08008196 	.word	0x08008196

080015d4 <StartDefaultTask>:

void StartDefaultTask(void *argument)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	for(;;)
	 {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80015dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e0:	4819      	ldr	r0, [pc, #100]	; (8001648 <StartDefaultTask+0x74>)
 80015e2:	f002 f805 	bl	80035f0 <HAL_GPIO_TogglePin>
	  xl430_writeToAddress(2, 60, &GOAL_VELOCITY, &WRITE);
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <StartDefaultTask+0x78>)
 80015e8:	4a19      	ldr	r2, [pc, #100]	; (8001650 <StartDefaultTask+0x7c>)
 80015ea:	213c      	movs	r1, #60	; 0x3c
 80015ec:	2002      	movs	r0, #2
 80015ee:	f001 f9e5 	bl	80029bc <xl430_writeToAddress>
	  osDelay(5);
 80015f2:	2005      	movs	r0, #5
 80015f4:	f003 fe82 	bl	80052fc <osDelay>
	  xl430_writeToAddress(1, -60, &GOAL_VELOCITY, &WRITE);
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <StartDefaultTask+0x78>)
 80015fa:	4a15      	ldr	r2, [pc, #84]	; (8001650 <StartDefaultTask+0x7c>)
 80015fc:	f06f 013b 	mvn.w	r1, #59	; 0x3b
 8001600:	2001      	movs	r0, #1
 8001602:	f001 f9db 	bl	80029bc <xl430_writeToAddress>

	  str_msg.data = hello;
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <StartDefaultTask+0x80>)
 8001608:	4a13      	ldr	r2, [pc, #76]	; (8001658 <StartDefaultTask+0x84>)
 800160a:	605a      	str	r2, [r3, #4]
	  chatter.publish(&str_msg);
 800160c:	4911      	ldr	r1, [pc, #68]	; (8001654 <StartDefaultTask+0x80>)
 800160e:	4813      	ldr	r0, [pc, #76]	; (800165c <StartDefaultTask+0x88>)
 8001610:	f7ff fd5c 	bl	80010cc <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	  nh.spinOnce();
 8001614:	4812      	ldr	r0, [pc, #72]	; (8001660 <StartDefaultTask+0x8c>)
 8001616:	f000 f92d 	bl	8001874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	  if(!nh.connected())
 800161a:	4811      	ldr	r0, [pc, #68]	; (8001660 <StartDefaultTask+0x8c>)
 800161c:	f000 f91e 	bl	800185c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8001620:	4603      	mov	r3, r0
 8001622:	f083 0301 	eor.w	r3, r3, #1
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d008      	beq.n	800163e <StartDefaultTask+0x6a>
	  {
		  osDelay(5);
 800162c:	2005      	movs	r0, #5
 800162e:	f003 fe65 	bl	80052fc <osDelay>
		  xl430_writeToAddress(0xFE, 0, &TORQUE_ENABLE,&WRITE);
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <StartDefaultTask+0x78>)
 8001634:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <StartDefaultTask+0x90>)
 8001636:	2100      	movs	r1, #0
 8001638:	20fe      	movs	r0, #254	; 0xfe
 800163a:	f001 f9bf 	bl	80029bc <xl430_writeToAddress>
	  }
	  osDelay(500);
 800163e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001642:	f003 fe5b 	bl	80052fc <osDelay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001646:	e7c9      	b.n	80015dc <StartDefaultTask+0x8>
 8001648:	40011000 	.word	0x40011000
 800164c:	08008194 	.word	0x08008194
 8001650:	08008198 	.word	0x08008198
 8001654:	20000aa4 	.word	0x20000aa4
 8001658:	20000000 	.word	0x20000000
 800165c:	20000aac 	.word	0x20000aac
 8001660:	20000168 	.word	0x20000168
 8001664:	08008196 	.word	0x08008196

08001668 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d80d      	bhi.n	8001698 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	fa22 f103 	lsr.w	r1, r2, r3
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	b2ca      	uxtb	r2, r1
 800168e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3301      	adds	r3, #1
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	e7ee      	b.n	8001676 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001698:	bf00      	nop
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80016a2:	b480      	push	{r7}
 80016a4:	b085      	sub	sp, #20
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d811      	bhi.n	80016e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6839      	ldr	r1, [r7, #0]
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	440a      	add	r2, r1
 80016c6:	7812      	ldrb	r2, [r2, #0]
 80016c8:	4611      	mov	r1, r2
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	00d2      	lsls	r2, r2, #3
 80016ce:	fa01 f202 	lsl.w	r2, r1, r2
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3301      	adds	r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	e7ea      	b.n	80016b6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
	...

080016ec <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	080081d0 	.word	0x080081d0

0800170c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ffe8 	bl	80016ec <_ZN3ros15NodeHandleBase_C1Ev>
 800171c:	4a3a      	ldr	r2, [pc, #232]	; (8001808 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3304      	adds	r3, #4
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fd00 	bl	800112c <_ZN13STM32HardwareC1Ev>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff f9f2 	bl	8000b24 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2b18      	cmp	r3, #24
 8001748:	d80b      	bhi.n	8001762 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	2200      	movs	r2, #0
 8001758:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	e7f0      	b.n	8001744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	2b18      	cmp	r3, #24
 800176a:	d80a      	bhi.n	8001782 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001774:	2100      	movs	r1, #0
 8001776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	3301      	adds	r3, #1
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	e7f1      	b.n	8001766 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800178c:	d20a      	bcs.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3301      	adds	r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	e7f0      	b.n	8001786 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017ae:	d20a      	bcs.n	80017c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	4413      	add	r3, r2
 80017b6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	3301      	adds	r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	e7f0      	b.n	80017a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	080081a4 	.word	0x080081a4

0800180c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3304      	adds	r3, #4
  }
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3304      	adds	r3, #4
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fc98 	bl	8001164 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
    return SPIN_OK;
  }


  /* Are we connected to the PC? */
  virtual bool connected()
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  {
    return configured_;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3304      	adds	r3, #4
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fd5f 	bl	8001344 <_ZN13STM32Hardware4timeEv>
 8001886:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001896:	4293      	cmp	r3, r2
 8001898:	d903      	bls.n	80018a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d009      	beq.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d903      	bls.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d014      	beq.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3304      	adds	r3, #4
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fd38 	bl	8001344 <_ZN13STM32Hardware4timeEv>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1ad2      	subs	r2, r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80018e0:	429a      	cmp	r2, r3
 80018e2:	bf8c      	ite	hi
 80018e4:	2301      	movhi	r3, #1
 80018e6:	2300      	movls	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80018ee:	f06f 0301 	mvn.w	r3, #1
 80018f2:	e197      	b.n	8001c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3304      	adds	r3, #4
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fc51 	bl	80011a0 <_ZN13STM32Hardware4readEv>
 80018fe:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f2c0 8177 	blt.w	8001bf6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	441a      	add	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800191e:	2b07      	cmp	r3, #7
 8001920:	d11e      	bne.n	8001960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001928:	1c59      	adds	r1, r3, #1
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	b2d1      	uxtb	r1, r2
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	4413      	add	r3, r2
 8001938:	460a      	mov	r2, r1
 800193a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001944:	1e5a      	subs	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1b4      	bne.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2208      	movs	r2, #8
 800195a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800195e:	e7af      	b.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001966:	2b00      	cmp	r3, #0
 8001968:	d128      	bne.n	80019bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2bff      	cmp	r3, #255	; 0xff
 800196e:	d10d      	bne.n	800198c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f103 0214 	add.w	r2, r3, #20
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800198a:	e799      	b.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3304      	adds	r3, #4
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fcd7 	bl	8001344 <_ZN13STM32Hardware4timeEv>
 8001996:	4602      	mov	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a0:	4293      	cmp	r3, r2
 80019a2:	bf8c      	ite	hi
 80019a4:	2301      	movhi	r3, #1
 80019a6:	2300      	movls	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d088      	beq.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80019b6:	f06f 0301 	mvn.w	r3, #1
 80019ba:	e133      	b.n	8001c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d11b      	bne.n	80019fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2bfe      	cmp	r3, #254	; 0xfe
 80019ca:	d107      	bne.n	80019dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80019da:	e771      	b.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80019ea:	f083 0301 	eor.w	r3, r3, #1
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f43f af65 	beq.w	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 fa34 	bl	8001e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80019fc:	e760      	b.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d113      	bne.n	8001a30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001a2e:	e747      	b.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d110      	bne.n	8001a5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	441a      	add	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001a5a:	e731      	b.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d116      	bne.n	8001a94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001a6c:	425a      	negs	r2, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	bf58      	it	pl
 8001a74:	4253      	negpl	r3, r2
 8001a76:	2bff      	cmp	r3, #255	; 0xff
 8001a78:	d107      	bne.n	8001a8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001a88:	e71a      	b.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001a92:	e715      	b.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a9a:	2b05      	cmp	r3, #5
 8001a9c:	d10f      	bne.n	8001abe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001abc:	e700      	b.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ac4:	2b06      	cmp	r3, #6
 8001ac6:	d117      	bne.n	8001af8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	441a      	add	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2207      	movs	r2, #7
 8001ade:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f47f aee9 	bne.w	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2208      	movs	r2, #8
 8001af2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001af6:	e6e3      	b.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	f47f aede 	bne.w	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001b12:	425a      	negs	r2, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	bf58      	it	pl
 8001b1a:	4253      	negpl	r3, r2
 8001b1c:	2bff      	cmp	r3, #255	; 0xff
 8001b1e:	f47f aecf 	bne.w	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d110      	bne.n	8001b4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f999 	bl	8001e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f8b7 	bl	8001ca6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001b48:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4c:	e06a      	b.n	8001c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001b54:	2b0a      	cmp	r3, #10
 8001b56:	d107      	bne.n	8001b68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001b5e:	4619      	mov	r1, r3
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f99d 	bl	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001b66:	e6ab      	b.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d10e      	bne.n	8001b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4610      	mov	r0, r2
 8001b82:	f7ff f904 	bl	8000d8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001b8e:	e697      	b.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001b96:	2b0b      	cmp	r3, #11
 8001b98:	d104      	bne.n	8001ba4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001ba2:	e68d      	b.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001baa:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f43f ae81 	beq.w	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001bc4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001bce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001bd8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4798      	blx	r3
    while (true)
 8001bf4:	e664      	b.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001bf6:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00f      	beq.n	8001c22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d906      	bls.n	8001c22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f925 	bl	8001e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8001c22:	2300      	movs	r3, #0
  }
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>:
public:
  void logdebug(const char* msg)
  {
    log(rosserial_msgs::Log::ROSDEBUG, msg);
  }
  void loginfo(const char * msg)
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::INFO, msg);
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	2101      	movs	r1, #1
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f97c 	bl	8001f38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b18      	cmp	r3, #24
 8001c5a:	dc1e      	bgt.n	8001c9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d111      	bne.n	8001c92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	60da      	str	r2, [r3, #12]
        return true;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e004      	b.n	8001c9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3301      	adds	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	e7dd      	b.n	8001c56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8001c9a:	2300      	movs	r3, #0
  }
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr

08001ca6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 8001ca6:	b590      	push	{r4, r7, lr}
 8001ca8:	b08b      	sub	sp, #44	; 0x2c
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fcca 	bl	800064c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	2b18      	cmp	r3, #24
 8001cc0:	dc63      	bgt.n	8001d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
      if (publishers[i] != 0) // non-empty slot
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d056      	beq.n	8001d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
        ti.topic_id = publishers[i]->id_;
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	6859      	ldr	r1, [r3, #4]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	3308      	adds	r3, #8
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4608      	mov	r0, r1
 8001d22:	4798      	blx	r3
 8001d24:	4603      	mov	r3, r0
 8001d26:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	330c      	adds	r3, #12
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4608      	mov	r0, r1
 8001d50:	4798      	blx	r3
 8001d52:	4603      	mov	r3, r0
 8001d54:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001d56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d5a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681c      	ldr	r4, [r3, #0]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff f9bf 	bl	80010f4 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001d76:	4601      	mov	r1, r0
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	3301      	adds	r3, #1
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
 8001d88:	e798      	b.n	8001cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	2b18      	cmp	r3, #24
 8001d92:	dc5f      	bgt.n	8001e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
      if (subscribers[i] != 0) // non-empty slot
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d98:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d053      	beq.n	8001e4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
        ti.topic_id = subscribers[i]->id_;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dba:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dca:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	3308      	adds	r3, #8
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4608      	mov	r0, r1
 8001de6:	4798      	blx	r3
 8001de8:	4603      	mov	r3, r0
 8001dea:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001df4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dfc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	330c      	adds	r3, #12
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4608      	mov	r0, r1
 8001e0c:	4798      	blx	r3
 8001e0e:	4603      	mov	r3, r0
 8001e10:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e16:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681c      	ldr	r4, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e22:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e26:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4608      	mov	r0, r1
 8001e3e:	4798      	blx	r3
 8001e40:	4601      	mov	r1, r0
 8001e42:	f107 030c 	add.w	r3, r7, #12
 8001e46:	461a      	mov	r2, r3
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	3301      	adds	r3, #1
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
 8001e52:	e79c      	b.n	8001d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
    configured_ = true;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8001e5c:	bf00      	nop
 8001e5e:	372c      	adds	r7, #44	; 0x2c
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd90      	pop	{r4, r7, pc}

08001e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001e6c:	f107 030c 	add.w	r3, r7, #12
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fb01 	bl	8000478 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f107 020c 	add.w	r2, r7, #12
 8001e80:	210a      	movs	r1, #10
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	4798      	blx	r3
    rt_time = hardware_.time();
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fa5a 	bl	8001344 <_ZN13STM32Hardware4timeEv>
 8001e90:	4602      	mov	r2, r0
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001e98:	bf00      	nop
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fae2 	bl	8000478 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fa43 	bl	8001344 <_ZN13STM32Hardware4timeEv>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001eca:	f107 0308 	add.w	r3, r7, #8
 8001ece:	6839      	ldr	r1, [r7, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fb40 	bl	8000556 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	4915      	ldr	r1, [pc, #84]	; (8001f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001edc:	fba1 1303 	umull	r1, r3, r1, r3
 8001ee0:	099b      	lsrs	r3, r3, #6
 8001ee2:	4413      	add	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8001ee6:	6939      	ldr	r1, [r7, #16]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001eec:	fba3 0302 	umull	r0, r3, r3, r2
 8001ef0:	099b      	lsrs	r3, r3, #6
 8001ef2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ef6:	fb00 f303 	mul.w	r3, r0, r3
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	4a0d      	ldr	r2, [pc, #52]	; (8001f34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8001efe:	fb02 f303 	mul.w	r3, r2, r3
 8001f02:	440b      	add	r3, r1
 8001f04:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f8c0 	bl	8002094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3304      	adds	r3, #4
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fa13 	bl	8001344 <_ZN13STM32Hardware4timeEv>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	10624dd3 	.word	0x10624dd3
 8001f34:	000f4240 	.word	0x000f4240

08001f38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	460b      	mov	r3, r1
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fd3e 	bl	80009cc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8001f50:	7afb      	ldrb	r3, [r7, #11]
 8001f52:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f107 0214 	add.w	r2, r7, #20
 8001f62:	2107      	movs	r1, #7
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	4798      	blx	r3
  }
 8001f68:	bf00      	nop
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg)
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b63      	cmp	r3, #99	; 0x63
 8001f80:	dd09      	ble.n	8001f96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001f88:	f083 0301 	eor.w	r3, r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e077      	b.n	8002086 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    int l = msg->serialize(message_out + 7);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8001fa2:	3207      	adds	r2, #7
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	4798      	blx	r3
 8001faa:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	22ff      	movs	r2, #255	; 0xff
 8001fb0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	22fe      	movs	r2, #254	; 0xfe
 8001fb8:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	121b      	asrs	r3, r3, #8
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	b21b      	sxth	r3, r3
 8001ffc:	121b      	asrs	r3, r3, #8
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
    int chk = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800200a:	2305      	movs	r3, #5
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	3307      	adds	r3, #7
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	429a      	cmp	r2, r3
 8002016:	da0d      	bge.n	8002034 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4413      	add	r3, r2
 800201e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	4413      	add	r3, r2
 800202a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	3301      	adds	r3, #1
 8002030:	61bb      	str	r3, [r7, #24]
 8002032:	e7ec      	b.n	800200e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	3307      	adds	r3, #7
 8002038:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	425a      	negs	r2, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	bf58      	it	pl
 8002044:	4253      	negpl	r3, r2
 8002046:	b2da      	uxtb	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	1c59      	adds	r1, r3, #1
 800204c:	6179      	str	r1, [r7, #20]
 800204e:	43d2      	mvns	r2, r2
 8002050:	b2d1      	uxtb	r1, r2
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4413      	add	r3, r2
 8002056:	460a      	mov	r2, r1
 8002058:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    if (l <= OUTPUT_SIZE)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002062:	dc0a      	bgt.n	800207a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
      hardware_.write(message_out, l);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1d18      	adds	r0, r3, #4
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4619      	mov	r1, r3
 8002072:	f7ff f921 	bl	80012b8 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	e005      	b.n	8002086 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
      logerror("Message from device dropped: message larger than buffer.");
 800207a:	4905      	ldr	r1, [pc, #20]	; (8002090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 f849 	bl	8002114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8002086:	4618      	mov	r0, r3
 8002088:	3720      	adds	r7, #32
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	08007ed8 	.word	0x08007ed8

08002094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3304      	adds	r3, #4
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff f94e 	bl	8001344 <_ZN13STM32Hardware4timeEv>
 80020a8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4915      	ldr	r1, [pc, #84]	; (8002108 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80020b2:	fba1 1303 	umull	r1, r3, r1, r3
 80020b6:	099b      	lsrs	r3, r3, #6
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	1e5a      	subs	r2, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6859      	ldr	r1, [r3, #4]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80020ca:	fba3 0302 	umull	r0, r3, r3, r2
 80020ce:	099b      	lsrs	r3, r3, #6
 80020d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020d4:	fb00 f303 	mul.w	r3, r0, r3
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	4a0c      	ldr	r2, [pc, #48]	; (800210c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80020dc:	fb02 f303 	mul.w	r3, r2, r3
 80020e0:	1aca      	subs	r2, r1, r3
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80020e4:	4413      	add	r3, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80020f8:	4619      	mov	r1, r3
 80020fa:	4610      	mov	r0, r2
 80020fc:	f000 fb08 	bl	8002710 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002100:	bf00      	nop
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	10624dd3 	.word	0x10624dd3
 800210c:	000f4240 	.word	0x000f4240
 8002110:	3b9aca00 	.word	0x3b9aca00

08002114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	2103      	movs	r1, #3
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ff08 	bl	8001f38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <_Z41__static_initialization_and_destruction_0ii>:
{

	 xl430_writeToAddress(0xFE, 1, &TORQUE_ENABLE,&WRITE);


}
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d110      	bne.n	8002162 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002146:	4293      	cmp	r3, r2
 8002148:	d10b      	bne.n	8002162 <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 800214a:	4808      	ldr	r0, [pc, #32]	; (800216c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800214c:	f7ff fade 	bl	800170c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8002150:	4807      	ldr	r0, [pc, #28]	; (8002170 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002152:	f7ff f903 	bl	800135c <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8002156:	2300      	movs	r3, #0
 8002158:	4a05      	ldr	r2, [pc, #20]	; (8002170 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800215a:	4906      	ldr	r1, [pc, #24]	; (8002174 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800215c:	4806      	ldr	r0, [pc, #24]	; (8002178 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800215e:	f7fe ff9f 	bl	80010a0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000168 	.word	0x20000168
 8002170:	20000aa4 	.word	0x20000aa4
 8002174:	08007f14 	.word	0x08007f14
 8002178:	20000aac 	.word	0x20000aac

0800217c <_GLOBAL__sub_I__huart>:
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
 8002180:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002184:	2001      	movs	r0, #1
 8002186:	f7ff ffd3 	bl	8002130 <_Z41__static_initialization_and_destruction_0ii>
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_MspInit+0x68>)
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <HAL_MspInit+0x68>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6193      	str	r3, [r2, #24]
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_MspInit+0x68>)
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_MspInit+0x68>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	4a11      	ldr	r2, [pc, #68]	; (80021f4 <HAL_MspInit+0x68>)
 80021b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b4:	61d3      	str	r3, [r2, #28]
 80021b6:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <HAL_MspInit+0x68>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	210f      	movs	r1, #15
 80021c6:	f06f 0001 	mvn.w	r0, #1
 80021ca:	f000 fdd6 	bl	8002d7a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <HAL_MspInit+0x6c>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_MspInit+0x6c>)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40010000 	.word	0x40010000

080021fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0318 	add.w	r3, r7, #24
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a88      	ldr	r2, [pc, #544]	; (8002438 <HAL_UART_MspInit+0x23c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	f040 8089 	bne.w	8002330 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800221e:	4b87      	ldr	r3, [pc, #540]	; (800243c <HAL_UART_MspInit+0x240>)
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	4a86      	ldr	r2, [pc, #536]	; (800243c <HAL_UART_MspInit+0x240>)
 8002224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002228:	6193      	str	r3, [r2, #24]
 800222a:	4b84      	ldr	r3, [pc, #528]	; (800243c <HAL_UART_MspInit+0x240>)
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	4b81      	ldr	r3, [pc, #516]	; (800243c <HAL_UART_MspInit+0x240>)
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	4a80      	ldr	r2, [pc, #512]	; (800243c <HAL_UART_MspInit+0x240>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	6193      	str	r3, [r2, #24]
 8002242:	4b7e      	ldr	r3, [pc, #504]	; (800243c <HAL_UART_MspInit+0x240>)
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800224e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002258:	2303      	movs	r3, #3
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225c:	f107 0318 	add.w	r3, r7, #24
 8002260:	4619      	mov	r1, r3
 8002262:	4877      	ldr	r0, [pc, #476]	; (8002440 <HAL_UART_MspInit+0x244>)
 8002264:	f001 f852 	bl	800330c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800226c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002276:	f107 0318 	add.w	r3, r7, #24
 800227a:	4619      	mov	r1, r3
 800227c:	4870      	ldr	r0, [pc, #448]	; (8002440 <HAL_UART_MspInit+0x244>)
 800227e:	f001 f845 	bl	800330c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002282:	4b70      	ldr	r3, [pc, #448]	; (8002444 <HAL_UART_MspInit+0x248>)
 8002284:	4a70      	ldr	r2, [pc, #448]	; (8002448 <HAL_UART_MspInit+0x24c>)
 8002286:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002288:	4b6e      	ldr	r3, [pc, #440]	; (8002444 <HAL_UART_MspInit+0x248>)
 800228a:	2200      	movs	r2, #0
 800228c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800228e:	4b6d      	ldr	r3, [pc, #436]	; (8002444 <HAL_UART_MspInit+0x248>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002294:	4b6b      	ldr	r3, [pc, #428]	; (8002444 <HAL_UART_MspInit+0x248>)
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800229a:	4b6a      	ldr	r3, [pc, #424]	; (8002444 <HAL_UART_MspInit+0x248>)
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022a0:	4b68      	ldr	r3, [pc, #416]	; (8002444 <HAL_UART_MspInit+0x248>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80022a6:	4b67      	ldr	r3, [pc, #412]	; (8002444 <HAL_UART_MspInit+0x248>)
 80022a8:	2220      	movs	r2, #32
 80022aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80022ac:	4b65      	ldr	r3, [pc, #404]	; (8002444 <HAL_UART_MspInit+0x248>)
 80022ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022b4:	4863      	ldr	r0, [pc, #396]	; (8002444 <HAL_UART_MspInit+0x248>)
 80022b6:	f000 fd8b 	bl	8002dd0 <HAL_DMA_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80022c0:	f7fe f8b6 	bl	8000430 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a5f      	ldr	r2, [pc, #380]	; (8002444 <HAL_UART_MspInit+0x248>)
 80022c8:	635a      	str	r2, [r3, #52]	; 0x34
 80022ca:	4a5e      	ldr	r2, [pc, #376]	; (8002444 <HAL_UART_MspInit+0x248>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80022d0:	4b5e      	ldr	r3, [pc, #376]	; (800244c <HAL_UART_MspInit+0x250>)
 80022d2:	4a5f      	ldr	r2, [pc, #380]	; (8002450 <HAL_UART_MspInit+0x254>)
 80022d4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022d6:	4b5d      	ldr	r3, [pc, #372]	; (800244c <HAL_UART_MspInit+0x250>)
 80022d8:	2210      	movs	r2, #16
 80022da:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022dc:	4b5b      	ldr	r3, [pc, #364]	; (800244c <HAL_UART_MspInit+0x250>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022e2:	4b5a      	ldr	r3, [pc, #360]	; (800244c <HAL_UART_MspInit+0x250>)
 80022e4:	2280      	movs	r2, #128	; 0x80
 80022e6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022e8:	4b58      	ldr	r3, [pc, #352]	; (800244c <HAL_UART_MspInit+0x250>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ee:	4b57      	ldr	r3, [pc, #348]	; (800244c <HAL_UART_MspInit+0x250>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80022f4:	4b55      	ldr	r3, [pc, #340]	; (800244c <HAL_UART_MspInit+0x250>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80022fa:	4b54      	ldr	r3, [pc, #336]	; (800244c <HAL_UART_MspInit+0x250>)
 80022fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002300:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002302:	4852      	ldr	r0, [pc, #328]	; (800244c <HAL_UART_MspInit+0x250>)
 8002304:	f000 fd64 	bl	8002dd0 <HAL_DMA_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800230e:	f7fe f88f 	bl	8000430 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4d      	ldr	r2, [pc, #308]	; (800244c <HAL_UART_MspInit+0x250>)
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
 8002318:	4a4c      	ldr	r2, [pc, #304]	; (800244c <HAL_UART_MspInit+0x250>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2105      	movs	r1, #5
 8002322:	2025      	movs	r0, #37	; 0x25
 8002324:	f000 fd29 	bl	8002d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002328:	2025      	movs	r0, #37	; 0x25
 800232a:	f000 fd42 	bl	8002db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800232e:	e07f      	b.n	8002430 <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART3)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a47      	ldr	r2, [pc, #284]	; (8002454 <HAL_UART_MspInit+0x258>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d17a      	bne.n	8002430 <HAL_UART_MspInit+0x234>
    __HAL_RCC_USART3_CLK_ENABLE();
 800233a:	4b40      	ldr	r3, [pc, #256]	; (800243c <HAL_UART_MspInit+0x240>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4a3f      	ldr	r2, [pc, #252]	; (800243c <HAL_UART_MspInit+0x240>)
 8002340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002344:	61d3      	str	r3, [r2, #28]
 8002346:	4b3d      	ldr	r3, [pc, #244]	; (800243c <HAL_UART_MspInit+0x240>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002352:	4b3a      	ldr	r3, [pc, #232]	; (800243c <HAL_UART_MspInit+0x240>)
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	4a39      	ldr	r2, [pc, #228]	; (800243c <HAL_UART_MspInit+0x240>)
 8002358:	f043 0308 	orr.w	r3, r3, #8
 800235c:	6193      	str	r3, [r2, #24]
 800235e:	4b37      	ldr	r3, [pc, #220]	; (800243c <HAL_UART_MspInit+0x240>)
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800236a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800236e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002370:	2312      	movs	r3, #18
 8002372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002374:	2303      	movs	r3, #3
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002378:	f107 0318 	add.w	r3, r7, #24
 800237c:	4619      	mov	r1, r3
 800237e:	4836      	ldr	r0, [pc, #216]	; (8002458 <HAL_UART_MspInit+0x25c>)
 8002380:	f000 ffc4 	bl	800330c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <HAL_UART_MspInit+0x260>)
 8002386:	4a36      	ldr	r2, [pc, #216]	; (8002460 <HAL_UART_MspInit+0x264>)
 8002388:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800238a:	4b34      	ldr	r3, [pc, #208]	; (800245c <HAL_UART_MspInit+0x260>)
 800238c:	2200      	movs	r2, #0
 800238e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002390:	4b32      	ldr	r3, [pc, #200]	; (800245c <HAL_UART_MspInit+0x260>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002396:	4b31      	ldr	r3, [pc, #196]	; (800245c <HAL_UART_MspInit+0x260>)
 8002398:	2280      	movs	r2, #128	; 0x80
 800239a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800239c:	4b2f      	ldr	r3, [pc, #188]	; (800245c <HAL_UART_MspInit+0x260>)
 800239e:	2200      	movs	r2, #0
 80023a0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023a2:	4b2e      	ldr	r3, [pc, #184]	; (800245c <HAL_UART_MspInit+0x260>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80023a8:	4b2c      	ldr	r3, [pc, #176]	; (800245c <HAL_UART_MspInit+0x260>)
 80023aa:	2220      	movs	r2, #32
 80023ac:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80023ae:	4b2b      	ldr	r3, [pc, #172]	; (800245c <HAL_UART_MspInit+0x260>)
 80023b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80023b6:	4829      	ldr	r0, [pc, #164]	; (800245c <HAL_UART_MspInit+0x260>)
 80023b8:	f000 fd0a 	bl	8002dd0 <HAL_DMA_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 80023c2:	f7fe f835 	bl	8000430 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a24      	ldr	r2, [pc, #144]	; (800245c <HAL_UART_MspInit+0x260>)
 80023ca:	635a      	str	r2, [r3, #52]	; 0x34
 80023cc:	4a23      	ldr	r2, [pc, #140]	; (800245c <HAL_UART_MspInit+0x260>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80023d2:	4b24      	ldr	r3, [pc, #144]	; (8002464 <HAL_UART_MspInit+0x268>)
 80023d4:	4a24      	ldr	r2, [pc, #144]	; (8002468 <HAL_UART_MspInit+0x26c>)
 80023d6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023d8:	4b22      	ldr	r3, [pc, #136]	; (8002464 <HAL_UART_MspInit+0x268>)
 80023da:	2210      	movs	r2, #16
 80023dc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023de:	4b21      	ldr	r3, [pc, #132]	; (8002464 <HAL_UART_MspInit+0x268>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023e4:	4b1f      	ldr	r3, [pc, #124]	; (8002464 <HAL_UART_MspInit+0x268>)
 80023e6:	2280      	movs	r2, #128	; 0x80
 80023e8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023ea:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <HAL_UART_MspInit+0x268>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023f0:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <HAL_UART_MspInit+0x268>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80023f6:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <HAL_UART_MspInit+0x268>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <HAL_UART_MspInit+0x268>)
 80023fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002402:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002404:	4817      	ldr	r0, [pc, #92]	; (8002464 <HAL_UART_MspInit+0x268>)
 8002406:	f000 fce3 	bl	8002dd0 <HAL_DMA_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8002410:	f7fe f80e 	bl	8000430 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a13      	ldr	r2, [pc, #76]	; (8002464 <HAL_UART_MspInit+0x268>)
 8002418:	631a      	str	r2, [r3, #48]	; 0x30
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <HAL_UART_MspInit+0x268>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002420:	2200      	movs	r2, #0
 8002422:	2105      	movs	r1, #5
 8002424:	2027      	movs	r0, #39	; 0x27
 8002426:	f000 fca8 	bl	8002d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800242a:	2027      	movs	r0, #39	; 0x27
 800242c:	f000 fcc1 	bl	8002db2 <HAL_NVIC_EnableIRQ>
}
 8002430:	bf00      	nop
 8002432:	3728      	adds	r7, #40	; 0x28
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40013800 	.word	0x40013800
 800243c:	40021000 	.word	0x40021000
 8002440:	40010800 	.word	0x40010800
 8002444:	200024e4 	.word	0x200024e4
 8002448:	40020058 	.word	0x40020058
 800244c:	200024a0 	.word	0x200024a0
 8002450:	40020044 	.word	0x40020044
 8002454:	40004800 	.word	0x40004800
 8002458:	40010c00 	.word	0x40010c00
 800245c:	200023d8 	.word	0x200023d8
 8002460:	40020030 	.word	0x40020030
 8002464:	2000245c 	.word	0x2000245c
 8002468:	4002001c 	.word	0x4002001c

0800246c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08c      	sub	sp, #48	; 0x30
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800247c:	2200      	movs	r2, #0
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	2019      	movs	r0, #25
 8002482:	f000 fc7a 	bl	8002d7a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002486:	2019      	movs	r0, #25
 8002488:	f000 fc93 	bl	8002db2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800248c:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <HAL_InitTick+0x9c>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	4a1d      	ldr	r2, [pc, #116]	; (8002508 <HAL_InitTick+0x9c>)
 8002492:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002496:	6193      	str	r3, [r2, #24]
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <HAL_InitTick+0x9c>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024a4:	f107 0210 	add.w	r2, r7, #16
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f001 fcb6 	bl	8003e20 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80024b4:	f001 fca0 	bl	8003df8 <HAL_RCC_GetPCLK2Freq>
 80024b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024bc:	4a13      	ldr	r2, [pc, #76]	; (800250c <HAL_InitTick+0xa0>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	0c9b      	lsrs	r3, r3, #18
 80024c4:	3b01      	subs	r3, #1
 80024c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_InitTick+0xa4>)
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <HAL_InitTick+0xa8>)
 80024cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <HAL_InitTick+0xa4>)
 80024d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024d4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80024d6:	4a0e      	ldr	r2, [pc, #56]	; (8002510 <HAL_InitTick+0xa4>)
 80024d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024da:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <HAL_InitTick+0xa4>)
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_InitTick+0xa4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80024e8:	4809      	ldr	r0, [pc, #36]	; (8002510 <HAL_InitTick+0xa4>)
 80024ea:	f001 fce7 	bl	8003ebc <HAL_TIM_Base_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d104      	bne.n	80024fe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80024f4:	4806      	ldr	r0, [pc, #24]	; (8002510 <HAL_InitTick+0xa4>)
 80024f6:	f001 fd39 	bl	8003f6c <HAL_TIM_Base_Start_IT>
 80024fa:	4603      	mov	r3, r0
 80024fc:	e000      	b.n	8002500 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
}
 8002500:	4618      	mov	r0, r3
 8002502:	3730      	adds	r7, #48	; 0x30
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000
 800250c:	431bde83 	.word	0x431bde83
 8002510:	20002588 	.word	0x20002588
 8002514:	40012c00 	.word	0x40012c00

08002518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800251c:	e7fe      	b.n	800251c <NMI_Handler+0x4>

0800251e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002522:	e7fe      	b.n	8002522 <HardFault_Handler+0x4>

08002524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002528:	e7fe      	b.n	8002528 <MemManage_Handler+0x4>

0800252a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800252e:	e7fe      	b.n	800252e <BusFault_Handler+0x4>

08002530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002534:	e7fe      	b.n	8002534 <UsageFault_Handler+0x4>

08002536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
	...

08002544 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <DMA1_Channel2_IRQHandler+0x10>)
 800254a:	f000 fdab 	bl	80030a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	2000245c 	.word	0x2000245c

08002558 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */


  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800255c:	4802      	ldr	r0, [pc, #8]	; (8002568 <DMA1_Channel3_IRQHandler+0x10>)
 800255e:	f000 fda1 	bl	80030a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200023d8 	.word	0x200023d8

0800256c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002570:	4802      	ldr	r0, [pc, #8]	; (800257c <DMA1_Channel4_IRQHandler+0x10>)
 8002572:	f000 fd97 	bl	80030a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200024a0 	.word	0x200024a0

08002580 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002584:	4802      	ldr	r0, [pc, #8]	; (8002590 <DMA1_Channel5_IRQHandler+0x10>)
 8002586:	f000 fd8d 	bl	80030a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	200024e4 	.word	0x200024e4

08002594 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <TIM1_UP_IRQHandler+0x10>)
 800259a:	f001 fd39 	bl	8004010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20002588 	.word	0x20002588

080025a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <USART1_IRQHandler+0x10>)
 80025ae:	f002 f94b 	bl	8004848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20002528 	.word	0x20002528

080025bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025c2:	481f      	ldr	r0, [pc, #124]	; (8002640 <USART3_IRQHandler+0x84>)
 80025c4:	f002 f940 	bl	8004848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
	if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET) {
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <USART3_IRQHandler+0x84>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d030      	beq.n	8002638 <USART3_IRQHandler+0x7c>
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 80025d6:	2300      	movs	r3, #0
 80025d8:	607b      	str	r3, [r7, #4]
 80025da:	4b19      	ldr	r3, [pc, #100]	; (8002640 <USART3_IRQHandler+0x84>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	4b17      	ldr	r3, [pc, #92]	; (8002640 <USART3_IRQHandler+0x84>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	607b      	str	r3, [r7, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
		HAL_UART_DMAStop(&huart3) ;
 80025ec:	4814      	ldr	r0, [pc, #80]	; (8002640 <USART3_IRQHandler+0x84>)
 80025ee:	f002 f8cf 	bl	8004790 <HAL_UART_DMAStop>
		_data.dataSize  = MAX_DATA_LENGTH - __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 80025f2:	4b14      	ldr	r3, [pc, #80]	; (8002644 <USART3_IRQHandler+0x88>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80025fe:	b29a      	uxth	r2, r3
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <USART3_IRQHandler+0x8c>)
 8002602:	801a      	strh	r2, [r3, #0]
		memcpy(_data.data,rx_buffer,_data.dataSize);
 8002604:	4b10      	ldr	r3, [pc, #64]	; (8002648 <USART3_IRQHandler+0x8c>)
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	4910      	ldr	r1, [pc, #64]	; (800264c <USART3_IRQHandler+0x90>)
 800260c:	4810      	ldr	r0, [pc, #64]	; (8002650 <USART3_IRQHandler+0x94>)
 800260e:	f005 fa43 	bl	8007a98 <memcpy>
		xl430_setRxData(&_data);
 8002612:	480d      	ldr	r0, [pc, #52]	; (8002648 <USART3_IRQHandler+0x8c>)
 8002614:	f000 fa66 	bl	8002ae4 <xl430_setRxData>
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8002618:	2300      	movs	r3, #0
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <USART3_IRQHandler+0x84>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <USART3_IRQHandler+0x84>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
		HAL_UART_Receive_DMA(&huart3, rx_buffer, 64);
 800262e:	2240      	movs	r2, #64	; 0x40
 8002630:	4906      	ldr	r1, [pc, #24]	; (800264c <USART3_IRQHandler+0x90>)
 8002632:	4803      	ldr	r0, [pc, #12]	; (8002640 <USART3_IRQHandler+0x84>)
 8002634:	f002 f82c 	bl	8004690 <HAL_UART_Receive_DMA>
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	2000241c 	.word	0x2000241c
 8002644:	200023d8 	.word	0x200023d8
 8002648:	200025d0 	.word	0x200025d0
 800264c:	200000e4 	.word	0x200000e4
 8002650:	200025d2 	.word	0x200025d2

08002654 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
	return 1;
 8002658:	2301      	movs	r3, #1
}
 800265a:	4618      	mov	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr

08002662 <_kill>:

int _kill(int pid, int sig)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800266c:	f005 f9ea 	bl	8007a44 <__errno>
 8002670:	4602      	mov	r2, r0
 8002672:	2316      	movs	r3, #22
 8002674:	6013      	str	r3, [r2, #0]
	return -1;
 8002676:	f04f 33ff 	mov.w	r3, #4294967295
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <_exit>:

void _exit (int status)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800268a:	f04f 31ff 	mov.w	r1, #4294967295
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ffe7 	bl	8002662 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002694:	e7fe      	b.n	8002694 <_exit+0x12>
	...

08002698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026a0:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <_sbrk+0x5c>)
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <_sbrk+0x60>)
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026ac:	4b13      	ldr	r3, [pc, #76]	; (80026fc <_sbrk+0x64>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d102      	bne.n	80026ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026b4:	4b11      	ldr	r3, [pc, #68]	; (80026fc <_sbrk+0x64>)
 80026b6:	4a12      	ldr	r2, [pc, #72]	; (8002700 <_sbrk+0x68>)
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <_sbrk+0x64>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d207      	bcs.n	80026d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026c8:	f005 f9bc 	bl	8007a44 <__errno>
 80026cc:	4602      	mov	r2, r0
 80026ce:	230c      	movs	r3, #12
 80026d0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295
 80026d6:	e009      	b.n	80026ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <_sbrk+0x64>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026de:	4b07      	ldr	r3, [pc, #28]	; (80026fc <_sbrk+0x64>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	4a05      	ldr	r2, [pc, #20]	; (80026fc <_sbrk+0x64>)
 80026e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ea:	68fb      	ldr	r3, [r7, #12]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20005000 	.word	0x20005000
 80026f8:	00000400 	.word	0x00000400
 80026fc:	20000ac0 	.word	0x20000ac0
 8002700:	20002660 	.word	0x20002660

08002704 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	0a5a      	lsrs	r2, r3, #9
 8002720:	490f      	ldr	r1, [pc, #60]	; (8002760 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8002722:	fba1 1202 	umull	r1, r2, r1, r2
 8002726:	09d2      	lsrs	r2, r2, #7
 8002728:	490e      	ldr	r1, [pc, #56]	; (8002764 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800272a:	fb01 f202 	mul.w	r2, r1, r2
 800272e:	1a9b      	subs	r3, r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	0a5b      	lsrs	r3, r3, #9
 8002738:	4a09      	ldr	r2, [pc, #36]	; (8002760 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	09db      	lsrs	r3, r3, #7
 8002740:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	441a      	add	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	601a      	str	r2, [r3, #0]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	00044b83 	.word	0x00044b83
 8002764:	3b9aca00 	.word	0x3b9aca00

08002768 <xl430_int>:
#include "xl430.h"
#include "xl430_address.h"


void xl430_int(UART_HandleTypeDef *huart)
{
 8002768:	b5b0      	push	{r4, r5, r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	_huart = *huart;
 8002770:	4a0c      	ldr	r2, [pc, #48]	; (80027a4 <xl430_int+0x3c>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4614      	mov	r4, r2
 8002776:	461d      	mov	r5, r3
 8002778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800277a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800277c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800277e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002784:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002788:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Receive_DMA(&_huart, rx_buffer, 64);
 800278c:	2240      	movs	r2, #64	; 0x40
 800278e:	4906      	ldr	r1, [pc, #24]	; (80027a8 <xl430_int+0x40>)
 8002790:	4804      	ldr	r0, [pc, #16]	; (80027a4 <xl430_int+0x3c>)
 8002792:	f001 ff7d 	bl	8004690 <HAL_UART_Receive_DMA>
	HAL_HalfDuplex_EnableReceiver(&_huart);
 8002796:	4803      	ldr	r0, [pc, #12]	; (80027a4 <xl430_int+0x3c>)
 8002798:	f002 f9a4 	bl	8004ae4 <HAL_HalfDuplex_EnableReceiver>
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bdb0      	pop	{r4, r5, r7, pc}
 80027a4:	200000a4 	.word	0x200000a4
 80027a8:	200000e4 	.word	0x200000e4

080027ac <xl430_writebuffer>:

void xl430_writebuffer(uint8_t * dataBuf,uint16_t data_length)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
	HAL_HalfDuplex_EnableTransmitter(&_huart);
 80027b8:	4807      	ldr	r0, [pc, #28]	; (80027d8 <xl430_writebuffer+0x2c>)
 80027ba:	f002 f960 	bl	8004a7e <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&_huart, dataBuf, data_length, 100);
 80027be:	887a      	ldrh	r2, [r7, #2]
 80027c0:	2364      	movs	r3, #100	; 0x64
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4804      	ldr	r0, [pc, #16]	; (80027d8 <xl430_writebuffer+0x2c>)
 80027c6:	f001 fe65 	bl	8004494 <HAL_UART_Transmit>
	HAL_HalfDuplex_EnableReceiver(&_huart);
 80027ca:	4803      	ldr	r0, [pc, #12]	; (80027d8 <xl430_writebuffer+0x2c>)
 80027cc:	f002 f98a 	bl	8004ae4 <HAL_HalfDuplex_EnableReceiver>

}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	200000a4 	.word	0x200000a4

080027dc <xl430_readbuffer>:

struct prsRxData xl430_readbuffer()
{
 80027dc:	b590      	push	{r4, r7, lr}
 80027de:	b089      	sub	sp, #36	; 0x24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
	struct prsRxData _retData;
	_retData.id 		= _rxData.data[4];
 80027e4:	4b2e      	ldr	r3, [pc, #184]	; (80028a0 <xl430_readbuffer+0xc4>)
 80027e6:	799b      	ldrb	r3, [r3, #6]
 80027e8:	733b      	strb	r3, [r7, #12]
	_retData.errorFlag 	= _rxData.data[8];
 80027ea:	4b2d      	ldr	r3, [pc, #180]	; (80028a0 <xl430_readbuffer+0xc4>)
 80027ec:	7a9b      	ldrb	r3, [r3, #10]
 80027ee:	737b      	strb	r3, [r7, #13]
	_retData.crc_rx 	= _rxData.data[_rxData.dataSize-2] | (_rxData.data[_rxData.dataSize-1] <<8);
 80027f0:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <xl430_readbuffer+0xc4>)
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	3b02      	subs	r3, #2
 80027f6:	4a2a      	ldr	r2, [pc, #168]	; (80028a0 <xl430_readbuffer+0xc4>)
 80027f8:	4413      	add	r3, r2
 80027fa:	789b      	ldrb	r3, [r3, #2]
 80027fc:	b21a      	sxth	r2, r3
 80027fe:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <xl430_readbuffer+0xc4>)
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	3b01      	subs	r3, #1
 8002804:	4926      	ldr	r1, [pc, #152]	; (80028a0 <xl430_readbuffer+0xc4>)
 8002806:	440b      	add	r3, r1
 8002808:	789b      	ldrb	r3, [r3, #2]
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	b21b      	sxth	r3, r3
 800280e:	4313      	orrs	r3, r2
 8002810:	b21b      	sxth	r3, r3
 8002812:	b29b      	uxth	r3, r3
 8002814:	81fb      	strh	r3, [r7, #14]
	_retData.crc_cal 	= update_crc(0, _rxData.data, _rxData.dataSize-2);
 8002816:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <xl430_readbuffer+0xc4>)
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	3b02      	subs	r3, #2
 800281c:	b29b      	uxth	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	4920      	ldr	r1, [pc, #128]	; (80028a4 <xl430_readbuffer+0xc8>)
 8002822:	2000      	movs	r0, #0
 8002824:	f000 f840 	bl	80028a8 <update_crc>
 8002828:	4603      	mov	r3, r0
 800282a:	823b      	strh	r3, [r7, #16]
	_retData.dat_len 	= _rxData.data[5] | (_rxData.data[6] <<8);
 800282c:	4b1c      	ldr	r3, [pc, #112]	; (80028a0 <xl430_readbuffer+0xc4>)
 800282e:	79db      	ldrb	r3, [r3, #7]
 8002830:	b21a      	sxth	r2, r3
 8002832:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <xl430_readbuffer+0xc4>)
 8002834:	7a1b      	ldrb	r3, [r3, #8]
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	b21b      	sxth	r3, r3
 800283a:	4313      	orrs	r3, r2
 800283c:	b21b      	sxth	r3, r3
 800283e:	b29b      	uxth	r3, r3
 8002840:	827b      	strh	r3, [r7, #18]
	_retData.data = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
	if(_retData.crc_cal == _retData.crc_rx)
 8002846:	8a3a      	ldrh	r2, [r7, #16]
 8002848:	89fb      	ldrh	r3, [r7, #14]
 800284a:	429a      	cmp	r2, r3
 800284c:	d102      	bne.n	8002854 <xl430_readbuffer+0x78>
	{
		_retData.crc_check = true;
 800284e:	2301      	movs	r3, #1
 8002850:	763b      	strb	r3, [r7, #24]
 8002852:	e001      	b.n	8002858 <xl430_readbuffer+0x7c>
	}
	else
	{
		_retData.crc_check = false;
 8002854:	2300      	movs	r3, #0
 8002856:	763b      	strb	r3, [r7, #24]
	}

	for(uint16_t n =0; n<_retData.dat_len-4;n++)
 8002858:	2300      	movs	r3, #0
 800285a:	83fb      	strh	r3, [r7, #30]
 800285c:	e00f      	b.n	800287e <xl430_readbuffer+0xa2>
	{
		_retData.data = _retData.data | (_rxData.data[9+n] <<8*n);
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	8bfb      	ldrh	r3, [r7, #30]
 8002862:	3309      	adds	r3, #9
 8002864:	490e      	ldr	r1, [pc, #56]	; (80028a0 <xl430_readbuffer+0xc4>)
 8002866:	440b      	add	r3, r1
 8002868:	789b      	ldrb	r3, [r3, #2]
 800286a:	4619      	mov	r1, r3
 800286c:	8bfb      	ldrh	r3, [r7, #30]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	fa01 f303 	lsl.w	r3, r1, r3
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]
	for(uint16_t n =0; n<_retData.dat_len-4;n++)
 8002878:	8bfb      	ldrh	r3, [r7, #30]
 800287a:	3301      	adds	r3, #1
 800287c:	83fb      	strh	r3, [r7, #30]
 800287e:	8bfa      	ldrh	r2, [r7, #30]
 8002880:	8a7b      	ldrh	r3, [r7, #18]
 8002882:	3b04      	subs	r3, #4
 8002884:	429a      	cmp	r2, r3
 8002886:	dbea      	blt.n	800285e <xl430_readbuffer+0x82>
	}

	return _retData;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	461c      	mov	r4, r3
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002892:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	3724      	adds	r7, #36	; 0x24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd90      	pop	{r4, r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000124 	.word	0x20000124
 80028a4:	20000126 	.word	0x20000126

080028a8 <update_crc>:

uint16_t update_crc(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	463b      	mov	r3, r7
 80028b2:	6019      	str	r1, [r3, #0]
 80028b4:	4611      	mov	r1, r2
 80028b6:	1dbb      	adds	r3, r7, #6
 80028b8:	4602      	mov	r2, r0
 80028ba:	801a      	strh	r2, [r3, #0]
 80028bc:	1d3b      	adds	r3, r7, #4
 80028be:	460a      	mov	r2, r1
 80028c0:	801a      	strh	r2, [r3, #0]
    uint16_t i, j;
    uint16_t crc_table[256] = {
 80028c2:	f107 030c 	add.w	r3, r7, #12
 80028c6:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <update_crc+0x98>)
 80028c8:	4618      	mov	r0, r3
 80028ca:	4611      	mov	r1, r2
 80028cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028d0:	461a      	mov	r2, r3
 80028d2:	f005 f8e1 	bl	8007a98 <memcpy>
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
    };

    for(j = 0; j < data_blk_size; j++)
 80028d6:	2300      	movs	r3, #0
 80028d8:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 80028dc:	e023      	b.n	8002926 <update_crc+0x7e>
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 80028de:	1dbb      	adds	r3, r7, #6
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80028ea:	4639      	mov	r1, r7
 80028ec:	6809      	ldr	r1, [r1, #0]
 80028ee:	440b      	add	r3, r1
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	4053      	eors	r3, r2
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
        crc_accum = (crc_accum << 8) ^ crc_table[i];
 80028fe:	1dbb      	adds	r3, r7, #6
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	b21a      	sxth	r2, r3
 8002906:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 800290a:	f107 030c 	add.w	r3, r7, #12
 800290e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002912:	b21b      	sxth	r3, r3
 8002914:	4053      	eors	r3, r2
 8002916:	b21a      	sxth	r2, r3
 8002918:	1dbb      	adds	r3, r7, #6
 800291a:	801a      	strh	r2, [r3, #0]
    for(j = 0; j < data_blk_size; j++)
 800291c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8002920:	3301      	adds	r3, #1
 8002922:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8002926:	1d3b      	adds	r3, r7, #4
 8002928:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d3d5      	bcc.n	80028de <update_crc+0x36>
    }

    return crc_accum;
 8002932:	1dbb      	adds	r3, r7, #6
 8002934:	881b      	ldrh	r3, [r3, #0]
}
 8002936:	4618      	mov	r0, r3
 8002938:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	08007f1c 	.word	0x08007f1c

08002944 <xl430_ping>:


/*---------api functions----------*/
bool xl430_ping(uint8_t ID)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
	uint8_t __buffer[10] = {0xFF,0xFF,0xFD,0x00,0X00,0x03,0x00,0x01,0x00,0x00};
 800294e:	4a1a      	ldr	r2, [pc, #104]	; (80029b8 <xl430_ping+0x74>)
 8002950:	f107 031c 	add.w	r3, r7, #28
 8002954:	ca07      	ldmia	r2, {r0, r1, r2}
 8002956:	c303      	stmia	r3!, {r0, r1}
 8002958:	801a      	strh	r2, [r3, #0]
	__buffer[4] = ID;
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	f887 3020 	strb.w	r3, [r7, #32]
	uint16_t crc =update_crc(0,__buffer,8);
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	2208      	movs	r2, #8
 8002966:	4619      	mov	r1, r3
 8002968:	2000      	movs	r0, #0
 800296a:	f7ff ff9d 	bl	80028a8 <update_crc>
 800296e:	4603      	mov	r3, r0
 8002970:	84fb      	strh	r3, [r7, #38]	; 0x26
	__buffer[9] = (crc>>8) & 0x00FF;
 8002972:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	b29b      	uxth	r3, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	__buffer[8] = (crc & 0x00FF);
 800297e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002980:	b2db      	uxtb	r3, r3
 8002982:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	xl430_writebuffer(__buffer,10);
 8002986:	f107 031c 	add.w	r3, r7, #28
 800298a:	210a      	movs	r1, #10
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff0d 	bl	80027ac <xl430_writebuffer>

	struct prsRxData _data;
	_data = xl430_readbuffer();
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ff20 	bl	80027dc <xl430_readbuffer>

		if(_data.crc_check && (!_data.errorFlag))
 800299c:	7e3b      	ldrb	r3, [r7, #24]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d004      	beq.n	80029ac <xl430_ping+0x68>
 80029a2:	7b7b      	ldrb	r3, [r7, #13]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <xl430_ping+0x68>
		{
			return true;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <xl430_ping+0x6a>
		}
		else
		{
			return false;
 80029ac:	2300      	movs	r3, #0
		}


}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3728      	adds	r7, #40	; 0x28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	0800811c 	.word	0x0800811c

080029bc <xl430_writeToAddress>:

void xl430_writeToAddress(uint8_t Id ,int tx_data,const uint16_t *address,const uint8_t *__inst)
{
 80029bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029be:	b08b      	sub	sp, #44	; 0x2c
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	4603      	mov	r3, r0
 80029ca:	73fb      	strb	r3, [r7, #15]
 80029cc:	466b      	mov	r3, sp
 80029ce:	461e      	mov	r6, r3
	  uint16_t mem_size=12;
 80029d0:	230c      	movs	r3, #12
 80029d2:	84bb      	strh	r3, [r7, #36]	; 0x24
	  uint16_t crc;
	  char crc_[2];
	  uint8_t data_size =4;
 80029d4:	2304      	movs	r3, #4
 80029d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  uint8_t data_array[4];



	  data_array[0] = tx_data & 0x000000FF;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	753b      	strb	r3, [r7, #20]
	  data_array[1] = (tx_data>>8) & 0x000000FF;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	121b      	asrs	r3, r3, #8
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	757b      	strb	r3, [r7, #21]
	  data_array[2] = (tx_data>>16) & 0x000000FF;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	141b      	asrs	r3, r3, #16
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	75bb      	strb	r3, [r7, #22]
	  data_array[3] = (tx_data>>24) & 0x000000FF;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	0e1b      	lsrs	r3, r3, #24
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	75fb      	strb	r3, [r7, #23]

	  mem_size += data_size;
 80029f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a00:	4413      	add	r3, r2
 8002a02:	84bb      	strh	r3, [r7, #36]	; 0x24
	  uint8_t m_tx_buffer [mem_size];
 8002a04:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 8002a06:	462b      	mov	r3, r5
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	623b      	str	r3, [r7, #32]
 8002a0c:	b2a9      	uxth	r1, r5
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	f04f 0400 	mov.w	r4, #0
 8002a1a:	00d4      	lsls	r4, r2, #3
 8002a1c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002a20:	00cb      	lsls	r3, r1, #3
 8002a22:	b2a9      	uxth	r1, r5
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	f04f 0400 	mov.w	r4, #0
 8002a30:	00d4      	lsls	r4, r2, #3
 8002a32:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002a36:	00cb      	lsls	r3, r1, #3
 8002a38:	462b      	mov	r3, r5
 8002a3a:	3307      	adds	r3, #7
 8002a3c:	08db      	lsrs	r3, r3, #3
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	ebad 0d03 	sub.w	sp, sp, r3
 8002a44:	466b      	mov	r3, sp
 8002a46:	3300      	adds	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
	  uint16_t m_len =data_size+5;
 8002a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3305      	adds	r3, #5
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	827b      	strh	r3, [r7, #18]


	  memcpy (m_tx_buffer,header,6);
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	2206      	movs	r2, #6
 8002a5a:	4921      	ldr	r1, [pc, #132]	; (8002ae0 <xl430_writeToAddress+0x124>)
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f005 f81b 	bl	8007a98 <memcpy>
	  memcpy (m_tx_buffer+sizeof(header),&Id,1);
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3304      	adds	r3, #4
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	701a      	strb	r2, [r3, #0]
	  memcpy (m_tx_buffer+sizeof(header)+1,&m_len,2);
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3305      	adds	r3, #5
 8002a6e:	8a7a      	ldrh	r2, [r7, #18]
 8002a70:	801a      	strh	r2, [r3, #0]
	  memcpy (m_tx_buffer+sizeof(header)+3,__inst,1);
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3307      	adds	r3, #7
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	7812      	ldrb	r2, [r2, #0]
 8002a7a:	701a      	strb	r2, [r3, #0]
	  memcpy (m_tx_buffer+sizeof(header)+4,address,2);
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	3308      	adds	r3, #8
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	8812      	ldrh	r2, [r2, #0]
 8002a84:	b292      	uxth	r2, r2
 8002a86:	801a      	strh	r2, [r3, #0]
	  memcpy (m_tx_buffer+sizeof(header)+6,data_array,data_size);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	330a      	adds	r3, #10
 8002a8c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002a90:	f107 0114 	add.w	r1, r7, #20
 8002a94:	4618      	mov	r0, r3
 8002a96:	f004 ffff 	bl	8007a98 <memcpy>

	  crc = update_crc(0,m_tx_buffer,mem_size -2);
 8002a9a:	69f9      	ldr	r1, [r7, #28]
 8002a9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a9e:	3b02      	subs	r3, #2
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f7ff feff 	bl	80028a8 <update_crc>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	837b      	strh	r3, [r7, #26]
	  crc_[0]=crc & 0x00FF;
 8002aae:	8b7b      	ldrh	r3, [r7, #26]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	763b      	strb	r3, [r7, #24]
	  crc_[1]=(crc>>8) & 0x00FF;
 8002ab4:	8b7b      	ldrh	r3, [r7, #26]
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	767b      	strb	r3, [r7, #25]
	  memcpy (m_tx_buffer+sizeof(header)+6+data_size,crc_,2);
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ac4:	330a      	adds	r3, #10
 8002ac6:	4413      	add	r3, r2
 8002ac8:	8b3a      	ldrh	r2, [r7, #24]
 8002aca:	801a      	strh	r2, [r3, #0]

	    xl430_writebuffer(m_tx_buffer,sizeof(m_tx_buffer));
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	4629      	mov	r1, r5
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fe6b 	bl	80027ac <xl430_writebuffer>
 8002ad6:	46b5      	mov	sp, r6



}
 8002ad8:	bf00      	nop
 8002ada:	372c      	adds	r7, #44	; 0x2c
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ae0:	0800826c 	.word	0x0800826c

08002ae4 <xl430_setRxData>:
}



void xl430_setRxData(struct rxData *data)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	_rxData = *data;
 8002aec:	4a09      	ldr	r2, [pc, #36]	; (8002b14 <xl430_setRxData+0x30>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	2342      	movs	r3, #66	; 0x42
 8002af6:	461a      	mov	r2, r3
 8002af8:	f004 ffce 	bl	8007a98 <memcpy>
	memset(rx_buffer,0,data->dataSize);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	2100      	movs	r1, #0
 8002b04:	4804      	ldr	r0, [pc, #16]	; (8002b18 <xl430_setRxData+0x34>)
 8002b06:	f004 ffd2 	bl	8007aae <memset>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000124 	.word	0x20000124
 8002b18:	200000e4 	.word	0x200000e4

08002b1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002b1c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002b1e:	e003      	b.n	8002b28 <LoopCopyDataInit>

08002b20 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002b22:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002b24:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002b26:	3104      	adds	r1, #4

08002b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002b28:	480a      	ldr	r0, [pc, #40]	; (8002b54 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002b2c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002b2e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002b30:	d3f6      	bcc.n	8002b20 <CopyDataInit>
  ldr r2, =_sbss
 8002b32:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002b34:	e002      	b.n	8002b3c <LoopFillZerobss>

08002b36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002b36:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002b38:	f842 3b04 	str.w	r3, [r2], #4

08002b3c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002b3c:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002b3e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002b40:	d3f9      	bcc.n	8002b36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b42:	f7ff fddf 	bl	8002704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b46:	f004 ff83 	bl	8007a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b4a:	f7fd fb09 	bl	8000160 <main>
  bx lr
 8002b4e:	4770      	bx	lr
  ldr r3, =_sidata
 8002b50:	0800827c 	.word	0x0800827c
  ldr r0, =_sdata
 8002b54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002b58:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 8002b5c:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8002b60:	2000265c 	.word	0x2000265c

08002b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b64:	e7fe      	b.n	8002b64 <ADC1_2_IRQHandler>
	...

08002b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <HAL_Init+0x28>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <HAL_Init+0x28>)
 8002b72:	f043 0310 	orr.w	r3, r3, #16
 8002b76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b78:	2003      	movs	r0, #3
 8002b7a:	f000 f8f3 	bl	8002d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f7ff fc74 	bl	800246c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b84:	f7ff fb02 	bl	800218c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40022000 	.word	0x40022000

08002b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_IncTick+0x1c>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_IncTick+0x20>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a03      	ldr	r2, [pc, #12]	; (8002bb4 <HAL_IncTick+0x20>)
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	20000018 	.word	0x20000018
 8002bb4:	20002614 	.word	0x20002614

08002bb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return uwTick;
 8002bbc:	4b02      	ldr	r3, [pc, #8]	; (8002bc8 <HAL_GetTick+0x10>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	20002614 	.word	0x20002614

08002bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bd4:	f7ff fff0 	bl	8002bb8 <HAL_GetTick>
 8002bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d005      	beq.n	8002bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <HAL_Delay+0x40>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4413      	add	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bf2:	bf00      	nop
 8002bf4:	f7ff ffe0 	bl	8002bb8 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d8f7      	bhi.n	8002bf4 <HAL_Delay+0x28>
  {
  }
}
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000018 	.word	0x20000018

08002c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <__NVIC_SetPriorityGrouping+0x44>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c42:	4a04      	ldr	r2, [pc, #16]	; (8002c54 <__NVIC_SetPriorityGrouping+0x44>)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	60d3      	str	r3, [r2, #12]
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c5c:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <__NVIC_GetPriorityGrouping+0x18>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	0a1b      	lsrs	r3, r3, #8
 8002c62:	f003 0307 	and.w	r3, r3, #7
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	db0b      	blt.n	8002c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	f003 021f 	and.w	r2, r3, #31
 8002c8c:	4906      	ldr	r1, [pc, #24]	; (8002ca8 <__NVIC_EnableIRQ+0x34>)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	2001      	movs	r0, #1
 8002c96:	fa00 f202 	lsl.w	r2, r0, r2
 8002c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr
 8002ca8:	e000e100 	.word	0xe000e100

08002cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	6039      	str	r1, [r7, #0]
 8002cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	db0a      	blt.n	8002cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	490c      	ldr	r1, [pc, #48]	; (8002cf8 <__NVIC_SetPriority+0x4c>)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	0112      	lsls	r2, r2, #4
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	440b      	add	r3, r1
 8002cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cd4:	e00a      	b.n	8002cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	4908      	ldr	r1, [pc, #32]	; (8002cfc <__NVIC_SetPriority+0x50>)
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	3b04      	subs	r3, #4
 8002ce4:	0112      	lsls	r2, r2, #4
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	440b      	add	r3, r1
 8002cea:	761a      	strb	r2, [r3, #24]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000e100 	.word	0xe000e100
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b089      	sub	sp, #36	; 0x24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f1c3 0307 	rsb	r3, r3, #7
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	bf28      	it	cs
 8002d1e:	2304      	movcs	r3, #4
 8002d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3304      	adds	r3, #4
 8002d26:	2b06      	cmp	r3, #6
 8002d28:	d902      	bls.n	8002d30 <NVIC_EncodePriority+0x30>
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3b03      	subs	r3, #3
 8002d2e:	e000      	b.n	8002d32 <NVIC_EncodePriority+0x32>
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	f04f 32ff 	mov.w	r2, #4294967295
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43da      	mvns	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	401a      	ands	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d48:	f04f 31ff 	mov.w	r1, #4294967295
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	43d9      	mvns	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d58:	4313      	orrs	r3, r2
         );
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3724      	adds	r7, #36	; 0x24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ff4f 	bl	8002c10 <__NVIC_SetPriorityGrouping>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	4603      	mov	r3, r0
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d8c:	f7ff ff64 	bl	8002c58 <__NVIC_GetPriorityGrouping>
 8002d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	6978      	ldr	r0, [r7, #20]
 8002d98:	f7ff ffb2 	bl	8002d00 <NVIC_EncodePriority>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff81 	bl	8002cac <__NVIC_SetPriority>
}
 8002daa:	bf00      	nop
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	4603      	mov	r3, r0
 8002dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ff57 	bl	8002c74 <__NVIC_EnableIRQ>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e043      	b.n	8002e6e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <HAL_DMA_Init+0xa8>)
 8002dee:	4413      	add	r3, r2
 8002df0:	4a22      	ldr	r2, [pc, #136]	; (8002e7c <HAL_DMA_Init+0xac>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	091b      	lsrs	r3, r3, #4
 8002df8:	009a      	lsls	r2, r3, #2
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a1f      	ldr	r2, [pc, #124]	; (8002e80 <HAL_DMA_Init+0xb0>)
 8002e02:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e1a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002e1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr
 8002e78:	bffdfff8 	.word	0xbffdfff8
 8002e7c:	cccccccd 	.word	0xcccccccd
 8002e80:	40020000 	.word	0x40020000

08002e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_DMA_Start_IT+0x20>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e04a      	b.n	8002f3a <HAL_DMA_Start_IT+0xb6>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d13a      	bne.n	8002f2c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f9e8 	bl	80032b0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 020e 	orr.w	r2, r2, #14
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e00f      	b.n	8002f1a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0204 	bic.w	r2, r2, #4
 8002f08:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 020a 	orr.w	r2, r2, #10
 8002f18:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0201 	orr.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	e005      	b.n	8002f38 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f34:	2302      	movs	r3, #2
 8002f36:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b085      	sub	sp, #20
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d008      	beq.n	8002f6a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e020      	b.n	8002fac <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 020e 	bic.w	r2, r2, #14
 8002f78:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0201 	bic.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f92:	2101      	movs	r1, #1
 8002f94:	fa01 f202 	lsl.w	r2, r1, r2
 8002f98:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d005      	beq.n	8002fda <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
 8002fd8:	e051      	b.n	800307e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 020e 	bic.w	r2, r2, #14
 8002fe8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0201 	bic.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a22      	ldr	r2, [pc, #136]	; (8003088 <HAL_DMA_Abort_IT+0xd0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d029      	beq.n	8003058 <HAL_DMA_Abort_IT+0xa0>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a20      	ldr	r2, [pc, #128]	; (800308c <HAL_DMA_Abort_IT+0xd4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d022      	beq.n	8003054 <HAL_DMA_Abort_IT+0x9c>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1f      	ldr	r2, [pc, #124]	; (8003090 <HAL_DMA_Abort_IT+0xd8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d01a      	beq.n	800304e <HAL_DMA_Abort_IT+0x96>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1d      	ldr	r2, [pc, #116]	; (8003094 <HAL_DMA_Abort_IT+0xdc>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d012      	beq.n	8003048 <HAL_DMA_Abort_IT+0x90>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1c      	ldr	r2, [pc, #112]	; (8003098 <HAL_DMA_Abort_IT+0xe0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00a      	beq.n	8003042 <HAL_DMA_Abort_IT+0x8a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1a      	ldr	r2, [pc, #104]	; (800309c <HAL_DMA_Abort_IT+0xe4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d102      	bne.n	800303c <HAL_DMA_Abort_IT+0x84>
 8003036:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800303a:	e00e      	b.n	800305a <HAL_DMA_Abort_IT+0xa2>
 800303c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003040:	e00b      	b.n	800305a <HAL_DMA_Abort_IT+0xa2>
 8003042:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003046:	e008      	b.n	800305a <HAL_DMA_Abort_IT+0xa2>
 8003048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800304c:	e005      	b.n	800305a <HAL_DMA_Abort_IT+0xa2>
 800304e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003052:	e002      	b.n	800305a <HAL_DMA_Abort_IT+0xa2>
 8003054:	2310      	movs	r3, #16
 8003056:	e000      	b.n	800305a <HAL_DMA_Abort_IT+0xa2>
 8003058:	2301      	movs	r3, #1
 800305a:	4a11      	ldr	r2, [pc, #68]	; (80030a0 <HAL_DMA_Abort_IT+0xe8>)
 800305c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
    } 
  }
  return status;
 800307e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40020008 	.word	0x40020008
 800308c:	4002001c 	.word	0x4002001c
 8003090:	40020030 	.word	0x40020030
 8003094:	40020044 	.word	0x40020044
 8003098:	40020058 	.word	0x40020058
 800309c:	4002006c 	.word	0x4002006c
 80030a0:	40020000 	.word	0x40020000

080030a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	2204      	movs	r2, #4
 80030c2:	409a      	lsls	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d04f      	beq.n	800316c <HAL_DMA_IRQHandler+0xc8>
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d04a      	beq.n	800316c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d107      	bne.n	80030f4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0204 	bic.w	r2, r2, #4
 80030f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a66      	ldr	r2, [pc, #408]	; (8003294 <HAL_DMA_IRQHandler+0x1f0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d029      	beq.n	8003152 <HAL_DMA_IRQHandler+0xae>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a65      	ldr	r2, [pc, #404]	; (8003298 <HAL_DMA_IRQHandler+0x1f4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d022      	beq.n	800314e <HAL_DMA_IRQHandler+0xaa>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a63      	ldr	r2, [pc, #396]	; (800329c <HAL_DMA_IRQHandler+0x1f8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d01a      	beq.n	8003148 <HAL_DMA_IRQHandler+0xa4>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a62      	ldr	r2, [pc, #392]	; (80032a0 <HAL_DMA_IRQHandler+0x1fc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d012      	beq.n	8003142 <HAL_DMA_IRQHandler+0x9e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a60      	ldr	r2, [pc, #384]	; (80032a4 <HAL_DMA_IRQHandler+0x200>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00a      	beq.n	800313c <HAL_DMA_IRQHandler+0x98>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a5f      	ldr	r2, [pc, #380]	; (80032a8 <HAL_DMA_IRQHandler+0x204>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d102      	bne.n	8003136 <HAL_DMA_IRQHandler+0x92>
 8003130:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003134:	e00e      	b.n	8003154 <HAL_DMA_IRQHandler+0xb0>
 8003136:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800313a:	e00b      	b.n	8003154 <HAL_DMA_IRQHandler+0xb0>
 800313c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003140:	e008      	b.n	8003154 <HAL_DMA_IRQHandler+0xb0>
 8003142:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003146:	e005      	b.n	8003154 <HAL_DMA_IRQHandler+0xb0>
 8003148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800314c:	e002      	b.n	8003154 <HAL_DMA_IRQHandler+0xb0>
 800314e:	2340      	movs	r3, #64	; 0x40
 8003150:	e000      	b.n	8003154 <HAL_DMA_IRQHandler+0xb0>
 8003152:	2304      	movs	r3, #4
 8003154:	4a55      	ldr	r2, [pc, #340]	; (80032ac <HAL_DMA_IRQHandler+0x208>)
 8003156:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 8094 	beq.w	800328a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800316a:	e08e      	b.n	800328a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	2202      	movs	r2, #2
 8003172:	409a      	lsls	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d056      	beq.n	800322a <HAL_DMA_IRQHandler+0x186>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d051      	beq.n	800322a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10b      	bne.n	80031ac <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 020a 	bic.w	r2, r2, #10
 80031a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a38      	ldr	r2, [pc, #224]	; (8003294 <HAL_DMA_IRQHandler+0x1f0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d029      	beq.n	800320a <HAL_DMA_IRQHandler+0x166>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a37      	ldr	r2, [pc, #220]	; (8003298 <HAL_DMA_IRQHandler+0x1f4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d022      	beq.n	8003206 <HAL_DMA_IRQHandler+0x162>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a35      	ldr	r2, [pc, #212]	; (800329c <HAL_DMA_IRQHandler+0x1f8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d01a      	beq.n	8003200 <HAL_DMA_IRQHandler+0x15c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a34      	ldr	r2, [pc, #208]	; (80032a0 <HAL_DMA_IRQHandler+0x1fc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d012      	beq.n	80031fa <HAL_DMA_IRQHandler+0x156>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a32      	ldr	r2, [pc, #200]	; (80032a4 <HAL_DMA_IRQHandler+0x200>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00a      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x150>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a31      	ldr	r2, [pc, #196]	; (80032a8 <HAL_DMA_IRQHandler+0x204>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d102      	bne.n	80031ee <HAL_DMA_IRQHandler+0x14a>
 80031e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031ec:	e00e      	b.n	800320c <HAL_DMA_IRQHandler+0x168>
 80031ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f2:	e00b      	b.n	800320c <HAL_DMA_IRQHandler+0x168>
 80031f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031f8:	e008      	b.n	800320c <HAL_DMA_IRQHandler+0x168>
 80031fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031fe:	e005      	b.n	800320c <HAL_DMA_IRQHandler+0x168>
 8003200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003204:	e002      	b.n	800320c <HAL_DMA_IRQHandler+0x168>
 8003206:	2320      	movs	r3, #32
 8003208:	e000      	b.n	800320c <HAL_DMA_IRQHandler+0x168>
 800320a:	2302      	movs	r3, #2
 800320c:	4a27      	ldr	r2, [pc, #156]	; (80032ac <HAL_DMA_IRQHandler+0x208>)
 800320e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	2b00      	cmp	r3, #0
 800321e:	d034      	beq.n	800328a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003228:	e02f      	b.n	800328a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	2208      	movs	r2, #8
 8003230:	409a      	lsls	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4013      	ands	r3, r2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d028      	beq.n	800328c <HAL_DMA_IRQHandler+0x1e8>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d023      	beq.n	800328c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 020e 	bic.w	r2, r2, #14
 8003252:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	2101      	movs	r1, #1
 800325e:	fa01 f202 	lsl.w	r2, r1, r2
 8003262:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	2b00      	cmp	r3, #0
 8003280:	d004      	beq.n	800328c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	4798      	blx	r3
    }
  }
  return;
 800328a:	bf00      	nop
 800328c:	bf00      	nop
}
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40020008 	.word	0x40020008
 8003298:	4002001c 	.word	0x4002001c
 800329c:	40020030 	.word	0x40020030
 80032a0:	40020044 	.word	0x40020044
 80032a4:	40020058 	.word	0x40020058
 80032a8:	4002006c 	.word	0x4002006c
 80032ac:	40020000 	.word	0x40020000

080032b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c6:	2101      	movs	r1, #1
 80032c8:	fa01 f202 	lsl.w	r2, r1, r2
 80032cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b10      	cmp	r3, #16
 80032dc:	d108      	bne.n	80032f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032ee:	e007      	b.n	8003300 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	60da      	str	r2, [r3, #12]
}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr
	...

0800330c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800330c:	b480      	push	{r7}
 800330e:	b08b      	sub	sp, #44	; 0x2c
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003316:	2300      	movs	r3, #0
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800331a:	2300      	movs	r3, #0
 800331c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800331e:	e127      	b.n	8003570 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003320:	2201      	movs	r2, #1
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	4013      	ands	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	429a      	cmp	r2, r3
 800333a:	f040 8116 	bne.w	800356a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b12      	cmp	r3, #18
 8003344:	d034      	beq.n	80033b0 <HAL_GPIO_Init+0xa4>
 8003346:	2b12      	cmp	r3, #18
 8003348:	d80d      	bhi.n	8003366 <HAL_GPIO_Init+0x5a>
 800334a:	2b02      	cmp	r3, #2
 800334c:	d02b      	beq.n	80033a6 <HAL_GPIO_Init+0x9a>
 800334e:	2b02      	cmp	r3, #2
 8003350:	d804      	bhi.n	800335c <HAL_GPIO_Init+0x50>
 8003352:	2b00      	cmp	r3, #0
 8003354:	d031      	beq.n	80033ba <HAL_GPIO_Init+0xae>
 8003356:	2b01      	cmp	r3, #1
 8003358:	d01c      	beq.n	8003394 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800335a:	e048      	b.n	80033ee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800335c:	2b03      	cmp	r3, #3
 800335e:	d043      	beq.n	80033e8 <HAL_GPIO_Init+0xdc>
 8003360:	2b11      	cmp	r3, #17
 8003362:	d01b      	beq.n	800339c <HAL_GPIO_Init+0x90>
          break;
 8003364:	e043      	b.n	80033ee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003366:	4a89      	ldr	r2, [pc, #548]	; (800358c <HAL_GPIO_Init+0x280>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d026      	beq.n	80033ba <HAL_GPIO_Init+0xae>
 800336c:	4a87      	ldr	r2, [pc, #540]	; (800358c <HAL_GPIO_Init+0x280>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d806      	bhi.n	8003380 <HAL_GPIO_Init+0x74>
 8003372:	4a87      	ldr	r2, [pc, #540]	; (8003590 <HAL_GPIO_Init+0x284>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d020      	beq.n	80033ba <HAL_GPIO_Init+0xae>
 8003378:	4a86      	ldr	r2, [pc, #536]	; (8003594 <HAL_GPIO_Init+0x288>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d01d      	beq.n	80033ba <HAL_GPIO_Init+0xae>
          break;
 800337e:	e036      	b.n	80033ee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003380:	4a85      	ldr	r2, [pc, #532]	; (8003598 <HAL_GPIO_Init+0x28c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d019      	beq.n	80033ba <HAL_GPIO_Init+0xae>
 8003386:	4a85      	ldr	r2, [pc, #532]	; (800359c <HAL_GPIO_Init+0x290>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d016      	beq.n	80033ba <HAL_GPIO_Init+0xae>
 800338c:	4a84      	ldr	r2, [pc, #528]	; (80035a0 <HAL_GPIO_Init+0x294>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d013      	beq.n	80033ba <HAL_GPIO_Init+0xae>
          break;
 8003392:	e02c      	b.n	80033ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	623b      	str	r3, [r7, #32]
          break;
 800339a:	e028      	b.n	80033ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	3304      	adds	r3, #4
 80033a2:	623b      	str	r3, [r7, #32]
          break;
 80033a4:	e023      	b.n	80033ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	3308      	adds	r3, #8
 80033ac:	623b      	str	r3, [r7, #32]
          break;
 80033ae:	e01e      	b.n	80033ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	330c      	adds	r3, #12
 80033b6:	623b      	str	r3, [r7, #32]
          break;
 80033b8:	e019      	b.n	80033ee <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d102      	bne.n	80033c8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033c2:	2304      	movs	r3, #4
 80033c4:	623b      	str	r3, [r7, #32]
          break;
 80033c6:	e012      	b.n	80033ee <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d105      	bne.n	80033dc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033d0:	2308      	movs	r3, #8
 80033d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	611a      	str	r2, [r3, #16]
          break;
 80033da:	e008      	b.n	80033ee <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033dc:	2308      	movs	r3, #8
 80033de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	615a      	str	r2, [r3, #20]
          break;
 80033e6:	e002      	b.n	80033ee <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033e8:	2300      	movs	r3, #0
 80033ea:	623b      	str	r3, [r7, #32]
          break;
 80033ec:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	2bff      	cmp	r3, #255	; 0xff
 80033f2:	d801      	bhi.n	80033f8 <HAL_GPIO_Init+0xec>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	e001      	b.n	80033fc <HAL_GPIO_Init+0xf0>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	2bff      	cmp	r3, #255	; 0xff
 8003402:	d802      	bhi.n	800340a <HAL_GPIO_Init+0xfe>
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	e002      	b.n	8003410 <HAL_GPIO_Init+0x104>
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	3b08      	subs	r3, #8
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	210f      	movs	r1, #15
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	fa01 f303 	lsl.w	r3, r1, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	401a      	ands	r2, r3
 8003422:	6a39      	ldr	r1, [r7, #32]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	fa01 f303 	lsl.w	r3, r1, r3
 800342a:	431a      	orrs	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 8096 	beq.w	800356a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800343e:	4b59      	ldr	r3, [pc, #356]	; (80035a4 <HAL_GPIO_Init+0x298>)
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	4a58      	ldr	r2, [pc, #352]	; (80035a4 <HAL_GPIO_Init+0x298>)
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	6193      	str	r3, [r2, #24]
 800344a:	4b56      	ldr	r3, [pc, #344]	; (80035a4 <HAL_GPIO_Init+0x298>)
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003456:	4a54      	ldr	r2, [pc, #336]	; (80035a8 <HAL_GPIO_Init+0x29c>)
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	089b      	lsrs	r3, r3, #2
 800345c:	3302      	adds	r3, #2
 800345e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003462:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	220f      	movs	r2, #15
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4013      	ands	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a4b      	ldr	r2, [pc, #300]	; (80035ac <HAL_GPIO_Init+0x2a0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d013      	beq.n	80034aa <HAL_GPIO_Init+0x19e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a4a      	ldr	r2, [pc, #296]	; (80035b0 <HAL_GPIO_Init+0x2a4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d00d      	beq.n	80034a6 <HAL_GPIO_Init+0x19a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a49      	ldr	r2, [pc, #292]	; (80035b4 <HAL_GPIO_Init+0x2a8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d007      	beq.n	80034a2 <HAL_GPIO_Init+0x196>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a48      	ldr	r2, [pc, #288]	; (80035b8 <HAL_GPIO_Init+0x2ac>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d101      	bne.n	800349e <HAL_GPIO_Init+0x192>
 800349a:	2303      	movs	r3, #3
 800349c:	e006      	b.n	80034ac <HAL_GPIO_Init+0x1a0>
 800349e:	2304      	movs	r3, #4
 80034a0:	e004      	b.n	80034ac <HAL_GPIO_Init+0x1a0>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e002      	b.n	80034ac <HAL_GPIO_Init+0x1a0>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <HAL_GPIO_Init+0x1a0>
 80034aa:	2300      	movs	r3, #0
 80034ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ae:	f002 0203 	and.w	r2, r2, #3
 80034b2:	0092      	lsls	r2, r2, #2
 80034b4:	4093      	lsls	r3, r2
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034bc:	493a      	ldr	r1, [pc, #232]	; (80035a8 <HAL_GPIO_Init+0x29c>)
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	089b      	lsrs	r3, r3, #2
 80034c2:	3302      	adds	r3, #2
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d006      	beq.n	80034e4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034d6:	4b39      	ldr	r3, [pc, #228]	; (80035bc <HAL_GPIO_Init+0x2b0>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4938      	ldr	r1, [pc, #224]	; (80035bc <HAL_GPIO_Init+0x2b0>)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]
 80034e2:	e006      	b.n	80034f2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034e4:	4b35      	ldr	r3, [pc, #212]	; (80035bc <HAL_GPIO_Init+0x2b0>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	4933      	ldr	r1, [pc, #204]	; (80035bc <HAL_GPIO_Init+0x2b0>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d006      	beq.n	800350c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80034fe:	4b2f      	ldr	r3, [pc, #188]	; (80035bc <HAL_GPIO_Init+0x2b0>)
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	492e      	ldr	r1, [pc, #184]	; (80035bc <HAL_GPIO_Init+0x2b0>)
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	604b      	str	r3, [r1, #4]
 800350a:	e006      	b.n	800351a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800350c:	4b2b      	ldr	r3, [pc, #172]	; (80035bc <HAL_GPIO_Init+0x2b0>)
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	43db      	mvns	r3, r3
 8003514:	4929      	ldr	r1, [pc, #164]	; (80035bc <HAL_GPIO_Init+0x2b0>)
 8003516:	4013      	ands	r3, r2
 8003518:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d006      	beq.n	8003534 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003526:	4b25      	ldr	r3, [pc, #148]	; (80035bc <HAL_GPIO_Init+0x2b0>)
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	4924      	ldr	r1, [pc, #144]	; (80035bc <HAL_GPIO_Init+0x2b0>)
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
 8003532:	e006      	b.n	8003542 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003534:	4b21      	ldr	r3, [pc, #132]	; (80035bc <HAL_GPIO_Init+0x2b0>)
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	43db      	mvns	r3, r3
 800353c:	491f      	ldr	r1, [pc, #124]	; (80035bc <HAL_GPIO_Init+0x2b0>)
 800353e:	4013      	ands	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d006      	beq.n	800355c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800354e:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <HAL_GPIO_Init+0x2b0>)
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	491a      	ldr	r1, [pc, #104]	; (80035bc <HAL_GPIO_Init+0x2b0>)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	4313      	orrs	r3, r2
 8003558:	60cb      	str	r3, [r1, #12]
 800355a:	e006      	b.n	800356a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800355c:	4b17      	ldr	r3, [pc, #92]	; (80035bc <HAL_GPIO_Init+0x2b0>)
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	43db      	mvns	r3, r3
 8003564:	4915      	ldr	r1, [pc, #84]	; (80035bc <HAL_GPIO_Init+0x2b0>)
 8003566:	4013      	ands	r3, r2
 8003568:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	3301      	adds	r3, #1
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	fa22 f303 	lsr.w	r3, r2, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	f47f aed0 	bne.w	8003320 <HAL_GPIO_Init+0x14>
  }
}
 8003580:	bf00      	nop
 8003582:	372c      	adds	r7, #44	; 0x2c
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	10210000 	.word	0x10210000
 8003590:	10110000 	.word	0x10110000
 8003594:	10120000 	.word	0x10120000
 8003598:	10310000 	.word	0x10310000
 800359c:	10320000 	.word	0x10320000
 80035a0:	10220000 	.word	0x10220000
 80035a4:	40021000 	.word	0x40021000
 80035a8:	40010000 	.word	0x40010000
 80035ac:	40010800 	.word	0x40010800
 80035b0:	40010c00 	.word	0x40010c00
 80035b4:	40011000 	.word	0x40011000
 80035b8:	40011400 	.word	0x40011400
 80035bc:	40010400 	.word	0x40010400

080035c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	807b      	strh	r3, [r7, #2]
 80035cc:	4613      	mov	r3, r2
 80035ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035d0:	787b      	ldrb	r3, [r7, #1]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035d6:	887a      	ldrh	r2, [r7, #2]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80035dc:	e003      	b.n	80035e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035de:	887b      	ldrh	r3, [r7, #2]
 80035e0:	041a      	lsls	r2, r3, #16
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	611a      	str	r2, [r3, #16]
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr

080035f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003602:	887a      	ldrh	r2, [r7, #2]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4013      	ands	r3, r2
 8003608:	041a      	lsls	r2, r3, #16
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	43d9      	mvns	r1, r3
 800360e:	887b      	ldrh	r3, [r7, #2]
 8003610:	400b      	ands	r3, r1
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	611a      	str	r2, [r3, #16]
}
 8003618:	bf00      	nop
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr
	...

08003624 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e26c      	b.n	8003b10 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 8087 	beq.w	8003752 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003644:	4b92      	ldr	r3, [pc, #584]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b04      	cmp	r3, #4
 800364e:	d00c      	beq.n	800366a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003650:	4b8f      	ldr	r3, [pc, #572]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 030c 	and.w	r3, r3, #12
 8003658:	2b08      	cmp	r3, #8
 800365a:	d112      	bne.n	8003682 <HAL_RCC_OscConfig+0x5e>
 800365c:	4b8c      	ldr	r3, [pc, #560]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003668:	d10b      	bne.n	8003682 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366a:	4b89      	ldr	r3, [pc, #548]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d06c      	beq.n	8003750 <HAL_RCC_OscConfig+0x12c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d168      	bne.n	8003750 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e246      	b.n	8003b10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368a:	d106      	bne.n	800369a <HAL_RCC_OscConfig+0x76>
 800368c:	4b80      	ldr	r3, [pc, #512]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a7f      	ldr	r2, [pc, #508]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 8003692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	e02e      	b.n	80036f8 <HAL_RCC_OscConfig+0xd4>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0x98>
 80036a2:	4b7b      	ldr	r3, [pc, #492]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a7a      	ldr	r2, [pc, #488]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b78      	ldr	r3, [pc, #480]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a77      	ldr	r2, [pc, #476]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e01d      	b.n	80036f8 <HAL_RCC_OscConfig+0xd4>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCC_OscConfig+0xbc>
 80036c6:	4b72      	ldr	r3, [pc, #456]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a71      	ldr	r2, [pc, #452]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	4b6f      	ldr	r3, [pc, #444]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a6e      	ldr	r2, [pc, #440]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e00b      	b.n	80036f8 <HAL_RCC_OscConfig+0xd4>
 80036e0:	4b6b      	ldr	r3, [pc, #428]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a6a      	ldr	r2, [pc, #424]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	4b68      	ldr	r3, [pc, #416]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a67      	ldr	r2, [pc, #412]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80036f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d013      	beq.n	8003728 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7ff fa5a 	bl	8002bb8 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003708:	f7ff fa56 	bl	8002bb8 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	; 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e1fa      	b.n	8003b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	4b5d      	ldr	r3, [pc, #372]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0xe4>
 8003726:	e014      	b.n	8003752 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7ff fa46 	bl	8002bb8 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003730:	f7ff fa42 	bl	8002bb8 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e1e6      	b.n	8003b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003742:	4b53      	ldr	r3, [pc, #332]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x10c>
 800374e:	e000      	b.n	8003752 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d063      	beq.n	8003826 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800375e:	4b4c      	ldr	r3, [pc, #304]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800376a:	4b49      	ldr	r3, [pc, #292]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b08      	cmp	r3, #8
 8003774:	d11c      	bne.n	80037b0 <HAL_RCC_OscConfig+0x18c>
 8003776:	4b46      	ldr	r3, [pc, #280]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d116      	bne.n	80037b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003782:	4b43      	ldr	r3, [pc, #268]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_RCC_OscConfig+0x176>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d001      	beq.n	800379a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e1ba      	b.n	8003b10 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379a:	4b3d      	ldr	r3, [pc, #244]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4939      	ldr	r1, [pc, #228]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ae:	e03a      	b.n	8003826 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d020      	beq.n	80037fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b8:	4b36      	ldr	r3, [pc, #216]	; (8003894 <HAL_RCC_OscConfig+0x270>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037be:	f7ff f9fb 	bl	8002bb8 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c6:	f7ff f9f7 	bl	8002bb8 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e19b      	b.n	8003b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d8:	4b2d      	ldr	r3, [pc, #180]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e4:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4927      	ldr	r1, [pc, #156]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]
 80037f8:	e015      	b.n	8003826 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037fa:	4b26      	ldr	r3, [pc, #152]	; (8003894 <HAL_RCC_OscConfig+0x270>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7ff f9da 	bl	8002bb8 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003808:	f7ff f9d6 	bl	8002bb8 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e17a      	b.n	8003b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381a:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d03a      	beq.n	80038a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d019      	beq.n	800386e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800383a:	4b17      	ldr	r3, [pc, #92]	; (8003898 <HAL_RCC_OscConfig+0x274>)
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003840:	f7ff f9ba 	bl	8002bb8 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003848:	f7ff f9b6 	bl	8002bb8 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e15a      	b.n	8003b10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385a:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <HAL_RCC_OscConfig+0x26c>)
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003866:	2001      	movs	r0, #1
 8003868:	f000 fb0a 	bl	8003e80 <RCC_Delay>
 800386c:	e01c      	b.n	80038a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <HAL_RCC_OscConfig+0x274>)
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003874:	f7ff f9a0 	bl	8002bb8 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800387a:	e00f      	b.n	800389c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800387c:	f7ff f99c 	bl	8002bb8 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d908      	bls.n	800389c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e140      	b.n	8003b10 <HAL_RCC_OscConfig+0x4ec>
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
 8003894:	42420000 	.word	0x42420000
 8003898:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800389c:	4b9e      	ldr	r3, [pc, #632]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e9      	bne.n	800387c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80a6 	beq.w	8003a02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b6:	2300      	movs	r3, #0
 80038b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ba:	4b97      	ldr	r3, [pc, #604]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10d      	bne.n	80038e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c6:	4b94      	ldr	r3, [pc, #592]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	4a93      	ldr	r2, [pc, #588]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 80038cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d0:	61d3      	str	r3, [r2, #28]
 80038d2:	4b91      	ldr	r3, [pc, #580]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038de:	2301      	movs	r3, #1
 80038e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e2:	4b8e      	ldr	r3, [pc, #568]	; (8003b1c <HAL_RCC_OscConfig+0x4f8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d118      	bne.n	8003920 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ee:	4b8b      	ldr	r3, [pc, #556]	; (8003b1c <HAL_RCC_OscConfig+0x4f8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a8a      	ldr	r2, [pc, #552]	; (8003b1c <HAL_RCC_OscConfig+0x4f8>)
 80038f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fa:	f7ff f95d 	bl	8002bb8 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003902:	f7ff f959 	bl	8002bb8 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b64      	cmp	r3, #100	; 0x64
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e0fd      	b.n	8003b10 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003914:	4b81      	ldr	r3, [pc, #516]	; (8003b1c <HAL_RCC_OscConfig+0x4f8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d106      	bne.n	8003936 <HAL_RCC_OscConfig+0x312>
 8003928:	4b7b      	ldr	r3, [pc, #492]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	4a7a      	ldr	r2, [pc, #488]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	6213      	str	r3, [r2, #32]
 8003934:	e02d      	b.n	8003992 <HAL_RCC_OscConfig+0x36e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10c      	bne.n	8003958 <HAL_RCC_OscConfig+0x334>
 800393e:	4b76      	ldr	r3, [pc, #472]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	4a75      	ldr	r2, [pc, #468]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	6213      	str	r3, [r2, #32]
 800394a:	4b73      	ldr	r3, [pc, #460]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	4a72      	ldr	r2, [pc, #456]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 8003950:	f023 0304 	bic.w	r3, r3, #4
 8003954:	6213      	str	r3, [r2, #32]
 8003956:	e01c      	b.n	8003992 <HAL_RCC_OscConfig+0x36e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b05      	cmp	r3, #5
 800395e:	d10c      	bne.n	800397a <HAL_RCC_OscConfig+0x356>
 8003960:	4b6d      	ldr	r3, [pc, #436]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	4a6c      	ldr	r2, [pc, #432]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 8003966:	f043 0304 	orr.w	r3, r3, #4
 800396a:	6213      	str	r3, [r2, #32]
 800396c:	4b6a      	ldr	r3, [pc, #424]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	4a69      	ldr	r2, [pc, #420]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	6213      	str	r3, [r2, #32]
 8003978:	e00b      	b.n	8003992 <HAL_RCC_OscConfig+0x36e>
 800397a:	4b67      	ldr	r3, [pc, #412]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	4a66      	ldr	r2, [pc, #408]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 8003980:	f023 0301 	bic.w	r3, r3, #1
 8003984:	6213      	str	r3, [r2, #32]
 8003986:	4b64      	ldr	r3, [pc, #400]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	4a63      	ldr	r2, [pc, #396]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 800398c:	f023 0304 	bic.w	r3, r3, #4
 8003990:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d015      	beq.n	80039c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399a:	f7ff f90d 	bl	8002bb8 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a0:	e00a      	b.n	80039b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a2:	f7ff f909 	bl	8002bb8 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e0ab      	b.n	8003b10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b8:	4b57      	ldr	r3, [pc, #348]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0ee      	beq.n	80039a2 <HAL_RCC_OscConfig+0x37e>
 80039c4:	e014      	b.n	80039f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c6:	f7ff f8f7 	bl	8002bb8 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039cc:	e00a      	b.n	80039e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ce:	f7ff f8f3 	bl	8002bb8 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039dc:	4293      	cmp	r3, r2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e095      	b.n	8003b10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e4:	4b4c      	ldr	r3, [pc, #304]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1ee      	bne.n	80039ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039f0:	7dfb      	ldrb	r3, [r7, #23]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d105      	bne.n	8003a02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f6:	4b48      	ldr	r3, [pc, #288]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	4a47      	ldr	r2, [pc, #284]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 80039fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8081 	beq.w	8003b0e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a0c:	4b42      	ldr	r3, [pc, #264]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 030c 	and.w	r3, r3, #12
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d061      	beq.n	8003adc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d146      	bne.n	8003aae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a20:	4b3f      	ldr	r3, [pc, #252]	; (8003b20 <HAL_RCC_OscConfig+0x4fc>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a26:	f7ff f8c7 	bl	8002bb8 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2e:	f7ff f8c3 	bl	8002bb8 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e067      	b.n	8003b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a40:	4b35      	ldr	r3, [pc, #212]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f0      	bne.n	8003a2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a54:	d108      	bne.n	8003a68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a56:	4b30      	ldr	r3, [pc, #192]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	492d      	ldr	r1, [pc, #180]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a68:	4b2b      	ldr	r3, [pc, #172]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a19      	ldr	r1, [r3, #32]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	4927      	ldr	r1, [pc, #156]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a80:	4b27      	ldr	r3, [pc, #156]	; (8003b20 <HAL_RCC_OscConfig+0x4fc>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a86:	f7ff f897 	bl	8002bb8 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8e:	f7ff f893 	bl	8002bb8 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e037      	b.n	8003b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aa0:	4b1d      	ldr	r3, [pc, #116]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x46a>
 8003aac:	e02f      	b.n	8003b0e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aae:	4b1c      	ldr	r3, [pc, #112]	; (8003b20 <HAL_RCC_OscConfig+0x4fc>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7ff f880 	bl	8002bb8 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abc:	f7ff f87c 	bl	8002bb8 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e020      	b.n	8003b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ace:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0x498>
 8003ada:	e018      	b.n	8003b0e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e013      	b.n	8003b10 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <HAL_RCC_OscConfig+0x4f4>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d106      	bne.n	8003b0a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d001      	beq.n	8003b0e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40007000 	.word	0x40007000
 8003b20:	42420060 	.word	0x42420060

08003b24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0d0      	b.n	8003cda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b38:	4b6a      	ldr	r3, [pc, #424]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d910      	bls.n	8003b68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b46:	4b67      	ldr	r3, [pc, #412]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 0207 	bic.w	r2, r3, #7
 8003b4e:	4965      	ldr	r1, [pc, #404]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	4b63      	ldr	r3, [pc, #396]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0b8      	b.n	8003cda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d020      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b80:	4b59      	ldr	r3, [pc, #356]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	4a58      	ldr	r2, [pc, #352]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b98:	4b53      	ldr	r3, [pc, #332]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4a52      	ldr	r2, [pc, #328]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ba2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba4:	4b50      	ldr	r3, [pc, #320]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	494d      	ldr	r1, [pc, #308]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d040      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d107      	bne.n	8003bda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bca:	4b47      	ldr	r3, [pc, #284]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d115      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e07f      	b.n	8003cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d107      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be2:	4b41      	ldr	r3, [pc, #260]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e073      	b.n	8003cda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf2:	4b3d      	ldr	r3, [pc, #244]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e06b      	b.n	8003cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c02:	4b39      	ldr	r3, [pc, #228]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f023 0203 	bic.w	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	4936      	ldr	r1, [pc, #216]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c14:	f7fe ffd0 	bl	8002bb8 <HAL_GetTick>
 8003c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1a:	e00a      	b.n	8003c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c1c:	f7fe ffcc 	bl	8002bb8 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e053      	b.n	8003cda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	4b2d      	ldr	r3, [pc, #180]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 020c 	and.w	r2, r3, #12
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d1eb      	bne.n	8003c1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c44:	4b27      	ldr	r3, [pc, #156]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d210      	bcs.n	8003c74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c52:	4b24      	ldr	r3, [pc, #144]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 0207 	bic.w	r2, r3, #7
 8003c5a:	4922      	ldr	r1, [pc, #136]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c62:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e032      	b.n	8003cda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c80:	4b19      	ldr	r3, [pc, #100]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	4916      	ldr	r1, [pc, #88]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c9e:	4b12      	ldr	r3, [pc, #72]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	490e      	ldr	r1, [pc, #56]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cb2:	f000 f821 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8003cb6:	4601      	mov	r1, r0
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <HAL_RCC_ClockConfig+0x1c8>)
 8003cc4:	5cd3      	ldrb	r3, [r2, r3]
 8003cc6:	fa21 f303 	lsr.w	r3, r1, r3
 8003cca:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <HAL_RCC_ClockConfig+0x1cc>)
 8003ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cce:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <HAL_RCC_ClockConfig+0x1d0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe fbca 	bl	800246c <HAL_InitTick>

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40022000 	.word	0x40022000
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	08008254 	.word	0x08008254
 8003cf0:	20000010 	.word	0x20000010
 8003cf4:	20000014 	.word	0x20000014

08003cf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf8:	b490      	push	{r4, r7}
 8003cfa:	b08a      	sub	sp, #40	; 0x28
 8003cfc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cfe:	4b2a      	ldr	r3, [pc, #168]	; (8003da8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d00:	1d3c      	adds	r4, r7, #4
 8003d02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d08:	4b28      	ldr	r3, [pc, #160]	; (8003dac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	2300      	movs	r3, #0
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d22:	4b23      	ldr	r3, [pc, #140]	; (8003db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d002      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0x40>
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d003      	beq.n	8003d3e <HAL_RCC_GetSysClockFreq+0x46>
 8003d36:	e02d      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d38:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d3a:	623b      	str	r3, [r7, #32]
      break;
 8003d3c:	e02d      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	0c9b      	lsrs	r3, r3, #18
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d013      	beq.n	8003d84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d5c:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	0c5b      	lsrs	r3, r3, #17
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	4a0f      	ldr	r2, [pc, #60]	; (8003db4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d76:	fb02 f203 	mul.w	r2, r2, r3
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
 8003d82:	e004      	b.n	8003d8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	4a0c      	ldr	r2, [pc, #48]	; (8003db8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d88:	fb02 f303 	mul.w	r3, r2, r3
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	623b      	str	r3, [r7, #32]
      break;
 8003d92:	e002      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d94:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d96:	623b      	str	r3, [r7, #32]
      break;
 8003d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3728      	adds	r7, #40	; 0x28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc90      	pop	{r4, r7}
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	08008128 	.word	0x08008128
 8003dac:	08008138 	.word	0x08008138
 8003db0:	40021000 	.word	0x40021000
 8003db4:	007a1200 	.word	0x007a1200
 8003db8:	003d0900 	.word	0x003d0900

08003dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc0:	4b02      	ldr	r3, [pc, #8]	; (8003dcc <HAL_RCC_GetHCLKFreq+0x10>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr
 8003dcc:	20000010 	.word	0x20000010

08003dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dd4:	f7ff fff2 	bl	8003dbc <HAL_RCC_GetHCLKFreq>
 8003dd8:	4601      	mov	r1, r0
 8003dda:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	4a03      	ldr	r2, [pc, #12]	; (8003df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de6:	5cd3      	ldrb	r3, [r2, r3]
 8003de8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40021000 	.word	0x40021000
 8003df4:	08008264 	.word	0x08008264

08003df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dfc:	f7ff ffde 	bl	8003dbc <HAL_RCC_GetHCLKFreq>
 8003e00:	4601      	mov	r1, r0
 8003e02:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	0adb      	lsrs	r3, r3, #11
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	4a03      	ldr	r2, [pc, #12]	; (8003e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e0e:	5cd3      	ldrb	r3, [r2, r3]
 8003e10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	08008264 	.word	0x08008264

08003e20 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	220f      	movs	r2, #15
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <HAL_RCC_GetClockConfig+0x58>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 0203 	and.w	r2, r3, #3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e3c:	4b0e      	ldr	r3, [pc, #56]	; (8003e78 <HAL_RCC_GetClockConfig+0x58>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e48:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <HAL_RCC_GetClockConfig+0x58>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e54:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <HAL_RCC_GetClockConfig+0x58>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	08db      	lsrs	r3, r3, #3
 8003e5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e62:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <HAL_RCC_GetClockConfig+0x5c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0207 	and.w	r2, r3, #7
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40022000 	.word	0x40022000

08003e80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e88:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <RCC_Delay+0x34>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a0a      	ldr	r2, [pc, #40]	; (8003eb8 <RCC_Delay+0x38>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	0a5b      	lsrs	r3, r3, #9
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	fb02 f303 	mul.w	r3, r2, r3
 8003e9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e9c:	bf00      	nop
  }
  while (Delay --);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1e5a      	subs	r2, r3, #1
 8003ea2:	60fa      	str	r2, [r7, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f9      	bne.n	8003e9c <RCC_Delay+0x1c>
}
 8003ea8:	bf00      	nop
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000010 	.word	0x20000010
 8003eb8:	10624dd3 	.word	0x10624dd3

08003ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e041      	b.n	8003f52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f839 	bl	8003f5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f000 f9b4 	bl	8004268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d001      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e03a      	b.n	8003ffa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a18      	ldr	r2, [pc, #96]	; (8004004 <HAL_TIM_Base_Start_IT+0x98>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00e      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x58>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fae:	d009      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x58>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a14      	ldr	r2, [pc, #80]	; (8004008 <HAL_TIM_Base_Start_IT+0x9c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d004      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x58>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a13      	ldr	r2, [pc, #76]	; (800400c <HAL_TIM_Base_Start_IT+0xa0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d111      	bne.n	8003fe8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b06      	cmp	r3, #6
 8003fd4:	d010      	beq.n	8003ff8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0201 	orr.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe6:	e007      	b.n	8003ff8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr
 8004004:	40012c00 	.word	0x40012c00
 8004008:	40000400 	.word	0x40000400
 800400c:	40000800 	.word	0x40000800

08004010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b02      	cmp	r3, #2
 8004024:	d122      	bne.n	800406c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b02      	cmp	r3, #2
 8004032:	d11b      	bne.n	800406c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0202 	mvn.w	r2, #2
 800403c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f8ed 	bl	8004232 <HAL_TIM_IC_CaptureCallback>
 8004058:	e005      	b.n	8004066 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f8e0 	bl	8004220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f8ef 	bl	8004244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b04      	cmp	r3, #4
 8004078:	d122      	bne.n	80040c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b04      	cmp	r3, #4
 8004086:	d11b      	bne.n	80040c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f06f 0204 	mvn.w	r2, #4
 8004090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2202      	movs	r2, #2
 8004096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f8c3 	bl	8004232 <HAL_TIM_IC_CaptureCallback>
 80040ac:	e005      	b.n	80040ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f8b6 	bl	8004220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f8c5 	bl	8004244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d122      	bne.n	8004114 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d11b      	bne.n	8004114 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0208 	mvn.w	r2, #8
 80040e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2204      	movs	r2, #4
 80040ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f899 	bl	8004232 <HAL_TIM_IC_CaptureCallback>
 8004100:	e005      	b.n	800410e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f88c 	bl	8004220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f89b 	bl	8004244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0310 	and.w	r3, r3, #16
 800411e:	2b10      	cmp	r3, #16
 8004120:	d122      	bne.n	8004168 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b10      	cmp	r3, #16
 800412e:	d11b      	bne.n	8004168 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0210 	mvn.w	r2, #16
 8004138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2208      	movs	r2, #8
 800413e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f86f 	bl	8004232 <HAL_TIM_IC_CaptureCallback>
 8004154:	e005      	b.n	8004162 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f862 	bl	8004220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f871 	bl	8004244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b01      	cmp	r3, #1
 8004174:	d10e      	bne.n	8004194 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b01      	cmp	r3, #1
 8004182:	d107      	bne.n	8004194 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0201 	mvn.w	r2, #1
 800418c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fc f93c 	bl	800040c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419e:	2b80      	cmp	r3, #128	; 0x80
 80041a0:	d10e      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ac:	2b80      	cmp	r3, #128	; 0x80
 80041ae:	d107      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f8bf 	bl	800433e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d10e      	bne.n	80041ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	d107      	bne.n	80041ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f835 	bl	8004256 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	d10e      	bne.n	8004218 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b20      	cmp	r3, #32
 8004206:	d107      	bne.n	8004218 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0220 	mvn.w	r2, #32
 8004210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f88a 	bl	800432c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004218:	bf00      	nop
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr

08004232 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr

08004256 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr

08004268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a29      	ldr	r2, [pc, #164]	; (8004320 <TIM_Base_SetConfig+0xb8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00b      	beq.n	8004298 <TIM_Base_SetConfig+0x30>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004286:	d007      	beq.n	8004298 <TIM_Base_SetConfig+0x30>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a26      	ldr	r2, [pc, #152]	; (8004324 <TIM_Base_SetConfig+0xbc>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d003      	beq.n	8004298 <TIM_Base_SetConfig+0x30>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a25      	ldr	r2, [pc, #148]	; (8004328 <TIM_Base_SetConfig+0xc0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d108      	bne.n	80042aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a1c      	ldr	r2, [pc, #112]	; (8004320 <TIM_Base_SetConfig+0xb8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00b      	beq.n	80042ca <TIM_Base_SetConfig+0x62>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b8:	d007      	beq.n	80042ca <TIM_Base_SetConfig+0x62>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a19      	ldr	r2, [pc, #100]	; (8004324 <TIM_Base_SetConfig+0xbc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d003      	beq.n	80042ca <TIM_Base_SetConfig+0x62>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a18      	ldr	r2, [pc, #96]	; (8004328 <TIM_Base_SetConfig+0xc0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d108      	bne.n	80042dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a07      	ldr	r2, [pc, #28]	; (8004320 <TIM_Base_SetConfig+0xb8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d103      	bne.n	8004310 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	615a      	str	r2, [r3, #20]
}
 8004316:	bf00      	nop
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr
 8004320:	40012c00 	.word	0x40012c00
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800

0800432c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr

0800433e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e03f      	b.n	80043e2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fd ff40 	bl	80021fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2224      	movs	r2, #36	; 0x24
 8004380:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004392:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fe13 	bl	8004fc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e047      	b.n	800448c <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d106      	bne.n	8004416 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7fd fef3 	bl	80021fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2224      	movs	r2, #36	; 0x24
 800441a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800442c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fdc6 	bl	8004fc0 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004442:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004452:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0208 	orr.w	r2, r2, #8
 8004462:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004472:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08a      	sub	sp, #40	; 0x28
 8004498:	af02      	add	r7, sp, #8
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	4613      	mov	r3, r2
 80044a2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d17c      	bne.n	80045ae <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_UART_Transmit+0x2c>
 80044ba:	88fb      	ldrh	r3, [r7, #6]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e075      	b.n	80045b0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d101      	bne.n	80044d2 <HAL_UART_Transmit+0x3e>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e06e      	b.n	80045b0 <HAL_UART_Transmit+0x11c>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2221      	movs	r2, #33	; 0x21
 80044e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80044e8:	f7fe fb66 	bl	8002bb8 <HAL_GetTick>
 80044ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	88fa      	ldrh	r2, [r7, #6]
 80044f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	88fa      	ldrh	r2, [r7, #6]
 80044f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004502:	d108      	bne.n	8004516 <HAL_UART_Transmit+0x82>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d104      	bne.n	8004516 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800450c:	2300      	movs	r3, #0
 800450e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	61bb      	str	r3, [r7, #24]
 8004514:	e003      	b.n	800451e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800451a:	2300      	movs	r3, #0
 800451c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004526:	e02a      	b.n	800457e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2200      	movs	r2, #0
 8004530:	2180      	movs	r1, #128	; 0x80
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 fbcc 	bl	8004cd0 <UART_WaitOnFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e036      	b.n	80045b0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10b      	bne.n	8004560 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004556:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	3302      	adds	r3, #2
 800455c:	61bb      	str	r3, [r7, #24]
 800455e:	e007      	b.n	8004570 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	781a      	ldrb	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	3301      	adds	r3, #1
 800456e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1cf      	bne.n	8004528 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2200      	movs	r2, #0
 8004590:	2140      	movs	r1, #64	; 0x40
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 fb9c 	bl	8004cd0 <UART_WaitOnFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e006      	b.n	80045b0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	e000      	b.n	80045b0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045ae:	2302      	movs	r3, #2
  }
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3720      	adds	r7, #32
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d153      	bne.n	800467a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <HAL_UART_Transmit_DMA+0x26>
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e04c      	b.n	800467c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_UART_Transmit_DMA+0x38>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e045      	b.n	800467c <HAL_UART_Transmit_DMA+0xc4>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	88fa      	ldrh	r2, [r7, #6]
 8004602:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	88fa      	ldrh	r2, [r7, #6]
 8004608:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2221      	movs	r2, #33	; 0x21
 8004614:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	4a19      	ldr	r2, [pc, #100]	; (8004684 <HAL_UART_Transmit_DMA+0xcc>)
 800461e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	4a18      	ldr	r2, [pc, #96]	; (8004688 <HAL_UART_Transmit_DMA+0xd0>)
 8004626:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	4a17      	ldr	r2, [pc, #92]	; (800468c <HAL_UART_Transmit_DMA+0xd4>)
 800462e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	2200      	movs	r2, #0
 8004636:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8004638:	f107 0308 	add.w	r3, r7, #8
 800463c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	6819      	ldr	r1, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3304      	adds	r3, #4
 800464c:	461a      	mov	r2, r3
 800464e:	88fb      	ldrh	r3, [r7, #6]
 8004650:	f7fe fc18 	bl	8002e84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800465c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004674:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	e000      	b.n	800467c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800467a:	2302      	movs	r3, #2
  }
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	08004b4b 	.word	0x08004b4b
 8004688:	08004b9d 	.word	0x08004b9d
 800468c:	08004c3d 	.word	0x08004c3d

08004690 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	4613      	mov	r3, r2
 800469c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	d166      	bne.n	8004778 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <HAL_UART_Receive_DMA+0x26>
 80046b0:	88fb      	ldrh	r3, [r7, #6]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e05f      	b.n	800477a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_UART_Receive_DMA+0x38>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e058      	b.n	800477a <HAL_UART_Receive_DMA+0xea>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	88fa      	ldrh	r2, [r7, #6]
 80046da:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2222      	movs	r2, #34	; 0x22
 80046e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ee:	4a25      	ldr	r2, [pc, #148]	; (8004784 <HAL_UART_Receive_DMA+0xf4>)
 80046f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f6:	4a24      	ldr	r2, [pc, #144]	; (8004788 <HAL_UART_Receive_DMA+0xf8>)
 80046f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fe:	4a23      	ldr	r2, [pc, #140]	; (800478c <HAL_UART_Receive_DMA+0xfc>)
 8004700:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004706:	2200      	movs	r2, #0
 8004708:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800470a:	f107 0308 	add.w	r3, r7, #8
 800470e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3304      	adds	r3, #4
 800471a:	4619      	mov	r1, r3
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	88fb      	ldrh	r3, [r7, #6]
 8004722:	f7fe fbaf 	bl	8002e84 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004726:	2300      	movs	r3, #0
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004752:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695a      	ldr	r2, [r3, #20]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695a      	ldr	r2, [r3, #20]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004772:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	e000      	b.n	800477a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004778:	2302      	movs	r3, #2
  }
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	08004bb9 	.word	0x08004bb9
 8004788:	08004c21 	.word	0x08004c21
 800478c:	08004c3d 	.word	0x08004c3d

08004790 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bf14      	ite	ne
 80047aa:	2301      	movne	r3, #1
 80047ac:	2300      	moveq	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b21      	cmp	r3, #33	; 0x21
 80047bc:	d116      	bne.n	80047ec <HAL_UART_DMAStop+0x5c>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d013      	beq.n	80047ec <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695a      	ldr	r2, [r3, #20]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047d2:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d004      	beq.n	80047e6 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fe fbae 	bl	8002f42 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 fabc 	bl	8004d64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	bf14      	ite	ne
 80047fa:	2301      	movne	r3, #1
 80047fc:	2300      	moveq	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b22      	cmp	r3, #34	; 0x22
 800480c:	d116      	bne.n	800483c <HAL_UART_DMAStop+0xac>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d013      	beq.n	800483c <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695a      	ldr	r2, [r3, #20]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004822:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004828:	2b00      	cmp	r3, #0
 800482a:	d004      	beq.n	8004836 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004830:	4618      	mov	r0, r3
 8004832:	f7fe fb86 	bl	8002f42 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 faa9 	bl	8004d8e <UART_EndRxTransfer>
  }

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004868:	2300      	movs	r3, #0
 800486a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10d      	bne.n	800489a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <HAL_UART_IRQHandler+0x52>
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	f003 0320 	and.w	r3, r3, #32
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fb13 	bl	8004ebe <UART_Receive_IT>
      return;
 8004898:	e0d1      	b.n	8004a3e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80b0 	beq.w	8004a02 <HAL_UART_IRQHandler+0x1ba>
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d105      	bne.n	80048b8 <HAL_UART_IRQHandler+0x70>
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 80a5 	beq.w	8004a02 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <HAL_UART_IRQHandler+0x90>
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d0:	f043 0201 	orr.w	r2, r3, #1
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_UART_IRQHandler+0xb0>
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f0:	f043 0202 	orr.w	r2, r3, #2
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <HAL_UART_IRQHandler+0xd0>
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004910:	f043 0204 	orr.w	r2, r3, #4
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00f      	beq.n	8004942 <HAL_UART_IRQHandler+0xfa>
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	f003 0320 	and.w	r3, r3, #32
 8004928:	2b00      	cmp	r3, #0
 800492a:	d104      	bne.n	8004936 <HAL_UART_IRQHandler+0xee>
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d005      	beq.n	8004942 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493a:	f043 0208 	orr.w	r2, r3, #8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d078      	beq.n	8004a3c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f003 0320 	and.w	r3, r3, #32
 8004950:	2b00      	cmp	r3, #0
 8004952:	d007      	beq.n	8004964 <HAL_UART_IRQHandler+0x11c>
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 faad 	bl	8004ebe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	bf14      	ite	ne
 8004972:	2301      	movne	r3, #1
 8004974:	2300      	moveq	r3, #0
 8004976:	b2db      	uxtb	r3, r3
 8004978:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d102      	bne.n	800498c <HAL_UART_IRQHandler+0x144>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d031      	beq.n	80049f0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f9fe 	bl	8004d8e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499c:	2b00      	cmp	r3, #0
 800499e:	d023      	beq.n	80049e8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695a      	ldr	r2, [r3, #20]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ae:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d013      	beq.n	80049e0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049bc:	4a21      	ldr	r2, [pc, #132]	; (8004a44 <HAL_UART_IRQHandler+0x1fc>)
 80049be:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fe faf7 	bl	8002fb8 <HAL_DMA_Abort_IT>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d016      	beq.n	80049fe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049da:	4610      	mov	r0, r2
 80049dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049de:	e00e      	b.n	80049fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f843 	bl	8004a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e6:	e00a      	b.n	80049fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f83f 	bl	8004a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ee:	e006      	b.n	80049fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f83b 	bl	8004a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80049fc:	e01e      	b.n	8004a3c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049fe:	bf00      	nop
    return;
 8004a00:	e01c      	b.n	8004a3c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_UART_IRQHandler+0x1d6>
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f9ea 	bl	8004df0 <UART_Transmit_IT>
    return;
 8004a1c:	e00f      	b.n	8004a3e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <HAL_UART_IRQHandler+0x1f6>
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d005      	beq.n	8004a3e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fa2b 	bl	8004e8e <UART_EndTransmit_IT>
    return;
 8004a38:	bf00      	nop
 8004a3a:	e000      	b.n	8004a3e <HAL_UART_IRQHandler+0x1f6>
    return;
 8004a3c:	bf00      	nop
  }
}
 8004a3e:	3720      	adds	r7, #32
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	08004dc9 	.word	0x08004dc9

08004a48 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr

08004a5a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr

08004a6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr

08004a7e <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b085      	sub	sp, #20
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e020      	b.n	8004ada <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2224      	movs	r2, #36	; 0x24
 8004aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 030c 	bic.w	r3, r3, #12
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f043 0308 	orr.w	r3, r3, #8
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_HalfDuplex_EnableReceiver+0x1a>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e020      	b.n	8004b40 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2224      	movs	r2, #36	; 0x24
 8004b0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f023 030c 	bic.w	r3, r3, #12
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f043 0304 	orr.w	r3, r3, #4
 8004b24:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr

08004b4a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d113      	bne.n	8004b8e <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695a      	ldr	r2, [r3, #20]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b7a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b8a:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b8c:	e002      	b.n	8004b94 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7fc fc7c 	bl	800148c <HAL_UART_TxCpltCallback>
}
 8004b94:	bf00      	nop
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f7ff ff4c 	bl	8004a48 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bb0:	bf00      	nop
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d11e      	bne.n	8004c12 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68da      	ldr	r2, [r3, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004be8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695a      	ldr	r2, [r3, #20]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0201 	bic.w	r2, r2, #1
 8004bf8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695a      	ldr	r2, [r3, #20]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c08:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f7fc fc52 	bl	80014bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f7ff ff13 	bl	8004a5a <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c34:	bf00      	nop
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf14      	ite	ne
 8004c5c:	2301      	movne	r3, #1
 8004c5e:	2300      	moveq	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b21      	cmp	r3, #33	; 0x21
 8004c6e:	d108      	bne.n	8004c82 <UART_DMAError+0x46>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004c7c:	68b8      	ldr	r0, [r7, #8]
 8004c7e:	f000 f871 	bl	8004d64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	bf14      	ite	ne
 8004c90:	2301      	movne	r3, #1
 8004c92:	2300      	moveq	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b22      	cmp	r3, #34	; 0x22
 8004ca2:	d108      	bne.n	8004cb6 <UART_DMAError+0x7a>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2200      	movs	r2, #0
 8004cae:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004cb0:	68b8      	ldr	r0, [r7, #8]
 8004cb2:	f000 f86c 	bl	8004d8e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cba:	f043 0210 	orr.w	r2, r3, #16
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cc2:	68b8      	ldr	r0, [r7, #8]
 8004cc4:	f7ff fed2 	bl	8004a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cc8:	bf00      	nop
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce0:	e02c      	b.n	8004d3c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce8:	d028      	beq.n	8004d3c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cf0:	f7fd ff62 	bl	8002bb8 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d21d      	bcs.n	8004d3c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d0e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695a      	ldr	r2, [r3, #20]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0201 	bic.w	r2, r2, #1
 8004d1e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e00f      	b.n	8004d5c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	4013      	ands	r3, r2
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2301      	moveq	r3, #1
 8004d4e:	2300      	movne	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	79fb      	ldrb	r3, [r7, #7]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d0c3      	beq.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004d7a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bc80      	pop	{r7}
 8004d8c:	4770      	bx	lr

08004d8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004da4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695a      	ldr	r2, [r3, #20]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0201 	bic.w	r2, r2, #1
 8004db4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f7ff fe42 	bl	8004a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004de8:	bf00      	nop
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b21      	cmp	r3, #33	; 0x21
 8004e02:	d13e      	bne.n	8004e82 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0c:	d114      	bne.n	8004e38 <UART_Transmit_IT+0x48>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d110      	bne.n	8004e38 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e2a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	1c9a      	adds	r2, r3, #2
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	621a      	str	r2, [r3, #32]
 8004e36:	e008      	b.n	8004e4a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	1c59      	adds	r1, r3, #1
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6211      	str	r1, [r2, #32]
 8004e42:	781a      	ldrb	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	4619      	mov	r1, r3
 8004e58:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10f      	bne.n	8004e7e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e000      	b.n	8004e84 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e82:	2302      	movs	r3, #2
  }
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr

08004e8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fc faec 	bl	800148c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b084      	sub	sp, #16
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b22      	cmp	r3, #34	; 0x22
 8004ed0:	d170      	bne.n	8004fb4 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eda:	d117      	bne.n	8004f0c <UART_Receive_IT+0x4e>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d113      	bne.n	8004f0c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f04:	1c9a      	adds	r2, r3, #2
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	629a      	str	r2, [r3, #40]	; 0x28
 8004f0a:	e026      	b.n	8004f5a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1e:	d007      	beq.n	8004f30 <UART_Receive_IT+0x72>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <UART_Receive_IT+0x80>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d106      	bne.n	8004f3e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	701a      	strb	r2, [r3, #0]
 8004f3c:	e008      	b.n	8004f50 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	4619      	mov	r1, r3
 8004f68:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d120      	bne.n	8004fb0 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0220 	bic.w	r2, r2, #32
 8004f7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695a      	ldr	r2, [r3, #20]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0201 	bic.w	r2, r2, #1
 8004f9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7fc fa88 	bl	80014bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	e002      	b.n	8004fb6 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	e000      	b.n	8004fb6 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004fb4:	2302      	movs	r3, #2
  }
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ffa:	f023 030c 	bic.w	r3, r3, #12
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	430b      	orrs	r3, r1
 8005006:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a2c      	ldr	r2, [pc, #176]	; (80050d4 <UART_SetConfig+0x114>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d103      	bne.n	8005030 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005028:	f7fe fee6 	bl	8003df8 <HAL_RCC_GetPCLK2Freq>
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	e002      	b.n	8005036 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005030:	f7fe fece 	bl	8003dd0 <HAL_RCC_GetPCLK1Freq>
 8005034:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4613      	mov	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	009a      	lsls	r2, r3, #2
 8005040:	441a      	add	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	4a22      	ldr	r2, [pc, #136]	; (80050d8 <UART_SetConfig+0x118>)
 800504e:	fba2 2303 	umull	r2, r3, r2, r3
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	0119      	lsls	r1, r3, #4
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	009a      	lsls	r2, r3, #2
 8005060:	441a      	add	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	fbb2 f2f3 	udiv	r2, r2, r3
 800506c:	4b1a      	ldr	r3, [pc, #104]	; (80050d8 <UART_SetConfig+0x118>)
 800506e:	fba3 0302 	umull	r0, r3, r3, r2
 8005072:	095b      	lsrs	r3, r3, #5
 8005074:	2064      	movs	r0, #100	; 0x64
 8005076:	fb00 f303 	mul.w	r3, r0, r3
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	3332      	adds	r3, #50	; 0x32
 8005080:	4a15      	ldr	r2, [pc, #84]	; (80050d8 <UART_SetConfig+0x118>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800508c:	4419      	add	r1, r3
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009a      	lsls	r2, r3, #2
 8005098:	441a      	add	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050a4:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <UART_SetConfig+0x118>)
 80050a6:	fba3 0302 	umull	r0, r3, r3, r2
 80050aa:	095b      	lsrs	r3, r3, #5
 80050ac:	2064      	movs	r0, #100	; 0x64
 80050ae:	fb00 f303 	mul.w	r3, r0, r3
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	3332      	adds	r3, #50	; 0x32
 80050b8:	4a07      	ldr	r2, [pc, #28]	; (80050d8 <UART_SetConfig+0x118>)
 80050ba:	fba2 2303 	umull	r2, r3, r2, r3
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	f003 020f 	and.w	r2, r3, #15
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	440a      	add	r2, r1
 80050ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80050cc:	bf00      	nop
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40013800 	.word	0x40013800
 80050d8:	51eb851f 	.word	0x51eb851f

080050dc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e2:	f3ef 8305 	mrs	r3, IPSR
 80050e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80050e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10f      	bne.n	800510e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ee:	f3ef 8310 	mrs	r3, PRIMASK
 80050f2:	607b      	str	r3, [r7, #4]
  return(result);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d109      	bne.n	800510e <osKernelInitialize+0x32>
 80050fa:	4b10      	ldr	r3, [pc, #64]	; (800513c <osKernelInitialize+0x60>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d109      	bne.n	8005116 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005102:	f3ef 8311 	mrs	r3, BASEPRI
 8005106:	603b      	str	r3, [r7, #0]
  return(result);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800510e:	f06f 0305 	mvn.w	r3, #5
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	e00c      	b.n	8005130 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005116:	4b09      	ldr	r3, [pc, #36]	; (800513c <osKernelInitialize+0x60>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d105      	bne.n	800512a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800511e:	4b07      	ldr	r3, [pc, #28]	; (800513c <osKernelInitialize+0x60>)
 8005120:	2201      	movs	r2, #1
 8005122:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	e002      	b.n	8005130 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800512a:	f04f 33ff 	mov.w	r3, #4294967295
 800512e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005130:	68fb      	ldr	r3, [r7, #12]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	bc80      	pop	{r7}
 800513a:	4770      	bx	lr
 800513c:	20000ac4 	.word	0x20000ac4

08005140 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005146:	f3ef 8305 	mrs	r3, IPSR
 800514a:	60bb      	str	r3, [r7, #8]
  return(result);
 800514c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10f      	bne.n	8005172 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005152:	f3ef 8310 	mrs	r3, PRIMASK
 8005156:	607b      	str	r3, [r7, #4]
  return(result);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d109      	bne.n	8005172 <osKernelStart+0x32>
 800515e:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <osKernelStart+0x64>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d109      	bne.n	800517a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005166:	f3ef 8311 	mrs	r3, BASEPRI
 800516a:	603b      	str	r3, [r7, #0]
  return(result);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005172:	f06f 0305 	mvn.w	r3, #5
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	e00e      	b.n	8005198 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800517a:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <osKernelStart+0x64>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d107      	bne.n	8005192 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005182:	4b08      	ldr	r3, [pc, #32]	; (80051a4 <osKernelStart+0x64>)
 8005184:	2202      	movs	r2, #2
 8005186:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005188:	f001 f864 	bl	8006254 <vTaskStartScheduler>
      stat = osOK;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	e002      	b.n	8005198 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005192:	f04f 33ff 	mov.w	r3, #4294967295
 8005196:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005198:	68fb      	ldr	r3, [r7, #12]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20000ac4 	.word	0x20000ac4

080051a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b092      	sub	sp, #72	; 0x48
 80051ac:	af04      	add	r7, sp, #16
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051b8:	f3ef 8305 	mrs	r3, IPSR
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f040 8094 	bne.w	80052ee <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c6:	f3ef 8310 	mrs	r3, PRIMASK
 80051ca:	623b      	str	r3, [r7, #32]
  return(result);
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f040 808d 	bne.w	80052ee <osThreadNew+0x146>
 80051d4:	4b48      	ldr	r3, [pc, #288]	; (80052f8 <osThreadNew+0x150>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d106      	bne.n	80051ea <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051dc:	f3ef 8311 	mrs	r3, BASEPRI
 80051e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f040 8082 	bne.w	80052ee <osThreadNew+0x146>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d07e      	beq.n	80052ee <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80051f0:	2380      	movs	r3, #128	; 0x80
 80051f2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80051f4:	2318      	movs	r3, #24
 80051f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80051f8:	2300      	movs	r3, #0
 80051fa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80051fc:	f107 031b 	add.w	r3, r7, #27
 8005200:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005202:	f04f 33ff 	mov.w	r3, #4294967295
 8005206:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d045      	beq.n	800529a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <osThreadNew+0x74>
        name = attr->name;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800522a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522c:	2b00      	cmp	r3, #0
 800522e:	d008      	beq.n	8005242 <osThreadNew+0x9a>
 8005230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005232:	2b38      	cmp	r3, #56	; 0x38
 8005234:	d805      	bhi.n	8005242 <osThreadNew+0x9a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <osThreadNew+0x9e>
        return (NULL);
 8005242:	2300      	movs	r3, #0
 8005244:	e054      	b.n	80052f0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	089b      	lsrs	r3, r3, #2
 8005254:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00e      	beq.n	800527c <osThreadNew+0xd4>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	2b5b      	cmp	r3, #91	; 0x5b
 8005264:	d90a      	bls.n	800527c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800526a:	2b00      	cmp	r3, #0
 800526c:	d006      	beq.n	800527c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <osThreadNew+0xd4>
        mem = 1;
 8005276:	2301      	movs	r3, #1
 8005278:	62bb      	str	r3, [r7, #40]	; 0x28
 800527a:	e010      	b.n	800529e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10c      	bne.n	800529e <osThreadNew+0xf6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d108      	bne.n	800529e <osThreadNew+0xf6>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d104      	bne.n	800529e <osThreadNew+0xf6>
          mem = 0;
 8005294:	2300      	movs	r3, #0
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
 8005298:	e001      	b.n	800529e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800529a:	2300      	movs	r3, #0
 800529c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d110      	bne.n	80052c6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052ac:	9202      	str	r2, [sp, #8]
 80052ae:	9301      	str	r3, [sp, #4]
 80052b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 fe02 	bl	8005ec4 <xTaskCreateStatic>
 80052c0:	4603      	mov	r3, r0
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	e013      	b.n	80052ee <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d110      	bne.n	80052ee <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	f107 0314 	add.w	r3, r7, #20
 80052d4:	9301      	str	r3, [sp, #4]
 80052d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 fe49 	bl	8005f76 <xTaskCreate>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d001      	beq.n	80052ee <osThreadNew+0x146>
          hTask = NULL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80052ee:	697b      	ldr	r3, [r7, #20]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3738      	adds	r7, #56	; 0x38
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	20000ac4 	.word	0x20000ac4

080052fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005304:	f3ef 8305 	mrs	r3, IPSR
 8005308:	613b      	str	r3, [r7, #16]
  return(result);
 800530a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10f      	bne.n	8005330 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005310:	f3ef 8310 	mrs	r3, PRIMASK
 8005314:	60fb      	str	r3, [r7, #12]
  return(result);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d109      	bne.n	8005330 <osDelay+0x34>
 800531c:	4b0d      	ldr	r3, [pc, #52]	; (8005354 <osDelay+0x58>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d109      	bne.n	8005338 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005324:	f3ef 8311 	mrs	r3, BASEPRI
 8005328:	60bb      	str	r3, [r7, #8]
  return(result);
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <osDelay+0x3c>
    stat = osErrorISR;
 8005330:	f06f 0305 	mvn.w	r3, #5
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	e007      	b.n	8005348 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 ff52 	bl	80061ec <vTaskDelay>
    }
  }

  return (stat);
 8005348:	697b      	ldr	r3, [r7, #20]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20000ac4 	.word	0x20000ac4

08005358 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4a06      	ldr	r2, [pc, #24]	; (8005380 <vApplicationGetIdleTaskMemory+0x28>)
 8005368:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4a05      	ldr	r2, [pc, #20]	; (8005384 <vApplicationGetIdleTaskMemory+0x2c>)
 800536e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2280      	movs	r2, #128	; 0x80
 8005374:	601a      	str	r2, [r3, #0]
}
 8005376:	bf00      	nop
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr
 8005380:	20000ac8 	.word	0x20000ac8
 8005384:	20000b24 	.word	0x20000b24

08005388 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4a07      	ldr	r2, [pc, #28]	; (80053b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005398:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	4a06      	ldr	r2, [pc, #24]	; (80053b8 <vApplicationGetTimerTaskMemory+0x30>)
 800539e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053a6:	601a      	str	r2, [r3, #0]
}
 80053a8:	bf00      	nop
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bc80      	pop	{r7}
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20000d24 	.word	0x20000d24
 80053b8:	20000d80 	.word	0x20000d80

080053bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f103 0208 	add.w	r2, r3, #8
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f04f 32ff 	mov.w	r2, #4294967295
 80053d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f103 0208 	add.w	r2, r3, #8
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f103 0208 	add.w	r2, r3, #8
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr

080053fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	bc80      	pop	{r7}
 8005410:	4770      	bx	lr

08005412 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005412:	b480      	push	{r7}
 8005414:	b085      	sub	sp, #20
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	601a      	str	r2, [r3, #0]
}
 800544e:	bf00      	nop
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr

08005458 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546e:	d103      	bne.n	8005478 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	e00c      	b.n	8005492 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3308      	adds	r3, #8
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	e002      	b.n	8005486 <vListInsert+0x2e>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	429a      	cmp	r2, r3
 8005490:	d2f6      	bcs.n	8005480 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	1c5a      	adds	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	601a      	str	r2, [r3, #0]
}
 80054be:	bf00      	nop
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr

080054c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6892      	ldr	r2, [r2, #8]
 80054de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6852      	ldr	r2, [r2, #4]
 80054e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d103      	bne.n	80054fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	1e5a      	subs	r2, r3, #1
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr
	...

0800551c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d109      	bne.n	8005544 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	e7fe      	b.n	8005542 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005544:	f001 ff98 	bl	8007478 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005550:	68f9      	ldr	r1, [r7, #12]
 8005552:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005554:	fb01 f303 	mul.w	r3, r1, r3
 8005558:	441a      	add	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005574:	3b01      	subs	r3, #1
 8005576:	68f9      	ldr	r1, [r7, #12]
 8005578:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800557a:	fb01 f303 	mul.w	r3, r1, r3
 800557e:	441a      	add	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	22ff      	movs	r2, #255	; 0xff
 8005588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	22ff      	movs	r2, #255	; 0xff
 8005590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d114      	bne.n	80055c4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d01a      	beq.n	80055d8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3310      	adds	r3, #16
 80055a6:	4618      	mov	r0, r3
 80055a8:	f001 f8d8 	bl	800675c <xTaskRemoveFromEventList>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d012      	beq.n	80055d8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055b2:	4b0d      	ldr	r3, [pc, #52]	; (80055e8 <xQueueGenericReset+0xcc>)
 80055b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	e009      	b.n	80055d8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3310      	adds	r3, #16
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7ff fef7 	bl	80053bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3324      	adds	r3, #36	; 0x24
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff fef2 	bl	80053bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80055d8:	f001 ff7c 	bl	80074d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80055dc:	2301      	movs	r3, #1
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08e      	sub	sp, #56	; 0x38
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d109      	bne.n	8005614 <xQueueGenericCreateStatic+0x28>
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	62bb      	str	r3, [r7, #40]	; 0x28
 8005612:	e7fe      	b.n	8005612 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <xQueueGenericCreateStatic+0x42>
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	627b      	str	r3, [r7, #36]	; 0x24
 800562c:	e7fe      	b.n	800562c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <xQueueGenericCreateStatic+0x4e>
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <xQueueGenericCreateStatic+0x52>
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <xQueueGenericCreateStatic+0x54>
 800563e:	2300      	movs	r3, #0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d109      	bne.n	8005658 <xQueueGenericCreateStatic+0x6c>
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	623b      	str	r3, [r7, #32]
 8005656:	e7fe      	b.n	8005656 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d102      	bne.n	8005664 <xQueueGenericCreateStatic+0x78>
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <xQueueGenericCreateStatic+0x7c>
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <xQueueGenericCreateStatic+0x7e>
 8005668:	2300      	movs	r3, #0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d109      	bne.n	8005682 <xQueueGenericCreateStatic+0x96>
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	61fb      	str	r3, [r7, #28]
 8005680:	e7fe      	b.n	8005680 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005682:	2350      	movs	r3, #80	; 0x50
 8005684:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b50      	cmp	r3, #80	; 0x50
 800568a:	d009      	beq.n	80056a0 <xQueueGenericCreateStatic+0xb4>
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	61bb      	str	r3, [r7, #24]
 800569e:	e7fe      	b.n	800569e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80056a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00d      	beq.n	80056c6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	4613      	mov	r3, r2
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	68b9      	ldr	r1, [r7, #8]
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 f805 	bl	80056d0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3730      	adds	r7, #48	; 0x30
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d103      	bne.n	80056ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	e002      	b.n	80056f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056fe:	2101      	movs	r1, #1
 8005700:	69b8      	ldr	r0, [r7, #24]
 8005702:	f7ff ff0b 	bl	800551c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	78fa      	ldrb	r2, [r7, #3]
 800570a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08e      	sub	sp, #56	; 0x38
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005726:	2300      	movs	r3, #0
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	2b00      	cmp	r3, #0
 8005732:	d109      	bne.n	8005748 <xQueueGenericSend+0x30>
 8005734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	62bb      	str	r3, [r7, #40]	; 0x28
 8005746:	e7fe      	b.n	8005746 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d103      	bne.n	8005756 <xQueueGenericSend+0x3e>
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <xQueueGenericSend+0x42>
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <xQueueGenericSend+0x44>
 800575a:	2300      	movs	r3, #0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d109      	bne.n	8005774 <xQueueGenericSend+0x5c>
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
 8005772:	e7fe      	b.n	8005772 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b02      	cmp	r3, #2
 8005778:	d103      	bne.n	8005782 <xQueueGenericSend+0x6a>
 800577a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577e:	2b01      	cmp	r3, #1
 8005780:	d101      	bne.n	8005786 <xQueueGenericSend+0x6e>
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <xQueueGenericSend+0x70>
 8005786:	2300      	movs	r3, #0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d109      	bne.n	80057a0 <xQueueGenericSend+0x88>
 800578c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	623b      	str	r3, [r7, #32]
 800579e:	e7fe      	b.n	800579e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057a0:	f001 f996 	bl	8006ad0 <xTaskGetSchedulerState>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d102      	bne.n	80057b0 <xQueueGenericSend+0x98>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <xQueueGenericSend+0x9c>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <xQueueGenericSend+0x9e>
 80057b4:	2300      	movs	r3, #0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d109      	bne.n	80057ce <xQueueGenericSend+0xb6>
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	61fb      	str	r3, [r7, #28]
 80057cc:	e7fe      	b.n	80057cc <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057ce:	f001 fe53 	bl	8007478 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057da:	429a      	cmp	r2, r3
 80057dc:	d302      	bcc.n	80057e4 <xQueueGenericSend+0xcc>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d129      	bne.n	8005838 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ea:	f000 f9ff 	bl	8005bec <prvCopyDataToQueue>
 80057ee:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d010      	beq.n	800581a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	3324      	adds	r3, #36	; 0x24
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 ffad 	bl	800675c <xTaskRemoveFromEventList>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d013      	beq.n	8005830 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005808:	4b3f      	ldr	r3, [pc, #252]	; (8005908 <xQueueGenericSend+0x1f0>)
 800580a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	e00a      	b.n	8005830 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800581a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d007      	beq.n	8005830 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005820:	4b39      	ldr	r3, [pc, #228]	; (8005908 <xQueueGenericSend+0x1f0>)
 8005822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005830:	f001 fe50 	bl	80074d4 <vPortExitCritical>
				return pdPASS;
 8005834:	2301      	movs	r3, #1
 8005836:	e063      	b.n	8005900 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d103      	bne.n	8005846 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800583e:	f001 fe49 	bl	80074d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005842:	2300      	movs	r3, #0
 8005844:	e05c      	b.n	8005900 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005848:	2b00      	cmp	r3, #0
 800584a:	d106      	bne.n	800585a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800584c:	f107 0314 	add.w	r3, r7, #20
 8005850:	4618      	mov	r0, r3
 8005852:	f000 ffe5 	bl	8006820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005856:	2301      	movs	r3, #1
 8005858:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800585a:	f001 fe3b 	bl	80074d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800585e:	f000 fd5d 	bl	800631c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005862:	f001 fe09 	bl	8007478 <vPortEnterCritical>
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800586c:	b25b      	sxtb	r3, r3
 800586e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005872:	d103      	bne.n	800587c <xQueueGenericSend+0x164>
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005882:	b25b      	sxtb	r3, r3
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005888:	d103      	bne.n	8005892 <xQueueGenericSend+0x17a>
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005892:	f001 fe1f 	bl	80074d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005896:	1d3a      	adds	r2, r7, #4
 8005898:	f107 0314 	add.w	r3, r7, #20
 800589c:	4611      	mov	r1, r2
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 ffd4 	bl	800684c <xTaskCheckForTimeOut>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d124      	bne.n	80058f4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80058aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ac:	f000 fa96 	bl	8005ddc <prvIsQueueFull>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d018      	beq.n	80058e8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	3310      	adds	r3, #16
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	4611      	mov	r1, r2
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fefe 	bl	80066c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80058c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058c6:	f000 fa21 	bl	8005d0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80058ca:	f000 fd35 	bl	8006338 <xTaskResumeAll>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f47f af7c 	bne.w	80057ce <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80058d6:	4b0c      	ldr	r3, [pc, #48]	; (8005908 <xQueueGenericSend+0x1f0>)
 80058d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	e772      	b.n	80057ce <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ea:	f000 fa0f 	bl	8005d0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058ee:	f000 fd23 	bl	8006338 <xTaskResumeAll>
 80058f2:	e76c      	b.n	80057ce <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058f6:	f000 fa09 	bl	8005d0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058fa:	f000 fd1d 	bl	8006338 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058fe:	2300      	movs	r3, #0
		}
	}
}
 8005900:	4618      	mov	r0, r3
 8005902:	3738      	adds	r7, #56	; 0x38
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	e000ed04 	.word	0xe000ed04

0800590c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08e      	sub	sp, #56	; 0x38
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	2b00      	cmp	r3, #0
 8005922:	d109      	bne.n	8005938 <xQueueGenericSendFromISR+0x2c>
 8005924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
 8005936:	e7fe      	b.n	8005936 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d103      	bne.n	8005946 <xQueueGenericSendFromISR+0x3a>
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <xQueueGenericSendFromISR+0x3e>
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <xQueueGenericSendFromISR+0x40>
 800594a:	2300      	movs	r3, #0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d109      	bne.n	8005964 <xQueueGenericSendFromISR+0x58>
 8005950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	623b      	str	r3, [r7, #32]
 8005962:	e7fe      	b.n	8005962 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d103      	bne.n	8005972 <xQueueGenericSendFromISR+0x66>
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596e:	2b01      	cmp	r3, #1
 8005970:	d101      	bne.n	8005976 <xQueueGenericSendFromISR+0x6a>
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <xQueueGenericSendFromISR+0x6c>
 8005976:	2300      	movs	r3, #0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d109      	bne.n	8005990 <xQueueGenericSendFromISR+0x84>
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	61fb      	str	r3, [r7, #28]
 800598e:	e7fe      	b.n	800598e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005990:	f001 fe2c 	bl	80075ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005994:	f3ef 8211 	mrs	r2, BASEPRI
 8005998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	61ba      	str	r2, [r7, #24]
 80059aa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80059ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d302      	bcc.n	80059c2 <xQueueGenericSendFromISR+0xb6>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d12c      	bne.n	8005a1c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	68b9      	ldr	r1, [r7, #8]
 80059d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059d2:	f000 f90b 	bl	8005bec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80059da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059de:	d112      	bne.n	8005a06 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d016      	beq.n	8005a16 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ea:	3324      	adds	r3, #36	; 0x24
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 feb5 	bl	800675c <xTaskRemoveFromEventList>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00e      	beq.n	8005a16 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00b      	beq.n	8005a16 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	e007      	b.n	8005a16 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	b25a      	sxtb	r2, r3
 8005a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a16:	2301      	movs	r3, #1
 8005a18:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005a1a:	e001      	b.n	8005a20 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a22:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3738      	adds	r7, #56	; 0x38
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08c      	sub	sp, #48	; 0x30
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a40:	2300      	movs	r3, #0
 8005a42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d109      	bne.n	8005a62 <xQueueReceive+0x2e>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	623b      	str	r3, [r7, #32]
 8005a60:	e7fe      	b.n	8005a60 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d103      	bne.n	8005a70 <xQueueReceive+0x3c>
 8005a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <xQueueReceive+0x40>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <xQueueReceive+0x42>
 8005a74:	2300      	movs	r3, #0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d109      	bne.n	8005a8e <xQueueReceive+0x5a>
 8005a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	61fb      	str	r3, [r7, #28]
 8005a8c:	e7fe      	b.n	8005a8c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a8e:	f001 f81f 	bl	8006ad0 <xTaskGetSchedulerState>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d102      	bne.n	8005a9e <xQueueReceive+0x6a>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <xQueueReceive+0x6e>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <xQueueReceive+0x70>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d109      	bne.n	8005abc <xQueueReceive+0x88>
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	61bb      	str	r3, [r7, #24]
 8005aba:	e7fe      	b.n	8005aba <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005abc:	f001 fcdc 	bl	8007478 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d01f      	beq.n	8005b0c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ad0:	f000 f8f6 	bl	8005cc0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	1e5a      	subs	r2, r3, #1
 8005ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ada:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00f      	beq.n	8005b04 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	3310      	adds	r3, #16
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 fe37 	bl	800675c <xTaskRemoveFromEventList>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d007      	beq.n	8005b04 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005af4:	4b3c      	ldr	r3, [pc, #240]	; (8005be8 <xQueueReceive+0x1b4>)
 8005af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b04:	f001 fce6 	bl	80074d4 <vPortExitCritical>
				return pdPASS;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e069      	b.n	8005be0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d103      	bne.n	8005b1a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b12:	f001 fcdf 	bl	80074d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b16:	2300      	movs	r3, #0
 8005b18:	e062      	b.n	8005be0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d106      	bne.n	8005b2e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b20:	f107 0310 	add.w	r3, r7, #16
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 fe7b 	bl	8006820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b2e:	f001 fcd1 	bl	80074d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b32:	f000 fbf3 	bl	800631c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b36:	f001 fc9f 	bl	8007478 <vPortEnterCritical>
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b40:	b25b      	sxtb	r3, r3
 8005b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b46:	d103      	bne.n	8005b50 <xQueueReceive+0x11c>
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b56:	b25b      	sxtb	r3, r3
 8005b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5c:	d103      	bne.n	8005b66 <xQueueReceive+0x132>
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b66:	f001 fcb5 	bl	80074d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b6a:	1d3a      	adds	r2, r7, #4
 8005b6c:	f107 0310 	add.w	r3, r7, #16
 8005b70:	4611      	mov	r1, r2
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fe6a 	bl	800684c <xTaskCheckForTimeOut>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d123      	bne.n	8005bc6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b80:	f000 f916 	bl	8005db0 <prvIsQueueEmpty>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d017      	beq.n	8005bba <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8c:	3324      	adds	r3, #36	; 0x24
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	4611      	mov	r1, r2
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fd94 	bl	80066c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b9a:	f000 f8b7 	bl	8005d0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b9e:	f000 fbcb 	bl	8006338 <xTaskResumeAll>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d189      	bne.n	8005abc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005ba8:	4b0f      	ldr	r3, [pc, #60]	; (8005be8 <xQueueReceive+0x1b4>)
 8005baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	e780      	b.n	8005abc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005bba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bbc:	f000 f8a6 	bl	8005d0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bc0:	f000 fbba 	bl	8006338 <xTaskResumeAll>
 8005bc4:	e77a      	b.n	8005abc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bc8:	f000 f8a0 	bl	8005d0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bcc:	f000 fbb4 	bl	8006338 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bd2:	f000 f8ed 	bl	8005db0 <prvIsQueueEmpty>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f43f af6f 	beq.w	8005abc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bde:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3730      	adds	r7, #48	; 0x30
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	e000ed04 	.word	0xe000ed04

08005bec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10d      	bne.n	8005c26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d14d      	bne.n	8005cae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 ff78 	bl	8006b0c <xTaskPriorityDisinherit>
 8005c1c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	605a      	str	r2, [r3, #4]
 8005c24:	e043      	b.n	8005cae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d119      	bne.n	8005c60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6898      	ldr	r0, [r3, #8]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	461a      	mov	r2, r3
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	f001 ff2e 	bl	8007a98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	441a      	add	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d32b      	bcc.n	8005cae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	609a      	str	r2, [r3, #8]
 8005c5e:	e026      	b.n	8005cae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	68d8      	ldr	r0, [r3, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c68:	461a      	mov	r2, r3
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	f001 ff14 	bl	8007a98 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	425b      	negs	r3, r3
 8005c7a:	441a      	add	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d207      	bcs.n	8005c9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	425b      	negs	r3, r3
 8005c96:	441a      	add	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d105      	bne.n	8005cae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005cb6:	697b      	ldr	r3, [r7, #20]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d018      	beq.n	8005d04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	441a      	add	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d303      	bcc.n	8005cf4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68d9      	ldr	r1, [r3, #12]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	6838      	ldr	r0, [r7, #0]
 8005d00:	f001 feca 	bl	8007a98 <memcpy>
	}
}
 8005d04:	bf00      	nop
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d14:	f001 fbb0 	bl	8007478 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d20:	e011      	b.n	8005d46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d012      	beq.n	8005d50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	3324      	adds	r3, #36	; 0x24
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fd14 	bl	800675c <xTaskRemoveFromEventList>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d3a:	f000 fde7 	bl	800690c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	dce9      	bgt.n	8005d22 <prvUnlockQueue+0x16>
 8005d4e:	e000      	b.n	8005d52 <prvUnlockQueue+0x46>
					break;
 8005d50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	22ff      	movs	r2, #255	; 0xff
 8005d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d5a:	f001 fbbb 	bl	80074d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d5e:	f001 fb8b 	bl	8007478 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d6a:	e011      	b.n	8005d90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d012      	beq.n	8005d9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3310      	adds	r3, #16
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fcef 	bl	800675c <xTaskRemoveFromEventList>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d84:	f000 fdc2 	bl	800690c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d88:	7bbb      	ldrb	r3, [r7, #14]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	dce9      	bgt.n	8005d6c <prvUnlockQueue+0x60>
 8005d98:	e000      	b.n	8005d9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	22ff      	movs	r2, #255	; 0xff
 8005da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005da4:	f001 fb96 	bl	80074d4 <vPortExitCritical>
}
 8005da8:	bf00      	nop
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005db8:	f001 fb5e 	bl	8007478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d102      	bne.n	8005dca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	e001      	b.n	8005dce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dce:	f001 fb81 	bl	80074d4 <vPortExitCritical>

	return xReturn;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005de4:	f001 fb48 	bl	8007478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d102      	bne.n	8005dfa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005df4:	2301      	movs	r3, #1
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	e001      	b.n	8005dfe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dfe:	f001 fb69 	bl	80074d4 <vPortExitCritical>

	return xReturn;
 8005e02:	68fb      	ldr	r3, [r7, #12]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	e014      	b.n	8005e46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e1c:	4a0e      	ldr	r2, [pc, #56]	; (8005e58 <vQueueAddToRegistry+0x4c>)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10b      	bne.n	8005e40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e28:	490b      	ldr	r1, [pc, #44]	; (8005e58 <vQueueAddToRegistry+0x4c>)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e32:	4a09      	ldr	r2, [pc, #36]	; (8005e58 <vQueueAddToRegistry+0x4c>)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	4413      	add	r3, r2
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e3e:	e005      	b.n	8005e4c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3301      	adds	r3, #1
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b07      	cmp	r3, #7
 8005e4a:	d9e7      	bls.n	8005e1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e4c:	bf00      	nop
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bc80      	pop	{r7}
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	20002618 	.word	0x20002618

08005e5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e6c:	f001 fb04 	bl	8007478 <vPortEnterCritical>
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e76:	b25b      	sxtb	r3, r3
 8005e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7c:	d103      	bne.n	8005e86 <vQueueWaitForMessageRestricted+0x2a>
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e8c:	b25b      	sxtb	r3, r3
 8005e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e92:	d103      	bne.n	8005e9c <vQueueWaitForMessageRestricted+0x40>
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e9c:	f001 fb1a 	bl	80074d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	3324      	adds	r3, #36	; 0x24
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	68b9      	ldr	r1, [r7, #8]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 fc29 	bl	8006708 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005eb6:	6978      	ldr	r0, [r7, #20]
 8005eb8:	f7ff ff28 	bl	8005d0c <prvUnlockQueue>
	}
 8005ebc:	bf00      	nop
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08e      	sub	sp, #56	; 0x38
 8005ec8:	af04      	add	r7, sp, #16
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d109      	bne.n	8005eec <xTaskCreateStatic+0x28>
 8005ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	623b      	str	r3, [r7, #32]
 8005eea:	e7fe      	b.n	8005eea <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d109      	bne.n	8005f06 <xTaskCreateStatic+0x42>
 8005ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	61fb      	str	r3, [r7, #28]
 8005f04:	e7fe      	b.n	8005f04 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f06:	235c      	movs	r3, #92	; 0x5c
 8005f08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	2b5c      	cmp	r3, #92	; 0x5c
 8005f0e:	d009      	beq.n	8005f24 <xTaskCreateStatic+0x60>
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	61bb      	str	r3, [r7, #24]
 8005f22:	e7fe      	b.n	8005f22 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d01e      	beq.n	8005f68 <xTaskCreateStatic+0xa4>
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01b      	beq.n	8005f68 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f42:	2300      	movs	r3, #0
 8005f44:	9303      	str	r3, [sp, #12]
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	9302      	str	r3, [sp, #8]
 8005f4a:	f107 0314 	add.w	r3, r7, #20
 8005f4e:	9301      	str	r3, [sp, #4]
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	68b9      	ldr	r1, [r7, #8]
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f850 	bl	8006000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f62:	f000 f8d3 	bl	800610c <prvAddNewTaskToReadyList>
 8005f66:	e001      	b.n	8005f6c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f6c:	697b      	ldr	r3, [r7, #20]
	}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3728      	adds	r7, #40	; 0x28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b08c      	sub	sp, #48	; 0x30
 8005f7a:	af04      	add	r7, sp, #16
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	603b      	str	r3, [r7, #0]
 8005f82:	4613      	mov	r3, r2
 8005f84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f86:	88fb      	ldrh	r3, [r7, #6]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f001 fb6a 	bl	8007664 <pvPortMalloc>
 8005f90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00e      	beq.n	8005fb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005f98:	205c      	movs	r0, #92	; 0x5c
 8005f9a:	f001 fb63 	bl	8007664 <pvPortMalloc>
 8005f9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	631a      	str	r2, [r3, #48]	; 0x30
 8005fac:	e005      	b.n	8005fba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fae:	6978      	ldr	r0, [r7, #20]
 8005fb0:	f001 fc1a 	bl	80077e8 <vPortFree>
 8005fb4:	e001      	b.n	8005fba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d017      	beq.n	8005ff0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fc8:	88fa      	ldrh	r2, [r7, #6]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	9303      	str	r3, [sp, #12]
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	9302      	str	r3, [sp, #8]
 8005fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	68b9      	ldr	r1, [r7, #8]
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 f80e 	bl	8006000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fe4:	69f8      	ldr	r0, [r7, #28]
 8005fe6:	f000 f891 	bl	800610c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fea:	2301      	movs	r3, #1
 8005fec:	61bb      	str	r3, [r7, #24]
 8005fee:	e002      	b.n	8005ff6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
	}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3720      	adds	r7, #32
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	461a      	mov	r2, r3
 8006018:	21a5      	movs	r1, #165	; 0xa5
 800601a:	f001 fd48 	bl	8007aae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006028:	3b01      	subs	r3, #1
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	f023 0307 	bic.w	r3, r3, #7
 8006036:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	2b00      	cmp	r3, #0
 8006040:	d009      	beq.n	8006056 <prvInitialiseNewTask+0x56>
 8006042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	e7fe      	b.n	8006054 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006056:	2300      	movs	r3, #0
 8006058:	61fb      	str	r3, [r7, #28]
 800605a:	e012      	b.n	8006082 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	4413      	add	r3, r2
 8006062:	7819      	ldrb	r1, [r3, #0]
 8006064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	4413      	add	r3, r2
 800606a:	3334      	adds	r3, #52	; 0x34
 800606c:	460a      	mov	r2, r1
 800606e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	4413      	add	r3, r2
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d006      	beq.n	800608a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	3301      	adds	r3, #1
 8006080:	61fb      	str	r3, [r7, #28]
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	2b0f      	cmp	r3, #15
 8006086:	d9e9      	bls.n	800605c <prvInitialiseNewTask+0x5c>
 8006088:	e000      	b.n	800608c <prvInitialiseNewTask+0x8c>
		{
			break;
 800608a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	2b37      	cmp	r3, #55	; 0x37
 8006098:	d901      	bls.n	800609e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800609a:	2337      	movs	r3, #55	; 0x37
 800609c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060a2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060a8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	2200      	movs	r2, #0
 80060ae:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b2:	3304      	adds	r3, #4
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff f9a0 	bl	80053fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	3318      	adds	r3, #24
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff f99b 	bl	80053fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	2200      	movs	r2, #0
 80060de:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	68f9      	ldr	r1, [r7, #12]
 80060ec:	69b8      	ldr	r0, [r7, #24]
 80060ee:	f001 f8d7 	bl	80072a0 <pxPortInitialiseStack>
 80060f2:	4602      	mov	r2, r0
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80060f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006102:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006104:	bf00      	nop
 8006106:	3720      	adds	r7, #32
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006114:	f001 f9b0 	bl	8007478 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006118:	4b2d      	ldr	r3, [pc, #180]	; (80061d0 <prvAddNewTaskToReadyList+0xc4>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3301      	adds	r3, #1
 800611e:	4a2c      	ldr	r2, [pc, #176]	; (80061d0 <prvAddNewTaskToReadyList+0xc4>)
 8006120:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006122:	4b2c      	ldr	r3, [pc, #176]	; (80061d4 <prvAddNewTaskToReadyList+0xc8>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d109      	bne.n	800613e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800612a:	4a2a      	ldr	r2, [pc, #168]	; (80061d4 <prvAddNewTaskToReadyList+0xc8>)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006130:	4b27      	ldr	r3, [pc, #156]	; (80061d0 <prvAddNewTaskToReadyList+0xc4>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d110      	bne.n	800615a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006138:	f000 fc0c 	bl	8006954 <prvInitialiseTaskLists>
 800613c:	e00d      	b.n	800615a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800613e:	4b26      	ldr	r3, [pc, #152]	; (80061d8 <prvAddNewTaskToReadyList+0xcc>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006146:	4b23      	ldr	r3, [pc, #140]	; (80061d4 <prvAddNewTaskToReadyList+0xc8>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	429a      	cmp	r2, r3
 8006152:	d802      	bhi.n	800615a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006154:	4a1f      	ldr	r2, [pc, #124]	; (80061d4 <prvAddNewTaskToReadyList+0xc8>)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800615a:	4b20      	ldr	r3, [pc, #128]	; (80061dc <prvAddNewTaskToReadyList+0xd0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3301      	adds	r3, #1
 8006160:	4a1e      	ldr	r2, [pc, #120]	; (80061dc <prvAddNewTaskToReadyList+0xd0>)
 8006162:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006164:	4b1d      	ldr	r3, [pc, #116]	; (80061dc <prvAddNewTaskToReadyList+0xd0>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006170:	4b1b      	ldr	r3, [pc, #108]	; (80061e0 <prvAddNewTaskToReadyList+0xd4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d903      	bls.n	8006180 <prvAddNewTaskToReadyList+0x74>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	4a18      	ldr	r2, [pc, #96]	; (80061e0 <prvAddNewTaskToReadyList+0xd4>)
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4a15      	ldr	r2, [pc, #84]	; (80061e4 <prvAddNewTaskToReadyList+0xd8>)
 800618e:	441a      	add	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3304      	adds	r3, #4
 8006194:	4619      	mov	r1, r3
 8006196:	4610      	mov	r0, r2
 8006198:	f7ff f93b 	bl	8005412 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800619c:	f001 f99a 	bl	80074d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061a0:	4b0d      	ldr	r3, [pc, #52]	; (80061d8 <prvAddNewTaskToReadyList+0xcc>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00e      	beq.n	80061c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061a8:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <prvAddNewTaskToReadyList+0xc8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d207      	bcs.n	80061c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061b6:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <prvAddNewTaskToReadyList+0xdc>)
 80061b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20001654 	.word	0x20001654
 80061d4:	20001180 	.word	0x20001180
 80061d8:	20001660 	.word	0x20001660
 80061dc:	20001670 	.word	0x20001670
 80061e0:	2000165c 	.word	0x2000165c
 80061e4:	20001184 	.word	0x20001184
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d016      	beq.n	800622c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061fe:	4b13      	ldr	r3, [pc, #76]	; (800624c <vTaskDelay+0x60>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d009      	beq.n	800621a <vTaskDelay+0x2e>
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	60bb      	str	r3, [r7, #8]
 8006218:	e7fe      	b.n	8006218 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800621a:	f000 f87f 	bl	800631c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800621e:	2100      	movs	r1, #0
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fcdf 	bl	8006be4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006226:	f000 f887 	bl	8006338 <xTaskResumeAll>
 800622a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d107      	bne.n	8006242 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006232:	4b07      	ldr	r3, [pc, #28]	; (8006250 <vTaskDelay+0x64>)
 8006234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006242:	bf00      	nop
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	2000167c 	.word	0x2000167c
 8006250:	e000ed04 	.word	0xe000ed04

08006254 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b08a      	sub	sp, #40	; 0x28
 8006258:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800625a:	2300      	movs	r3, #0
 800625c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800625e:	2300      	movs	r3, #0
 8006260:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006262:	463a      	mov	r2, r7
 8006264:	1d39      	adds	r1, r7, #4
 8006266:	f107 0308 	add.w	r3, r7, #8
 800626a:	4618      	mov	r0, r3
 800626c:	f7ff f874 	bl	8005358 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	9202      	str	r2, [sp, #8]
 8006278:	9301      	str	r3, [sp, #4]
 800627a:	2300      	movs	r3, #0
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	2300      	movs	r3, #0
 8006280:	460a      	mov	r2, r1
 8006282:	4920      	ldr	r1, [pc, #128]	; (8006304 <vTaskStartScheduler+0xb0>)
 8006284:	4820      	ldr	r0, [pc, #128]	; (8006308 <vTaskStartScheduler+0xb4>)
 8006286:	f7ff fe1d 	bl	8005ec4 <xTaskCreateStatic>
 800628a:	4602      	mov	r2, r0
 800628c:	4b1f      	ldr	r3, [pc, #124]	; (800630c <vTaskStartScheduler+0xb8>)
 800628e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006290:	4b1e      	ldr	r3, [pc, #120]	; (800630c <vTaskStartScheduler+0xb8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006298:	2301      	movs	r3, #1
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	e001      	b.n	80062a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800629e:	2300      	movs	r3, #0
 80062a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d102      	bne.n	80062ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80062a8:	f000 fcf0 	bl	8006c8c <xTimerCreateTimerTask>
 80062ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d115      	bne.n	80062e0 <vTaskStartScheduler+0x8c>
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062c6:	4b12      	ldr	r3, [pc, #72]	; (8006310 <vTaskStartScheduler+0xbc>)
 80062c8:	f04f 32ff 	mov.w	r2, #4294967295
 80062cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062ce:	4b11      	ldr	r3, [pc, #68]	; (8006314 <vTaskStartScheduler+0xc0>)
 80062d0:	2201      	movs	r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80062d4:	4b10      	ldr	r3, [pc, #64]	; (8006318 <vTaskStartScheduler+0xc4>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062da:	f001 f85d 	bl	8007398 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062de:	e00d      	b.n	80062fc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e6:	d109      	bne.n	80062fc <vTaskStartScheduler+0xa8>
 80062e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ec:	f383 8811 	msr	BASEPRI, r3
 80062f0:	f3bf 8f6f 	isb	sy
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	e7fe      	b.n	80062fa <vTaskStartScheduler+0xa6>
}
 80062fc:	bf00      	nop
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	0800813c 	.word	0x0800813c
 8006308:	08006925 	.word	0x08006925
 800630c:	20001678 	.word	0x20001678
 8006310:	20001674 	.word	0x20001674
 8006314:	20001660 	.word	0x20001660
 8006318:	20001658 	.word	0x20001658

0800631c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006320:	4b04      	ldr	r3, [pc, #16]	; (8006334 <vTaskSuspendAll+0x18>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3301      	adds	r3, #1
 8006326:	4a03      	ldr	r2, [pc, #12]	; (8006334 <vTaskSuspendAll+0x18>)
 8006328:	6013      	str	r3, [r2, #0]
}
 800632a:	bf00      	nop
 800632c:	46bd      	mov	sp, r7
 800632e:	bc80      	pop	{r7}
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	2000167c 	.word	0x2000167c

08006338 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006342:	2300      	movs	r3, #0
 8006344:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006346:	4b41      	ldr	r3, [pc, #260]	; (800644c <xTaskResumeAll+0x114>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d109      	bne.n	8006362 <xTaskResumeAll+0x2a>
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	e7fe      	b.n	8006360 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006362:	f001 f889 	bl	8007478 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006366:	4b39      	ldr	r3, [pc, #228]	; (800644c <xTaskResumeAll+0x114>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3b01      	subs	r3, #1
 800636c:	4a37      	ldr	r2, [pc, #220]	; (800644c <xTaskResumeAll+0x114>)
 800636e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006370:	4b36      	ldr	r3, [pc, #216]	; (800644c <xTaskResumeAll+0x114>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d162      	bne.n	800643e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006378:	4b35      	ldr	r3, [pc, #212]	; (8006450 <xTaskResumeAll+0x118>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d05e      	beq.n	800643e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006380:	e02f      	b.n	80063e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006382:	4b34      	ldr	r3, [pc, #208]	; (8006454 <xTaskResumeAll+0x11c>)
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3318      	adds	r3, #24
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff f89a 	bl	80054c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	3304      	adds	r3, #4
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff f895 	bl	80054c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a2:	4b2d      	ldr	r3, [pc, #180]	; (8006458 <xTaskResumeAll+0x120>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d903      	bls.n	80063b2 <xTaskResumeAll+0x7a>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ae:	4a2a      	ldr	r2, [pc, #168]	; (8006458 <xTaskResumeAll+0x120>)
 80063b0:	6013      	str	r3, [r2, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b6:	4613      	mov	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4a27      	ldr	r2, [pc, #156]	; (800645c <xTaskResumeAll+0x124>)
 80063c0:	441a      	add	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	3304      	adds	r3, #4
 80063c6:	4619      	mov	r1, r3
 80063c8:	4610      	mov	r0, r2
 80063ca:	f7ff f822 	bl	8005412 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d2:	4b23      	ldr	r3, [pc, #140]	; (8006460 <xTaskResumeAll+0x128>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	429a      	cmp	r2, r3
 80063da:	d302      	bcc.n	80063e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80063dc:	4b21      	ldr	r3, [pc, #132]	; (8006464 <xTaskResumeAll+0x12c>)
 80063de:	2201      	movs	r2, #1
 80063e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063e2:	4b1c      	ldr	r3, [pc, #112]	; (8006454 <xTaskResumeAll+0x11c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1cb      	bne.n	8006382 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063f0:	f000 fb4a 	bl	8006a88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80063f4:	4b1c      	ldr	r3, [pc, #112]	; (8006468 <xTaskResumeAll+0x130>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d010      	beq.n	8006422 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006400:	f000 f844 	bl	800648c <xTaskIncrementTick>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800640a:	4b16      	ldr	r3, [pc, #88]	; (8006464 <xTaskResumeAll+0x12c>)
 800640c:	2201      	movs	r2, #1
 800640e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	3b01      	subs	r3, #1
 8006414:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1f1      	bne.n	8006400 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800641c:	4b12      	ldr	r3, [pc, #72]	; (8006468 <xTaskResumeAll+0x130>)
 800641e:	2200      	movs	r2, #0
 8006420:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006422:	4b10      	ldr	r3, [pc, #64]	; (8006464 <xTaskResumeAll+0x12c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d009      	beq.n	800643e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800642a:	2301      	movs	r3, #1
 800642c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800642e:	4b0f      	ldr	r3, [pc, #60]	; (800646c <xTaskResumeAll+0x134>)
 8006430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800643e:	f001 f849 	bl	80074d4 <vPortExitCritical>

	return xAlreadyYielded;
 8006442:	68bb      	ldr	r3, [r7, #8]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	2000167c 	.word	0x2000167c
 8006450:	20001654 	.word	0x20001654
 8006454:	20001614 	.word	0x20001614
 8006458:	2000165c 	.word	0x2000165c
 800645c:	20001184 	.word	0x20001184
 8006460:	20001180 	.word	0x20001180
 8006464:	20001668 	.word	0x20001668
 8006468:	20001664 	.word	0x20001664
 800646c:	e000ed04 	.word	0xe000ed04

08006470 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006476:	4b04      	ldr	r3, [pc, #16]	; (8006488 <xTaskGetTickCount+0x18>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800647c:	687b      	ldr	r3, [r7, #4]
}
 800647e:	4618      	mov	r0, r3
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	bc80      	pop	{r7}
 8006486:	4770      	bx	lr
 8006488:	20001658 	.word	0x20001658

0800648c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006492:	2300      	movs	r3, #0
 8006494:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006496:	4b51      	ldr	r3, [pc, #324]	; (80065dc <xTaskIncrementTick+0x150>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	f040 808d 	bne.w	80065ba <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064a0:	4b4f      	ldr	r3, [pc, #316]	; (80065e0 <xTaskIncrementTick+0x154>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3301      	adds	r3, #1
 80064a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064a8:	4a4d      	ldr	r2, [pc, #308]	; (80065e0 <xTaskIncrementTick+0x154>)
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d11f      	bne.n	80064f4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80064b4:	4b4b      	ldr	r3, [pc, #300]	; (80065e4 <xTaskIncrementTick+0x158>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d009      	beq.n	80064d2 <xTaskIncrementTick+0x46>
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	e7fe      	b.n	80064d0 <xTaskIncrementTick+0x44>
 80064d2:	4b44      	ldr	r3, [pc, #272]	; (80065e4 <xTaskIncrementTick+0x158>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	4b43      	ldr	r3, [pc, #268]	; (80065e8 <xTaskIncrementTick+0x15c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a41      	ldr	r2, [pc, #260]	; (80065e4 <xTaskIncrementTick+0x158>)
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	4a41      	ldr	r2, [pc, #260]	; (80065e8 <xTaskIncrementTick+0x15c>)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	4b41      	ldr	r3, [pc, #260]	; (80065ec <xTaskIncrementTick+0x160>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3301      	adds	r3, #1
 80064ec:	4a3f      	ldr	r2, [pc, #252]	; (80065ec <xTaskIncrementTick+0x160>)
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	f000 faca 	bl	8006a88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064f4:	4b3e      	ldr	r3, [pc, #248]	; (80065f0 <xTaskIncrementTick+0x164>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d34e      	bcc.n	800659c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064fe:	4b39      	ldr	r3, [pc, #228]	; (80065e4 <xTaskIncrementTick+0x158>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <xTaskIncrementTick+0x80>
 8006508:	2301      	movs	r3, #1
 800650a:	e000      	b.n	800650e <xTaskIncrementTick+0x82>
 800650c:	2300      	movs	r3, #0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d004      	beq.n	800651c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006512:	4b37      	ldr	r3, [pc, #220]	; (80065f0 <xTaskIncrementTick+0x164>)
 8006514:	f04f 32ff 	mov.w	r2, #4294967295
 8006518:	601a      	str	r2, [r3, #0]
					break;
 800651a:	e03f      	b.n	800659c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800651c:	4b31      	ldr	r3, [pc, #196]	; (80065e4 <xTaskIncrementTick+0x158>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	429a      	cmp	r2, r3
 8006532:	d203      	bcs.n	800653c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006534:	4a2e      	ldr	r2, [pc, #184]	; (80065f0 <xTaskIncrementTick+0x164>)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6013      	str	r3, [r2, #0]
						break;
 800653a:	e02f      	b.n	800659c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	3304      	adds	r3, #4
 8006540:	4618      	mov	r0, r3
 8006542:	f7fe ffc1 	bl	80054c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654a:	2b00      	cmp	r3, #0
 800654c:	d004      	beq.n	8006558 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	3318      	adds	r3, #24
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe ffb8 	bl	80054c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655c:	4b25      	ldr	r3, [pc, #148]	; (80065f4 <xTaskIncrementTick+0x168>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	429a      	cmp	r2, r3
 8006562:	d903      	bls.n	800656c <xTaskIncrementTick+0xe0>
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	4a22      	ldr	r2, [pc, #136]	; (80065f4 <xTaskIncrementTick+0x168>)
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4a1f      	ldr	r2, [pc, #124]	; (80065f8 <xTaskIncrementTick+0x16c>)
 800657a:	441a      	add	r2, r3
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	3304      	adds	r3, #4
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f7fe ff45 	bl	8005412 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658c:	4b1b      	ldr	r3, [pc, #108]	; (80065fc <xTaskIncrementTick+0x170>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006592:	429a      	cmp	r2, r3
 8006594:	d3b3      	bcc.n	80064fe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006596:	2301      	movs	r3, #1
 8006598:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800659a:	e7b0      	b.n	80064fe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800659c:	4b17      	ldr	r3, [pc, #92]	; (80065fc <xTaskIncrementTick+0x170>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a2:	4915      	ldr	r1, [pc, #84]	; (80065f8 <xTaskIncrementTick+0x16c>)
 80065a4:	4613      	mov	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	440b      	add	r3, r1
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d907      	bls.n	80065c4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80065b4:	2301      	movs	r3, #1
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	e004      	b.n	80065c4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80065ba:	4b11      	ldr	r3, [pc, #68]	; (8006600 <xTaskIncrementTick+0x174>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3301      	adds	r3, #1
 80065c0:	4a0f      	ldr	r2, [pc, #60]	; (8006600 <xTaskIncrementTick+0x174>)
 80065c2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80065c4:	4b0f      	ldr	r3, [pc, #60]	; (8006604 <xTaskIncrementTick+0x178>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80065cc:	2301      	movs	r3, #1
 80065ce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80065d0:	697b      	ldr	r3, [r7, #20]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	2000167c 	.word	0x2000167c
 80065e0:	20001658 	.word	0x20001658
 80065e4:	2000160c 	.word	0x2000160c
 80065e8:	20001610 	.word	0x20001610
 80065ec:	2000166c 	.word	0x2000166c
 80065f0:	20001674 	.word	0x20001674
 80065f4:	2000165c 	.word	0x2000165c
 80065f8:	20001184 	.word	0x20001184
 80065fc:	20001180 	.word	0x20001180
 8006600:	20001664 	.word	0x20001664
 8006604:	20001668 	.word	0x20001668

08006608 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800660e:	4b27      	ldr	r3, [pc, #156]	; (80066ac <vTaskSwitchContext+0xa4>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006616:	4b26      	ldr	r3, [pc, #152]	; (80066b0 <vTaskSwitchContext+0xa8>)
 8006618:	2201      	movs	r2, #1
 800661a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800661c:	e040      	b.n	80066a0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800661e:	4b24      	ldr	r3, [pc, #144]	; (80066b0 <vTaskSwitchContext+0xa8>)
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006624:	4b23      	ldr	r3, [pc, #140]	; (80066b4 <vTaskSwitchContext+0xac>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	60fb      	str	r3, [r7, #12]
 800662a:	e00f      	b.n	800664c <vTaskSwitchContext+0x44>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d109      	bne.n	8006646 <vTaskSwitchContext+0x3e>
 8006632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	607b      	str	r3, [r7, #4]
 8006644:	e7fe      	b.n	8006644 <vTaskSwitchContext+0x3c>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3b01      	subs	r3, #1
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	491a      	ldr	r1, [pc, #104]	; (80066b8 <vTaskSwitchContext+0xb0>)
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4613      	mov	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	440b      	add	r3, r1
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0e5      	beq.n	800662c <vTaskSwitchContext+0x24>
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4613      	mov	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4a13      	ldr	r2, [pc, #76]	; (80066b8 <vTaskSwitchContext+0xb0>)
 800666c:	4413      	add	r3, r2
 800666e:	60bb      	str	r3, [r7, #8]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	605a      	str	r2, [r3, #4]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	3308      	adds	r3, #8
 8006682:	429a      	cmp	r2, r3
 8006684:	d104      	bne.n	8006690 <vTaskSwitchContext+0x88>
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	605a      	str	r2, [r3, #4]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	4a09      	ldr	r2, [pc, #36]	; (80066bc <vTaskSwitchContext+0xb4>)
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	4a06      	ldr	r2, [pc, #24]	; (80066b4 <vTaskSwitchContext+0xac>)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6013      	str	r3, [r2, #0]
}
 80066a0:	bf00      	nop
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bc80      	pop	{r7}
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	2000167c 	.word	0x2000167c
 80066b0:	20001668 	.word	0x20001668
 80066b4:	2000165c 	.word	0x2000165c
 80066b8:	20001184 	.word	0x20001184
 80066bc:	20001180 	.word	0x20001180

080066c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d109      	bne.n	80066e4 <vTaskPlaceOnEventList+0x24>
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	e7fe      	b.n	80066e2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066e4:	4b07      	ldr	r3, [pc, #28]	; (8006704 <vTaskPlaceOnEventList+0x44>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3318      	adds	r3, #24
 80066ea:	4619      	mov	r1, r3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7fe feb3 	bl	8005458 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066f2:	2101      	movs	r1, #1
 80066f4:	6838      	ldr	r0, [r7, #0]
 80066f6:	f000 fa75 	bl	8006be4 <prvAddCurrentTaskToDelayedList>
}
 80066fa:	bf00      	nop
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20001180 	.word	0x20001180

08006708 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d109      	bne.n	800672e <vTaskPlaceOnEventListRestricted+0x26>
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	617b      	str	r3, [r7, #20]
 800672c:	e7fe      	b.n	800672c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800672e:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <vTaskPlaceOnEventListRestricted+0x50>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3318      	adds	r3, #24
 8006734:	4619      	mov	r1, r3
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f7fe fe6b 	bl	8005412 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006742:	f04f 33ff 	mov.w	r3, #4294967295
 8006746:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	68b8      	ldr	r0, [r7, #8]
 800674c:	f000 fa4a 	bl	8006be4 <prvAddCurrentTaskToDelayedList>
	}
 8006750:	bf00      	nop
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	20001180 	.word	0x20001180

0800675c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d109      	bne.n	8006786 <xTaskRemoveFromEventList+0x2a>
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	e7fe      	b.n	8006784 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	3318      	adds	r3, #24
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe fe9c 	bl	80054c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006790:	4b1d      	ldr	r3, [pc, #116]	; (8006808 <xTaskRemoveFromEventList+0xac>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d11d      	bne.n	80067d4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	3304      	adds	r3, #4
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe fe93 	bl	80054c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a6:	4b19      	ldr	r3, [pc, #100]	; (800680c <xTaskRemoveFromEventList+0xb0>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d903      	bls.n	80067b6 <xTaskRemoveFromEventList+0x5a>
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b2:	4a16      	ldr	r2, [pc, #88]	; (800680c <xTaskRemoveFromEventList+0xb0>)
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4a13      	ldr	r2, [pc, #76]	; (8006810 <xTaskRemoveFromEventList+0xb4>)
 80067c4:	441a      	add	r2, r3
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	3304      	adds	r3, #4
 80067ca:	4619      	mov	r1, r3
 80067cc:	4610      	mov	r0, r2
 80067ce:	f7fe fe20 	bl	8005412 <vListInsertEnd>
 80067d2:	e005      	b.n	80067e0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	3318      	adds	r3, #24
 80067d8:	4619      	mov	r1, r3
 80067da:	480e      	ldr	r0, [pc, #56]	; (8006814 <xTaskRemoveFromEventList+0xb8>)
 80067dc:	f7fe fe19 	bl	8005412 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e4:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <xTaskRemoveFromEventList+0xbc>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d905      	bls.n	80067fa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067ee:	2301      	movs	r3, #1
 80067f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067f2:	4b0a      	ldr	r3, [pc, #40]	; (800681c <xTaskRemoveFromEventList+0xc0>)
 80067f4:	2201      	movs	r2, #1
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	e001      	b.n	80067fe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80067fa:	2300      	movs	r3, #0
 80067fc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80067fe:	697b      	ldr	r3, [r7, #20]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	2000167c 	.word	0x2000167c
 800680c:	2000165c 	.word	0x2000165c
 8006810:	20001184 	.word	0x20001184
 8006814:	20001614 	.word	0x20001614
 8006818:	20001180 	.word	0x20001180
 800681c:	20001668 	.word	0x20001668

08006820 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006828:	4b06      	ldr	r3, [pc, #24]	; (8006844 <vTaskInternalSetTimeOutState+0x24>)
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006830:	4b05      	ldr	r3, [pc, #20]	; (8006848 <vTaskInternalSetTimeOutState+0x28>)
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	605a      	str	r2, [r3, #4]
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	bc80      	pop	{r7}
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	2000166c 	.word	0x2000166c
 8006848:	20001658 	.word	0x20001658

0800684c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d109      	bne.n	8006870 <xTaskCheckForTimeOut+0x24>
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	613b      	str	r3, [r7, #16]
 800686e:	e7fe      	b.n	800686e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d109      	bne.n	800688a <xTaskCheckForTimeOut+0x3e>
 8006876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	e7fe      	b.n	8006888 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800688a:	f000 fdf5 	bl	8007478 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800688e:	4b1d      	ldr	r3, [pc, #116]	; (8006904 <xTaskCheckForTimeOut+0xb8>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a6:	d102      	bne.n	80068ae <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80068a8:	2300      	movs	r3, #0
 80068aa:	61fb      	str	r3, [r7, #28]
 80068ac:	e023      	b.n	80068f6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	4b15      	ldr	r3, [pc, #84]	; (8006908 <xTaskCheckForTimeOut+0xbc>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d007      	beq.n	80068ca <xTaskCheckForTimeOut+0x7e>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d302      	bcc.n	80068ca <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80068c4:	2301      	movs	r3, #1
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	e015      	b.n	80068f6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d20b      	bcs.n	80068ec <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	1ad2      	subs	r2, r2, r3
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff ff9d 	bl	8006820 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068e6:	2300      	movs	r3, #0
 80068e8:	61fb      	str	r3, [r7, #28]
 80068ea:	e004      	b.n	80068f6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068f2:	2301      	movs	r3, #1
 80068f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068f6:	f000 fded 	bl	80074d4 <vPortExitCritical>

	return xReturn;
 80068fa:	69fb      	ldr	r3, [r7, #28]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3720      	adds	r7, #32
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	20001658 	.word	0x20001658
 8006908:	2000166c 	.word	0x2000166c

0800690c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006910:	4b03      	ldr	r3, [pc, #12]	; (8006920 <vTaskMissedYield+0x14>)
 8006912:	2201      	movs	r2, #1
 8006914:	601a      	str	r2, [r3, #0]
}
 8006916:	bf00      	nop
 8006918:	46bd      	mov	sp, r7
 800691a:	bc80      	pop	{r7}
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	20001668 	.word	0x20001668

08006924 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800692c:	f000 f852 	bl	80069d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006930:	4b06      	ldr	r3, [pc, #24]	; (800694c <prvIdleTask+0x28>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d9f9      	bls.n	800692c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006938:	4b05      	ldr	r3, [pc, #20]	; (8006950 <prvIdleTask+0x2c>)
 800693a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006948:	e7f0      	b.n	800692c <prvIdleTask+0x8>
 800694a:	bf00      	nop
 800694c:	20001184 	.word	0x20001184
 8006950:	e000ed04 	.word	0xe000ed04

08006954 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800695a:	2300      	movs	r3, #0
 800695c:	607b      	str	r3, [r7, #4]
 800695e:	e00c      	b.n	800697a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4a12      	ldr	r2, [pc, #72]	; (80069b4 <prvInitialiseTaskLists+0x60>)
 800696c:	4413      	add	r3, r2
 800696e:	4618      	mov	r0, r3
 8006970:	f7fe fd24 	bl	80053bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3301      	adds	r3, #1
 8006978:	607b      	str	r3, [r7, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b37      	cmp	r3, #55	; 0x37
 800697e:	d9ef      	bls.n	8006960 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006980:	480d      	ldr	r0, [pc, #52]	; (80069b8 <prvInitialiseTaskLists+0x64>)
 8006982:	f7fe fd1b 	bl	80053bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006986:	480d      	ldr	r0, [pc, #52]	; (80069bc <prvInitialiseTaskLists+0x68>)
 8006988:	f7fe fd18 	bl	80053bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800698c:	480c      	ldr	r0, [pc, #48]	; (80069c0 <prvInitialiseTaskLists+0x6c>)
 800698e:	f7fe fd15 	bl	80053bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006992:	480c      	ldr	r0, [pc, #48]	; (80069c4 <prvInitialiseTaskLists+0x70>)
 8006994:	f7fe fd12 	bl	80053bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006998:	480b      	ldr	r0, [pc, #44]	; (80069c8 <prvInitialiseTaskLists+0x74>)
 800699a:	f7fe fd0f 	bl	80053bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800699e:	4b0b      	ldr	r3, [pc, #44]	; (80069cc <prvInitialiseTaskLists+0x78>)
 80069a0:	4a05      	ldr	r2, [pc, #20]	; (80069b8 <prvInitialiseTaskLists+0x64>)
 80069a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069a4:	4b0a      	ldr	r3, [pc, #40]	; (80069d0 <prvInitialiseTaskLists+0x7c>)
 80069a6:	4a05      	ldr	r2, [pc, #20]	; (80069bc <prvInitialiseTaskLists+0x68>)
 80069a8:	601a      	str	r2, [r3, #0]
}
 80069aa:	bf00      	nop
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20001184 	.word	0x20001184
 80069b8:	200015e4 	.word	0x200015e4
 80069bc:	200015f8 	.word	0x200015f8
 80069c0:	20001614 	.word	0x20001614
 80069c4:	20001628 	.word	0x20001628
 80069c8:	20001640 	.word	0x20001640
 80069cc:	2000160c 	.word	0x2000160c
 80069d0:	20001610 	.word	0x20001610

080069d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069da:	e019      	b.n	8006a10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069dc:	f000 fd4c 	bl	8007478 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80069e0:	4b0f      	ldr	r3, [pc, #60]	; (8006a20 <prvCheckTasksWaitingTermination+0x4c>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	3304      	adds	r3, #4
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7fe fd6b 	bl	80054c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069f2:	4b0c      	ldr	r3, [pc, #48]	; (8006a24 <prvCheckTasksWaitingTermination+0x50>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	4a0a      	ldr	r2, [pc, #40]	; (8006a24 <prvCheckTasksWaitingTermination+0x50>)
 80069fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069fc:	4b0a      	ldr	r3, [pc, #40]	; (8006a28 <prvCheckTasksWaitingTermination+0x54>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3b01      	subs	r3, #1
 8006a02:	4a09      	ldr	r2, [pc, #36]	; (8006a28 <prvCheckTasksWaitingTermination+0x54>)
 8006a04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a06:	f000 fd65 	bl	80074d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f80e 	bl	8006a2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a10:	4b05      	ldr	r3, [pc, #20]	; (8006a28 <prvCheckTasksWaitingTermination+0x54>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e1      	bne.n	80069dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a18:	bf00      	nop
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	20001628 	.word	0x20001628
 8006a24:	20001654 	.word	0x20001654
 8006a28:	2000163c 	.word	0x2000163c

08006a2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d108      	bne.n	8006a50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fed0 	bl	80077e8 <vPortFree>
				vPortFree( pxTCB );
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fecd 	bl	80077e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a4e:	e017      	b.n	8006a80 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d103      	bne.n	8006a62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fec4 	bl	80077e8 <vPortFree>
	}
 8006a60:	e00e      	b.n	8006a80 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d009      	beq.n	8006a80 <prvDeleteTCB+0x54>
 8006a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	e7fe      	b.n	8006a7e <prvDeleteTCB+0x52>
	}
 8006a80:	bf00      	nop
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a8e:	4b0e      	ldr	r3, [pc, #56]	; (8006ac8 <prvResetNextTaskUnblockTime+0x40>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d101      	bne.n	8006a9c <prvResetNextTaskUnblockTime+0x14>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e000      	b.n	8006a9e <prvResetNextTaskUnblockTime+0x16>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006aa2:	4b0a      	ldr	r3, [pc, #40]	; (8006acc <prvResetNextTaskUnblockTime+0x44>)
 8006aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006aaa:	e008      	b.n	8006abe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006aac:	4b06      	ldr	r3, [pc, #24]	; (8006ac8 <prvResetNextTaskUnblockTime+0x40>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	4a04      	ldr	r2, [pc, #16]	; (8006acc <prvResetNextTaskUnblockTime+0x44>)
 8006abc:	6013      	str	r3, [r2, #0]
}
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bc80      	pop	{r7}
 8006ac6:	4770      	bx	lr
 8006ac8:	2000160c 	.word	0x2000160c
 8006acc:	20001674 	.word	0x20001674

08006ad0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <xTaskGetSchedulerState+0x34>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d102      	bne.n	8006ae4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	607b      	str	r3, [r7, #4]
 8006ae2:	e008      	b.n	8006af6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ae4:	4b08      	ldr	r3, [pc, #32]	; (8006b08 <xTaskGetSchedulerState+0x38>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d102      	bne.n	8006af2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006aec:	2302      	movs	r3, #2
 8006aee:	607b      	str	r3, [r7, #4]
 8006af0:	e001      	b.n	8006af6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006af2:	2300      	movs	r3, #0
 8006af4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006af6:	687b      	ldr	r3, [r7, #4]
	}
 8006af8:	4618      	mov	r0, r3
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	20001660 	.word	0x20001660
 8006b08:	2000167c 	.word	0x2000167c

08006b0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d054      	beq.n	8006bcc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b22:	4b2d      	ldr	r3, [pc, #180]	; (8006bd8 <xTaskPriorityDisinherit+0xcc>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d009      	beq.n	8006b40 <xTaskPriorityDisinherit+0x34>
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	60fb      	str	r3, [r7, #12]
 8006b3e:	e7fe      	b.n	8006b3e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d109      	bne.n	8006b5c <xTaskPriorityDisinherit+0x50>
 8006b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	60bb      	str	r3, [r7, #8]
 8006b5a:	e7fe      	b.n	8006b5a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b60:	1e5a      	subs	r2, r3, #1
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d02c      	beq.n	8006bcc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d128      	bne.n	8006bcc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fe fca2 	bl	80054c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9c:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <xTaskPriorityDisinherit+0xd0>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d903      	bls.n	8006bac <xTaskPriorityDisinherit+0xa0>
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	4a0c      	ldr	r2, [pc, #48]	; (8006bdc <xTaskPriorityDisinherit+0xd0>)
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4a09      	ldr	r2, [pc, #36]	; (8006be0 <xTaskPriorityDisinherit+0xd4>)
 8006bba:	441a      	add	r2, r3
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	f7fe fc25 	bl	8005412 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bcc:	697b      	ldr	r3, [r7, #20]
	}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20001180 	.word	0x20001180
 8006bdc:	2000165c 	.word	0x2000165c
 8006be0:	20001184 	.word	0x20001184

08006be4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006bee:	4b21      	ldr	r3, [pc, #132]	; (8006c74 <prvAddCurrentTaskToDelayedList+0x90>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bf4:	4b20      	ldr	r3, [pc, #128]	; (8006c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fe fc64 	bl	80054c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c06:	d10a      	bne.n	8006c1e <prvAddCurrentTaskToDelayedList+0x3a>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d007      	beq.n	8006c1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c0e:	4b1a      	ldr	r3, [pc, #104]	; (8006c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3304      	adds	r3, #4
 8006c14:	4619      	mov	r1, r3
 8006c16:	4819      	ldr	r0, [pc, #100]	; (8006c7c <prvAddCurrentTaskToDelayedList+0x98>)
 8006c18:	f7fe fbfb 	bl	8005412 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c1c:	e026      	b.n	8006c6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4413      	add	r3, r2
 8006c24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c26:	4b14      	ldr	r3, [pc, #80]	; (8006c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d209      	bcs.n	8006c4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c36:	4b12      	ldr	r3, [pc, #72]	; (8006c80 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	4b0f      	ldr	r3, [pc, #60]	; (8006c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	4619      	mov	r1, r3
 8006c42:	4610      	mov	r0, r2
 8006c44:	f7fe fc08 	bl	8005458 <vListInsert>
}
 8006c48:	e010      	b.n	8006c6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c4a:	4b0e      	ldr	r3, [pc, #56]	; (8006c84 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	4b0a      	ldr	r3, [pc, #40]	; (8006c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4619      	mov	r1, r3
 8006c56:	4610      	mov	r0, r2
 8006c58:	f7fe fbfe 	bl	8005458 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c5c:	4b0a      	ldr	r3, [pc, #40]	; (8006c88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d202      	bcs.n	8006c6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c66:	4a08      	ldr	r2, [pc, #32]	; (8006c88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	6013      	str	r3, [r2, #0]
}
 8006c6c:	bf00      	nop
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	20001658 	.word	0x20001658
 8006c78:	20001180 	.word	0x20001180
 8006c7c:	20001640 	.word	0x20001640
 8006c80:	20001610 	.word	0x20001610
 8006c84:	2000160c 	.word	0x2000160c
 8006c88:	20001674 	.word	0x20001674

08006c8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08a      	sub	sp, #40	; 0x28
 8006c90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c96:	f000 fac3 	bl	8007220 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c9a:	4b1c      	ldr	r3, [pc, #112]	; (8006d0c <xTimerCreateTimerTask+0x80>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d021      	beq.n	8006ce6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006caa:	1d3a      	adds	r2, r7, #4
 8006cac:	f107 0108 	add.w	r1, r7, #8
 8006cb0:	f107 030c 	add.w	r3, r7, #12
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fe fb67 	bl	8005388 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	9202      	str	r2, [sp, #8]
 8006cc2:	9301      	str	r3, [sp, #4]
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	2300      	movs	r3, #0
 8006cca:	460a      	mov	r2, r1
 8006ccc:	4910      	ldr	r1, [pc, #64]	; (8006d10 <xTimerCreateTimerTask+0x84>)
 8006cce:	4811      	ldr	r0, [pc, #68]	; (8006d14 <xTimerCreateTimerTask+0x88>)
 8006cd0:	f7ff f8f8 	bl	8005ec4 <xTaskCreateStatic>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	4b10      	ldr	r3, [pc, #64]	; (8006d18 <xTimerCreateTimerTask+0x8c>)
 8006cd8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006cda:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <xTimerCreateTimerTask+0x8c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d109      	bne.n	8006d00 <xTimerCreateTimerTask+0x74>
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	e7fe      	b.n	8006cfe <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006d00:	697b      	ldr	r3, [r7, #20]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3718      	adds	r7, #24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	200016b0 	.word	0x200016b0
 8006d10:	08008144 	.word	0x08008144
 8006d14:	08006e35 	.word	0x08006e35
 8006d18:	200016b4 	.word	0x200016b4

08006d1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08a      	sub	sp, #40	; 0x28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d109      	bne.n	8006d48 <xTimerGenericCommand+0x2c>
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	623b      	str	r3, [r7, #32]
 8006d46:	e7fe      	b.n	8006d46 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d48:	4b19      	ldr	r3, [pc, #100]	; (8006db0 <xTimerGenericCommand+0x94>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d02a      	beq.n	8006da6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2b05      	cmp	r3, #5
 8006d60:	dc18      	bgt.n	8006d94 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d62:	f7ff feb5 	bl	8006ad0 <xTaskGetSchedulerState>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d109      	bne.n	8006d80 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d6c:	4b10      	ldr	r3, [pc, #64]	; (8006db0 <xTimerGenericCommand+0x94>)
 8006d6e:	6818      	ldr	r0, [r3, #0]
 8006d70:	f107 0110 	add.w	r1, r7, #16
 8006d74:	2300      	movs	r3, #0
 8006d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d78:	f7fe fcce 	bl	8005718 <xQueueGenericSend>
 8006d7c:	6278      	str	r0, [r7, #36]	; 0x24
 8006d7e:	e012      	b.n	8006da6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d80:	4b0b      	ldr	r3, [pc, #44]	; (8006db0 <xTimerGenericCommand+0x94>)
 8006d82:	6818      	ldr	r0, [r3, #0]
 8006d84:	f107 0110 	add.w	r1, r7, #16
 8006d88:	2300      	movs	r3, #0
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f7fe fcc4 	bl	8005718 <xQueueGenericSend>
 8006d90:	6278      	str	r0, [r7, #36]	; 0x24
 8006d92:	e008      	b.n	8006da6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d94:	4b06      	ldr	r3, [pc, #24]	; (8006db0 <xTimerGenericCommand+0x94>)
 8006d96:	6818      	ldr	r0, [r3, #0]
 8006d98:	f107 0110 	add.w	r1, r7, #16
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	f7fe fdb4 	bl	800590c <xQueueGenericSendFromISR>
 8006da4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3728      	adds	r7, #40	; 0x28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	200016b0 	.word	0x200016b0

08006db4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b088      	sub	sp, #32
 8006db8:	af02      	add	r7, sp, #8
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dbe:	4b1c      	ldr	r3, [pc, #112]	; (8006e30 <prvProcessExpiredTimer+0x7c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	3304      	adds	r3, #4
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7fe fb7b 	bl	80054c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d121      	bne.n	8006e1e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	699a      	ldr	r2, [r3, #24]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	18d1      	adds	r1, r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	6978      	ldr	r0, [r7, #20]
 8006de8:	f000 f8c8 	bl	8006f7c <prvInsertTimerInActiveList>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d015      	beq.n	8006e1e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006df2:	2300      	movs	r3, #0
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	2300      	movs	r3, #0
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	6978      	ldr	r0, [r7, #20]
 8006dfe:	f7ff ff8d 	bl	8006d1c <xTimerGenericCommand>
 8006e02:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d109      	bne.n	8006e1e <prvProcessExpiredTimer+0x6a>
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	e7fe      	b.n	8006e1c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	6978      	ldr	r0, [r7, #20]
 8006e24:	4798      	blx	r3
}
 8006e26:	bf00      	nop
 8006e28:	3718      	adds	r7, #24
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	200016a8 	.word	0x200016a8

08006e34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e3c:	f107 0308 	add.w	r3, r7, #8
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 f857 	bl	8006ef4 <prvGetNextExpireTime>
 8006e46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 f803 	bl	8006e58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e52:	f000 f8d5 	bl	8007000 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e56:	e7f1      	b.n	8006e3c <prvTimerTask+0x8>

08006e58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e62:	f7ff fa5b 	bl	800631c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e66:	f107 0308 	add.w	r3, r7, #8
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 f866 	bl	8006f3c <prvSampleTimeNow>
 8006e70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d130      	bne.n	8006eda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10a      	bne.n	8006e94 <prvProcessTimerOrBlockTask+0x3c>
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d806      	bhi.n	8006e94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e86:	f7ff fa57 	bl	8006338 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e8a:	68f9      	ldr	r1, [r7, #12]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff ff91 	bl	8006db4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e92:	e024      	b.n	8006ede <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d008      	beq.n	8006eac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e9a:	4b13      	ldr	r3, [pc, #76]	; (8006ee8 <prvProcessTimerOrBlockTask+0x90>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	bf0c      	ite	eq
 8006ea4:	2301      	moveq	r3, #1
 8006ea6:	2300      	movne	r3, #0
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006eac:	4b0f      	ldr	r3, [pc, #60]	; (8006eec <prvProcessTimerOrBlockTask+0x94>)
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	f7fe ffcf 	bl	8005e5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ebe:	f7ff fa3b 	bl	8006338 <xTaskResumeAll>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10a      	bne.n	8006ede <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ec8:	4b09      	ldr	r3, [pc, #36]	; (8006ef0 <prvProcessTimerOrBlockTask+0x98>)
 8006eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	f3bf 8f6f 	isb	sy
}
 8006ed8:	e001      	b.n	8006ede <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006eda:	f7ff fa2d 	bl	8006338 <xTaskResumeAll>
}
 8006ede:	bf00      	nop
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	200016ac 	.word	0x200016ac
 8006eec:	200016b0 	.word	0x200016b0
 8006ef0:	e000ed04 	.word	0xe000ed04

08006ef4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006efc:	4b0e      	ldr	r3, [pc, #56]	; (8006f38 <prvGetNextExpireTime+0x44>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	bf0c      	ite	eq
 8006f06:	2301      	moveq	r3, #1
 8006f08:	2300      	movne	r3, #0
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d105      	bne.n	8006f26 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f1a:	4b07      	ldr	r3, [pc, #28]	; (8006f38 <prvGetNextExpireTime+0x44>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	e001      	b.n	8006f2a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bc80      	pop	{r7}
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	200016a8 	.word	0x200016a8

08006f3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f44:	f7ff fa94 	bl	8006470 <xTaskGetTickCount>
 8006f48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f4a:	4b0b      	ldr	r3, [pc, #44]	; (8006f78 <prvSampleTimeNow+0x3c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d205      	bcs.n	8006f60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f54:	f000 f904 	bl	8007160 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	e002      	b.n	8006f66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f66:	4a04      	ldr	r2, [pc, #16]	; (8006f78 <prvSampleTimeNow+0x3c>)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	200016b8 	.word	0x200016b8

08006f7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d812      	bhi.n	8006fc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	1ad2      	subs	r2, r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d302      	bcc.n	8006fb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	e01b      	b.n	8006fee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fb6:	4b10      	ldr	r3, [pc, #64]	; (8006ff8 <prvInsertTimerInActiveList+0x7c>)
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	f7fe fa49 	bl	8005458 <vListInsert>
 8006fc6:	e012      	b.n	8006fee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d206      	bcs.n	8006fde <prvInsertTimerInActiveList+0x62>
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d302      	bcc.n	8006fde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	e007      	b.n	8006fee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fde:	4b07      	ldr	r3, [pc, #28]	; (8006ffc <prvInsertTimerInActiveList+0x80>)
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	4610      	mov	r0, r2
 8006fea:	f7fe fa35 	bl	8005458 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fee:	697b      	ldr	r3, [r7, #20]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	200016ac 	.word	0x200016ac
 8006ffc:	200016a8 	.word	0x200016a8

08007000 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08e      	sub	sp, #56	; 0x38
 8007004:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007006:	e099      	b.n	800713c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	da17      	bge.n	800703e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800700e:	1d3b      	adds	r3, r7, #4
 8007010:	3304      	adds	r3, #4
 8007012:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d109      	bne.n	800702e <prvProcessReceivedCommands+0x2e>
 800701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	61fb      	str	r3, [r7, #28]
 800702c:	e7fe      	b.n	800702c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800702e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007034:	6850      	ldr	r0, [r2, #4]
 8007036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007038:	6892      	ldr	r2, [r2, #8]
 800703a:	4611      	mov	r1, r2
 800703c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	db7a      	blt.n	800713a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d004      	beq.n	800705a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	3304      	adds	r3, #4
 8007054:	4618      	mov	r0, r3
 8007056:	f7fe fa37 	bl	80054c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800705a:	463b      	mov	r3, r7
 800705c:	4618      	mov	r0, r3
 800705e:	f7ff ff6d 	bl	8006f3c <prvSampleTimeNow>
 8007062:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b09      	cmp	r3, #9
 8007068:	d868      	bhi.n	800713c <prvProcessReceivedCommands+0x13c>
 800706a:	a201      	add	r2, pc, #4	; (adr r2, 8007070 <prvProcessReceivedCommands+0x70>)
 800706c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007070:	08007099 	.word	0x08007099
 8007074:	08007099 	.word	0x08007099
 8007078:	08007099 	.word	0x08007099
 800707c:	0800713d 	.word	0x0800713d
 8007080:	080070f3 	.word	0x080070f3
 8007084:	08007129 	.word	0x08007129
 8007088:	08007099 	.word	0x08007099
 800708c:	08007099 	.word	0x08007099
 8007090:	0800713d 	.word	0x0800713d
 8007094:	080070f3 	.word	0x080070f3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	18d1      	adds	r1, r2, r3
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070a6:	f7ff ff69 	bl	8006f7c <prvInsertTimerInActiveList>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d045      	beq.n	800713c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070b6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d13d      	bne.n	800713c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	441a      	add	r2, r3
 80070c8:	2300      	movs	r3, #0
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	2300      	movs	r3, #0
 80070ce:	2100      	movs	r1, #0
 80070d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070d2:	f7ff fe23 	bl	8006d1c <xTimerGenericCommand>
 80070d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d12e      	bne.n	800713c <prvProcessReceivedCommands+0x13c>
 80070de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	61bb      	str	r3, [r7, #24]
 80070f0:	e7fe      	b.n	80070f0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d109      	bne.n	8007114 <prvProcessReceivedCommands+0x114>
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	617b      	str	r3, [r7, #20]
 8007112:	e7fe      	b.n	8007112 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	699a      	ldr	r2, [r3, #24]
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	18d1      	adds	r1, r2, r3
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007122:	f7ff ff2b 	bl	8006f7c <prvInsertTimerInActiveList>
					break;
 8007126:	e009      	b.n	800713c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800712e:	2b00      	cmp	r3, #0
 8007130:	d104      	bne.n	800713c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8007132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007134:	f000 fb58 	bl	80077e8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007138:	e000      	b.n	800713c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800713a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800713c:	4b07      	ldr	r3, [pc, #28]	; (800715c <prvProcessReceivedCommands+0x15c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	1d39      	adds	r1, r7, #4
 8007142:	2200      	movs	r2, #0
 8007144:	4618      	mov	r0, r3
 8007146:	f7fe fc75 	bl	8005a34 <xQueueReceive>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	f47f af5b 	bne.w	8007008 <prvProcessReceivedCommands+0x8>
	}
}
 8007152:	bf00      	nop
 8007154:	3730      	adds	r7, #48	; 0x30
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	200016b0 	.word	0x200016b0

08007160 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007166:	e044      	b.n	80071f2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007168:	4b2b      	ldr	r3, [pc, #172]	; (8007218 <prvSwitchTimerLists+0xb8>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007172:	4b29      	ldr	r3, [pc, #164]	; (8007218 <prvSwitchTimerLists+0xb8>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	3304      	adds	r3, #4
 8007180:	4618      	mov	r0, r3
 8007182:	f7fe f9a1 	bl	80054c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d12d      	bne.n	80071f2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4413      	add	r3, r2
 800719e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d90e      	bls.n	80071c6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071b4:	4b18      	ldr	r3, [pc, #96]	; (8007218 <prvSwitchTimerLists+0xb8>)
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3304      	adds	r3, #4
 80071bc:	4619      	mov	r1, r3
 80071be:	4610      	mov	r0, r2
 80071c0:	f7fe f94a 	bl	8005458 <vListInsert>
 80071c4:	e015      	b.n	80071f2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071c6:	2300      	movs	r3, #0
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	2300      	movs	r3, #0
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	2100      	movs	r1, #0
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f7ff fda3 	bl	8006d1c <xTimerGenericCommand>
 80071d6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d109      	bne.n	80071f2 <prvSwitchTimerLists+0x92>
 80071de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	e7fe      	b.n	80071f0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071f2:	4b09      	ldr	r3, [pc, #36]	; (8007218 <prvSwitchTimerLists+0xb8>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1b5      	bne.n	8007168 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071fc:	4b06      	ldr	r3, [pc, #24]	; (8007218 <prvSwitchTimerLists+0xb8>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007202:	4b06      	ldr	r3, [pc, #24]	; (800721c <prvSwitchTimerLists+0xbc>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a04      	ldr	r2, [pc, #16]	; (8007218 <prvSwitchTimerLists+0xb8>)
 8007208:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800720a:	4a04      	ldr	r2, [pc, #16]	; (800721c <prvSwitchTimerLists+0xbc>)
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	6013      	str	r3, [r2, #0]
}
 8007210:	bf00      	nop
 8007212:	3718      	adds	r7, #24
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	200016a8 	.word	0x200016a8
 800721c:	200016ac 	.word	0x200016ac

08007220 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007226:	f000 f927 	bl	8007478 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800722a:	4b15      	ldr	r3, [pc, #84]	; (8007280 <prvCheckForValidListAndQueue+0x60>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d120      	bne.n	8007274 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007232:	4814      	ldr	r0, [pc, #80]	; (8007284 <prvCheckForValidListAndQueue+0x64>)
 8007234:	f7fe f8c2 	bl	80053bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007238:	4813      	ldr	r0, [pc, #76]	; (8007288 <prvCheckForValidListAndQueue+0x68>)
 800723a:	f7fe f8bf 	bl	80053bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800723e:	4b13      	ldr	r3, [pc, #76]	; (800728c <prvCheckForValidListAndQueue+0x6c>)
 8007240:	4a10      	ldr	r2, [pc, #64]	; (8007284 <prvCheckForValidListAndQueue+0x64>)
 8007242:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007244:	4b12      	ldr	r3, [pc, #72]	; (8007290 <prvCheckForValidListAndQueue+0x70>)
 8007246:	4a10      	ldr	r2, [pc, #64]	; (8007288 <prvCheckForValidListAndQueue+0x68>)
 8007248:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800724a:	2300      	movs	r3, #0
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	4b11      	ldr	r3, [pc, #68]	; (8007294 <prvCheckForValidListAndQueue+0x74>)
 8007250:	4a11      	ldr	r2, [pc, #68]	; (8007298 <prvCheckForValidListAndQueue+0x78>)
 8007252:	2110      	movs	r1, #16
 8007254:	200a      	movs	r0, #10
 8007256:	f7fe f9c9 	bl	80055ec <xQueueGenericCreateStatic>
 800725a:	4602      	mov	r2, r0
 800725c:	4b08      	ldr	r3, [pc, #32]	; (8007280 <prvCheckForValidListAndQueue+0x60>)
 800725e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007260:	4b07      	ldr	r3, [pc, #28]	; (8007280 <prvCheckForValidListAndQueue+0x60>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d005      	beq.n	8007274 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007268:	4b05      	ldr	r3, [pc, #20]	; (8007280 <prvCheckForValidListAndQueue+0x60>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	490b      	ldr	r1, [pc, #44]	; (800729c <prvCheckForValidListAndQueue+0x7c>)
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe fdcc 	bl	8005e0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007274:	f000 f92e 	bl	80074d4 <vPortExitCritical>
}
 8007278:	bf00      	nop
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	200016b0 	.word	0x200016b0
 8007284:	20001680 	.word	0x20001680
 8007288:	20001694 	.word	0x20001694
 800728c:	200016a8 	.word	0x200016a8
 8007290:	200016ac 	.word	0x200016ac
 8007294:	2000175c 	.word	0x2000175c
 8007298:	200016bc 	.word	0x200016bc
 800729c:	0800814c 	.word	0x0800814c

080072a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	3b04      	subs	r3, #4
 80072b0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3b04      	subs	r3, #4
 80072be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f023 0201 	bic.w	r2, r3, #1
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3b04      	subs	r3, #4
 80072ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072d0:	4a08      	ldr	r2, [pc, #32]	; (80072f4 <pxPortInitialiseStack+0x54>)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	3b14      	subs	r3, #20
 80072da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3b20      	subs	r3, #32
 80072e6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072e8:	68fb      	ldr	r3, [r7, #12]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bc80      	pop	{r7}
 80072f2:	4770      	bx	lr
 80072f4:	080072f9 	.word	0x080072f9

080072f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80072fe:	2300      	movs	r3, #0
 8007300:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007302:	4b10      	ldr	r3, [pc, #64]	; (8007344 <prvTaskExitError+0x4c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730a:	d009      	beq.n	8007320 <prvTaskExitError+0x28>
 800730c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	60fb      	str	r3, [r7, #12]
 800731e:	e7fe      	b.n	800731e <prvTaskExitError+0x26>
 8007320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007332:	bf00      	nop
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d0fc      	beq.n	8007334 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800733a:	bf00      	nop
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	bc80      	pop	{r7}
 8007342:	4770      	bx	lr
 8007344:	2000001c 	.word	0x2000001c
	...

08007350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007350:	4b07      	ldr	r3, [pc, #28]	; (8007370 <pxCurrentTCBConst2>)
 8007352:	6819      	ldr	r1, [r3, #0]
 8007354:	6808      	ldr	r0, [r1, #0]
 8007356:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800735a:	f380 8809 	msr	PSP, r0
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f04f 0000 	mov.w	r0, #0
 8007366:	f380 8811 	msr	BASEPRI, r0
 800736a:	f04e 0e0d 	orr.w	lr, lr, #13
 800736e:	4770      	bx	lr

08007370 <pxCurrentTCBConst2>:
 8007370:	20001180 	.word	0x20001180
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007374:	bf00      	nop
 8007376:	bf00      	nop

08007378 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007378:	4806      	ldr	r0, [pc, #24]	; (8007394 <prvPortStartFirstTask+0x1c>)
 800737a:	6800      	ldr	r0, [r0, #0]
 800737c:	6800      	ldr	r0, [r0, #0]
 800737e:	f380 8808 	msr	MSP, r0
 8007382:	b662      	cpsie	i
 8007384:	b661      	cpsie	f
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	df00      	svc	0
 8007390:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007392:	bf00      	nop
 8007394:	e000ed08 	.word	0xe000ed08

08007398 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800739e:	4b31      	ldr	r3, [pc, #196]	; (8007464 <xPortStartScheduler+0xcc>)
 80073a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	22ff      	movs	r2, #255	; 0xff
 80073ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	4b29      	ldr	r3, [pc, #164]	; (8007468 <xPortStartScheduler+0xd0>)
 80073c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073c6:	4b29      	ldr	r3, [pc, #164]	; (800746c <xPortStartScheduler+0xd4>)
 80073c8:	2207      	movs	r2, #7
 80073ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073cc:	e009      	b.n	80073e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80073ce:	4b27      	ldr	r3, [pc, #156]	; (800746c <xPortStartScheduler+0xd4>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3b01      	subs	r3, #1
 80073d4:	4a25      	ldr	r2, [pc, #148]	; (800746c <xPortStartScheduler+0xd4>)
 80073d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073e2:	78fb      	ldrb	r3, [r7, #3]
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ea:	2b80      	cmp	r3, #128	; 0x80
 80073ec:	d0ef      	beq.n	80073ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073ee:	4b1f      	ldr	r3, [pc, #124]	; (800746c <xPortStartScheduler+0xd4>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f1c3 0307 	rsb	r3, r3, #7
 80073f6:	2b04      	cmp	r3, #4
 80073f8:	d009      	beq.n	800740e <xPortStartScheduler+0x76>
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	60bb      	str	r3, [r7, #8]
 800740c:	e7fe      	b.n	800740c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800740e:	4b17      	ldr	r3, [pc, #92]	; (800746c <xPortStartScheduler+0xd4>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	021b      	lsls	r3, r3, #8
 8007414:	4a15      	ldr	r2, [pc, #84]	; (800746c <xPortStartScheduler+0xd4>)
 8007416:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007418:	4b14      	ldr	r3, [pc, #80]	; (800746c <xPortStartScheduler+0xd4>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007420:	4a12      	ldr	r2, [pc, #72]	; (800746c <xPortStartScheduler+0xd4>)
 8007422:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	b2da      	uxtb	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800742c:	4b10      	ldr	r3, [pc, #64]	; (8007470 <xPortStartScheduler+0xd8>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a0f      	ldr	r2, [pc, #60]	; (8007470 <xPortStartScheduler+0xd8>)
 8007432:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007436:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007438:	4b0d      	ldr	r3, [pc, #52]	; (8007470 <xPortStartScheduler+0xd8>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a0c      	ldr	r2, [pc, #48]	; (8007470 <xPortStartScheduler+0xd8>)
 800743e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007442:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007444:	f000 f8b0 	bl	80075a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007448:	4b0a      	ldr	r3, [pc, #40]	; (8007474 <xPortStartScheduler+0xdc>)
 800744a:	2200      	movs	r2, #0
 800744c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800744e:	f7ff ff93 	bl	8007378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007452:	f7ff f8d9 	bl	8006608 <vTaskSwitchContext>
	prvTaskExitError();
 8007456:	f7ff ff4f 	bl	80072f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	e000e400 	.word	0xe000e400
 8007468:	200017ac 	.word	0x200017ac
 800746c:	200017b0 	.word	0x200017b0
 8007470:	e000ed20 	.word	0xe000ed20
 8007474:	2000001c 	.word	0x2000001c

08007478 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007490:	4b0e      	ldr	r3, [pc, #56]	; (80074cc <vPortEnterCritical+0x54>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3301      	adds	r3, #1
 8007496:	4a0d      	ldr	r2, [pc, #52]	; (80074cc <vPortEnterCritical+0x54>)
 8007498:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800749a:	4b0c      	ldr	r3, [pc, #48]	; (80074cc <vPortEnterCritical+0x54>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d10e      	bne.n	80074c0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074a2:	4b0b      	ldr	r3, [pc, #44]	; (80074d0 <vPortEnterCritical+0x58>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d009      	beq.n	80074c0 <vPortEnterCritical+0x48>
 80074ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	603b      	str	r3, [r7, #0]
 80074be:	e7fe      	b.n	80074be <vPortEnterCritical+0x46>
	}
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bc80      	pop	{r7}
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	2000001c 	.word	0x2000001c
 80074d0:	e000ed04 	.word	0xe000ed04

080074d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80074da:	4b10      	ldr	r3, [pc, #64]	; (800751c <vPortExitCritical+0x48>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d109      	bne.n	80074f6 <vPortExitCritical+0x22>
 80074e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	607b      	str	r3, [r7, #4]
 80074f4:	e7fe      	b.n	80074f4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80074f6:	4b09      	ldr	r3, [pc, #36]	; (800751c <vPortExitCritical+0x48>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	4a07      	ldr	r2, [pc, #28]	; (800751c <vPortExitCritical+0x48>)
 80074fe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007500:	4b06      	ldr	r3, [pc, #24]	; (800751c <vPortExitCritical+0x48>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d104      	bne.n	8007512 <vPortExitCritical+0x3e>
 8007508:	2300      	movs	r3, #0
 800750a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	bc80      	pop	{r7}
 800751a:	4770      	bx	lr
 800751c:	2000001c 	.word	0x2000001c

08007520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007520:	f3ef 8009 	mrs	r0, PSP
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	4b0d      	ldr	r3, [pc, #52]	; (8007560 <pxCurrentTCBConst>)
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007530:	6010      	str	r0, [r2, #0]
 8007532:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007536:	f04f 0050 	mov.w	r0, #80	; 0x50
 800753a:	f380 8811 	msr	BASEPRI, r0
 800753e:	f7ff f863 	bl	8006608 <vTaskSwitchContext>
 8007542:	f04f 0000 	mov.w	r0, #0
 8007546:	f380 8811 	msr	BASEPRI, r0
 800754a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800754e:	6819      	ldr	r1, [r3, #0]
 8007550:	6808      	ldr	r0, [r1, #0]
 8007552:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007556:	f380 8809 	msr	PSP, r0
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	4770      	bx	lr

08007560 <pxCurrentTCBConst>:
 8007560:	20001180 	.word	0x20001180
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop

08007568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007580:	f7fe ff84 	bl	800648c <xTaskIncrementTick>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d003      	beq.n	8007592 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800758a:	4b06      	ldr	r3, [pc, #24]	; (80075a4 <SysTick_Handler+0x3c>)
 800758c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	2300      	movs	r3, #0
 8007594:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800759c:	bf00      	nop
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	e000ed04 	.word	0xe000ed04

080075a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80075a8:	b480      	push	{r7}
 80075aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075ac:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <vPortSetupTimerInterrupt+0x30>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075b2:	4b0a      	ldr	r3, [pc, #40]	; (80075dc <vPortSetupTimerInterrupt+0x34>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075b8:	4b09      	ldr	r3, [pc, #36]	; (80075e0 <vPortSetupTimerInterrupt+0x38>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a09      	ldr	r2, [pc, #36]	; (80075e4 <vPortSetupTimerInterrupt+0x3c>)
 80075be:	fba2 2303 	umull	r2, r3, r2, r3
 80075c2:	099b      	lsrs	r3, r3, #6
 80075c4:	4a08      	ldr	r2, [pc, #32]	; (80075e8 <vPortSetupTimerInterrupt+0x40>)
 80075c6:	3b01      	subs	r3, #1
 80075c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075ca:	4b03      	ldr	r3, [pc, #12]	; (80075d8 <vPortSetupTimerInterrupt+0x30>)
 80075cc:	2207      	movs	r2, #7
 80075ce:	601a      	str	r2, [r3, #0]
}
 80075d0:	bf00      	nop
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bc80      	pop	{r7}
 80075d6:	4770      	bx	lr
 80075d8:	e000e010 	.word	0xe000e010
 80075dc:	e000e018 	.word	0xe000e018
 80075e0:	20000010 	.word	0x20000010
 80075e4:	10624dd3 	.word	0x10624dd3
 80075e8:	e000e014 	.word	0xe000e014

080075ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075f2:	f3ef 8305 	mrs	r3, IPSR
 80075f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b0f      	cmp	r3, #15
 80075fc:	d913      	bls.n	8007626 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075fe:	4a15      	ldr	r2, [pc, #84]	; (8007654 <vPortValidateInterruptPriority+0x68>)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4413      	add	r3, r2
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007608:	4b13      	ldr	r3, [pc, #76]	; (8007658 <vPortValidateInterruptPriority+0x6c>)
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	7afa      	ldrb	r2, [r7, #11]
 800760e:	429a      	cmp	r2, r3
 8007610:	d209      	bcs.n	8007626 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	607b      	str	r3, [r7, #4]
 8007624:	e7fe      	b.n	8007624 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007626:	4b0d      	ldr	r3, [pc, #52]	; (800765c <vPortValidateInterruptPriority+0x70>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800762e:	4b0c      	ldr	r3, [pc, #48]	; (8007660 <vPortValidateInterruptPriority+0x74>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	429a      	cmp	r2, r3
 8007634:	d909      	bls.n	800764a <vPortValidateInterruptPriority+0x5e>
 8007636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	603b      	str	r3, [r7, #0]
 8007648:	e7fe      	b.n	8007648 <vPortValidateInterruptPriority+0x5c>
	}
 800764a:	bf00      	nop
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	bc80      	pop	{r7}
 8007652:	4770      	bx	lr
 8007654:	e000e3f0 	.word	0xe000e3f0
 8007658:	200017ac 	.word	0x200017ac
 800765c:	e000ed0c 	.word	0xe000ed0c
 8007660:	200017b0 	.word	0x200017b0

08007664 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08a      	sub	sp, #40	; 0x28
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800766c:	2300      	movs	r3, #0
 800766e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007670:	f7fe fe54 	bl	800631c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007674:	4b57      	ldr	r3, [pc, #348]	; (80077d4 <pvPortMalloc+0x170>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800767c:	f000 f90c 	bl	8007898 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007680:	4b55      	ldr	r3, [pc, #340]	; (80077d8 <pvPortMalloc+0x174>)
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4013      	ands	r3, r2
 8007688:	2b00      	cmp	r3, #0
 800768a:	f040 808c 	bne.w	80077a6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d01c      	beq.n	80076ce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007694:	2208      	movs	r2, #8
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4413      	add	r3, r2
 800769a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f003 0307 	and.w	r3, r3, #7
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d013      	beq.n	80076ce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f023 0307 	bic.w	r3, r3, #7
 80076ac:	3308      	adds	r3, #8
 80076ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d009      	beq.n	80076ce <pvPortMalloc+0x6a>
 80076ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	617b      	str	r3, [r7, #20]
 80076cc:	e7fe      	b.n	80076cc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d068      	beq.n	80077a6 <pvPortMalloc+0x142>
 80076d4:	4b41      	ldr	r3, [pc, #260]	; (80077dc <pvPortMalloc+0x178>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d863      	bhi.n	80077a6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076de:	4b40      	ldr	r3, [pc, #256]	; (80077e0 <pvPortMalloc+0x17c>)
 80076e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076e2:	4b3f      	ldr	r3, [pc, #252]	; (80077e0 <pvPortMalloc+0x17c>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076e8:	e004      	b.n	80076f4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d903      	bls.n	8007706 <pvPortMalloc+0xa2>
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1f1      	bne.n	80076ea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007706:	4b33      	ldr	r3, [pc, #204]	; (80077d4 <pvPortMalloc+0x170>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800770c:	429a      	cmp	r2, r3
 800770e:	d04a      	beq.n	80077a6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2208      	movs	r2, #8
 8007716:	4413      	add	r3, r2
 8007718:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	685a      	ldr	r2, [r3, #4]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	1ad2      	subs	r2, r2, r3
 800772a:	2308      	movs	r3, #8
 800772c:	005b      	lsls	r3, r3, #1
 800772e:	429a      	cmp	r2, r3
 8007730:	d91e      	bls.n	8007770 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4413      	add	r3, r2
 8007738:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	f003 0307 	and.w	r3, r3, #7
 8007740:	2b00      	cmp	r3, #0
 8007742:	d009      	beq.n	8007758 <pvPortMalloc+0xf4>
 8007744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	613b      	str	r3, [r7, #16]
 8007756:	e7fe      	b.n	8007756 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	1ad2      	subs	r2, r2, r3
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800776a:	69b8      	ldr	r0, [r7, #24]
 800776c:	f000 f8f6 	bl	800795c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007770:	4b1a      	ldr	r3, [pc, #104]	; (80077dc <pvPortMalloc+0x178>)
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	4a18      	ldr	r2, [pc, #96]	; (80077dc <pvPortMalloc+0x178>)
 800777c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800777e:	4b17      	ldr	r3, [pc, #92]	; (80077dc <pvPortMalloc+0x178>)
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	4b18      	ldr	r3, [pc, #96]	; (80077e4 <pvPortMalloc+0x180>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d203      	bcs.n	8007792 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800778a:	4b14      	ldr	r3, [pc, #80]	; (80077dc <pvPortMalloc+0x178>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a15      	ldr	r2, [pc, #84]	; (80077e4 <pvPortMalloc+0x180>)
 8007790:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	4b10      	ldr	r3, [pc, #64]	; (80077d8 <pvPortMalloc+0x174>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	431a      	orrs	r2, r3
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	2200      	movs	r2, #0
 80077a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077a6:	f7fe fdc7 	bl	8006338 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	f003 0307 	and.w	r3, r3, #7
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d009      	beq.n	80077c8 <pvPortMalloc+0x164>
 80077b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	e7fe      	b.n	80077c6 <pvPortMalloc+0x162>
	return pvReturn;
 80077c8:	69fb      	ldr	r3, [r7, #28]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3728      	adds	r7, #40	; 0x28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	200023bc 	.word	0x200023bc
 80077d8:	200023c8 	.word	0x200023c8
 80077dc:	200023c0 	.word	0x200023c0
 80077e0:	200023b4 	.word	0x200023b4
 80077e4:	200023c4 	.word	0x200023c4

080077e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d046      	beq.n	8007888 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077fa:	2308      	movs	r3, #8
 80077fc:	425b      	negs	r3, r3
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	4413      	add	r3, r2
 8007802:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	4b20      	ldr	r3, [pc, #128]	; (8007890 <vPortFree+0xa8>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4013      	ands	r3, r2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d109      	bne.n	800782a <vPortFree+0x42>
 8007816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	e7fe      	b.n	8007828 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d009      	beq.n	8007846 <vPortFree+0x5e>
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	60bb      	str	r3, [r7, #8]
 8007844:	e7fe      	b.n	8007844 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	4b11      	ldr	r3, [pc, #68]	; (8007890 <vPortFree+0xa8>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4013      	ands	r3, r2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d019      	beq.n	8007888 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d115      	bne.n	8007888 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	4b0b      	ldr	r3, [pc, #44]	; (8007890 <vPortFree+0xa8>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	43db      	mvns	r3, r3
 8007866:	401a      	ands	r2, r3
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800786c:	f7fe fd56 	bl	800631c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	685a      	ldr	r2, [r3, #4]
 8007874:	4b07      	ldr	r3, [pc, #28]	; (8007894 <vPortFree+0xac>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4413      	add	r3, r2
 800787a:	4a06      	ldr	r2, [pc, #24]	; (8007894 <vPortFree+0xac>)
 800787c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800787e:	6938      	ldr	r0, [r7, #16]
 8007880:	f000 f86c 	bl	800795c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007884:	f7fe fd58 	bl	8006338 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007888:	bf00      	nop
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	200023c8 	.word	0x200023c8
 8007894:	200023c0 	.word	0x200023c0

08007898 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800789e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80078a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078a4:	4b27      	ldr	r3, [pc, #156]	; (8007944 <prvHeapInit+0xac>)
 80078a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f003 0307 	and.w	r3, r3, #7
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00c      	beq.n	80078cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3307      	adds	r3, #7
 80078b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 0307 	bic.w	r3, r3, #7
 80078be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	4a1f      	ldr	r2, [pc, #124]	; (8007944 <prvHeapInit+0xac>)
 80078c8:	4413      	add	r3, r2
 80078ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078d0:	4a1d      	ldr	r2, [pc, #116]	; (8007948 <prvHeapInit+0xb0>)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078d6:	4b1c      	ldr	r3, [pc, #112]	; (8007948 <prvHeapInit+0xb0>)
 80078d8:	2200      	movs	r2, #0
 80078da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	4413      	add	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078e4:	2208      	movs	r2, #8
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	1a9b      	subs	r3, r3, r2
 80078ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f023 0307 	bic.w	r3, r3, #7
 80078f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4a15      	ldr	r2, [pc, #84]	; (800794c <prvHeapInit+0xb4>)
 80078f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078fa:	4b14      	ldr	r3, [pc, #80]	; (800794c <prvHeapInit+0xb4>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2200      	movs	r2, #0
 8007900:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007902:	4b12      	ldr	r3, [pc, #72]	; (800794c <prvHeapInit+0xb4>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2200      	movs	r2, #0
 8007908:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	1ad2      	subs	r2, r2, r3
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007918:	4b0c      	ldr	r3, [pc, #48]	; (800794c <prvHeapInit+0xb4>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	4a0a      	ldr	r2, [pc, #40]	; (8007950 <prvHeapInit+0xb8>)
 8007926:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	4a09      	ldr	r2, [pc, #36]	; (8007954 <prvHeapInit+0xbc>)
 800792e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007930:	4b09      	ldr	r3, [pc, #36]	; (8007958 <prvHeapInit+0xc0>)
 8007932:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007936:	601a      	str	r2, [r3, #0]
}
 8007938:	bf00      	nop
 800793a:	3714      	adds	r7, #20
 800793c:	46bd      	mov	sp, r7
 800793e:	bc80      	pop	{r7}
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	200017b4 	.word	0x200017b4
 8007948:	200023b4 	.word	0x200023b4
 800794c:	200023bc 	.word	0x200023bc
 8007950:	200023c4 	.word	0x200023c4
 8007954:	200023c0 	.word	0x200023c0
 8007958:	200023c8 	.word	0x200023c8

0800795c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007964:	4b27      	ldr	r3, [pc, #156]	; (8007a04 <prvInsertBlockIntoFreeList+0xa8>)
 8007966:	60fb      	str	r3, [r7, #12]
 8007968:	e002      	b.n	8007970 <prvInsertBlockIntoFreeList+0x14>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	429a      	cmp	r2, r3
 8007978:	d8f7      	bhi.n	800796a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	4413      	add	r3, r2
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	429a      	cmp	r2, r3
 800798a:	d108      	bne.n	800799e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	441a      	add	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	441a      	add	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d118      	bne.n	80079e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	4b14      	ldr	r3, [pc, #80]	; (8007a08 <prvInsertBlockIntoFreeList+0xac>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d00d      	beq.n	80079da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685a      	ldr	r2, [r3, #4]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	441a      	add	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	e008      	b.n	80079ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079da:	4b0b      	ldr	r3, [pc, #44]	; (8007a08 <prvInsertBlockIntoFreeList+0xac>)
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	e003      	b.n	80079ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d002      	beq.n	80079fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079fa:	bf00      	nop
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bc80      	pop	{r7}
 8007a02:	4770      	bx	lr
 8007a04:	200023b4 	.word	0x200023b4
 8007a08:	200023bc 	.word	0x200023bc

08007a0c <__cxa_pure_virtual>:
 8007a0c:	b508      	push	{r3, lr}
 8007a0e:	f000 f80d 	bl	8007a2c <_ZSt9terminatev>

08007a12 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007a12:	b508      	push	{r3, lr}
 8007a14:	4780      	blx	r0
 8007a16:	f000 f80e 	bl	8007a36 <abort>
	...

08007a1c <_ZSt13get_terminatev>:
 8007a1c:	4b02      	ldr	r3, [pc, #8]	; (8007a28 <_ZSt13get_terminatev+0xc>)
 8007a1e:	6818      	ldr	r0, [r3, #0]
 8007a20:	f3bf 8f5b 	dmb	ish
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	20000020 	.word	0x20000020

08007a2c <_ZSt9terminatev>:
 8007a2c:	b508      	push	{r3, lr}
 8007a2e:	f7ff fff5 	bl	8007a1c <_ZSt13get_terminatev>
 8007a32:	f7ff ffee 	bl	8007a12 <_ZN10__cxxabiv111__terminateEPFvvE>

08007a36 <abort>:
 8007a36:	b508      	push	{r3, lr}
 8007a38:	2006      	movs	r0, #6
 8007a3a:	f000 f871 	bl	8007b20 <raise>
 8007a3e:	2001      	movs	r0, #1
 8007a40:	f7fa fe1f 	bl	8002682 <_exit>

08007a44 <__errno>:
 8007a44:	4b01      	ldr	r3, [pc, #4]	; (8007a4c <__errno+0x8>)
 8007a46:	6818      	ldr	r0, [r3, #0]
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	20000024 	.word	0x20000024

08007a50 <__libc_init_array>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	2500      	movs	r5, #0
 8007a54:	4e0c      	ldr	r6, [pc, #48]	; (8007a88 <__libc_init_array+0x38>)
 8007a56:	4c0d      	ldr	r4, [pc, #52]	; (8007a8c <__libc_init_array+0x3c>)
 8007a58:	1ba4      	subs	r4, r4, r6
 8007a5a:	10a4      	asrs	r4, r4, #2
 8007a5c:	42a5      	cmp	r5, r4
 8007a5e:	d109      	bne.n	8007a74 <__libc_init_array+0x24>
 8007a60:	f000 f960 	bl	8007d24 <_init>
 8007a64:	2500      	movs	r5, #0
 8007a66:	4e0a      	ldr	r6, [pc, #40]	; (8007a90 <__libc_init_array+0x40>)
 8007a68:	4c0a      	ldr	r4, [pc, #40]	; (8007a94 <__libc_init_array+0x44>)
 8007a6a:	1ba4      	subs	r4, r4, r6
 8007a6c:	10a4      	asrs	r4, r4, #2
 8007a6e:	42a5      	cmp	r5, r4
 8007a70:	d105      	bne.n	8007a7e <__libc_init_array+0x2e>
 8007a72:	bd70      	pop	{r4, r5, r6, pc}
 8007a74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a78:	4798      	blx	r3
 8007a7a:	3501      	adds	r5, #1
 8007a7c:	e7ee      	b.n	8007a5c <__libc_init_array+0xc>
 8007a7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a82:	4798      	blx	r3
 8007a84:	3501      	adds	r5, #1
 8007a86:	e7f2      	b.n	8007a6e <__libc_init_array+0x1e>
 8007a88:	08008270 	.word	0x08008270
 8007a8c:	08008270 	.word	0x08008270
 8007a90:	08008270 	.word	0x08008270
 8007a94:	08008278 	.word	0x08008278

08007a98 <memcpy>:
 8007a98:	b510      	push	{r4, lr}
 8007a9a:	1e43      	subs	r3, r0, #1
 8007a9c:	440a      	add	r2, r1
 8007a9e:	4291      	cmp	r1, r2
 8007aa0:	d100      	bne.n	8007aa4 <memcpy+0xc>
 8007aa2:	bd10      	pop	{r4, pc}
 8007aa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aac:	e7f7      	b.n	8007a9e <memcpy+0x6>

08007aae <memset>:
 8007aae:	4603      	mov	r3, r0
 8007ab0:	4402      	add	r2, r0
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d100      	bne.n	8007ab8 <memset+0xa>
 8007ab6:	4770      	bx	lr
 8007ab8:	f803 1b01 	strb.w	r1, [r3], #1
 8007abc:	e7f9      	b.n	8007ab2 <memset+0x4>
	...

08007ac0 <realloc>:
 8007ac0:	4b02      	ldr	r3, [pc, #8]	; (8007acc <realloc+0xc>)
 8007ac2:	460a      	mov	r2, r1
 8007ac4:	4601      	mov	r1, r0
 8007ac6:	6818      	ldr	r0, [r3, #0]
 8007ac8:	f000 b8a0 	b.w	8007c0c <_realloc_r>
 8007acc:	20000024 	.word	0x20000024

08007ad0 <_raise_r>:
 8007ad0:	291f      	cmp	r1, #31
 8007ad2:	b538      	push	{r3, r4, r5, lr}
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	460d      	mov	r5, r1
 8007ad8:	d904      	bls.n	8007ae4 <_raise_r+0x14>
 8007ada:	2316      	movs	r3, #22
 8007adc:	6003      	str	r3, [r0, #0]
 8007ade:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}
 8007ae4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ae6:	b112      	cbz	r2, 8007aee <_raise_r+0x1e>
 8007ae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007aec:	b94b      	cbnz	r3, 8007b02 <_raise_r+0x32>
 8007aee:	4620      	mov	r0, r4
 8007af0:	f000 f830 	bl	8007b54 <_getpid_r>
 8007af4:	462a      	mov	r2, r5
 8007af6:	4601      	mov	r1, r0
 8007af8:	4620      	mov	r0, r4
 8007afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007afe:	f000 b817 	b.w	8007b30 <_kill_r>
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d00a      	beq.n	8007b1c <_raise_r+0x4c>
 8007b06:	1c59      	adds	r1, r3, #1
 8007b08:	d103      	bne.n	8007b12 <_raise_r+0x42>
 8007b0a:	2316      	movs	r3, #22
 8007b0c:	6003      	str	r3, [r0, #0]
 8007b0e:	2001      	movs	r0, #1
 8007b10:	e7e7      	b.n	8007ae2 <_raise_r+0x12>
 8007b12:	2400      	movs	r4, #0
 8007b14:	4628      	mov	r0, r5
 8007b16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b1a:	4798      	blx	r3
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	e7e0      	b.n	8007ae2 <_raise_r+0x12>

08007b20 <raise>:
 8007b20:	4b02      	ldr	r3, [pc, #8]	; (8007b2c <raise+0xc>)
 8007b22:	4601      	mov	r1, r0
 8007b24:	6818      	ldr	r0, [r3, #0]
 8007b26:	f7ff bfd3 	b.w	8007ad0 <_raise_r>
 8007b2a:	bf00      	nop
 8007b2c:	20000024 	.word	0x20000024

08007b30 <_kill_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	2300      	movs	r3, #0
 8007b34:	4c06      	ldr	r4, [pc, #24]	; (8007b50 <_kill_r+0x20>)
 8007b36:	4605      	mov	r5, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	f7fa fd90 	bl	8002662 <_kill>
 8007b42:	1c43      	adds	r3, r0, #1
 8007b44:	d102      	bne.n	8007b4c <_kill_r+0x1c>
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	b103      	cbz	r3, 8007b4c <_kill_r+0x1c>
 8007b4a:	602b      	str	r3, [r5, #0]
 8007b4c:	bd38      	pop	{r3, r4, r5, pc}
 8007b4e:	bf00      	nop
 8007b50:	20002658 	.word	0x20002658

08007b54 <_getpid_r>:
 8007b54:	f7fa bd7e 	b.w	8002654 <_getpid>

08007b58 <_malloc_r>:
 8007b58:	b570      	push	{r4, r5, r6, lr}
 8007b5a:	1ccd      	adds	r5, r1, #3
 8007b5c:	f025 0503 	bic.w	r5, r5, #3
 8007b60:	3508      	adds	r5, #8
 8007b62:	2d0c      	cmp	r5, #12
 8007b64:	bf38      	it	cc
 8007b66:	250c      	movcc	r5, #12
 8007b68:	2d00      	cmp	r5, #0
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	db01      	blt.n	8007b72 <_malloc_r+0x1a>
 8007b6e:	42a9      	cmp	r1, r5
 8007b70:	d903      	bls.n	8007b7a <_malloc_r+0x22>
 8007b72:	230c      	movs	r3, #12
 8007b74:	6033      	str	r3, [r6, #0]
 8007b76:	2000      	movs	r0, #0
 8007b78:	bd70      	pop	{r4, r5, r6, pc}
 8007b7a:	f000 f87d 	bl	8007c78 <__malloc_lock>
 8007b7e:	4a21      	ldr	r2, [pc, #132]	; (8007c04 <_malloc_r+0xac>)
 8007b80:	6814      	ldr	r4, [r2, #0]
 8007b82:	4621      	mov	r1, r4
 8007b84:	b991      	cbnz	r1, 8007bac <_malloc_r+0x54>
 8007b86:	4c20      	ldr	r4, [pc, #128]	; (8007c08 <_malloc_r+0xb0>)
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	b91b      	cbnz	r3, 8007b94 <_malloc_r+0x3c>
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f000 f863 	bl	8007c58 <_sbrk_r>
 8007b92:	6020      	str	r0, [r4, #0]
 8007b94:	4629      	mov	r1, r5
 8007b96:	4630      	mov	r0, r6
 8007b98:	f000 f85e 	bl	8007c58 <_sbrk_r>
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	d124      	bne.n	8007bea <_malloc_r+0x92>
 8007ba0:	230c      	movs	r3, #12
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	6033      	str	r3, [r6, #0]
 8007ba6:	f000 f868 	bl	8007c7a <__malloc_unlock>
 8007baa:	e7e4      	b.n	8007b76 <_malloc_r+0x1e>
 8007bac:	680b      	ldr	r3, [r1, #0]
 8007bae:	1b5b      	subs	r3, r3, r5
 8007bb0:	d418      	bmi.n	8007be4 <_malloc_r+0x8c>
 8007bb2:	2b0b      	cmp	r3, #11
 8007bb4:	d90f      	bls.n	8007bd6 <_malloc_r+0x7e>
 8007bb6:	600b      	str	r3, [r1, #0]
 8007bb8:	18cc      	adds	r4, r1, r3
 8007bba:	50cd      	str	r5, [r1, r3]
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	f000 f85c 	bl	8007c7a <__malloc_unlock>
 8007bc2:	f104 000b 	add.w	r0, r4, #11
 8007bc6:	1d23      	adds	r3, r4, #4
 8007bc8:	f020 0007 	bic.w	r0, r0, #7
 8007bcc:	1ac3      	subs	r3, r0, r3
 8007bce:	d0d3      	beq.n	8007b78 <_malloc_r+0x20>
 8007bd0:	425a      	negs	r2, r3
 8007bd2:	50e2      	str	r2, [r4, r3]
 8007bd4:	e7d0      	b.n	8007b78 <_malloc_r+0x20>
 8007bd6:	684b      	ldr	r3, [r1, #4]
 8007bd8:	428c      	cmp	r4, r1
 8007bda:	bf16      	itet	ne
 8007bdc:	6063      	strne	r3, [r4, #4]
 8007bde:	6013      	streq	r3, [r2, #0]
 8007be0:	460c      	movne	r4, r1
 8007be2:	e7eb      	b.n	8007bbc <_malloc_r+0x64>
 8007be4:	460c      	mov	r4, r1
 8007be6:	6849      	ldr	r1, [r1, #4]
 8007be8:	e7cc      	b.n	8007b84 <_malloc_r+0x2c>
 8007bea:	1cc4      	adds	r4, r0, #3
 8007bec:	f024 0403 	bic.w	r4, r4, #3
 8007bf0:	42a0      	cmp	r0, r4
 8007bf2:	d005      	beq.n	8007c00 <_malloc_r+0xa8>
 8007bf4:	1a21      	subs	r1, r4, r0
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	f000 f82e 	bl	8007c58 <_sbrk_r>
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	d0cf      	beq.n	8007ba0 <_malloc_r+0x48>
 8007c00:	6025      	str	r5, [r4, #0]
 8007c02:	e7db      	b.n	8007bbc <_malloc_r+0x64>
 8007c04:	200023cc 	.word	0x200023cc
 8007c08:	200023d0 	.word	0x200023d0

08007c0c <_realloc_r>:
 8007c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0e:	4607      	mov	r7, r0
 8007c10:	4614      	mov	r4, r2
 8007c12:	460e      	mov	r6, r1
 8007c14:	b921      	cbnz	r1, 8007c20 <_realloc_r+0x14>
 8007c16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	f7ff bf9c 	b.w	8007b58 <_malloc_r>
 8007c20:	b922      	cbnz	r2, 8007c2c <_realloc_r+0x20>
 8007c22:	f000 f82b 	bl	8007c7c <_free_r>
 8007c26:	4625      	mov	r5, r4
 8007c28:	4628      	mov	r0, r5
 8007c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c2c:	f000 f872 	bl	8007d14 <_malloc_usable_size_r>
 8007c30:	42a0      	cmp	r0, r4
 8007c32:	d20f      	bcs.n	8007c54 <_realloc_r+0x48>
 8007c34:	4621      	mov	r1, r4
 8007c36:	4638      	mov	r0, r7
 8007c38:	f7ff ff8e 	bl	8007b58 <_malloc_r>
 8007c3c:	4605      	mov	r5, r0
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d0f2      	beq.n	8007c28 <_realloc_r+0x1c>
 8007c42:	4631      	mov	r1, r6
 8007c44:	4622      	mov	r2, r4
 8007c46:	f7ff ff27 	bl	8007a98 <memcpy>
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4638      	mov	r0, r7
 8007c4e:	f000 f815 	bl	8007c7c <_free_r>
 8007c52:	e7e9      	b.n	8007c28 <_realloc_r+0x1c>
 8007c54:	4635      	mov	r5, r6
 8007c56:	e7e7      	b.n	8007c28 <_realloc_r+0x1c>

08007c58 <_sbrk_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	4c05      	ldr	r4, [pc, #20]	; (8007c74 <_sbrk_r+0x1c>)
 8007c5e:	4605      	mov	r5, r0
 8007c60:	4608      	mov	r0, r1
 8007c62:	6023      	str	r3, [r4, #0]
 8007c64:	f7fa fd18 	bl	8002698 <_sbrk>
 8007c68:	1c43      	adds	r3, r0, #1
 8007c6a:	d102      	bne.n	8007c72 <_sbrk_r+0x1a>
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	b103      	cbz	r3, 8007c72 <_sbrk_r+0x1a>
 8007c70:	602b      	str	r3, [r5, #0]
 8007c72:	bd38      	pop	{r3, r4, r5, pc}
 8007c74:	20002658 	.word	0x20002658

08007c78 <__malloc_lock>:
 8007c78:	4770      	bx	lr

08007c7a <__malloc_unlock>:
 8007c7a:	4770      	bx	lr

08007c7c <_free_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	4605      	mov	r5, r0
 8007c80:	2900      	cmp	r1, #0
 8007c82:	d043      	beq.n	8007d0c <_free_r+0x90>
 8007c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c88:	1f0c      	subs	r4, r1, #4
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	bfb8      	it	lt
 8007c8e:	18e4      	addlt	r4, r4, r3
 8007c90:	f7ff fff2 	bl	8007c78 <__malloc_lock>
 8007c94:	4a1e      	ldr	r2, [pc, #120]	; (8007d10 <_free_r+0x94>)
 8007c96:	6813      	ldr	r3, [r2, #0]
 8007c98:	4610      	mov	r0, r2
 8007c9a:	b933      	cbnz	r3, 8007caa <_free_r+0x2e>
 8007c9c:	6063      	str	r3, [r4, #4]
 8007c9e:	6014      	str	r4, [r2, #0]
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ca6:	f7ff bfe8 	b.w	8007c7a <__malloc_unlock>
 8007caa:	42a3      	cmp	r3, r4
 8007cac:	d90b      	bls.n	8007cc6 <_free_r+0x4a>
 8007cae:	6821      	ldr	r1, [r4, #0]
 8007cb0:	1862      	adds	r2, r4, r1
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	bf01      	itttt	eq
 8007cb6:	681a      	ldreq	r2, [r3, #0]
 8007cb8:	685b      	ldreq	r3, [r3, #4]
 8007cba:	1852      	addeq	r2, r2, r1
 8007cbc:	6022      	streq	r2, [r4, #0]
 8007cbe:	6063      	str	r3, [r4, #4]
 8007cc0:	6004      	str	r4, [r0, #0]
 8007cc2:	e7ed      	b.n	8007ca0 <_free_r+0x24>
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	b10a      	cbz	r2, 8007cce <_free_r+0x52>
 8007cca:	42a2      	cmp	r2, r4
 8007ccc:	d9fa      	bls.n	8007cc4 <_free_r+0x48>
 8007cce:	6819      	ldr	r1, [r3, #0]
 8007cd0:	1858      	adds	r0, r3, r1
 8007cd2:	42a0      	cmp	r0, r4
 8007cd4:	d10b      	bne.n	8007cee <_free_r+0x72>
 8007cd6:	6820      	ldr	r0, [r4, #0]
 8007cd8:	4401      	add	r1, r0
 8007cda:	1858      	adds	r0, r3, r1
 8007cdc:	4282      	cmp	r2, r0
 8007cde:	6019      	str	r1, [r3, #0]
 8007ce0:	d1de      	bne.n	8007ca0 <_free_r+0x24>
 8007ce2:	6810      	ldr	r0, [r2, #0]
 8007ce4:	6852      	ldr	r2, [r2, #4]
 8007ce6:	4401      	add	r1, r0
 8007ce8:	6019      	str	r1, [r3, #0]
 8007cea:	605a      	str	r2, [r3, #4]
 8007cec:	e7d8      	b.n	8007ca0 <_free_r+0x24>
 8007cee:	d902      	bls.n	8007cf6 <_free_r+0x7a>
 8007cf0:	230c      	movs	r3, #12
 8007cf2:	602b      	str	r3, [r5, #0]
 8007cf4:	e7d4      	b.n	8007ca0 <_free_r+0x24>
 8007cf6:	6820      	ldr	r0, [r4, #0]
 8007cf8:	1821      	adds	r1, r4, r0
 8007cfa:	428a      	cmp	r2, r1
 8007cfc:	bf01      	itttt	eq
 8007cfe:	6811      	ldreq	r1, [r2, #0]
 8007d00:	6852      	ldreq	r2, [r2, #4]
 8007d02:	1809      	addeq	r1, r1, r0
 8007d04:	6021      	streq	r1, [r4, #0]
 8007d06:	6062      	str	r2, [r4, #4]
 8007d08:	605c      	str	r4, [r3, #4]
 8007d0a:	e7c9      	b.n	8007ca0 <_free_r+0x24>
 8007d0c:	bd38      	pop	{r3, r4, r5, pc}
 8007d0e:	bf00      	nop
 8007d10:	200023cc 	.word	0x200023cc

08007d14 <_malloc_usable_size_r>:
 8007d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d18:	1f18      	subs	r0, r3, #4
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	bfbc      	itt	lt
 8007d1e:	580b      	ldrlt	r3, [r1, r0]
 8007d20:	18c0      	addlt	r0, r0, r3
 8007d22:	4770      	bx	lr

08007d24 <_init>:
 8007d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d26:	bf00      	nop
 8007d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2a:	bc08      	pop	{r3}
 8007d2c:	469e      	mov	lr, r3
 8007d2e:	4770      	bx	lr

08007d30 <_fini>:
 8007d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d32:	bf00      	nop
 8007d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d36:	bc08      	pop	{r3}
 8007d38:	469e      	mov	lr, r3
 8007d3a:	4770      	bx	lr
